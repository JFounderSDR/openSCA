// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "StandardEventC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "StandardEventC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_StandardEvent_StateChangeCategoryType[] =
  {
    "ADMINISTRATIVE_STATE_EVENT",
    "OPERATIONAL_STATE_EVENT",
    "USAGE_STATE_EVENT"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_StandardEvent_StateChangeCategoryType (
    "IDL:StandardEvent/StateChangeCategoryType:1.0",
    "StateChangeCategoryType",
    _tao_enumerators_StandardEvent_StateChangeCategoryType,
    3);
  

namespace StandardEvent
{
  ::CORBA::TypeCode_ptr const _tc_StateChangeCategoryType =
    &_tao_tc_StandardEvent_StateChangeCategoryType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_StandardEvent_StateChangeType[] =
  {
    "LOCKED",
    "UNLOCKED",
    "SHUTTING_DOWN",
    "ENABLED",
    "DISABLED",
    "IDLE",
    "ACTIVE",
    "BUSY"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_StandardEvent_StateChangeType (
    "IDL:StandardEvent/StateChangeType:1.0",
    "StateChangeType",
    _tao_enumerators_StandardEvent_StateChangeType,
    8);
  

namespace StandardEvent
{
  ::CORBA::TypeCode_ptr const _tc_StateChangeType =
    &_tao_tc_StandardEvent_StateChangeType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_StandardEvent_StateChangeEventType[] =
      {
        { "producerId", &CORBA::_tc_string },
        { "sourceId", &CORBA::_tc_string },
        { "stateChangeCategory", &StandardEvent::_tc_StateChangeCategoryType },
        { "stateChangeFrom", &StandardEvent::_tc_StateChangeType },
        { "stateChangeTo", &StandardEvent::_tc_StateChangeType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_StandardEvent_StateChangeEventType (
  ::CORBA::tk_struct,
  "IDL:StandardEvent/StateChangeEventType:1.0",
  "StateChangeEventType",
  _tao_fields_StandardEvent_StateChangeEventType,
  5);


namespace StandardEvent
{
  ::CORBA::TypeCode_ptr const _tc_StateChangeEventType =
    &_tao_tc_StandardEvent_StateChangeEventType;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
StandardEvent::StateChangeEventType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  StateChangeEventType *_tao_tmp_pointer =
    static_cast<StateChangeEventType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_StandardEvent_SourceCategoryType[] =
  {
    "DEVICE_MANAGER",
    "DEVICE",
    "APPLICATION_FACTORY",
    "APPLICATION",
    "SERVICE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_StandardEvent_SourceCategoryType (
    "IDL:StandardEvent/SourceCategoryType:1.0",
    "SourceCategoryType",
    _tao_enumerators_StandardEvent_SourceCategoryType,
    5);
  

namespace StandardEvent
{
  ::CORBA::TypeCode_ptr const _tc_SourceCategoryType =
    &_tao_tc_StandardEvent_SourceCategoryType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_StandardEvent_DomainManagementObjectRemovedEventType[] =
      {
        { "producerId", &CORBA::_tc_string },
        { "sourceId", &CORBA::_tc_string },
        { "sourceName", &CORBA::_tc_string },
        { "sourceCategory", &StandardEvent::_tc_SourceCategoryType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_StandardEvent_DomainManagementObjectRemovedEventType (
  ::CORBA::tk_struct,
  "IDL:StandardEvent/DomainManagementObjectRemovedEventType:1.0",
  "DomainManagementObjectRemovedEventType",
  _tao_fields_StandardEvent_DomainManagementObjectRemovedEventType,
  4);


namespace StandardEvent
{
  ::CORBA::TypeCode_ptr const _tc_DomainManagementObjectRemovedEventType =
    &_tao_tc_StandardEvent_DomainManagementObjectRemovedEventType;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  DomainManagementObjectRemovedEventType *_tao_tmp_pointer =
    static_cast<DomainManagementObjectRemovedEventType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_StandardEvent_DomainManagementObjectAddedEventType[] =
      {
        { "producerId", &CORBA::_tc_string },
        { "sourceId", &CORBA::_tc_string },
        { "sourceName", &CORBA::_tc_string },
        { "sourceCategory", &StandardEvent::_tc_SourceCategoryType },
        { "sourceIOR", &CORBA::_tc_Object }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_StandardEvent_DomainManagementObjectAddedEventType (
  ::CORBA::tk_struct,
  "IDL:StandardEvent/DomainManagementObjectAddedEventType:1.0",
  "DomainManagementObjectAddedEventType",
  _tao_fields_StandardEvent_DomainManagementObjectAddedEventType,
  5);


namespace StandardEvent
{
  ::CORBA::TypeCode_ptr const _tc_DomainManagementObjectAddedEventType =
    &_tao_tc_StandardEvent_DomainManagementObjectAddedEventType;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  DomainManagementObjectAddedEventType *_tao_tmp_pointer =
    static_cast<DomainManagementObjectAddedEventType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StandardEvent
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::StandardEvent::StateChangeCategoryType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::StandardEvent::StateChangeCategoryType>::insert (
        _tao_any,
        ::StandardEvent::_tc_StateChangeCategoryType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::StandardEvent::StateChangeCategoryType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::StandardEvent::StateChangeCategoryType>::extract (
          _tao_any,
          ::StandardEvent::_tc_StateChangeCategoryType,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    StandardEvent::StateChangeCategoryType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<StandardEvent::StateChangeCategoryType>::insert (
      _tao_any,
      StandardEvent::_tc_StateChangeCategoryType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StandardEvent::StateChangeCategoryType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<StandardEvent::StateChangeCategoryType>::extract (
        _tao_any,
        StandardEvent::_tc_StateChangeCategoryType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StandardEvent
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::StandardEvent::StateChangeType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::StandardEvent::StateChangeType>::insert (
        _tao_any,
        ::StandardEvent::_tc_StateChangeType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::StandardEvent::StateChangeType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::StandardEvent::StateChangeType>::extract (
          _tao_any,
          ::StandardEvent::_tc_StateChangeType,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    StandardEvent::StateChangeType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<StandardEvent::StateChangeType>::insert (
      _tao_any,
      StandardEvent::_tc_StateChangeType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StandardEvent::StateChangeType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<StandardEvent::StateChangeType>::extract (
        _tao_any,
        StandardEvent::_tc_StateChangeType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StandardEvent
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::StandardEvent::StateChangeEventType &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::StandardEvent::StateChangeEventType *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::StandardEvent::StateChangeEventType>::insert_copy (
          _tao_any,
          ::StandardEvent::StateChangeEventType::_tao_any_destructor,
          ::StandardEvent::_tc_StateChangeEventType,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      StandardEvent::StateChangeEventType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::StandardEvent::StateChangeEventType>::insert (
        _tao_any,
        ::StandardEvent::StateChangeEventType::_tao_any_destructor,
        ::StandardEvent::_tc_StateChangeEventType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::StandardEvent::StateChangeEventType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::StandardEvent::StateChangeEventType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::StandardEvent::StateChangeEventType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::StandardEvent::StateChangeEventType>::extract (
          _tao_any,
          ::StandardEvent::StateChangeEventType::_tao_any_destructor,
          ::StandardEvent::_tc_StateChangeEventType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const StandardEvent::StateChangeEventType &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<StandardEvent::StateChangeEventType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<StandardEvent::StateChangeEventType>::insert_copy (
        _tao_any,
        StandardEvent::StateChangeEventType::_tao_any_destructor,
        StandardEvent::_tc_StateChangeEventType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    StandardEvent::StateChangeEventType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<StandardEvent::StateChangeEventType>::insert (
      _tao_any,
      StandardEvent::StateChangeEventType::_tao_any_destructor,
      StandardEvent::_tc_StateChangeEventType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StandardEvent::StateChangeEventType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const StandardEvent::StateChangeEventType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const StandardEvent::StateChangeEventType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<StandardEvent::StateChangeEventType>::extract (
        _tao_any,
        StandardEvent::StateChangeEventType::_tao_any_destructor,
        StandardEvent::_tc_StateChangeEventType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StandardEvent
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::StandardEvent::SourceCategoryType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::StandardEvent::SourceCategoryType>::insert (
        _tao_any,
        ::StandardEvent::_tc_SourceCategoryType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::StandardEvent::SourceCategoryType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::StandardEvent::SourceCategoryType>::extract (
          _tao_any,
          ::StandardEvent::_tc_SourceCategoryType,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    StandardEvent::SourceCategoryType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<StandardEvent::SourceCategoryType>::insert (
      _tao_any,
      StandardEvent::_tc_SourceCategoryType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StandardEvent::SourceCategoryType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<StandardEvent::SourceCategoryType>::extract (
        _tao_any,
        StandardEvent::_tc_SourceCategoryType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StandardEvent
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::StandardEvent::DomainManagementObjectRemovedEventType &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::StandardEvent::DomainManagementObjectRemovedEventType *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::StandardEvent::DomainManagementObjectRemovedEventType>::insert_copy (
          _tao_any,
          ::StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor,
          ::StandardEvent::_tc_DomainManagementObjectRemovedEventType,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      StandardEvent::DomainManagementObjectRemovedEventType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::StandardEvent::DomainManagementObjectRemovedEventType>::insert (
        _tao_any,
        ::StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor,
        ::StandardEvent::_tc_DomainManagementObjectRemovedEventType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::StandardEvent::DomainManagementObjectRemovedEventType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::StandardEvent::DomainManagementObjectRemovedEventType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::StandardEvent::DomainManagementObjectRemovedEventType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::StandardEvent::DomainManagementObjectRemovedEventType>::extract (
          _tao_any,
          ::StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor,
          ::StandardEvent::_tc_DomainManagementObjectRemovedEventType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const StandardEvent::DomainManagementObjectRemovedEventType &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<StandardEvent::DomainManagementObjectRemovedEventType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<StandardEvent::DomainManagementObjectRemovedEventType>::insert_copy (
        _tao_any,
        StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor,
        StandardEvent::_tc_DomainManagementObjectRemovedEventType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    StandardEvent::DomainManagementObjectRemovedEventType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<StandardEvent::DomainManagementObjectRemovedEventType>::insert (
      _tao_any,
      StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor,
      StandardEvent::_tc_DomainManagementObjectRemovedEventType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StandardEvent::DomainManagementObjectRemovedEventType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const StandardEvent::DomainManagementObjectRemovedEventType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const StandardEvent::DomainManagementObjectRemovedEventType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<StandardEvent::DomainManagementObjectRemovedEventType>::extract (
        _tao_any,
        StandardEvent::DomainManagementObjectRemovedEventType::_tao_any_destructor,
        StandardEvent::_tc_DomainManagementObjectRemovedEventType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace StandardEvent
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::StandardEvent::DomainManagementObjectAddedEventType &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::StandardEvent::DomainManagementObjectAddedEventType *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::StandardEvent::DomainManagementObjectAddedEventType>::insert_copy (
          _tao_any,
          ::StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor,
          ::StandardEvent::_tc_DomainManagementObjectAddedEventType,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      StandardEvent::DomainManagementObjectAddedEventType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::StandardEvent::DomainManagementObjectAddedEventType>::insert (
        _tao_any,
        ::StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor,
        ::StandardEvent::_tc_DomainManagementObjectAddedEventType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::StandardEvent::DomainManagementObjectAddedEventType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::StandardEvent::DomainManagementObjectAddedEventType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::StandardEvent::DomainManagementObjectAddedEventType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::StandardEvent::DomainManagementObjectAddedEventType>::extract (
          _tao_any,
          ::StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor,
          ::StandardEvent::_tc_DomainManagementObjectAddedEventType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const StandardEvent::DomainManagementObjectAddedEventType &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<StandardEvent::DomainManagementObjectAddedEventType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<StandardEvent::DomainManagementObjectAddedEventType>::insert_copy (
        _tao_any,
        StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor,
        StandardEvent::_tc_DomainManagementObjectAddedEventType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    StandardEvent::DomainManagementObjectAddedEventType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<StandardEvent::DomainManagementObjectAddedEventType>::insert (
      _tao_any,
      StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor,
      StandardEvent::_tc_DomainManagementObjectAddedEventType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    StandardEvent::DomainManagementObjectAddedEventType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const StandardEvent::DomainManagementObjectAddedEventType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const StandardEvent::DomainManagementObjectAddedEventType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<StandardEvent::DomainManagementObjectAddedEventType>::extract (
        _tao_any,
        StandardEvent::DomainManagementObjectAddedEventType::_tao_any_destructor,
        StandardEvent::_tc_DomainManagementObjectAddedEventType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, StandardEvent::StateChangeCategoryType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, StandardEvent::StateChangeCategoryType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<StandardEvent::StateChangeCategoryType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, StandardEvent::StateChangeType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, StandardEvent::StateChangeType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<StandardEvent::StateChangeType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StandardEvent::StateChangeEventType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.producerId.in ()) &&
    (strm << _tao_aggregate.sourceId.in ()) &&
    (strm << _tao_aggregate.stateChangeCategory) &&
    (strm << _tao_aggregate.stateChangeFrom) &&
    (strm << _tao_aggregate.stateChangeTo);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StandardEvent::StateChangeEventType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.producerId.out ()) &&
    (strm >> _tao_aggregate.sourceId.out ()) &&
    (strm >> _tao_aggregate.stateChangeCategory) &&
    (strm >> _tao_aggregate.stateChangeFrom) &&
    (strm >> _tao_aggregate.stateChangeTo);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, StandardEvent::SourceCategoryType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, StandardEvent::SourceCategoryType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<StandardEvent::SourceCategoryType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StandardEvent::DomainManagementObjectRemovedEventType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.producerId.in ()) &&
    (strm << _tao_aggregate.sourceId.in ()) &&
    (strm << _tao_aggregate.sourceName.in ()) &&
    (strm << _tao_aggregate.sourceCategory);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StandardEvent::DomainManagementObjectRemovedEventType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.producerId.out ()) &&
    (strm >> _tao_aggregate.sourceId.out ()) &&
    (strm >> _tao_aggregate.sourceName.out ()) &&
    (strm >> _tao_aggregate.sourceCategory);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const StandardEvent::DomainManagementObjectAddedEventType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.producerId.in ()) &&
    (strm << _tao_aggregate.sourceId.in ()) &&
    (strm << _tao_aggregate.sourceName.in ()) &&
    (strm << _tao_aggregate.sourceCategory) &&
    (strm << _tao_aggregate.sourceIOR.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    StandardEvent::DomainManagementObjectAddedEventType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.producerId.out ()) &&
    (strm >> _tao_aggregate.sourceId.out ()) &&
    (strm >> _tao_aggregate.sourceName.out ()) &&
    (strm >> _tao_aggregate.sourceCategory) &&
    (strm >> _tao_aggregate.sourceIOR.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



