// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "../include/PortTypesC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "../include/PortTypesC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_WSTRINGSEQUENCE_CS_)
#define _PORTTYPES_WSTRINGSEQUENCE_CS_

PortTypes::WstringSequence::WstringSequence (void)
{}

PortTypes::WstringSequence::WstringSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (max)
{}

PortTypes::WstringSequence::WstringSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::WChar * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
    (max, length, buffer, release)
{}

PortTypes::WstringSequence::WstringSequence (
    const WstringSequence &seq)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (seq)
{}

PortTypes::WstringSequence::~WstringSequence (void)
{}

void PortTypes::WstringSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  WstringSequence * _tao_tmp_pointer =
    static_cast<WstringSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_WstringSequence_GUARD
#define _TAO_TYPECODE_PortTypes_WstringSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_WstringSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_wstring,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_WstringSequence_0 =
        &PortTypes_WstringSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_WstringSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_WstringSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/WstringSequence:1.0",
    "WstringSequence",
    &TAO::TypeCode::tc_PortTypes_WstringSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_WstringSequence =
    &_tao_tc_PortTypes_WstringSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_BOOLEANSEQUENCE_CS_)
#define _PORTTYPES_BOOLEANSEQUENCE_CS_

PortTypes::BooleanSequence::BooleanSequence (void)
{}

PortTypes::BooleanSequence::BooleanSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      > (max)
{}

PortTypes::BooleanSequence::BooleanSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Boolean * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      >
    (max, length, buffer, release)
{}

PortTypes::BooleanSequence::BooleanSequence (
    const BooleanSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Boolean
      > (seq)
{}

PortTypes::BooleanSequence::~BooleanSequence (void)
{}

void PortTypes::BooleanSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  BooleanSequence * _tao_tmp_pointer =
    static_cast<BooleanSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_BooleanSequence_GUARD
#define _TAO_TYPECODE_PortTypes_BooleanSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_BooleanSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_boolean,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_BooleanSequence_0 =
        &PortTypes_BooleanSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_BooleanSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_BooleanSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/BooleanSequence:1.0",
    "BooleanSequence",
    &TAO::TypeCode::tc_PortTypes_BooleanSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_BooleanSequence =
    &_tao_tc_PortTypes_BooleanSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_CHARSEQUENCE_CS_)
#define _PORTTYPES_CHARSEQUENCE_CS_

PortTypes::CharSequence::CharSequence (void)
{}

PortTypes::CharSequence::CharSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

PortTypes::CharSequence::CharSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

PortTypes::CharSequence::CharSequence (
    const CharSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

PortTypes::CharSequence::~CharSequence (void)
{}

void PortTypes::CharSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CharSequence * _tao_tmp_pointer =
    static_cast<CharSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_CharSequence_GUARD
#define _TAO_TYPECODE_PortTypes_CharSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_CharSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_char,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_CharSequence_0 =
        &PortTypes_CharSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_CharSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_CharSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/CharSequence:1.0",
    "CharSequence",
    &TAO::TypeCode::tc_PortTypes_CharSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_CharSequence =
    &_tao_tc_PortTypes_CharSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_DOUBLESEQUENCE_CS_)
#define _PORTTYPES_DOUBLESEQUENCE_CS_

PortTypes::DoubleSequence::DoubleSequence (void)
{}

PortTypes::DoubleSequence::DoubleSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (max)
{}

PortTypes::DoubleSequence::DoubleSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max, length, buffer, release)
{}

PortTypes::DoubleSequence::DoubleSequence (
    const DoubleSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (seq)
{}

PortTypes::DoubleSequence::~DoubleSequence (void)
{}

void PortTypes::DoubleSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  DoubleSequence * _tao_tmp_pointer =
    static_cast<DoubleSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_DoubleSequence_GUARD
#define _TAO_TYPECODE_PortTypes_DoubleSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_DoubleSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_double,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_DoubleSequence_0 =
        &PortTypes_DoubleSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_DoubleSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_DoubleSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/DoubleSequence:1.0",
    "DoubleSequence",
    &TAO::TypeCode::tc_PortTypes_DoubleSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_DoubleSequence =
    &_tao_tc_PortTypes_DoubleSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_LONGDOUBLESEQUENCE_CS_)
#define _PORTTYPES_LONGDOUBLESEQUENCE_CS_

PortTypes::LongDoubleSequence::LongDoubleSequence (void)
{}

PortTypes::LongDoubleSequence::LongDoubleSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongDouble
      > (max)
{}

PortTypes::LongDoubleSequence::LongDoubleSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::LongDouble * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongDouble
      >
    (max, length, buffer, release)
{}

PortTypes::LongDoubleSequence::LongDoubleSequence (
    const LongDoubleSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongDouble
      > (seq)
{}

PortTypes::LongDoubleSequence::~LongDoubleSequence (void)
{}

void PortTypes::LongDoubleSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  LongDoubleSequence * _tao_tmp_pointer =
    static_cast<LongDoubleSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_LongDoubleSequence_GUARD
#define _TAO_TYPECODE_PortTypes_LongDoubleSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_LongDoubleSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_longdouble,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_LongDoubleSequence_0 =
        &PortTypes_LongDoubleSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_LongDoubleSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_LongDoubleSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/LongDoubleSequence:1.0",
    "LongDoubleSequence",
    &TAO::TypeCode::tc_PortTypes_LongDoubleSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_LongDoubleSequence =
    &_tao_tc_PortTypes_LongDoubleSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_LONGLONGSEQUENCE_CS_)
#define _PORTTYPES_LONGLONGSEQUENCE_CS_

PortTypes::LongLongSequence::LongLongSequence (void)
{}

PortTypes::LongLongSequence::LongLongSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongLong
      > (max)
{}

PortTypes::LongLongSequence::LongLongSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::LongLong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongLong
      >
    (max, length, buffer, release)
{}

PortTypes::LongLongSequence::LongLongSequence (
    const LongLongSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongLong
      > (seq)
{}

PortTypes::LongLongSequence::~LongLongSequence (void)
{}

void PortTypes::LongLongSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  LongLongSequence * _tao_tmp_pointer =
    static_cast<LongLongSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_LongLongSequence_GUARD
#define _TAO_TYPECODE_PortTypes_LongLongSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_LongLongSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_longlong,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_LongLongSequence_0 =
        &PortTypes_LongLongSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_LongLongSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_LongLongSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/LongLongSequence:1.0",
    "LongLongSequence",
    &TAO::TypeCode::tc_PortTypes_LongLongSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_LongLongSequence =
    &_tao_tc_PortTypes_LongLongSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_LONGSEQUENCE_CS_)
#define _PORTTYPES_LONGSEQUENCE_CS_

PortTypes::LongSequence::LongSequence (void)
{}

PortTypes::LongSequence::LongSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

PortTypes::LongSequence::LongSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

PortTypes::LongSequence::LongSequence (
    const LongSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

PortTypes::LongSequence::~LongSequence (void)
{}

void PortTypes::LongSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  LongSequence * _tao_tmp_pointer =
    static_cast<LongSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_LongSequence_GUARD
#define _TAO_TYPECODE_PortTypes_LongSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_LongSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_LongSequence_0 =
        &PortTypes_LongSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_LongSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_LongSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/LongSequence:1.0",
    "LongSequence",
    &TAO::TypeCode::tc_PortTypes_LongSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_LongSequence =
    &_tao_tc_PortTypes_LongSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_SHORTSEQUENCE_CS_)
#define _PORTTYPES_SHORTSEQUENCE_CS_

PortTypes::ShortSequence::ShortSequence (void)
{}

PortTypes::ShortSequence::ShortSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (max)
{}

PortTypes::ShortSequence::ShortSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Short * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      >
    (max, length, buffer, release)
{}

PortTypes::ShortSequence::ShortSequence (
    const ShortSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Short
      > (seq)
{}

PortTypes::ShortSequence::~ShortSequence (void)
{}

void PortTypes::ShortSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ShortSequence * _tao_tmp_pointer =
    static_cast<ShortSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_ShortSequence_GUARD
#define _TAO_TYPECODE_PortTypes_ShortSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_ShortSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_short,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_ShortSequence_0 =
        &PortTypes_ShortSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_ShortSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_ShortSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/ShortSequence:1.0",
    "ShortSequence",
    &TAO::TypeCode::tc_PortTypes_ShortSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_ShortSequence =
    &_tao_tc_PortTypes_ShortSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_ULONGLONGSEQUENCE_CS_)
#define _PORTTYPES_ULONGLONGSEQUENCE_CS_

PortTypes::UlongLongSequence::UlongLongSequence (void)
{}

PortTypes::UlongLongSequence::UlongLongSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULongLong
      > (max)
{}

PortTypes::UlongLongSequence::UlongLongSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::ULongLong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULongLong
      >
    (max, length, buffer, release)
{}

PortTypes::UlongLongSequence::UlongLongSequence (
    const UlongLongSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULongLong
      > (seq)
{}

PortTypes::UlongLongSequence::~UlongLongSequence (void)
{}

void PortTypes::UlongLongSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  UlongLongSequence * _tao_tmp_pointer =
    static_cast<UlongLongSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_UlongLongSequence_GUARD
#define _TAO_TYPECODE_PortTypes_UlongLongSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_UlongLongSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ulonglong,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_UlongLongSequence_0 =
        &PortTypes_UlongLongSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_UlongLongSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_UlongLongSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/UlongLongSequence:1.0",
    "UlongLongSequence",
    &TAO::TypeCode::tc_PortTypes_UlongLongSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_UlongLongSequence =
    &_tao_tc_PortTypes_UlongLongSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_ULONGSEQUENCE_CS_)
#define _PORTTYPES_ULONGSEQUENCE_CS_

PortTypes::UlongSequence::UlongSequence (void)
{}

PortTypes::UlongSequence::UlongSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULong
      > (max)
{}

PortTypes::UlongSequence::UlongSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::ULong * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULong
      >
    (max, length, buffer, release)
{}

PortTypes::UlongSequence::UlongSequence (
    const UlongSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::ULong
      > (seq)
{}

PortTypes::UlongSequence::~UlongSequence (void)
{}

void PortTypes::UlongSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  UlongSequence * _tao_tmp_pointer =
    static_cast<UlongSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_UlongSequence_GUARD
#define _TAO_TYPECODE_PortTypes_UlongSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_UlongSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ulong,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_UlongSequence_0 =
        &PortTypes_UlongSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_UlongSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_UlongSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/UlongSequence:1.0",
    "UlongSequence",
    &TAO::TypeCode::tc_PortTypes_UlongSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_UlongSequence =
    &_tao_tc_PortTypes_UlongSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_USHORTSEQUENCE_CS_)
#define _PORTTYPES_USHORTSEQUENCE_CS_

PortTypes::UshortSequence::UshortSequence (void)
{}

PortTypes::UshortSequence::UshortSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::UShort
      > (max)
{}

PortTypes::UshortSequence::UshortSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::UShort * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::UShort
      >
    (max, length, buffer, release)
{}

PortTypes::UshortSequence::UshortSequence (
    const UshortSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::UShort
      > (seq)
{}

PortTypes::UshortSequence::~UshortSequence (void)
{}

void PortTypes::UshortSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  UshortSequence * _tao_tmp_pointer =
    static_cast<UshortSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_UshortSequence_GUARD
#define _TAO_TYPECODE_PortTypes_UshortSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_UshortSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_ushort,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_UshortSequence_0 =
        &PortTypes_UshortSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_UshortSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_UshortSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/UshortSequence:1.0",
    "UshortSequence",
    &TAO::TypeCode::tc_PortTypes_UshortSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_UshortSequence =
    &_tao_tc_PortTypes_UshortSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_WCHARSEQUENCE_CS_)
#define _PORTTYPES_WCHARSEQUENCE_CS_

PortTypes::WcharSequence::WcharSequence (void)
{}

PortTypes::WcharSequence::WcharSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::WChar
      > (max)
{}

PortTypes::WcharSequence::WcharSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::WChar * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::WChar
      >
    (max, length, buffer, release)
{}

PortTypes::WcharSequence::WcharSequence (
    const WcharSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::WChar
      > (seq)
{}

PortTypes::WcharSequence::~WcharSequence (void)
{}

void PortTypes::WcharSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  WcharSequence * _tao_tmp_pointer =
    static_cast<WcharSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_WcharSequence_GUARD
#define _TAO_TYPECODE_PortTypes_WcharSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_WcharSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_wchar,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_WcharSequence_0 =
        &PortTypes_WcharSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_WcharSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_WcharSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/WcharSequence:1.0",
    "WcharSequence",
    &TAO::TypeCode::tc_PortTypes_WcharSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_WcharSequence =
    &_tao_tc_PortTypes_WcharSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTTYPES_FLOATSEQUENCE_CS_)
#define _PORTTYPES_FLOATSEQUENCE_CS_

PortTypes::FloatSequence::FloatSequence (void)
{}

PortTypes::FloatSequence::FloatSequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      > (max)
{}

PortTypes::FloatSequence::FloatSequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Float * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      >
    (max, length, buffer, release)
{}

PortTypes::FloatSequence::FloatSequence (
    const FloatSequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      > (seq)
{}

PortTypes::FloatSequence::~FloatSequence (void)
{}

void PortTypes::FloatSequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  FloatSequence * _tao_tmp_pointer =
    static_cast<FloatSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_PortTypes_FloatSequence_GUARD
#define _TAO_TYPECODE_PortTypes_FloatSequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortTypes_FloatSequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_float,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortTypes_FloatSequence_0 =
        &PortTypes_FloatSequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_PortTypes_FloatSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortTypes_FloatSequence (
    ::CORBA::tk_alias,
    "IDL:PortTypes/FloatSequence:1.0",
    "FloatSequence",
    &TAO::TypeCode::tc_PortTypes_FloatSequence_0);
  

namespace PortTypes
{
  ::CORBA::TypeCode_ptr const _tc_FloatSequence =
    &_tao_tc_PortTypes_FloatSequence;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::WstringSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::WstringSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::WstringSequence>::insert_copy (
          _tao_any,
          ::PortTypes::WstringSequence::_tao_any_destructor,
          ::PortTypes::_tc_WstringSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::WstringSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::WstringSequence>::insert (
        _tao_any,
        ::PortTypes::WstringSequence::_tao_any_destructor,
        ::PortTypes::_tc_WstringSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::WstringSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::WstringSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::WstringSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::WstringSequence>::extract (
          _tao_any,
          ::PortTypes::WstringSequence::_tao_any_destructor,
          ::PortTypes::_tc_WstringSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::WstringSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::WstringSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::WstringSequence>::insert_copy (
        _tao_any,
        PortTypes::WstringSequence::_tao_any_destructor,
        PortTypes::_tc_WstringSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::WstringSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::WstringSequence>::insert (
      _tao_any,
      PortTypes::WstringSequence::_tao_any_destructor,
      PortTypes::_tc_WstringSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::WstringSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::WstringSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::WstringSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::WstringSequence>::extract (
        _tao_any,
        PortTypes::WstringSequence::_tao_any_destructor,
        PortTypes::_tc_WstringSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::BooleanSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::BooleanSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::BooleanSequence>::insert_copy (
          _tao_any,
          ::PortTypes::BooleanSequence::_tao_any_destructor,
          ::PortTypes::_tc_BooleanSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::BooleanSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::BooleanSequence>::insert (
        _tao_any,
        ::PortTypes::BooleanSequence::_tao_any_destructor,
        ::PortTypes::_tc_BooleanSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::BooleanSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::BooleanSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::BooleanSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::BooleanSequence>::extract (
          _tao_any,
          ::PortTypes::BooleanSequence::_tao_any_destructor,
          ::PortTypes::_tc_BooleanSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::BooleanSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::BooleanSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::BooleanSequence>::insert_copy (
        _tao_any,
        PortTypes::BooleanSequence::_tao_any_destructor,
        PortTypes::_tc_BooleanSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::BooleanSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::BooleanSequence>::insert (
      _tao_any,
      PortTypes::BooleanSequence::_tao_any_destructor,
      PortTypes::_tc_BooleanSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::BooleanSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::BooleanSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::BooleanSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::BooleanSequence>::extract (
        _tao_any,
        PortTypes::BooleanSequence::_tao_any_destructor,
        PortTypes::_tc_BooleanSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::CharSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::CharSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::CharSequence>::insert_copy (
          _tao_any,
          ::PortTypes::CharSequence::_tao_any_destructor,
          ::PortTypes::_tc_CharSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::CharSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::CharSequence>::insert (
        _tao_any,
        ::PortTypes::CharSequence::_tao_any_destructor,
        ::PortTypes::_tc_CharSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::CharSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::CharSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::CharSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::CharSequence>::extract (
          _tao_any,
          ::PortTypes::CharSequence::_tao_any_destructor,
          ::PortTypes::_tc_CharSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::CharSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::CharSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::CharSequence>::insert_copy (
        _tao_any,
        PortTypes::CharSequence::_tao_any_destructor,
        PortTypes::_tc_CharSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::CharSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::CharSequence>::insert (
      _tao_any,
      PortTypes::CharSequence::_tao_any_destructor,
      PortTypes::_tc_CharSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::CharSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::CharSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::CharSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::CharSequence>::extract (
        _tao_any,
        PortTypes::CharSequence::_tao_any_destructor,
        PortTypes::_tc_CharSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::DoubleSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::DoubleSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::DoubleSequence>::insert_copy (
          _tao_any,
          ::PortTypes::DoubleSequence::_tao_any_destructor,
          ::PortTypes::_tc_DoubleSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::DoubleSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::DoubleSequence>::insert (
        _tao_any,
        ::PortTypes::DoubleSequence::_tao_any_destructor,
        ::PortTypes::_tc_DoubleSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::DoubleSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::DoubleSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::DoubleSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::DoubleSequence>::extract (
          _tao_any,
          ::PortTypes::DoubleSequence::_tao_any_destructor,
          ::PortTypes::_tc_DoubleSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::DoubleSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::DoubleSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::DoubleSequence>::insert_copy (
        _tao_any,
        PortTypes::DoubleSequence::_tao_any_destructor,
        PortTypes::_tc_DoubleSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::DoubleSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::DoubleSequence>::insert (
      _tao_any,
      PortTypes::DoubleSequence::_tao_any_destructor,
      PortTypes::_tc_DoubleSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::DoubleSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::DoubleSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::DoubleSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::DoubleSequence>::extract (
        _tao_any,
        PortTypes::DoubleSequence::_tao_any_destructor,
        PortTypes::_tc_DoubleSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::LongDoubleSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::LongDoubleSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::LongDoubleSequence>::insert_copy (
          _tao_any,
          ::PortTypes::LongDoubleSequence::_tao_any_destructor,
          ::PortTypes::_tc_LongDoubleSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::LongDoubleSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::LongDoubleSequence>::insert (
        _tao_any,
        ::PortTypes::LongDoubleSequence::_tao_any_destructor,
        ::PortTypes::_tc_LongDoubleSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::LongDoubleSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::LongDoubleSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::LongDoubleSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::LongDoubleSequence>::extract (
          _tao_any,
          ::PortTypes::LongDoubleSequence::_tao_any_destructor,
          ::PortTypes::_tc_LongDoubleSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::LongDoubleSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::LongDoubleSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::LongDoubleSequence>::insert_copy (
        _tao_any,
        PortTypes::LongDoubleSequence::_tao_any_destructor,
        PortTypes::_tc_LongDoubleSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::LongDoubleSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::LongDoubleSequence>::insert (
      _tao_any,
      PortTypes::LongDoubleSequence::_tao_any_destructor,
      PortTypes::_tc_LongDoubleSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::LongDoubleSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::LongDoubleSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::LongDoubleSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::LongDoubleSequence>::extract (
        _tao_any,
        PortTypes::LongDoubleSequence::_tao_any_destructor,
        PortTypes::_tc_LongDoubleSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::LongLongSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::LongLongSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::LongLongSequence>::insert_copy (
          _tao_any,
          ::PortTypes::LongLongSequence::_tao_any_destructor,
          ::PortTypes::_tc_LongLongSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::LongLongSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::LongLongSequence>::insert (
        _tao_any,
        ::PortTypes::LongLongSequence::_tao_any_destructor,
        ::PortTypes::_tc_LongLongSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::LongLongSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::LongLongSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::LongLongSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::LongLongSequence>::extract (
          _tao_any,
          ::PortTypes::LongLongSequence::_tao_any_destructor,
          ::PortTypes::_tc_LongLongSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::LongLongSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::LongLongSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::LongLongSequence>::insert_copy (
        _tao_any,
        PortTypes::LongLongSequence::_tao_any_destructor,
        PortTypes::_tc_LongLongSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::LongLongSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::LongLongSequence>::insert (
      _tao_any,
      PortTypes::LongLongSequence::_tao_any_destructor,
      PortTypes::_tc_LongLongSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::LongLongSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::LongLongSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::LongLongSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::LongLongSequence>::extract (
        _tao_any,
        PortTypes::LongLongSequence::_tao_any_destructor,
        PortTypes::_tc_LongLongSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::LongSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::LongSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::LongSequence>::insert_copy (
          _tao_any,
          ::PortTypes::LongSequence::_tao_any_destructor,
          ::PortTypes::_tc_LongSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::LongSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::LongSequence>::insert (
        _tao_any,
        ::PortTypes::LongSequence::_tao_any_destructor,
        ::PortTypes::_tc_LongSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::LongSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::LongSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::LongSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::LongSequence>::extract (
          _tao_any,
          ::PortTypes::LongSequence::_tao_any_destructor,
          ::PortTypes::_tc_LongSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::LongSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::LongSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::LongSequence>::insert_copy (
        _tao_any,
        PortTypes::LongSequence::_tao_any_destructor,
        PortTypes::_tc_LongSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::LongSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::LongSequence>::insert (
      _tao_any,
      PortTypes::LongSequence::_tao_any_destructor,
      PortTypes::_tc_LongSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::LongSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::LongSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::LongSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::LongSequence>::extract (
        _tao_any,
        PortTypes::LongSequence::_tao_any_destructor,
        PortTypes::_tc_LongSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::ShortSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::ShortSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::ShortSequence>::insert_copy (
          _tao_any,
          ::PortTypes::ShortSequence::_tao_any_destructor,
          ::PortTypes::_tc_ShortSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::ShortSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::ShortSequence>::insert (
        _tao_any,
        ::PortTypes::ShortSequence::_tao_any_destructor,
        ::PortTypes::_tc_ShortSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::ShortSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::ShortSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::ShortSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::ShortSequence>::extract (
          _tao_any,
          ::PortTypes::ShortSequence::_tao_any_destructor,
          ::PortTypes::_tc_ShortSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::ShortSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::ShortSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::ShortSequence>::insert_copy (
        _tao_any,
        PortTypes::ShortSequence::_tao_any_destructor,
        PortTypes::_tc_ShortSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::ShortSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::ShortSequence>::insert (
      _tao_any,
      PortTypes::ShortSequence::_tao_any_destructor,
      PortTypes::_tc_ShortSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::ShortSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::ShortSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::ShortSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::ShortSequence>::extract (
        _tao_any,
        PortTypes::ShortSequence::_tao_any_destructor,
        PortTypes::_tc_ShortSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::UlongLongSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::UlongLongSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::UlongLongSequence>::insert_copy (
          _tao_any,
          ::PortTypes::UlongLongSequence::_tao_any_destructor,
          ::PortTypes::_tc_UlongLongSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::UlongLongSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::UlongLongSequence>::insert (
        _tao_any,
        ::PortTypes::UlongLongSequence::_tao_any_destructor,
        ::PortTypes::_tc_UlongLongSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::UlongLongSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::UlongLongSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::UlongLongSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::UlongLongSequence>::extract (
          _tao_any,
          ::PortTypes::UlongLongSequence::_tao_any_destructor,
          ::PortTypes::_tc_UlongLongSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::UlongLongSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::UlongLongSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::UlongLongSequence>::insert_copy (
        _tao_any,
        PortTypes::UlongLongSequence::_tao_any_destructor,
        PortTypes::_tc_UlongLongSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::UlongLongSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::UlongLongSequence>::insert (
      _tao_any,
      PortTypes::UlongLongSequence::_tao_any_destructor,
      PortTypes::_tc_UlongLongSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::UlongLongSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::UlongLongSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::UlongLongSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::UlongLongSequence>::extract (
        _tao_any,
        PortTypes::UlongLongSequence::_tao_any_destructor,
        PortTypes::_tc_UlongLongSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::UlongSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::UlongSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::UlongSequence>::insert_copy (
          _tao_any,
          ::PortTypes::UlongSequence::_tao_any_destructor,
          ::PortTypes::_tc_UlongSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::UlongSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::UlongSequence>::insert (
        _tao_any,
        ::PortTypes::UlongSequence::_tao_any_destructor,
        ::PortTypes::_tc_UlongSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::UlongSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::UlongSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::UlongSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::UlongSequence>::extract (
          _tao_any,
          ::PortTypes::UlongSequence::_tao_any_destructor,
          ::PortTypes::_tc_UlongSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::UlongSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::UlongSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::UlongSequence>::insert_copy (
        _tao_any,
        PortTypes::UlongSequence::_tao_any_destructor,
        PortTypes::_tc_UlongSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::UlongSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::UlongSequence>::insert (
      _tao_any,
      PortTypes::UlongSequence::_tao_any_destructor,
      PortTypes::_tc_UlongSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::UlongSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::UlongSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::UlongSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::UlongSequence>::extract (
        _tao_any,
        PortTypes::UlongSequence::_tao_any_destructor,
        PortTypes::_tc_UlongSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::UshortSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::UshortSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::UshortSequence>::insert_copy (
          _tao_any,
          ::PortTypes::UshortSequence::_tao_any_destructor,
          ::PortTypes::_tc_UshortSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::UshortSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::UshortSequence>::insert (
        _tao_any,
        ::PortTypes::UshortSequence::_tao_any_destructor,
        ::PortTypes::_tc_UshortSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::UshortSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::UshortSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::UshortSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::UshortSequence>::extract (
          _tao_any,
          ::PortTypes::UshortSequence::_tao_any_destructor,
          ::PortTypes::_tc_UshortSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::UshortSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::UshortSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::UshortSequence>::insert_copy (
        _tao_any,
        PortTypes::UshortSequence::_tao_any_destructor,
        PortTypes::_tc_UshortSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::UshortSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::UshortSequence>::insert (
      _tao_any,
      PortTypes::UshortSequence::_tao_any_destructor,
      PortTypes::_tc_UshortSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::UshortSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::UshortSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::UshortSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::UshortSequence>::extract (
        _tao_any,
        PortTypes::UshortSequence::_tao_any_destructor,
        PortTypes::_tc_UshortSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::WcharSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::WcharSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::WcharSequence>::insert_copy (
          _tao_any,
          ::PortTypes::WcharSequence::_tao_any_destructor,
          ::PortTypes::_tc_WcharSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::WcharSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::WcharSequence>::insert (
        _tao_any,
        ::PortTypes::WcharSequence::_tao_any_destructor,
        ::PortTypes::_tc_WcharSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::WcharSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::WcharSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::WcharSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::WcharSequence>::extract (
          _tao_any,
          ::PortTypes::WcharSequence::_tao_any_destructor,
          ::PortTypes::_tc_WcharSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::WcharSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::WcharSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::WcharSequence>::insert_copy (
        _tao_any,
        PortTypes::WcharSequence::_tao_any_destructor,
        PortTypes::_tc_WcharSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::WcharSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::WcharSequence>::insert (
      _tao_any,
      PortTypes::WcharSequence::_tao_any_destructor,
      PortTypes::_tc_WcharSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::WcharSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::WcharSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::WcharSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::WcharSequence>::extract (
        _tao_any,
        PortTypes::WcharSequence::_tao_any_destructor,
        PortTypes::_tc_WcharSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortTypes::FloatSequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortTypes::FloatSequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortTypes::FloatSequence>::insert_copy (
          _tao_any,
          ::PortTypes::FloatSequence::_tao_any_destructor,
          ::PortTypes::_tc_FloatSequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortTypes::FloatSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortTypes::FloatSequence>::insert (
        _tao_any,
        ::PortTypes::FloatSequence::_tao_any_destructor,
        ::PortTypes::_tc_FloatSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortTypes::FloatSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortTypes::FloatSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortTypes::FloatSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortTypes::FloatSequence>::extract (
          _tao_any,
          ::PortTypes::FloatSequence::_tao_any_destructor,
          ::PortTypes::_tc_FloatSequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortTypes::FloatSequence &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortTypes::FloatSequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortTypes::FloatSequence>::insert_copy (
        _tao_any,
        PortTypes::FloatSequence::_tao_any_destructor,
        PortTypes::_tc_FloatSequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortTypes::FloatSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortTypes::FloatSequence>::insert (
      _tao_any,
      PortTypes::FloatSequence::_tao_any_destructor,
      PortTypes::_tc_FloatSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortTypes::FloatSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortTypes::FloatSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortTypes::FloatSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortTypes::FloatSequence>::extract (
        _tao_any,
        PortTypes::FloatSequence::_tao_any_destructor,
        PortTypes::_tc_FloatSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_WstringSequence_CPP_
#define _TAO_CDR_OP_PortTypes_WstringSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::WstringSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::WstringSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_WstringSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_BooleanSequence_CPP_
#define _TAO_CDR_OP_PortTypes_BooleanSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::BooleanSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::BooleanSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_BooleanSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_CharSequence_CPP_
#define _TAO_CDR_OP_PortTypes_CharSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::CharSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::CharSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_CharSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_DoubleSequence_CPP_
#define _TAO_CDR_OP_PortTypes_DoubleSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::DoubleSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::DoubleSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_DoubleSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_LongDoubleSequence_CPP_
#define _TAO_CDR_OP_PortTypes_LongDoubleSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::LongDoubleSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::LongDoubleSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_LongDoubleSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_LongLongSequence_CPP_
#define _TAO_CDR_OP_PortTypes_LongLongSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::LongLongSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::LongLongSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_LongLongSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_LongSequence_CPP_
#define _TAO_CDR_OP_PortTypes_LongSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::LongSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::LongSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_LongSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_ShortSequence_CPP_
#define _TAO_CDR_OP_PortTypes_ShortSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::ShortSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::ShortSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_ShortSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_UlongLongSequence_CPP_
#define _TAO_CDR_OP_PortTypes_UlongLongSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::UlongLongSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::UlongLongSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_UlongLongSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_UlongSequence_CPP_
#define _TAO_CDR_OP_PortTypes_UlongSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::UlongSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::UlongSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_UlongSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_UshortSequence_CPP_
#define _TAO_CDR_OP_PortTypes_UshortSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::UshortSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::UshortSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_UshortSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_WcharSequence_CPP_
#define _TAO_CDR_OP_PortTypes_WcharSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::WcharSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::WcharSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_WcharSequence_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_PortTypes_FloatSequence_CPP_
#define _TAO_CDR_OP_PortTypes_FloatSequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::FloatSequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::FloatSequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_PortTypes_FloatSequence_CPP_ */

