// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "../include/PacketC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "../include/PacketC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for Packet::PayloadStatus.

Packet::PayloadStatus_ptr
TAO::Objref_Traits<Packet::PayloadStatus>::duplicate (
    Packet::PayloadStatus_ptr p)
{
  return Packet::PayloadStatus::_duplicate (p);
}

void
TAO::Objref_Traits<Packet::PayloadStatus>::release (
    Packet::PayloadStatus_ptr p)
{
  ::CORBA::release (p);
}

Packet::PayloadStatus_ptr
TAO::Objref_Traits<Packet::PayloadStatus>::nil (void)
{
  return Packet::PayloadStatus::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Packet::PayloadStatus>::marshal (
    const Packet::PayloadStatus_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Packet__TAO_PayloadStatus_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::ULong
Packet::PayloadStatus::getMaxPayloadSize (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadStatus_Proxy_Broker_ == 0)
    {
      Packet_PayloadStatus_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getMaxPayloadSize",
      17,
      this->the_TAO_PayloadStatus_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::ULong
Packet::PayloadStatus::getMinPayloadSize (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadStatus_Proxy_Broker_ == 0)
    {
      Packet_PayloadStatus_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getMinPayloadSize",
      17,
      this->the_TAO_PayloadStatus_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::ULong
Packet::PayloadStatus::getDesiredPayloadSize (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadStatus_Proxy_Broker_ == 0)
    {
      Packet_PayloadStatus_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getDesiredPayloadSize",
      21,
      this->the_TAO_PayloadStatus_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::ULong
Packet::PayloadStatus::getMinOverrideTimeout (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadStatus_Proxy_Broker_ == 0)
    {
      Packet_PayloadStatus_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getMinOverrideTimeout",
      21,
      this->the_TAO_PayloadStatus_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

Packet::PayloadStatus::PayloadStatus (void)
 : the_TAO_PayloadStatus_Proxy_Broker_ (0)
{
  this->Packet_PayloadStatus_setup_collocation ();
}

void
Packet::PayloadStatus::Packet_PayloadStatus_setup_collocation ()
{
  if (::Packet__TAO_PayloadStatus_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PayloadStatus_Proxy_Broker_ =
        ::Packet__TAO_PayloadStatus_Proxy_Broker_Factory_function_pointer (this);
    }
}

Packet::PayloadStatus::~PayloadStatus (void)
{}

void 
Packet::PayloadStatus::_tao_any_destructor (void *_tao_void_pointer)
{
  PayloadStatus *_tao_tmp_pointer =
    static_cast<PayloadStatus *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Packet::PayloadStatus_ptr
Packet::PayloadStatus::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PayloadStatus>::narrow (
        _tao_objref,
        "IDL:Packet/PayloadStatus:1.0",
        Packet__TAO_PayloadStatus_Proxy_Broker_Factory_function_pointer
      );
}

Packet::PayloadStatus_ptr
Packet::PayloadStatus::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PayloadStatus>::unchecked_narrow (
        _tao_objref,
        "IDL:Packet/PayloadStatus:1.0",
        Packet__TAO_PayloadStatus_Proxy_Broker_Factory_function_pointer
      );
}

Packet::PayloadStatus_ptr
Packet::PayloadStatus::_nil (void)
{
  return 0;
}

Packet::PayloadStatus_ptr
Packet::PayloadStatus::_duplicate (PayloadStatus_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Packet::PayloadStatus::_tao_release (PayloadStatus_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Packet::PayloadStatus::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Packet/PayloadStatus:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Packet::PayloadStatus::_interface_repository_id (void) const
{
  return "IDL:Packet/PayloadStatus:1.0";
}

::CORBA::Boolean
Packet::PayloadStatus::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Packet_PayloadStatus (
    ::CORBA::tk_objref,
    "IDL:Packet/PayloadStatus:1.0",
    "PayloadStatus");
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_PayloadStatus =
    &_tao_tc_Packet_PayloadStatus;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for Packet::PayloadControl.

Packet::PayloadControl_ptr
TAO::Objref_Traits<Packet::PayloadControl>::duplicate (
    Packet::PayloadControl_ptr p)
{
  return Packet::PayloadControl::_duplicate (p);
}

void
TAO::Objref_Traits<Packet::PayloadControl>::release (
    Packet::PayloadControl_ptr p)
{
  ::CORBA::release (p);
}

Packet::PayloadControl_ptr
TAO::Objref_Traits<Packet::PayloadControl>::nil (void)
{
  return Packet::PayloadControl::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Packet::PayloadControl>::marshal (
    const Packet::PayloadControl_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Packet__TAO_PayloadControl_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
Packet::PayloadControl::setMaxPayloadSize (
  ::CORBA::ULong maxPayloadSize)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadControl_Proxy_Broker_ == 0)
    {
      Packet_PayloadControl_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_maxPayloadSize (maxPayloadSize);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_maxPayloadSize
    };

  static TAO::Exception_Data
  _tao_Packet_PayloadControl_setMaxPayloadSize_exceptiondata [] = 
    {
      {
        "IDL:JTRS/InvalidParameter:1.0",
        JTRS::InvalidParameter::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , JTRS::_tc_InvalidParameter
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setMaxPayloadSize",
      17,
      this->the_TAO_PayloadControl_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_Packet_PayloadControl_setMaxPayloadSize_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
Packet::PayloadControl::setMinPayloadSize (
  ::CORBA::ULong minPayloadSize)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadControl_Proxy_Broker_ == 0)
    {
      Packet_PayloadControl_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_minPayloadSize (minPayloadSize);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_minPayloadSize
    };

  static TAO::Exception_Data
  _tao_Packet_PayloadControl_setMinPayloadSize_exceptiondata [] = 
    {
      {
        "IDL:JTRS/InvalidParameter:1.0",
        JTRS::InvalidParameter::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , JTRS::_tc_InvalidParameter
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setMinPayloadSize",
      17,
      this->the_TAO_PayloadControl_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_Packet_PayloadControl_setMinPayloadSize_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
Packet::PayloadControl::setDesiredPayloadSize (
  ::CORBA::ULong desiredPayloadSize)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadControl_Proxy_Broker_ == 0)
    {
      Packet_PayloadControl_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_desiredPayloadSize (desiredPayloadSize);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_desiredPayloadSize
    };

  static TAO::Exception_Data
  _tao_Packet_PayloadControl_setDesiredPayloadSize_exceptiondata [] = 
    {
      {
        "IDL:JTRS/InvalidParameter:1.0",
        JTRS::InvalidParameter::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , JTRS::_tc_InvalidParameter
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setDesiredPayloadSize",
      21,
      this->the_TAO_PayloadControl_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_Packet_PayloadControl_setDesiredPayloadSize_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
Packet::PayloadControl::setMinOverrideTimeout (
  ::CORBA::ULong minOverrideTimeout)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PayloadControl_Proxy_Broker_ == 0)
    {
      Packet_PayloadControl_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_minOverrideTimeout (minOverrideTimeout);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_minOverrideTimeout
    };

  static TAO::Exception_Data
  _tao_Packet_PayloadControl_setMinOverrideTimeout_exceptiondata [] = 
    {
      {
        "IDL:JTRS/InvalidParameter:1.0",
        JTRS::InvalidParameter::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , JTRS::_tc_InvalidParameter
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setMinOverrideTimeout",
      21,
      this->the_TAO_PayloadControl_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_Packet_PayloadControl_setMinOverrideTimeout_exceptiondata,
      1
    );
}

Packet::PayloadControl::PayloadControl (void)
 : the_TAO_PayloadControl_Proxy_Broker_ (0)
{
  this->Packet_PayloadControl_setup_collocation ();
}

void
Packet::PayloadControl::Packet_PayloadControl_setup_collocation ()
{
  if (::Packet__TAO_PayloadControl_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PayloadControl_Proxy_Broker_ =
        ::Packet__TAO_PayloadControl_Proxy_Broker_Factory_function_pointer (this);
    }
}

Packet::PayloadControl::~PayloadControl (void)
{}

void 
Packet::PayloadControl::_tao_any_destructor (void *_tao_void_pointer)
{
  PayloadControl *_tao_tmp_pointer =
    static_cast<PayloadControl *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Packet::PayloadControl_ptr
Packet::PayloadControl::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PayloadControl>::narrow (
        _tao_objref,
        "IDL:Packet/PayloadControl:1.0",
        Packet__TAO_PayloadControl_Proxy_Broker_Factory_function_pointer
      );
}

Packet::PayloadControl_ptr
Packet::PayloadControl::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PayloadControl>::unchecked_narrow (
        _tao_objref,
        "IDL:Packet/PayloadControl:1.0",
        Packet__TAO_PayloadControl_Proxy_Broker_Factory_function_pointer
      );
}

Packet::PayloadControl_ptr
Packet::PayloadControl::_nil (void)
{
  return 0;
}

Packet::PayloadControl_ptr
Packet::PayloadControl::_duplicate (PayloadControl_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Packet::PayloadControl::_tao_release (PayloadControl_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Packet::PayloadControl::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Packet/PayloadControl:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Packet::PayloadControl::_interface_repository_id (void) const
{
  return "IDL:Packet/PayloadControl:1.0";
}

::CORBA::Boolean
Packet::PayloadControl::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Packet_PayloadControl (
    ::CORBA::tk_objref,
    "IDL:Packet/PayloadControl:1.0",
    "PayloadControl");
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_PayloadControl =
    &_tao_tc_Packet_PayloadControl;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Packet_Stream (
    ::CORBA::tk_alias,
    "IDL:Packet/Stream:1.0",
    "Stream",
    &CORBA::_tc_ushort);
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_Stream =
    &_tao_tc_Packet_Stream;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Packet_SeqNum (
    ::CORBA::tk_alias,
    "IDL:Packet/SeqNum:1.0",
    "SeqNum",
    &CORBA::_tc_octet);
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_SeqNum =
    &_tao_tc_Packet_SeqNum;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Packet_StreamControlType[] =
      {
        { "endOfStream", &CORBA::_tc_boolean },
        { "streamed", &Packet::_tc_Stream },
        { "SequenceNumber", &Packet::_tc_SeqNum },
        { "purge", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Packet_StreamControlType (
  ::CORBA::tk_struct,
  "IDL:Packet/StreamControlType:1.0",
  "StreamControlType",
  _tao_fields_Packet_StreamControlType,
  4);


namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_StreamControlType =
    &_tao_tc_Packet_StreamControlType;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
Packet::StreamControlType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  StreamControlType *_tao_tmp_pointer =
    static_cast<StreamControlType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Packet_PushError (
    ::CORBA::tk_alias,
    "IDL:Packet/PushError:1.0",
    "PushError",
    &JTRS::_tc_ExtEnum);
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_PushError =
    &_tao_tc_Packet_PushError;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

Packet::UnableToComplete::UnableToComplete (
    ::CORBA::UShort _tao_payloadSent,
    ::Packet::PushError _tao_errorCode)
  : ::CORBA::UserException (
        "IDL:Packet/UnableToComplete:1.0",
        "UnableToComplete"
      )
{
  this->payloadSent = _tao_payloadSent;
  this->errorCode = _tao_errorCode;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

Packet::UnableToComplete::UnableToComplete (void)
  : ::CORBA::UserException (
        "IDL:Packet/UnableToComplete:1.0",
        "UnableToComplete"
      )
{
}

Packet::UnableToComplete::~UnableToComplete (void)
{
}

Packet::UnableToComplete::UnableToComplete (const ::Packet::UnableToComplete &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->payloadSent = _tao_excp.payloadSent;
  this->errorCode = _tao_excp.errorCode;
}

Packet::UnableToComplete&
Packet::UnableToComplete::operator= (const ::Packet::UnableToComplete &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->payloadSent = _tao_excp.payloadSent;
  this->errorCode = _tao_excp.errorCode;
  return *this;
}

void Packet::UnableToComplete::_tao_any_destructor (void *_tao_void_pointer)
{
  UnableToComplete *_tao_tmp_pointer =
    static_cast<UnableToComplete *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Packet::UnableToComplete *
Packet::UnableToComplete::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnableToComplete *> (_tao_excp);
}

const Packet::UnableToComplete *
Packet::UnableToComplete::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnableToComplete *> (_tao_excp);
}

::CORBA::Exception *Packet::UnableToComplete::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Packet::UnableToComplete, 0);
  return retval;
}

::CORBA::Exception *
Packet::UnableToComplete::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Packet::UnableToComplete (*this),
      0
    );
  return result;
}

void Packet::UnableToComplete::_raise (void) const
{
  throw *this;
}

void Packet::UnableToComplete::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Packet::UnableToComplete::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Packet::UnableToComplete::_tao_type (void) const
{
  return ::Packet::_tc_UnableToComplete;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Packet_UnableToComplete[] =
      {
        { "payloadSent", &CORBA::_tc_ushort },
        { "errorCode", &Packet::_tc_PushError }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Packet_UnableToComplete (
  ::CORBA::tk_except,
  "IDL:Packet/UnableToComplete:1.0",
  "UnableToComplete",
  _tao_fields_Packet_UnableToComplete,
  2);


namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_UnableToComplete =
    &_tao_tc_Packet_UnableToComplete;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for Packet::OctetStream.

Packet::OctetStream_ptr
TAO::Objref_Traits<Packet::OctetStream>::duplicate (
    Packet::OctetStream_ptr p)
{
  return Packet::OctetStream::_duplicate (p);
}

void
TAO::Objref_Traits<Packet::OctetStream>::release (
    Packet::OctetStream_ptr p)
{
  ::CORBA::release (p);
}

Packet::OctetStream_ptr
TAO::Objref_Traits<Packet::OctetStream>::nil (void)
{
  return Packet::OctetStream::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Packet::OctetStream>::marshal (
    const Packet::OctetStream_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Packet__TAO_OctetStream_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
Packet::OctetStream::pushPakcet (
  const ::Packet::StreamControlType & control,
  const ::JTRS::OctetSequence & payload)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_OctetStream_Proxy_Broker_ == 0)
    {
      Packet_OctetStream_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Packet::StreamControlType>::in_arg_val _tao_control (control);
  TAO::Arg_Traits< ::JTRS::OctetSequence>::in_arg_val _tao_payload (payload);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_control,
      &_tao_payload
    };

  static TAO::Exception_Data
  _tao_Packet_OctetStream_pushPakcet_exceptiondata [] = 
    {
      {
        "IDL:Packet/UnableToComplete:1.0",
        Packet::UnableToComplete::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Packet::_tc_UnableToComplete
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "pushPakcet",
      10,
      this->the_TAO_OctetStream_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_Packet_OctetStream_pushPakcet_exceptiondata,
      1
    );
}

Packet::OctetStream::OctetStream (void)
 : the_TAO_OctetStream_Proxy_Broker_ (0)
{
  this->Packet_OctetStream_setup_collocation ();
}

void
Packet::OctetStream::Packet_OctetStream_setup_collocation ()
{
  if (::Packet__TAO_OctetStream_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_OctetStream_Proxy_Broker_ =
        ::Packet__TAO_OctetStream_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->Packet_PayloadStatus_setup_collocation ();
}

Packet::OctetStream::~OctetStream (void)
{}

void 
Packet::OctetStream::_tao_any_destructor (void *_tao_void_pointer)
{
  OctetStream *_tao_tmp_pointer =
    static_cast<OctetStream *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Packet::OctetStream_ptr
Packet::OctetStream::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<OctetStream>::narrow (
        _tao_objref,
        "IDL:Packet/OctetStream:1.0",
        Packet__TAO_OctetStream_Proxy_Broker_Factory_function_pointer
      );
}

Packet::OctetStream_ptr
Packet::OctetStream::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<OctetStream>::unchecked_narrow (
        _tao_objref,
        "IDL:Packet/OctetStream:1.0",
        Packet__TAO_OctetStream_Proxy_Broker_Factory_function_pointer
      );
}

Packet::OctetStream_ptr
Packet::OctetStream::_nil (void)
{
  return 0;
}

Packet::OctetStream_ptr
Packet::OctetStream::_duplicate (OctetStream_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Packet::OctetStream::_tao_release (OctetStream_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Packet::OctetStream::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Packet/PayloadStatus:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Packet/OctetStream:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Packet::OctetStream::_interface_repository_id (void) const
{
  return "IDL:Packet/OctetStream:1.0";
}

::CORBA::Boolean
Packet::OctetStream::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Packet_OctetStream (
    ::CORBA::tk_objref,
    "IDL:Packet/OctetStream:1.0",
    "OctetStream");
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_OctetStream =
    &_tao_tc_Packet_OctetStream;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for Packet::UshortSteam.

Packet::UshortSteam_ptr
TAO::Objref_Traits<Packet::UshortSteam>::duplicate (
    Packet::UshortSteam_ptr p)
{
  return Packet::UshortSteam::_duplicate (p);
}

void
TAO::Objref_Traits<Packet::UshortSteam>::release (
    Packet::UshortSteam_ptr p)
{
  ::CORBA::release (p);
}

Packet::UshortSteam_ptr
TAO::Objref_Traits<Packet::UshortSteam>::nil (void)
{
  return Packet::UshortSteam::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Packet::UshortSteam>::marshal (
    const Packet::UshortSteam_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Packet__TAO_UshortSteam_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
Packet::UshortSteam::pushPacket (
  const ::Packet::StreamControlType & control,
  const ::JTRS::UshortSequence & payload)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UshortSteam_Proxy_Broker_ == 0)
    {
      Packet_UshortSteam_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Packet::StreamControlType>::in_arg_val _tao_control (control);
  TAO::Arg_Traits< ::JTRS::UshortSequence>::in_arg_val _tao_payload (payload);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_control,
      &_tao_payload
    };

  static TAO::Exception_Data
  _tao_Packet_UshortSteam_pushPacket_exceptiondata [] = 
    {
      {
        "IDL:Packet/UnableToComplete:1.0",
        Packet::UnableToComplete::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Packet::_tc_UnableToComplete
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "pushPacket",
      10,
      this->the_TAO_UshortSteam_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_Packet_UshortSteam_pushPacket_exceptiondata,
      1
    );
}

Packet::UshortSteam::UshortSteam (void)
 : the_TAO_UshortSteam_Proxy_Broker_ (0)
{
  this->Packet_UshortSteam_setup_collocation ();
}

void
Packet::UshortSteam::Packet_UshortSteam_setup_collocation ()
{
  if (::Packet__TAO_UshortSteam_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_UshortSteam_Proxy_Broker_ =
        ::Packet__TAO_UshortSteam_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->Packet_PayloadStatus_setup_collocation ();
}

Packet::UshortSteam::~UshortSteam (void)
{}

void 
Packet::UshortSteam::_tao_any_destructor (void *_tao_void_pointer)
{
  UshortSteam *_tao_tmp_pointer =
    static_cast<UshortSteam *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Packet::UshortSteam_ptr
Packet::UshortSteam::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<UshortSteam>::narrow (
        _tao_objref,
        "IDL:Packet/UshortSteam:1.0",
        Packet__TAO_UshortSteam_Proxy_Broker_Factory_function_pointer
      );
}

Packet::UshortSteam_ptr
Packet::UshortSteam::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<UshortSteam>::unchecked_narrow (
        _tao_objref,
        "IDL:Packet/UshortSteam:1.0",
        Packet__TAO_UshortSteam_Proxy_Broker_Factory_function_pointer
      );
}

Packet::UshortSteam_ptr
Packet::UshortSteam::_nil (void)
{
  return 0;
}

Packet::UshortSteam_ptr
Packet::UshortSteam::_duplicate (UshortSteam_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Packet::UshortSteam::_tao_release (UshortSteam_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Packet::UshortSteam::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Packet/PayloadStatus:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Packet/UshortSteam:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Packet::UshortSteam::_interface_repository_id (void) const
{
  return "IDL:Packet/UshortSteam:1.0";
}

::CORBA::Boolean
Packet::UshortSteam::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Packet_UshortSteam (
    ::CORBA::tk_objref,
    "IDL:Packet/UshortSteam:1.0",
    "UshortSteam");
  

namespace Packet
{
  ::CORBA::TypeCode_ptr const _tc_UshortSteam =
    &_tao_tc_Packet_UshortSteam;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Packet::PayloadStatus>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Packet
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PayloadStatus_ptr _tao_elem)
  {
    PayloadStatus_ptr _tao_objptr =
      PayloadStatus::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PayloadStatus_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PayloadStatus>::insert (
        _tao_any,
        PayloadStatus::_tao_any_destructor,
        _tc_PayloadStatus,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PayloadStatus_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PayloadStatus>::extract (
          _tao_any,
          PayloadStatus::_tao_any_destructor,
          _tc_PayloadStatus,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::PayloadStatus_ptr _tao_elem)
{
  Packet::PayloadStatus_ptr _tao_objptr =
    Packet::PayloadStatus::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::PayloadStatus_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Packet::PayloadStatus>::insert (
      _tao_any,
      Packet::PayloadStatus::_tao_any_destructor,
      Packet::_tc_PayloadStatus,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Packet::PayloadStatus_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Packet::PayloadStatus>::extract (
        _tao_any,
        Packet::PayloadStatus::_tao_any_destructor,
        Packet::_tc_PayloadStatus,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Packet::PayloadControl>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Packet
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PayloadControl_ptr _tao_elem)
  {
    PayloadControl_ptr _tao_objptr =
      PayloadControl::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PayloadControl_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PayloadControl>::insert (
        _tao_any,
        PayloadControl::_tao_any_destructor,
        _tc_PayloadControl,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PayloadControl_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PayloadControl>::extract (
          _tao_any,
          PayloadControl::_tao_any_destructor,
          _tc_PayloadControl,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::PayloadControl_ptr _tao_elem)
{
  Packet::PayloadControl_ptr _tao_objptr =
    Packet::PayloadControl::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::PayloadControl_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Packet::PayloadControl>::insert (
      _tao_any,
      Packet::PayloadControl::_tao_any_destructor,
      Packet::_tc_PayloadControl,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Packet::PayloadControl_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Packet::PayloadControl>::extract (
        _tao_any,
        Packet::PayloadControl::_tao_any_destructor,
        Packet::_tc_PayloadControl,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Packet
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Packet::StreamControlType &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Packet::StreamControlType *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Packet::StreamControlType>::insert_copy (
          _tao_any,
          ::Packet::StreamControlType::_tao_any_destructor,
          ::Packet::_tc_StreamControlType,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      Packet::StreamControlType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Packet::StreamControlType>::insert (
        _tao_any,
        ::Packet::StreamControlType::_tao_any_destructor,
        ::Packet::_tc_StreamControlType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Packet::StreamControlType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Packet::StreamControlType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Packet::StreamControlType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Packet::StreamControlType>::extract (
          _tao_any,
          ::Packet::StreamControlType::_tao_any_destructor,
          ::Packet::_tc_StreamControlType,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Packet::StreamControlType &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Packet::StreamControlType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Packet::StreamControlType>::insert_copy (
        _tao_any,
        Packet::StreamControlType::_tao_any_destructor,
        Packet::_tc_StreamControlType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::StreamControlType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Packet::StreamControlType>::insert (
      _tao_any,
      Packet::StreamControlType::_tao_any_destructor,
      Packet::_tc_StreamControlType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Packet::StreamControlType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Packet::StreamControlType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Packet::StreamControlType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Packet::StreamControlType>::extract (
        _tao_any,
        Packet::StreamControlType::_tao_any_destructor,
        Packet::_tc_StreamControlType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Packet::UnableToComplete>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Packet
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Packet::UnableToComplete &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Packet::UnableToComplete>::insert_copy (
        _tao_any,
        ::Packet::UnableToComplete::_tao_any_destructor,
        ::Packet::_tc_UnableToComplete,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Packet::UnableToComplete *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Packet::UnableToComplete>::insert (
        _tao_any,
        ::Packet::UnableToComplete::_tao_any_destructor,
        ::Packet::_tc_UnableToComplete,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Packet::UnableToComplete *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Packet::UnableToComplete *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Packet::UnableToComplete *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Packet::UnableToComplete>::extract (
          _tao_any,
          ::Packet::UnableToComplete::_tao_any_destructor,
          ::Packet::_tc_UnableToComplete,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Packet::UnableToComplete &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Packet::UnableToComplete>::insert_copy (
      _tao_any,
      Packet::UnableToComplete::_tao_any_destructor,
      Packet::_tc_UnableToComplete,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::UnableToComplete *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Packet::UnableToComplete>::insert (
      _tao_any,
      Packet::UnableToComplete::_tao_any_destructor,
      Packet::_tc_UnableToComplete,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Packet::UnableToComplete *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Packet::UnableToComplete *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Packet::UnableToComplete *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Packet::UnableToComplete>::extract (
        _tao_any,
        Packet::UnableToComplete::_tao_any_destructor,
        Packet::_tc_UnableToComplete,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Packet::OctetStream>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Packet
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      OctetStream_ptr _tao_elem)
  {
    OctetStream_ptr _tao_objptr =
      OctetStream::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      OctetStream_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<OctetStream>::insert (
        _tao_any,
        OctetStream::_tao_any_destructor,
        _tc_OctetStream,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      OctetStream_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<OctetStream>::extract (
          _tao_any,
          OctetStream::_tao_any_destructor,
          _tc_OctetStream,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::OctetStream_ptr _tao_elem)
{
  Packet::OctetStream_ptr _tao_objptr =
    Packet::OctetStream::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::OctetStream_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Packet::OctetStream>::insert (
      _tao_any,
      Packet::OctetStream::_tao_any_destructor,
      Packet::_tc_OctetStream,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Packet::OctetStream_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Packet::OctetStream>::extract (
        _tao_any,
        Packet::OctetStream::_tao_any_destructor,
        Packet::_tc_OctetStream,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Packet::UshortSteam>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Packet
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UshortSteam_ptr _tao_elem)
  {
    UshortSteam_ptr _tao_objptr =
      UshortSteam::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UshortSteam_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<UshortSteam>::insert (
        _tao_any,
        UshortSteam::_tao_any_destructor,
        _tc_UshortSteam,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      UshortSteam_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<UshortSteam>::extract (
          _tao_any,
          UshortSteam::_tao_any_destructor,
          _tc_UshortSteam,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::UshortSteam_ptr _tao_elem)
{
  Packet::UshortSteam_ptr _tao_objptr =
    Packet::UshortSteam::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Packet::UshortSteam_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Packet::UshortSteam>::insert (
      _tao_any,
      Packet::UshortSteam::_tao_any_destructor,
      Packet::_tc_UshortSteam,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Packet::UshortSteam_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Packet::UshortSteam>::extract (
        _tao_any,
        Packet::UshortSteam::_tao_any_destructor,
        Packet::_tc_UshortSteam,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Packet::PayloadStatus_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Packet::PayloadStatus_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Packet::PayloadStatus RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Packet__TAO_PayloadStatus_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Packet::PayloadControl_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Packet::PayloadControl_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Packet::PayloadControl RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Packet__TAO_PayloadControl_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Packet::StreamControlType &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.endOfStream)) &&
    (strm << _tao_aggregate.streamed) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.SequenceNumber)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.purge));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Packet::StreamControlType &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.endOfStream)) &&
    (strm >> _tao_aggregate.streamed) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.SequenceNumber)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.purge));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Packet::UnableToComplete &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.payloadSent) &&
        (strm << _tao_aggregate.errorCode)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Packet::UnableToComplete &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.payloadSent) &&
    (strm >> _tao_aggregate.errorCode)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Packet::OctetStream_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Packet::OctetStream_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Packet::OctetStream RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Packet__TAO_OctetStream_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Packet::UshortSteam_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Packet::UshortSteam_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Packet::UshortSteam RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Packet__TAO_UshortSteam_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



