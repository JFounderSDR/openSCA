// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_PORTTYPESC_9VXWDU_H_
#define _TAO_IDL_PORTTYPESC_9VXWDU_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace PortTypes
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_WSTRINGSEQUENCE_CH_)
#define _PORTTYPES_WSTRINGSEQUENCE_CH_

  class WstringSequence;

  typedef
    ::TAO_VarSeq_Var_T<
        WstringSequence
      >
    WstringSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        WstringSequence
      >
    WstringSequence_out;

  class  WstringSequence
    : public
        ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
  {
  public:
    WstringSequence (void);
    WstringSequence ( ::CORBA::ULong max);
    WstringSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::WChar ** buffer, 
      ::CORBA::Boolean release = false);
    WstringSequence (const WstringSequence &);
    virtual ~WstringSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef WstringSequence_var _var_type;
    typedef WstringSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_WstringSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_BOOLEANSEQUENCE_CH_)
#define _PORTTYPES_BOOLEANSEQUENCE_CH_

  class BooleanSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        BooleanSequence
      >
    BooleanSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        BooleanSequence
      >
    BooleanSequence_out;

  class  BooleanSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Boolean
          >
  {
  public:
    BooleanSequence (void);
    BooleanSequence ( ::CORBA::ULong max);
    BooleanSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Boolean* buffer, 
      ::CORBA::Boolean release = false);
    BooleanSequence (const BooleanSequence &);
    virtual ~BooleanSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef BooleanSequence_var _var_type;
    typedef BooleanSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_BooleanSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_CHARSEQUENCE_CH_)
#define _PORTTYPES_CHARSEQUENCE_CH_

  class CharSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        CharSequence
      >
    CharSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        CharSequence
      >
    CharSequence_out;

  class  CharSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Char
          >
  {
  public:
    CharSequence (void);
    CharSequence ( ::CORBA::ULong max);
    CharSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char* buffer, 
      ::CORBA::Boolean release = false);
    CharSequence (const CharSequence &);
    virtual ~CharSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef CharSequence_var _var_type;
    typedef CharSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_CharSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_DOUBLESEQUENCE_CH_)
#define _PORTTYPES_DOUBLESEQUENCE_CH_

  class DoubleSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        DoubleSequence
      >
    DoubleSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        DoubleSequence
      >
    DoubleSequence_out;

  class  DoubleSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Double
          >
  {
  public:
    DoubleSequence (void);
    DoubleSequence ( ::CORBA::ULong max);
    DoubleSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Double* buffer, 
      ::CORBA::Boolean release = false);
    DoubleSequence (const DoubleSequence &);
    virtual ~DoubleSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef DoubleSequence_var _var_type;
    typedef DoubleSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_DoubleSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_LONGDOUBLESEQUENCE_CH_)
#define _PORTTYPES_LONGDOUBLESEQUENCE_CH_

  class LongDoubleSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongDoubleSequence
      >
    LongDoubleSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        LongDoubleSequence
      >
    LongDoubleSequence_out;

  class  LongDoubleSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::LongDouble
          >
  {
  public:
    LongDoubleSequence (void);
    LongDoubleSequence ( ::CORBA::ULong max);
    LongDoubleSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::LongDouble* buffer, 
      ::CORBA::Boolean release = false);
    LongDoubleSequence (const LongDoubleSequence &);
    virtual ~LongDoubleSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LongDoubleSequence_var _var_type;
    typedef LongDoubleSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_LongDoubleSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_LONGLONGSEQUENCE_CH_)
#define _PORTTYPES_LONGLONGSEQUENCE_CH_

  class LongLongSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongLongSequence
      >
    LongLongSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        LongLongSequence
      >
    LongLongSequence_out;

  class  LongLongSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::LongLong
          >
  {
  public:
    LongLongSequence (void);
    LongLongSequence ( ::CORBA::ULong max);
    LongLongSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::LongLong* buffer, 
      ::CORBA::Boolean release = false);
    LongLongSequence (const LongLongSequence &);
    virtual ~LongLongSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LongLongSequence_var _var_type;
    typedef LongLongSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_LongLongSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_LONGSEQUENCE_CH_)
#define _PORTTYPES_LONGSEQUENCE_CH_

  class LongSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        LongSequence
      >
    LongSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        LongSequence
      >
    LongSequence_out;

  class  LongSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Long
          >
  {
  public:
    LongSequence (void);
    LongSequence ( ::CORBA::ULong max);
    LongSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer, 
      ::CORBA::Boolean release = false);
    LongSequence (const LongSequence &);
    virtual ~LongSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LongSequence_var _var_type;
    typedef LongSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_LongSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_SHORTSEQUENCE_CH_)
#define _PORTTYPES_SHORTSEQUENCE_CH_

  class ShortSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        ShortSequence
      >
    ShortSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        ShortSequence
      >
    ShortSequence_out;

  class  ShortSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Short
          >
  {
  public:
    ShortSequence (void);
    ShortSequence ( ::CORBA::ULong max);
    ShortSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Short* buffer, 
      ::CORBA::Boolean release = false);
    ShortSequence (const ShortSequence &);
    virtual ~ShortSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ShortSequence_var _var_type;
    typedef ShortSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_ShortSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_ULONGLONGSEQUENCE_CH_)
#define _PORTTYPES_ULONGLONGSEQUENCE_CH_

  class UlongLongSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        UlongLongSequence
      >
    UlongLongSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        UlongLongSequence
      >
    UlongLongSequence_out;

  class  UlongLongSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::ULongLong
          >
  {
  public:
    UlongLongSequence (void);
    UlongLongSequence ( ::CORBA::ULong max);
    UlongLongSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULongLong* buffer, 
      ::CORBA::Boolean release = false);
    UlongLongSequence (const UlongLongSequence &);
    virtual ~UlongLongSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UlongLongSequence_var _var_type;
    typedef UlongLongSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_UlongLongSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_ULONGSEQUENCE_CH_)
#define _PORTTYPES_ULONGSEQUENCE_CH_

  class UlongSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        UlongSequence
      >
    UlongSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        UlongSequence
      >
    UlongSequence_out;

  class  UlongSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::ULong
          >
  {
  public:
    UlongSequence (void);
    UlongSequence ( ::CORBA::ULong max);
    UlongSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULong* buffer, 
      ::CORBA::Boolean release = false);
    UlongSequence (const UlongSequence &);
    virtual ~UlongSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UlongSequence_var _var_type;
    typedef UlongSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_UlongSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_USHORTSEQUENCE_CH_)
#define _PORTTYPES_USHORTSEQUENCE_CH_

  class UshortSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        UshortSequence
      >
    UshortSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        UshortSequence
      >
    UshortSequence_out;

  class  UshortSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::UShort
          >
  {
  public:
    UshortSequence (void);
    UshortSequence ( ::CORBA::ULong max);
    UshortSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer, 
      ::CORBA::Boolean release = false);
    UshortSequence (const UshortSequence &);
    virtual ~UshortSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UshortSequence_var _var_type;
    typedef UshortSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_UshortSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_WCHARSEQUENCE_CH_)
#define _PORTTYPES_WCHARSEQUENCE_CH_

  class WcharSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        WcharSequence
      >
    WcharSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        WcharSequence
      >
    WcharSequence_out;

  class  WcharSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::WChar
          >
  {
  public:
    WcharSequence (void);
    WcharSequence ( ::CORBA::ULong max);
    WcharSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::WChar* buffer, 
      ::CORBA::Boolean release = false);
    WcharSequence (const WcharSequence &);
    virtual ~WcharSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef WcharSequence_var _var_type;
    typedef WcharSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_WcharSequence;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTTYPES_FLOATSEQUENCE_CH_)
#define _PORTTYPES_FLOATSEQUENCE_CH_

  class FloatSequence;

  typedef
    ::TAO_FixedSeq_Var_T<
        FloatSequence
      >
    FloatSequence_var;

  typedef
    ::TAO_Seq_Out_T<
        FloatSequence
      >
    FloatSequence_out;

  class  FloatSequence
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Float
          >
  {
  public:
    FloatSequence (void);
    FloatSequence ( ::CORBA::ULong max);
    FloatSequence (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Float* buffer, 
      ::CORBA::Boolean release = false);
    FloatSequence (const FloatSequence &);
    virtual ~FloatSequence (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef FloatSequence_var _var_type;
    typedef FloatSequence_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_FloatSequence;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module PortTypes

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::WstringSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::WstringSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::BooleanSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::BooleanSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::CharSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::CharSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::DoubleSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::DoubleSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::LongDoubleSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::LongDoubleSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::LongLongSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::LongLongSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::LongSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::LongSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::ShortSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::ShortSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::UlongLongSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::UlongLongSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::UlongSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::UlongSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::UshortSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::UshortSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::WcharSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::WcharSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortTypes::FloatSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::PortTypes::FloatSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::WstringSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::WstringSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::WstringSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::WstringSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::WstringSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::WstringSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::WstringSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::WstringSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::BooleanSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::BooleanSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::BooleanSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::BooleanSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::BooleanSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::BooleanSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::BooleanSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::BooleanSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::CharSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::CharSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::CharSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::CharSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::CharSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::CharSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::CharSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::CharSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::DoubleSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::DoubleSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::DoubleSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::DoubleSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::DoubleSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::DoubleSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::DoubleSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::DoubleSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::LongDoubleSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::LongDoubleSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::LongDoubleSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::LongDoubleSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::LongDoubleSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::LongDoubleSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::LongDoubleSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::LongDoubleSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::LongLongSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::LongLongSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::LongLongSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::LongLongSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::LongLongSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::LongLongSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::LongLongSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::LongLongSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::LongSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::LongSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::LongSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::LongSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::LongSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::LongSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::LongSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::LongSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::ShortSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::ShortSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::ShortSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::ShortSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::ShortSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::ShortSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::ShortSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::ShortSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::UlongLongSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::UlongLongSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::UlongLongSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::UlongLongSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::UlongLongSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::UlongLongSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::UlongLongSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::UlongLongSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::UlongSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::UlongSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::UlongSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::UlongSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::UlongSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::UlongSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::UlongSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::UlongSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::UshortSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::UshortSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::UshortSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::UshortSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::UshortSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::UshortSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::UshortSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::UshortSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::WcharSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::WcharSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::WcharSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::WcharSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::WcharSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::WcharSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::WcharSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::WcharSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortTypes
{
   void operator<<= ( ::CORBA::Any &, const ::PortTypes::FloatSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::PortTypes::FloatSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortTypes::FloatSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortTypes::FloatSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const PortTypes::FloatSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, PortTypes::FloatSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortTypes::FloatSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortTypes::FloatSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_WstringSequence_H_
#define _TAO_CDR_OP_PortTypes_WstringSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::WstringSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::WstringSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_WstringSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_BooleanSequence_H_
#define _TAO_CDR_OP_PortTypes_BooleanSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::BooleanSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::BooleanSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_BooleanSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_CharSequence_H_
#define _TAO_CDR_OP_PortTypes_CharSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::CharSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::CharSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_CharSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_DoubleSequence_H_
#define _TAO_CDR_OP_PortTypes_DoubleSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::DoubleSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::DoubleSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_DoubleSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_LongDoubleSequence_H_
#define _TAO_CDR_OP_PortTypes_LongDoubleSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::LongDoubleSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::LongDoubleSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_LongDoubleSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_LongLongSequence_H_
#define _TAO_CDR_OP_PortTypes_LongLongSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::LongLongSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::LongLongSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_LongLongSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_LongSequence_H_
#define _TAO_CDR_OP_PortTypes_LongSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::LongSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::LongSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_LongSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_ShortSequence_H_
#define _TAO_CDR_OP_PortTypes_ShortSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::ShortSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::ShortSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_ShortSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_UlongLongSequence_H_
#define _TAO_CDR_OP_PortTypes_UlongLongSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::UlongLongSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::UlongLongSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_UlongLongSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_UlongSequence_H_
#define _TAO_CDR_OP_PortTypes_UlongSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::UlongSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::UlongSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_UlongSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_UshortSequence_H_
#define _TAO_CDR_OP_PortTypes_UshortSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::UshortSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::UshortSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_UshortSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_WcharSequence_H_
#define _TAO_CDR_OP_PortTypes_WcharSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::WcharSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::WcharSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_WcharSequence_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortTypes_FloatSequence_H_
#define _TAO_CDR_OP_PortTypes_FloatSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortTypes::FloatSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortTypes::FloatSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_PortTypes_FloatSequence_H_ */

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581
#if defined (__ACE_INLINE__)
#include "PortTypesC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

