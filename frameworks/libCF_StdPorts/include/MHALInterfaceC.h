// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_MHALINTERFACEC_RNPOZR_H_
#define _TAO_IDL_MHALINTERFACEC_RNPOZR_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "../include/JTRSCorbaTypesC.h"
#include "../include/PacketC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace MHAL
{

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_MHAL_MHALPACKETCONSUMER__VAR_OUT_CH_)
#define _MHAL_MHALPACKETCONSUMER__VAR_OUT_CH_

  class MHALPacketConsumer;
  typedef MHALPacketConsumer *MHALPacketConsumer_ptr;

  typedef
    TAO_Objref_Var_T<
        MHALPacketConsumer
      >
    MHALPacketConsumer_var;
  
  typedef
    TAO_Objref_Out_T<
        MHALPacketConsumer
      >
    MHALPacketConsumer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class  MHALPacketConsumer
    : public virtual ::Packet::PayloadStatus
  
  {
  public:
    friend class TAO::Narrow_Utils<MHALPacketConsumer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef MHALPacketConsumer_ptr _ptr_type;
    typedef MHALPacketConsumer_var _var_type;
    typedef MHALPacketConsumer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static MHALPacketConsumer_ptr _duplicate (MHALPacketConsumer_ptr obj);

    static void _tao_release (MHALPacketConsumer_ptr obj);

    static MHALPacketConsumer_ptr _narrow (::CORBA::Object_ptr obj);
    static MHALPacketConsumer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MHALPacketConsumer_ptr _nil (void);

    virtual void pushPacket (
      ::CORBA::UShort logicalDest,
      const ::JTRS::OctetSequence & payload);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_MHALPacketConsumer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    MHALPacketConsumer (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void MHAL_MHALPacketConsumer_setup_collocation (void);

    // Concrete non-local interface only.
    MHALPacketConsumer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    MHALPacketConsumer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~MHALPacketConsumer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    MHALPacketConsumer (const MHALPacketConsumer &);

    void operator= (const MHALPacketConsumer &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_MHALPacketConsumer;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_MHAL_PF_MHALPACKETCONSUMER__VAR_OUT_CH_)
#define _MHAL_PF_MHALPACKETCONSUMER__VAR_OUT_CH_

  class PF_MHALPacketConsumer;
  typedef PF_MHALPacketConsumer *PF_MHALPacketConsumer_ptr;

  typedef
    TAO_Objref_Var_T<
        PF_MHALPacketConsumer
      >
    PF_MHALPacketConsumer_var;
  
  typedef
    TAO_Objref_Out_T<
        PF_MHALPacketConsumer
      >
    PF_MHALPacketConsumer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class  PF_MHALPacketConsumer
    : public virtual ::MHAL::MHALPacketConsumer
  
  {
  public:
    friend class TAO::Narrow_Utils<PF_MHALPacketConsumer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PF_MHALPacketConsumer_ptr _ptr_type;
    typedef PF_MHALPacketConsumer_var _var_type;
    typedef PF_MHALPacketConsumer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PF_MHALPacketConsumer_ptr _duplicate (PF_MHALPacketConsumer_ptr obj);

    static void _tao_release (PF_MHALPacketConsumer_ptr obj);

    static PF_MHALPacketConsumer_ptr _narrow (::CORBA::Object_ptr obj);
    static PF_MHALPacketConsumer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PF_MHALPacketConsumer_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

    typedef ::CORBA::UShort MHALPhysicalDestination;
    typedef ::CORBA::UShort_out MHALPhysicalDestination_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_MHALPhysicalDestination;

    virtual void addTxRoute (
      ::CORBA::UShort logicalDest,
      ::MHAL::PF_MHALPacketConsumer::MHALPhysicalDestination physicalDest);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PF_MHALPacketConsumer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PF_MHALPacketConsumer (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void MHAL_PF_MHALPacketConsumer_setup_collocation (void);

    // Concrete non-local interface only.
    PF_MHALPacketConsumer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PF_MHALPacketConsumer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PF_MHALPacketConsumer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PF_MHALPacketConsumer (const PF_MHALPacketConsumer &);

    void operator= (const PF_MHALPacketConsumer &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_PF_MHALPacketConsumer;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_MHAL_WF_MHALPACKETCONSUMER__VAR_OUT_CH_)
#define _MHAL_WF_MHALPACKETCONSUMER__VAR_OUT_CH_

  class WF_MHALPacketConsumer;
  typedef WF_MHALPacketConsumer *WF_MHALPacketConsumer_ptr;

  typedef
    TAO_Objref_Var_T<
        WF_MHALPacketConsumer
      >
    WF_MHALPacketConsumer_var;
  
  typedef
    TAO_Objref_Out_T<
        WF_MHALPacketConsumer
      >
    WF_MHALPacketConsumer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class  WF_MHALPacketConsumer
    : public virtual ::MHAL::MHALPacketConsumer
  
  {
  public:
    friend class TAO::Narrow_Utils<WF_MHALPacketConsumer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef WF_MHALPacketConsumer_ptr _ptr_type;
    typedef WF_MHALPacketConsumer_var _var_type;
    typedef WF_MHALPacketConsumer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static WF_MHALPacketConsumer_ptr _duplicate (WF_MHALPacketConsumer_ptr obj);

    static void _tao_release (WF_MHALPacketConsumer_ptr obj);

    static WF_MHALPacketConsumer_ptr _narrow (::CORBA::Object_ptr obj);
    static WF_MHALPacketConsumer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static WF_MHALPacketConsumer_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_MHAL_WF_MHALPACKETCONSUMER_RXROUTESEQUENCE_CH_)
#define _MHAL_WF_MHALPACKETCONSUMER_RXROUTESEQUENCE_CH_

    class RxRouteSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          RxRouteSequence
        >
      RxRouteSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          RxRouteSequence
        >
      RxRouteSequence_out;

    class  RxRouteSequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::UShort
            >
    {
    public:
      RxRouteSequence (void);
      RxRouteSequence ( ::CORBA::ULong max);
      RxRouteSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::UShort* buffer, 
        ::CORBA::Boolean release = false);
      RxRouteSequence (const RxRouteSequence &);
      virtual ~RxRouteSequence (void);
      

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef RxRouteSequence_var _var_type;
      typedef RxRouteSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_RxRouteSequence;

    virtual ::MHAL::WF_MHALPacketConsumer::RxRouteSequence * getRxRoutes (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_WF_MHALPacketConsumer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    WF_MHALPacketConsumer (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void MHAL_WF_MHALPacketConsumer_setup_collocation (void);

    // Concrete non-local interface only.
    WF_MHALPacketConsumer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    WF_MHALPacketConsumer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~WF_MHALPacketConsumer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    WF_MHALPacketConsumer (const WF_MHALPacketConsumer &);

    void operator= (const WF_MHALPacketConsumer &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern  ::CORBA::TypeCode_ptr const _tc_WF_MHALPacketConsumer;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module MHAL

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_MHAL_MHALPACKETCONSUMER__ARG_TRAITS_)
#define _MHAL_MHALPACKETCONSUMER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::MHAL::MHALPacketConsumer>
    : public
        Object_Arg_Traits_T<
            ::MHAL::MHALPacketConsumer_ptr,
            ::MHAL::MHALPacketConsumer_var,
            ::MHAL::MHALPacketConsumer_out,
            TAO::Objref_Traits<MHAL::MHALPacketConsumer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_MHAL_PF_MHALPACKETCONSUMER__ARG_TRAITS_)
#define _MHAL_PF_MHALPACKETCONSUMER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::MHAL::PF_MHALPacketConsumer>
    : public
        Object_Arg_Traits_T<
            ::MHAL::PF_MHALPacketConsumer_ptr,
            ::MHAL::PF_MHALPacketConsumer_var,
            ::MHAL::PF_MHALPacketConsumer_out,
            TAO::Objref_Traits<MHAL::PF_MHALPacketConsumer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_MHAL_WF_MHALPACKETCONSUMER__ARG_TRAITS_)
#define _MHAL_WF_MHALPACKETCONSUMER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::MHAL::WF_MHALPacketConsumer>
    : public
        Object_Arg_Traits_T<
            ::MHAL::WF_MHALPacketConsumer_ptr,
            ::MHAL::WF_MHALPacketConsumer_var,
            ::MHAL::WF_MHALPacketConsumer_out,
            TAO::Objref_Traits<MHAL::WF_MHALPacketConsumer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::MHAL::WF_MHALPacketConsumer::RxRouteSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::MHAL::WF_MHALPacketConsumer::RxRouteSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern 
TAO::Collocation_Proxy_Broker *
(*MHAL__TAO_MHALPacketConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern 
TAO::Collocation_Proxy_Broker *
(*MHAL__TAO_PF_MHALPacketConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern 
TAO::Collocation_Proxy_Broker *
(*MHAL__TAO_WF_MHALPacketConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MHAL_MHALPACKETCONSUMER__TRAITS_)
#define _MHAL_MHALPACKETCONSUMER__TRAITS_

  template<>
  struct  Objref_Traits< ::MHAL::MHALPacketConsumer>
  {
    static ::MHAL::MHALPacketConsumer_ptr duplicate (
        ::MHAL::MHALPacketConsumer_ptr p);
    static void release (
        ::MHAL::MHALPacketConsumer_ptr p);
    static ::MHAL::MHALPacketConsumer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MHAL::MHALPacketConsumer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MHAL_PF_MHALPACKETCONSUMER__TRAITS_)
#define _MHAL_PF_MHALPACKETCONSUMER__TRAITS_

  template<>
  struct  Objref_Traits< ::MHAL::PF_MHALPacketConsumer>
  {
    static ::MHAL::PF_MHALPacketConsumer_ptr duplicate (
        ::MHAL::PF_MHALPacketConsumer_ptr p);
    static void release (
        ::MHAL::PF_MHALPacketConsumer_ptr p);
    static ::MHAL::PF_MHALPacketConsumer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MHAL::PF_MHALPacketConsumer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MHAL_WF_MHALPACKETCONSUMER__TRAITS_)
#define _MHAL_WF_MHALPACKETCONSUMER__TRAITS_

  template<>
  struct  Objref_Traits< ::MHAL::WF_MHALPacketConsumer>
  {
    static ::MHAL::WF_MHALPacketConsumer_ptr duplicate (
        ::MHAL::WF_MHALPacketConsumer_ptr p);
    static void release (
        ::MHAL::WF_MHALPacketConsumer_ptr p);
    static ::MHAL::WF_MHALPacketConsumer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MHAL::WF_MHALPacketConsumer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MHAL
{
   void operator<<= ( ::CORBA::Any &, MHALPacketConsumer_ptr); // copying
   void operator<<= ( ::CORBA::Any &, MHALPacketConsumer_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MHALPacketConsumer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, MHAL::MHALPacketConsumer_ptr); // copying
 void operator<<= (::CORBA::Any &, MHAL::MHALPacketConsumer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MHAL::MHALPacketConsumer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MHAL
{
   void operator<<= ( ::CORBA::Any &, PF_MHALPacketConsumer_ptr); // copying
   void operator<<= ( ::CORBA::Any &, PF_MHALPacketConsumer_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PF_MHALPacketConsumer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, MHAL::PF_MHALPacketConsumer_ptr); // copying
 void operator<<= (::CORBA::Any &, MHAL::PF_MHALPacketConsumer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MHAL::PF_MHALPacketConsumer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MHAL
{
   void operator<<= ( ::CORBA::Any &, WF_MHALPacketConsumer_ptr); // copying
   void operator<<= ( ::CORBA::Any &, WF_MHALPacketConsumer_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, WF_MHALPacketConsumer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, MHAL::WF_MHALPacketConsumer_ptr); // copying
 void operator<<= (::CORBA::Any &, MHAL::WF_MHALPacketConsumer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MHAL::WF_MHALPacketConsumer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MHAL
{
   void operator<<= ( ::CORBA::Any &, const ::MHAL::WF_MHALPacketConsumer::RxRouteSequence &); // copying version
   void operator<<= ( ::CORBA::Any &, ::MHAL::WF_MHALPacketConsumer::RxRouteSequence*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::MHAL::WF_MHALPacketConsumer::RxRouteSequence *&); // deprecated
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::MHAL::WF_MHALPacketConsumer::RxRouteSequence *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const MHAL::WF_MHALPacketConsumer::RxRouteSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, MHAL::WF_MHALPacketConsumer::RxRouteSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MHAL::WF_MHALPacketConsumer::RxRouteSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const MHAL::WF_MHALPacketConsumer::RxRouteSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MHAL::MHALPacketConsumer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, MHAL::MHALPacketConsumer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MHAL::PF_MHALPacketConsumer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, MHAL::PF_MHALPacketConsumer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const MHAL::WF_MHALPacketConsumer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, MHAL::WF_MHALPacketConsumer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_MHAL_WF_MHALPacketConsumer_RxRouteSequence_H_
#define _TAO_CDR_OP_MHAL_WF_MHALPacketConsumer_RxRouteSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MHAL::WF_MHALPacketConsumer::RxRouteSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MHAL::WF_MHALPacketConsumer::RxRouteSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_MHAL_WF_MHALPacketConsumer_RxRouteSequence_H_ */

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581
#if defined (__ACE_INLINE__)
#include "MHALInterfaceC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

