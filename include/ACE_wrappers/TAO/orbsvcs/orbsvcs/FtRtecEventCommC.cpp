// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FtRtecEventCommC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FtRtecEventCommC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FTRTECEVENTCOMM_OBJECTID_CS_)
#define _FTRTECEVENTCOMM_OBJECTID_CS_

FtRtecEventComm::ObjectId::ObjectId (void)
{}

FtRtecEventComm::ObjectId::ObjectId (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

FtRtecEventComm::ObjectId::ObjectId (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

FtRtecEventComm::ObjectId::ObjectId (
    const ObjectId &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

FtRtecEventComm::ObjectId::~ObjectId (void)
{}

void FtRtecEventComm::ObjectId::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ObjectId * _tao_tmp_pointer =
    static_cast<ObjectId *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FtRtecEventComm_ObjectId_GUARD
#define _TAO_TYPECODE_FtRtecEventComm_ObjectId_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FtRtecEventComm_ObjectId_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FtRtecEventComm_ObjectId_0 =
        &FtRtecEventComm_ObjectId_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FtRtecEventComm_ObjectId_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventComm_ObjectId (
    ::CORBA::tk_alias,
    "IDL:FtRtecEventComm/ObjectId:1.0",
    "ObjectId",
    &TAO::TypeCode::tc_FtRtecEventComm_ObjectId_0);
  

namespace FtRtecEventComm
{
  ::CORBA::TypeCode_ptr const _tc_ObjectId =
    &_tao_tc_FtRtecEventComm_ObjectId;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FtRtecEventComm::InvalidObjectID::InvalidObjectID (void)
  : ::CORBA::UserException (
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        "InvalidObjectID"
      )
{
}

FtRtecEventComm::InvalidObjectID::~InvalidObjectID (void)
{
}

FtRtecEventComm::InvalidObjectID::InvalidObjectID (const ::FtRtecEventComm::InvalidObjectID &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FtRtecEventComm::InvalidObjectID&
FtRtecEventComm::InvalidObjectID::operator= (const ::FtRtecEventComm::InvalidObjectID &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FtRtecEventComm::InvalidObjectID::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidObjectID *_tao_tmp_pointer =
    static_cast<InvalidObjectID *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FtRtecEventComm::InvalidObjectID *
FtRtecEventComm::InvalidObjectID::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidObjectID *> (_tao_excp);
}

const FtRtecEventComm::InvalidObjectID *
FtRtecEventComm::InvalidObjectID::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidObjectID *> (_tao_excp);
}

::CORBA::Exception *FtRtecEventComm::InvalidObjectID::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FtRtecEventComm::InvalidObjectID, 0);
  return retval;
}

::CORBA::Exception *
FtRtecEventComm::InvalidObjectID::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FtRtecEventComm::InvalidObjectID (*this),
      0
    );
  return result;
}

void FtRtecEventComm::InvalidObjectID::_raise (void) const
{
  throw *this;
}

void FtRtecEventComm::InvalidObjectID::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FtRtecEventComm::InvalidObjectID::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FtRtecEventComm::InvalidObjectID::_tao_type (void) const
{
  return ::FtRtecEventComm::_tc_InvalidObjectID;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FtRtecEventComm_InvalidObjectID = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventComm_InvalidObjectID (
  ::CORBA::tk_except,
  "IDL:FtRtecEventComm/InvalidObjectID:1.0",
  "InvalidObjectID",
  _tao_fields_FtRtecEventComm_InvalidObjectID,
  0);


namespace FtRtecEventComm
{
  ::CORBA::TypeCode_ptr const _tc_InvalidObjectID =
    &_tao_tc_FtRtecEventComm_InvalidObjectID;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FtRtecEventComm::PushConsumer.

FtRtecEventComm::PushConsumer_ptr
TAO::Objref_Traits<FtRtecEventComm::PushConsumer>::duplicate (
    FtRtecEventComm::PushConsumer_ptr p)
{
  return FtRtecEventComm::PushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<FtRtecEventComm::PushConsumer>::release (
    FtRtecEventComm::PushConsumer_ptr p)
{
  ::CORBA::release (p);
}

FtRtecEventComm::PushConsumer_ptr
TAO::Objref_Traits<FtRtecEventComm::PushConsumer>::nil (void)
{
  return FtRtecEventComm::PushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FtRtecEventComm::PushConsumer>::marshal (
    const FtRtecEventComm::PushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FtRtecEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventComm::PushConsumer::push (
  const ::FtRtecEventComm::ObjectId & oid,
  const ::RtecEventComm::EventSet & data)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PushConsumer_Proxy_Broker_ == 0)
    {
      FtRtecEventComm_PushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FtRtecEventComm::ObjectId>::in_arg_val _tao_oid (oid);
  TAO::Arg_Traits< ::RtecEventComm::EventSet>::in_arg_val _tao_data (data);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_oid,
      &_tao_data
    };

  static TAO::Exception_Data
  _tao_FtRtecEventComm_PushConsumer_push_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "push",
      4,
      this->the_TAO_PushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventComm_PushConsumer_push_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/ami_cs.cpp:61

void
FtRtecEventComm::PushConsumer::sendc_push (
  ::FtRtecEventComm::AMI_PushConsumerHandler_ptr ami_handler,
  const ::FtRtecEventComm::ObjectId & oid,
  const ::RtecEventComm::EventSet & data)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PushConsumer_Proxy_Broker_ == 0)
    {
      FtRtecEventComm_PushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FtRtecEventComm::ObjectId>::in_arg_val _tao_oid (oid);
  TAO::Arg_Traits< ::RtecEventComm::EventSet>::in_arg_val _tao_data (data);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_oid,
      &_tao_data
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "push",
      4,
      this->the_TAO_PushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      ami_handler,
      &FtRtecEventComm::AMI_PushConsumerHandler::push_reply_stub
    );
}

FtRtecEventComm::PushConsumer::PushConsumer (void)
 : the_TAO_PushConsumer_Proxy_Broker_ (0)
{
  this->FtRtecEventComm_PushConsumer_setup_collocation ();
}

void
FtRtecEventComm::PushConsumer::FtRtecEventComm_PushConsumer_setup_collocation ()
{
  if (::FtRtecEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PushConsumer_Proxy_Broker_ =
        ::FtRtecEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
}

FtRtecEventComm::PushConsumer::~PushConsumer (void)
{}

void 
FtRtecEventComm::PushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  PushConsumer *_tao_tmp_pointer =
    static_cast<PushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FtRtecEventComm::PushConsumer_ptr
FtRtecEventComm::PushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushConsumer>::narrow (
        _tao_objref,
        "IDL:FtRtecEventComm/PushConsumer:1.0",
        FtRtecEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventComm::PushConsumer_ptr
FtRtecEventComm::PushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:FtRtecEventComm/PushConsumer:1.0",
        FtRtecEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventComm::PushConsumer_ptr
FtRtecEventComm::PushConsumer::_nil (void)
{
  return 0;
}

FtRtecEventComm::PushConsumer_ptr
FtRtecEventComm::PushConsumer::_duplicate (PushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FtRtecEventComm::PushConsumer::_tao_release (PushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FtRtecEventComm::PushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FtRtecEventComm::PushConsumer::_interface_repository_id (void) const
{
  return "IDL:FtRtecEventComm/PushConsumer:1.0";
}

::CORBA::Boolean
FtRtecEventComm::PushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventComm_PushConsumer (
    ::CORBA::tk_objref,
    "IDL:FtRtecEventComm/PushConsumer:1.0",
    "PushConsumer");
  

namespace FtRtecEventComm
{
  ::CORBA::TypeCode_ptr const _tc_PushConsumer =
    &_tao_tc_FtRtecEventComm_PushConsumer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FtRtecEventComm::AMI_PushConsumerHandler.

FtRtecEventComm::AMI_PushConsumerHandler_ptr
TAO::Objref_Traits<FtRtecEventComm::AMI_PushConsumerHandler>::duplicate (
    FtRtecEventComm::AMI_PushConsumerHandler_ptr p)
{
  return FtRtecEventComm::AMI_PushConsumerHandler::_duplicate (p);
}

void
TAO::Objref_Traits<FtRtecEventComm::AMI_PushConsumerHandler>::release (
    FtRtecEventComm::AMI_PushConsumerHandler_ptr p)
{
  ::CORBA::release (p);
}

FtRtecEventComm::AMI_PushConsumerHandler_ptr
TAO::Objref_Traits<FtRtecEventComm::AMI_PushConsumerHandler>::nil (void)
{
  return FtRtecEventComm::AMI_PushConsumerHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FtRtecEventComm::AMI_PushConsumerHandler>::marshal (
    const FtRtecEventComm::AMI_PushConsumerHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FtRtecEventComm__TAO_AMI_PushConsumerHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventComm::AMI_PushConsumerHandler::push (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AMI_PushConsumerHandler_Proxy_Broker_ == 0)
    {
      FtRtecEventComm_AMI_PushConsumerHandler_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_FtRtecEventComm_AMI_PushConsumerHandler_push_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "push",
      4,
      this->the_TAO_AMI_PushConsumerHandler_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventComm_AMI_PushConsumerHandler_push_exceptiondata,
      1
    );
}

void
FtRtecEventComm::AMI_PushConsumerHandler::push_reply_stub (
  TAO_InputCDR &_tao_in, 
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FtRtecEventComm::AMI_PushConsumerHandler_var _tao_reply_handler_object =
    FtRtecEventComm::AMI_PushConsumerHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->push (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] = 
      {
        {
          "IDL:FtRtecEventComm/InvalidObjectID:1.0",
          FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 1;

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0
        );
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ())
          );
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->push_excep (
          exception_holder_var
        );
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventComm::AMI_PushConsumerHandler::push_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AMI_PushConsumerHandler_Proxy_Broker_ == 0)
    {
      FtRtecEventComm_AMI_PushConsumerHandler_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_FtRtecEventComm_AMI_PushConsumerHandler_push_excep_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "push_excep",
      10,
      this->the_TAO_AMI_PushConsumerHandler_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventComm_AMI_PushConsumerHandler_push_excep_exceptiondata,
      1
    );
}

FtRtecEventComm::AMI_PushConsumerHandler::AMI_PushConsumerHandler (void)
 : the_TAO_AMI_PushConsumerHandler_Proxy_Broker_ (0)
{
  this->FtRtecEventComm_AMI_PushConsumerHandler_setup_collocation ();
}

void
FtRtecEventComm::AMI_PushConsumerHandler::FtRtecEventComm_AMI_PushConsumerHandler_setup_collocation ()
{
  if (::FtRtecEventComm__TAO_AMI_PushConsumerHandler_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_AMI_PushConsumerHandler_Proxy_Broker_ =
        ::FtRtecEventComm__TAO_AMI_PushConsumerHandler_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->Messaging_ReplyHandler_setup_collocation ();
}

FtRtecEventComm::AMI_PushConsumerHandler::~AMI_PushConsumerHandler (void)
{}

void 
FtRtecEventComm::AMI_PushConsumerHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_PushConsumerHandler *_tao_tmp_pointer =
    static_cast<AMI_PushConsumerHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FtRtecEventComm::AMI_PushConsumerHandler_ptr
FtRtecEventComm::AMI_PushConsumerHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_PushConsumerHandler>::narrow (
        _tao_objref,
        "IDL:FtRtecEventComm/AMI_PushConsumerHandler:1.0",
        FtRtecEventComm__TAO_AMI_PushConsumerHandler_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventComm::AMI_PushConsumerHandler_ptr
FtRtecEventComm::AMI_PushConsumerHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_PushConsumerHandler>::unchecked_narrow (
        _tao_objref,
        "IDL:FtRtecEventComm/AMI_PushConsumerHandler:1.0",
        FtRtecEventComm__TAO_AMI_PushConsumerHandler_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventComm::AMI_PushConsumerHandler_ptr
FtRtecEventComm::AMI_PushConsumerHandler::_nil (void)
{
  return 0;
}

FtRtecEventComm::AMI_PushConsumerHandler_ptr
FtRtecEventComm::AMI_PushConsumerHandler::_duplicate (AMI_PushConsumerHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FtRtecEventComm::AMI_PushConsumerHandler::_tao_release (AMI_PushConsumerHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FtRtecEventComm::AMI_PushConsumerHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventComm/AMI_PushConsumerHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FtRtecEventComm::AMI_PushConsumerHandler::_interface_repository_id (void) const
{
  return "IDL:FtRtecEventComm/AMI_PushConsumerHandler:1.0";
}

::CORBA::Boolean
FtRtecEventComm::AMI_PushConsumerHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventComm_AMI_PushConsumerHandler (
    ::CORBA::tk_objref,
    "IDL:FtRtecEventComm/AMI_PushConsumerHandler:1.0",
    "AMI_PushConsumerHandler");
  

namespace FtRtecEventComm
{
  ::CORBA::TypeCode_ptr const _tc_AMI_PushConsumerHandler =
    &_tao_tc_FtRtecEventComm_AMI_PushConsumerHandler;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventComm
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventComm::ObjectId &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventComm::ObjectId *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventComm::ObjectId>::insert_copy (
          _tao_any,
          ::FtRtecEventComm::ObjectId::_tao_any_destructor,
          ::FtRtecEventComm::_tc_ObjectId,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventComm::ObjectId *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventComm::ObjectId>::insert (
        _tao_any,
        ::FtRtecEventComm::ObjectId::_tao_any_destructor,
        ::FtRtecEventComm::_tc_ObjectId,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventComm::ObjectId *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventComm::ObjectId *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventComm::ObjectId *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventComm::ObjectId>::extract (
          _tao_any,
          ::FtRtecEventComm::ObjectId::_tao_any_destructor,
          ::FtRtecEventComm::_tc_ObjectId,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventComm::ObjectId &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventComm::ObjectId *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventComm::ObjectId>::insert_copy (
        _tao_any,
        FtRtecEventComm::ObjectId::_tao_any_destructor,
        FtRtecEventComm::_tc_ObjectId,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventComm::ObjectId *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventComm::ObjectId>::insert (
      _tao_any,
      FtRtecEventComm::ObjectId::_tao_any_destructor,
      FtRtecEventComm::_tc_ObjectId,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventComm::ObjectId *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventComm::ObjectId *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventComm::ObjectId *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventComm::ObjectId>::extract (
        _tao_any,
        FtRtecEventComm::ObjectId::_tao_any_destructor,
        FtRtecEventComm::_tc_ObjectId,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FtRtecEventComm::InvalidObjectID>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventComm
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventComm::InvalidObjectID &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventComm::InvalidObjectID>::insert_copy (
        _tao_any,
        ::FtRtecEventComm::InvalidObjectID::_tao_any_destructor,
        ::FtRtecEventComm::_tc_InvalidObjectID,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventComm::InvalidObjectID *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventComm::InvalidObjectID>::insert (
        _tao_any,
        ::FtRtecEventComm::InvalidObjectID::_tao_any_destructor,
        ::FtRtecEventComm::_tc_InvalidObjectID,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventComm::InvalidObjectID *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventComm::InvalidObjectID *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventComm::InvalidObjectID *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventComm::InvalidObjectID>::extract (
          _tao_any,
          ::FtRtecEventComm::InvalidObjectID::_tao_any_destructor,
          ::FtRtecEventComm::_tc_InvalidObjectID,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventComm::InvalidObjectID &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventComm::InvalidObjectID>::insert_copy (
      _tao_any,
      FtRtecEventComm::InvalidObjectID::_tao_any_destructor,
      FtRtecEventComm::_tc_InvalidObjectID,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventComm::InvalidObjectID *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventComm::InvalidObjectID>::insert (
      _tao_any,
      FtRtecEventComm::InvalidObjectID::_tao_any_destructor,
      FtRtecEventComm::_tc_InvalidObjectID,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventComm::InvalidObjectID *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventComm::InvalidObjectID *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventComm::InvalidObjectID *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventComm::InvalidObjectID>::extract (
        _tao_any,
        FtRtecEventComm::InvalidObjectID::_tao_any_destructor,
        FtRtecEventComm::_tc_InvalidObjectID,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FtRtecEventComm::PushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushConsumer_ptr _tao_elem)
  {
    PushConsumer_ptr _tao_objptr =
      PushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PushConsumer>::insert (
        _tao_any,
        PushConsumer::_tao_any_destructor,
        _tc_PushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PushConsumer>::extract (
          _tao_any,
          PushConsumer::_tao_any_destructor,
          _tc_PushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventComm::PushConsumer_ptr _tao_elem)
{
  FtRtecEventComm::PushConsumer_ptr _tao_objptr =
    FtRtecEventComm::PushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventComm::PushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FtRtecEventComm::PushConsumer>::insert (
      _tao_any,
      FtRtecEventComm::PushConsumer::_tao_any_destructor,
      FtRtecEventComm::_tc_PushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventComm::PushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FtRtecEventComm::PushConsumer>::extract (
        _tao_any,
        FtRtecEventComm::PushConsumer::_tao_any_destructor,
        FtRtecEventComm::_tc_PushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FtRtecEventComm::AMI_PushConsumerHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_PushConsumerHandler_ptr _tao_elem)
  {
    AMI_PushConsumerHandler_ptr _tao_objptr =
      AMI_PushConsumerHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_PushConsumerHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_PushConsumerHandler>::insert (
        _tao_any,
        AMI_PushConsumerHandler::_tao_any_destructor,
        _tc_AMI_PushConsumerHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_PushConsumerHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_PushConsumerHandler>::extract (
          _tao_any,
          AMI_PushConsumerHandler::_tao_any_destructor,
          _tc_AMI_PushConsumerHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventComm::AMI_PushConsumerHandler_ptr _tao_elem)
{
  FtRtecEventComm::AMI_PushConsumerHandler_ptr _tao_objptr =
    FtRtecEventComm::AMI_PushConsumerHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventComm::AMI_PushConsumerHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FtRtecEventComm::AMI_PushConsumerHandler>::insert (
      _tao_any,
      FtRtecEventComm::AMI_PushConsumerHandler::_tao_any_destructor,
      FtRtecEventComm::_tc_AMI_PushConsumerHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventComm::AMI_PushConsumerHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FtRtecEventComm::AMI_PushConsumerHandler>::extract (
        _tao_any,
        FtRtecEventComm::AMI_PushConsumerHandler::_tao_any_destructor,
        FtRtecEventComm::_tc_AMI_PushConsumerHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FtRtecEventComm_ObjectId_CPP_
#define _TAO_CDR_OP_FtRtecEventComm_ObjectId_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventComm::ObjectId &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventComm::ObjectId &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FtRtecEventComm_ObjectId_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventComm::InvalidObjectID &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FtRtecEventComm::InvalidObjectID&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventComm::PushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventComm::PushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FtRtecEventComm::PushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FtRtecEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventComm::AMI_PushConsumerHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventComm::AMI_PushConsumerHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FtRtecEventComm::AMI_PushConsumerHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FtRtecEventComm__TAO_AMI_PushConsumerHandler_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


