// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_RTECSCHEDULERS_2J93SU_CPP_
#define _TAO_IDL_RTECSCHEDULERS_2J93SU_CPP_


#include "RtecSchedulerS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "RtecSchedulerS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_RtecScheduler_Scheduler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_RtecScheduler_Scheduler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_RtecScheduler_Scheduler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48,  0, 48, 13, 48, 10,
      0, 20, 48,  5, 48, 48, 48, 48, 15, 48,
      0, 48,  8,  0,  0,  0,  0, 48, 48, 48,
     48,  0, 48, 48, 48, 48, 48, 48,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_RtecScheduler_Scheduler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 29,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 31,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 47,
      HASH_VALUE_RANGE = 45,
      DUPLICATES = 0,
      WORDLIST_SIZE = 32
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},
      {"set", &POA_RtecScheduler::Scheduler::set_skel, 0},
      {"",0,0},
      {"reset", &POA_RtecScheduler::Scheduler::reset_skel, 0},
      {"",0,0},
      {"set_seq", &POA_RtecScheduler::Scheduler::set_seq_skel, 0},
      {"get", &POA_RtecScheduler::Scheduler::get_skel, 0},
      {"reset_seq", &POA_RtecScheduler::Scheduler::reset_seq_skel, 0},
      {"_component", &POA_RtecScheduler::Scheduler::_component_skel, 0},
      {"replace_seq", &POA_RtecScheduler::Scheduler::replace_seq_skel, 0},
      {"",0,0},
      {"_non_existent", &POA_RtecScheduler::Scheduler::_non_existent_skel, 0},
      {"_repository_id", &POA_RtecScheduler::Scheduler::_repository_id_skel, 0},
      {"",0,0},
      {"priority", &POA_RtecScheduler::Scheduler::priority_skel, 0},
      {"remove_dependency", &POA_RtecScheduler::Scheduler::remove_dependency_skel, 0},
      {"_is_a", &POA_RtecScheduler::Scheduler::_is_a_skel, 0},
      {"",0,0},
      {"get_rt_info_set", &POA_RtecScheduler::Scheduler::get_rt_info_set_skel, 0},
      {"get_config_infos", &POA_RtecScheduler::Scheduler::get_config_infos_skel, 0},
      {"dispatch_configuration", &POA_RtecScheduler::Scheduler::dispatch_configuration_skel, 0},
      {"get_dependency_set", &POA_RtecScheduler::Scheduler::get_dependency_set_skel, 0},
      {"get_config_info_set", &POA_RtecScheduler::Scheduler::get_config_info_set_skel, 0},
      {"recompute_scheduling", &POA_RtecScheduler::Scheduler::recompute_scheduling_skel, 0},
      {"",0,0},
      {"add_dependency", &POA_RtecScheduler::Scheduler::add_dependency_skel, 0},
      {"set_rt_info_enable_state_seq", &POA_RtecScheduler::Scheduler::set_rt_info_enable_state_seq_skel, 0},
      {"lookup", &POA_RtecScheduler::Scheduler::lookup_skel, 0},
      {"_interface", &POA_RtecScheduler::Scheduler::_interface_skel, 0},
      {"set_dependency_enable_state_seq", &POA_RtecScheduler::Scheduler::set_dependency_enable_state_seq_skel, 0},
      {"",0,0},
      {"compute_scheduling", &POA_RtecScheduler::Scheduler::compute_scheduling_skel, 0},
      {"",0,0},{"",0,0},
      {"create", &POA_RtecScheduler::Scheduler::create_skel, 0},
      {"",0,0},
      {"last_scheduled_priority", &POA_RtecScheduler::Scheduler::last_scheduled_priority_skel, 0},
      {"",0,0},
      {"entry_point_priority", &POA_RtecScheduler::Scheduler::entry_point_priority_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"set_rt_info_enable_state", &POA_RtecScheduler::Scheduler::set_rt_info_enable_state_skel, 0},
      {"",0,0},{"",0,0},
      {"set_dependency_enable_state", &POA_RtecScheduler::Scheduler::set_dependency_enable_state_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_RtecScheduler_Scheduler_Perfect_Hash_OpTable tao_RtecScheduler_Scheduler_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_Initializer (size_t)
{
  RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_function_pointer = 
    RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
RtecScheduler__TAO_Scheduler_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_RtecScheduler::Scheduler::Scheduler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_RtecScheduler_Scheduler_optable;
}

POA_RtecScheduler::Scheduler::Scheduler (const Scheduler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_RtecScheduler::Scheduler::~Scheduler (void)
{
}

namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline create_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->create (
          arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::create_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_DUPLICATE_NAME,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_entry_point;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_entry_point
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  create_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class lookup_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline lookup_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->lookup (
          arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::lookup_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_entry_point;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_entry_point
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  lookup_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline get_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::RT_Info>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::RtecScheduler::RT_Info> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get (
          arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::get_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::RtecScheduler::RT_Info>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  get_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline set_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::RtecScheduler::Criticality_t>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Criticality_t> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::RtecScheduler::Importance_t>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Importance_t> (
          this->operation_details_,
          this->args_,
          7);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_8 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          8);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_9 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          9);
        
      TAO::SArg_Traits< ::RtecScheduler::Info_Type_t>::in_arg_type arg_10 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Info_Type_t> (
          this->operation_details_,
          this->args_,
          10);
        
      this->servant_->set (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        , arg_7
        , arg_8
        , arg_9
        , arg_10);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::set_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::RtecScheduler::Criticality_t>::in_arg_val _tao_criticality;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_wc_time;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_typical_time;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_cached_time;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_period;
  TAO::SArg_Traits< ::RtecScheduler::Importance_t>::in_arg_val _tao_importance;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_quantum;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_threads;
  TAO::SArg_Traits< ::RtecScheduler::Info_Type_t>::in_arg_val _tao_info_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_criticality,
      &_tao_wc_time,
      &_tao_typical_time,
      &_tao_cached_time,
      &_tao_period,
      &_tao_importance,
      &_tao_quantum,
      &_tao_threads,
      &_tao_info_type
    };
  
  static size_t const nargs = 11;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  set_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class reset_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline reset_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::RtecScheduler::Criticality_t>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Criticality_t> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_6 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          6);
        
      TAO::SArg_Traits< ::RtecScheduler::Importance_t>::in_arg_type arg_7 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Importance_t> (
          this->operation_details_,
          this->args_,
          7);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_8 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          8);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_9 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          9);
        
      TAO::SArg_Traits< ::RtecScheduler::Info_Type_t>::in_arg_type arg_10 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Info_Type_t> (
          this->operation_details_,
          this->args_,
          10);
        
      this->servant_->reset (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6
        , arg_7
        , arg_8
        , arg_9
        , arg_10);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::reset_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::RtecScheduler::Criticality_t>::in_arg_val _tao_criticality;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_wc_time;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_typical_time;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_cached_time;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_period;
  TAO::SArg_Traits< ::RtecScheduler::Importance_t>::in_arg_val _tao_importance;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_quantum;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_threads;
  TAO::SArg_Traits< ::RtecScheduler::Info_Type_t>::in_arg_val _tao_info_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_criticality,
      &_tao_wc_time,
      &_tao_typical_time,
      &_tao_cached_time,
      &_tao_period,
      &_tao_importance,
      &_tao_quantum,
      &_tao_threads,
      &_tao_info_type
    };
  
  static size_t const nargs = 11;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  reset_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_seq_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline set_seq_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::RT_Info_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_seq (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::set_seq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::in_arg_val _tao_infos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_infos
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  set_seq_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class reset_seq_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline reset_seq_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::RT_Info_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->reset_seq (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::reset_seq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::in_arg_val _tao_infos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_infos
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  reset_seq_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class replace_seq_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline replace_seq_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::RT_Info_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->replace_seq (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::replace_seq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::in_arg_val _tao_infos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_infos
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  replace_seq_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_dependency_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline add_dependency_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::RtecBase::Dependency_Type_t>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::RtecBase::Dependency_Type_t> (
          this->operation_details_,
          this->args_,
          4);
        
      this->servant_->add_dependency (
        arg_1
        , arg_2
        , arg_3
        , arg_4);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::add_dependency_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_UNKNOWN_TASK
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_dependency;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_number_of_calls;
  TAO::SArg_Traits< ::RtecBase::Dependency_Type_t>::in_arg_val _tao_dependency_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_dependency,
      &_tao_number_of_calls,
      &_tao_dependency_type
    };
  
  static size_t const nargs = 5;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  add_dependency_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_dependency_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_dependency_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::RtecBase::Dependency_Type_t>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::RtecBase::Dependency_Type_t> (
          this->operation_details_,
          this->args_,
          4);
        
      this->servant_->remove_dependency (
        arg_1
        , arg_2
        , arg_3
        , arg_4);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::remove_dependency_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_UNKNOWN_TASK
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_dependency;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_number_of_calls;
  TAO::SArg_Traits< ::RtecBase::Dependency_Type_t>::in_arg_val _tao_dependency_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_dependency,
      &_tao_number_of_calls,
      &_tao_dependency_type
    };
  
  static size_t const nargs = 5;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  remove_dependency_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_dependency_enable_state_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline set_dependency_enable_state_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::RtecBase::Dependency_Type_t>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::RtecBase::Dependency_Type_t> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::RtecBase::Dependency_Enabled_Type_t>::in_arg_type arg_5 =
        TAO::Portable_Server::get_in_arg< ::RtecBase::Dependency_Enabled_Type_t> (
          this->operation_details_,
          this->args_,
          5);
        
      this->servant_->set_dependency_enable_state (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::set_dependency_enable_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_UNKNOWN_TASK
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_dependency;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_number_of_calls;
  TAO::SArg_Traits< ::RtecBase::Dependency_Type_t>::in_arg_val _tao_dependency_type;
  TAO::SArg_Traits< ::RtecBase::Dependency_Enabled_Type_t>::in_arg_val _tao_enabled;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_dependency,
      &_tao_number_of_calls,
      &_tao_dependency_type,
      &_tao_enabled
    };
  
  static size_t const nargs = 6;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  set_dependency_enable_state_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_dependency_enable_state_seq_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline set_dependency_enable_state_seq_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::Dependency_Set>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::Dependency_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_dependency_enable_state_seq (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::set_dependency_enable_state_seq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_UNKNOWN_TASK
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::Dependency_Set>::in_arg_val _tao_dependencies;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_dependencies
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  set_dependency_enable_state_seq_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_rt_info_enable_state_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rt_info_enable_state_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Enabled_Type_t>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::RT_Info_Enabled_Type_t> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->set_rt_info_enable_state (
        arg_1
        , arg_2);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::set_rt_info_enable_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_UNKNOWN_TASK
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Enabled_Type_t>::in_arg_val _tao_enabled;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_enabled
    };
  
  static size_t const nargs = 3;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  set_rt_info_enable_state_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_rt_info_enable_state_seq_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline set_rt_info_enable_state_seq_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Enable_State_Pair_Set>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::RtecScheduler::RT_Info_Enable_State_Pair_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_rt_info_enable_state_seq (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::set_rt_info_enable_state_seq_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_UNKNOWN_TASK
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Enable_State_Pair_Set>::in_arg_val _tao_pair_set;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_pair_set
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  set_rt_info_enable_state_seq_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class priority_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline priority_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_4 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          4);
        
      this->servant_->priority (
        arg_1
        , arg_2
        , arg_3
        , arg_4);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::priority_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_NOT_SCHEDULED
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_handle;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_o_priority;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_p_subpriority;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_p_priority;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_handle,
      &_tao_o_priority,
      &_tao_p_subpriority,
      &_tao_p_priority
    };
  
  static size_t const nargs = 5;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  priority_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class entry_point_priority_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline entry_point_priority_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_4 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          4);
        
      this->servant_->entry_point_priority (
        arg_1
        , arg_2
        , arg_3
        , arg_4);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::entry_point_priority_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UNKNOWN_TASK,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_NOT_SCHEDULED
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_entry_point;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_o_priority;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_p_subpriority;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_p_priority;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_entry_point,
      &_tao_o_priority,
      &_tao_p_subpriority,
      &_tao_p_priority
    };
  
  static size_t const nargs = 5;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  entry_point_priority_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class compute_scheduling_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline compute_scheduling_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::RT_Info_Set> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::RtecScheduler::Dependency_Set>::out_arg_type arg_4 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Dependency_Set> (
          this->operation_details_,
          this->args_,
          4);
        
      TAO::SArg_Traits< ::RtecScheduler::Config_Info_Set>::out_arg_type arg_5 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Config_Info_Set> (
          this->operation_details_,
          this->args_,
          5);
        
      TAO::SArg_Traits< ::RtecScheduler::Scheduling_Anomaly_Set>::out_arg_type arg_6 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Scheduling_Anomaly_Set> (
          this->operation_details_,
          this->args_,
          6);
        
      this->servant_->compute_scheduling (
        arg_1
        , arg_2
        , arg_3
        , arg_4
        , arg_5
        , arg_6);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::compute_scheduling_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UTILIZATION_BOUND_EXCEEDED,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INSUFFICIENT_THREAD_PRIORITY_LEVELS,
      RtecScheduler::_tc_TASK_COUNT_MISMATCH,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_DUPLICATE_NAME
    };
  static ::CORBA::ULong const nexceptions = 6;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_minimum_priority;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_maximum_priority;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::out_arg_val _tao_infos;
  TAO::SArg_Traits< ::RtecScheduler::Dependency_Set>::out_arg_val _tao_dependencies;
  TAO::SArg_Traits< ::RtecScheduler::Config_Info_Set>::out_arg_val _tao_configs;
  TAO::SArg_Traits< ::RtecScheduler::Scheduling_Anomaly_Set>::out_arg_val _tao_anomalies;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_minimum_priority,
      &_tao_maximum_priority,
      &_tao_infos,
      &_tao_dependencies,
      &_tao_configs,
      &_tao_anomalies
    };
  
  static size_t const nargs = 7;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  compute_scheduling_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class recompute_scheduling_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline recompute_scheduling_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::RtecScheduler::Scheduling_Anomaly_Set>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Scheduling_Anomaly_Set> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->recompute_scheduling (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::recompute_scheduling_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_UTILIZATION_BOUND_EXCEEDED,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INSUFFICIENT_THREAD_PRIORITY_LEVELS,
      RtecScheduler::_tc_TASK_COUNT_MISMATCH,
      RtecScheduler::_tc_INTERNAL,
      RtecScheduler::_tc_DUPLICATE_NAME
    };
  static ::CORBA::ULong const nexceptions = 6;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_minimum_priority;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_maximum_priority;
  TAO::SArg_Traits< ::RtecScheduler::Scheduling_Anomaly_Set>::out_arg_val _tao_anomalies;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_minimum_priority,
      &_tao_maximum_priority,
      &_tao_anomalies
    };
  
  static size_t const nargs = 4;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  recompute_scheduling_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_rt_info_set_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline get_rt_info_set_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::RT_Info_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_rt_info_set (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::get_rt_info_set_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INTERNAL
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::RT_Info_Set>::out_arg_val _tao_infos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_infos
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  get_rt_info_set_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_dependency_set_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline get_dependency_set_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::Dependency_Set>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Dependency_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_dependency_set (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::get_dependency_set_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INTERNAL
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::Dependency_Set>::out_arg_val _tao_dependencies;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_dependencies
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  get_dependency_set_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_config_info_set_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline get_config_info_set_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::Config_Info_Set>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Config_Info_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_config_info_set (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::get_config_info_set_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_INTERNAL
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::Config_Info_Set>::out_arg_val _tao_configs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_configs
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  get_config_info_set_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class dispatch_configuration_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline dispatch_configuration_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::RtecScheduler::Dispatching_Type_t>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Dispatching_Type_t> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->dispatch_configuration (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::dispatch_configuration_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_NOT_SCHEDULED,
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_UNKNOWN_PRIORITY_LEVEL
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_p_priority;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_o_priority;
  TAO::SArg_Traits< ::RtecScheduler::Dispatching_Type_t>::out_arg_val _tao_d_type;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_p_priority,
      &_tao_o_priority,
      &_tao_d_type
    };
  
  static size_t const nargs = 4;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  dispatch_configuration_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class last_scheduled_priority_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline last_scheduled_priority_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->last_scheduled_priority ();
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::last_scheduled_priority_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_NOT_SCHEDULED
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  last_scheduled_priority_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_config_infos_Scheduler
    : public TAO::Upcall_Command
  {
  public:
    inline get_config_infos_Scheduler (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RtecScheduler::Config_Info_Set>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::RtecScheduler::Config_Info_Set> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_config_infos (
        arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RtecScheduler::Scheduler::get_config_infos_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      RtecScheduler::_tc_SYNCHRONIZATION_FAILURE,
      RtecScheduler::_tc_NOT_SCHEDULED
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::RtecScheduler::Config_Info_Set>::out_arg_val _tao_configs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_configs
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);

  get_config_infos_Scheduler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_Scheduler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_Scheduler_Upcall_Command (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RtecScheduler::Scheduler::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);
  
  _is_a_Scheduler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_Scheduler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_Scheduler_Upcall_Command (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RtecScheduler::Scheduler::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);
  
  _non_existent_Scheduler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_Scheduler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_Scheduler_Upcall_Command (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RtecScheduler::Scheduler::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);
  
  _repository_id_Scheduler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_RtecScheduler::Scheduler::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_RtecScheduler
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_Scheduler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_Scheduler_Upcall_Command (
      POA_RtecScheduler::Scheduler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_RtecScheduler::Scheduler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RtecScheduler::Scheduler::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RtecScheduler::Scheduler * const impl =
    static_cast<POA_RtecScheduler::Scheduler *> (servant);
  
  _get_component_Scheduler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_RtecScheduler::Scheduler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:RtecScheduler/Scheduler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_RtecScheduler::Scheduler::_interface_repository_id (void) const
{
  return "IDL:RtecScheduler/Scheduler:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_RtecScheduler::Scheduler::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

RtecScheduler::Scheduler *
POA_RtecScheduler::Scheduler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::RtecScheduler::Scheduler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

