// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosTypedEventChannelAdminC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosTypedEventChannelAdminC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosTypedEventChannelAdmin::InterfaceNotSupported::InterfaceNotSupported (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosTypedEventChannelAdmin/InterfaceNotSupported:1.0",
        "InterfaceNotSupported"
      )
{
}

CosTypedEventChannelAdmin::InterfaceNotSupported::~InterfaceNotSupported (void)
{
}

CosTypedEventChannelAdmin::InterfaceNotSupported::InterfaceNotSupported (const ::CosTypedEventChannelAdmin::InterfaceNotSupported &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosTypedEventChannelAdmin::InterfaceNotSupported&
CosTypedEventChannelAdmin::InterfaceNotSupported::operator= (const ::CosTypedEventChannelAdmin::InterfaceNotSupported &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor (void *_tao_void_pointer)
{
  InterfaceNotSupported *_tao_tmp_pointer =
    static_cast<InterfaceNotSupported *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosTypedEventChannelAdmin::InterfaceNotSupported *
CosTypedEventChannelAdmin::InterfaceNotSupported::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InterfaceNotSupported *> (_tao_excp);
}

const CosTypedEventChannelAdmin::InterfaceNotSupported *
CosTypedEventChannelAdmin::InterfaceNotSupported::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InterfaceNotSupported *> (_tao_excp);
}

::CORBA::Exception *CosTypedEventChannelAdmin::InterfaceNotSupported::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosTypedEventChannelAdmin::InterfaceNotSupported, 0);
  return retval;
}

::CORBA::Exception *
CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosTypedEventChannelAdmin::InterfaceNotSupported (*this),
      0
    );
  return result;
}

void CosTypedEventChannelAdmin::InterfaceNotSupported::_raise (void) const
{
  throw *this;
}

void CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_type (void) const
{
  return ::CosTypedEventChannelAdmin::_tc_InterfaceNotSupported;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosTypedEventChannelAdmin_InterfaceNotSupported = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosTypedEventChannelAdmin_InterfaceNotSupported (
  ::CORBA::tk_except,
  "IDL:omg.org/CosTypedEventChannelAdmin/InterfaceNotSupported:1.0",
  "InterfaceNotSupported",
  _tao_fields_CosTypedEventChannelAdmin_InterfaceNotSupported,
  0);


namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_InterfaceNotSupported =
    &_tao_tc_CosTypedEventChannelAdmin_InterfaceNotSupported;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosTypedEventChannelAdmin::NoSuchImplementation::NoSuchImplementation (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosTypedEventChannelAdmin/NoSuchImplementation:1.0",
        "NoSuchImplementation"
      )
{
}

CosTypedEventChannelAdmin::NoSuchImplementation::~NoSuchImplementation (void)
{
}

CosTypedEventChannelAdmin::NoSuchImplementation::NoSuchImplementation (const ::CosTypedEventChannelAdmin::NoSuchImplementation &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosTypedEventChannelAdmin::NoSuchImplementation&
CosTypedEventChannelAdmin::NoSuchImplementation::operator= (const ::CosTypedEventChannelAdmin::NoSuchImplementation &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor (void *_tao_void_pointer)
{
  NoSuchImplementation *_tao_tmp_pointer =
    static_cast<NoSuchImplementation *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosTypedEventChannelAdmin::NoSuchImplementation *
CosTypedEventChannelAdmin::NoSuchImplementation::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoSuchImplementation *> (_tao_excp);
}

const CosTypedEventChannelAdmin::NoSuchImplementation *
CosTypedEventChannelAdmin::NoSuchImplementation::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoSuchImplementation *> (_tao_excp);
}

::CORBA::Exception *CosTypedEventChannelAdmin::NoSuchImplementation::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosTypedEventChannelAdmin::NoSuchImplementation, 0);
  return retval;
}

::CORBA::Exception *
CosTypedEventChannelAdmin::NoSuchImplementation::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosTypedEventChannelAdmin::NoSuchImplementation (*this),
      0
    );
  return result;
}

void CosTypedEventChannelAdmin::NoSuchImplementation::_raise (void) const
{
  throw *this;
}

void CosTypedEventChannelAdmin::NoSuchImplementation::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosTypedEventChannelAdmin::NoSuchImplementation::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosTypedEventChannelAdmin::NoSuchImplementation::_tao_type (void) const
{
  return ::CosTypedEventChannelAdmin::_tc_NoSuchImplementation;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosTypedEventChannelAdmin_NoSuchImplementation = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosTypedEventChannelAdmin_NoSuchImplementation (
  ::CORBA::tk_except,
  "IDL:omg.org/CosTypedEventChannelAdmin/NoSuchImplementation:1.0",
  "NoSuchImplementation",
  _tao_fields_CosTypedEventChannelAdmin_NoSuchImplementation,
  0);


namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_NoSuchImplementation =
    &_tao_tc_CosTypedEventChannelAdmin_NoSuchImplementation;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosTypedEventChannelAdmin_Key (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosTypedEventChannelAdmin/Key:1.0",
    "Key",
    &CORBA::_tc_string);
  

namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Key =
    &_tao_tc_CosTypedEventChannelAdmin_Key;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTypedEventChannelAdmin::TypedProxyPushConsumer.

CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::duplicate (
    CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr p)
{
  return CosTypedEventChannelAdmin::TypedProxyPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::release (
    CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::nil (void)
{
  return CosTypedEventChannelAdmin::TypedProxyPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::marshal (
    const CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

CosTypedEventChannelAdmin::TypedProxyPushConsumer::TypedProxyPushConsumer (void)
 : the_TAO_TypedProxyPushConsumer_Proxy_Broker_ (0)
{
  this->CosTypedEventChannelAdmin_TypedProxyPushConsumer_setup_collocation ();
}

void
CosTypedEventChannelAdmin::TypedProxyPushConsumer::CosTypedEventChannelAdmin_TypedProxyPushConsumer_setup_collocation ()
{
  if (::CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TypedProxyPushConsumer_Proxy_Broker_ =
        ::CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventChannelAdmin_ProxyPushConsumer_setup_collocation ();
  this->CosTypedEventComm_TypedPushConsumer_setup_collocation ();
}

CosTypedEventChannelAdmin::TypedProxyPushConsumer::~TypedProxyPushConsumer (void)
{}

void 
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedProxyPushConsumer *_tao_tmp_pointer =
    static_cast<TypedProxyPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedProxyPushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0",
        CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedProxyPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0",
        CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_nil (void)
{
  return 0;
}

CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_duplicate (TypedProxyPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_tao_release (TypedProxyPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedProxyPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventComm/TypedPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTypedEventChannelAdmin::TypedProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0";
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedProxyPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTypedEventChannelAdmin_TypedProxyPushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0",
    "TypedProxyPushConsumer");
  

namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypedProxyPushConsumer =
    &_tao_tc_CosTypedEventChannelAdmin_TypedProxyPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTypedEventChannelAdmin::TypedProxyPullSupplier.

CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::duplicate (
    CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr p)
{
  return CosTypedEventChannelAdmin::TypedProxyPullSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::release (
    CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::nil (void)
{
  return CosTypedEventChannelAdmin::TypedProxyPullSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::marshal (
    const CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

CosTypedEventChannelAdmin::TypedProxyPullSupplier::TypedProxyPullSupplier (void)
 : the_TAO_TypedProxyPullSupplier_Proxy_Broker_ (0)
{
  this->CosTypedEventChannelAdmin_TypedProxyPullSupplier_setup_collocation ();
}

void
CosTypedEventChannelAdmin::TypedProxyPullSupplier::CosTypedEventChannelAdmin_TypedProxyPullSupplier_setup_collocation ()
{
  if (::CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TypedProxyPullSupplier_Proxy_Broker_ =
        ::CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventChannelAdmin_ProxyPullSupplier_setup_collocation ();
  this->CosTypedEventComm_TypedPullSupplier_setup_collocation ();
}

CosTypedEventChannelAdmin::TypedProxyPullSupplier::~TypedProxyPullSupplier (void)
{}

void 
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedProxyPullSupplier *_tao_tmp_pointer =
    static_cast<TypedProxyPullSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedProxyPullSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0",
        CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedProxyPullSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0",
        CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_nil (void)
{
  return 0;
}

CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_duplicate (TypedProxyPullSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_tao_release (TypedProxyPullSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedProxyPullSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventComm/TypedPullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTypedEventChannelAdmin::TypedProxyPullSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0";
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedProxyPullSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTypedEventChannelAdmin_TypedProxyPullSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0",
    "TypedProxyPullSupplier");
  

namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypedProxyPullSupplier =
    &_tao_tc_CosTypedEventChannelAdmin_TypedProxyPullSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTypedEventChannelAdmin::TypedSupplierAdmin.

CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedSupplierAdmin>::duplicate (
    CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr p)
{
  return CosTypedEventChannelAdmin::TypedSupplierAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedSupplierAdmin>::release (
    CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedSupplierAdmin>::nil (void)
{
  return CosTypedEventChannelAdmin::TypedSupplierAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedSupplierAdmin>::marshal (
    const CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr
CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_typed_push_consumer (
  const char * supported_interface)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedSupplierAdmin_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedSupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTypedEventChannelAdmin::TypedProxyPushConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_supported_interface (supported_interface);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_supported_interface
    };

  static TAO::Exception_Data
  _tao_CosTypedEventChannelAdmin_TypedSupplierAdmin_obtain_typed_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosTypedEventChannelAdmin/InterfaceNotSupported:1.0",
        CosTypedEventChannelAdmin::InterfaceNotSupported::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosTypedEventChannelAdmin::_tc_InterfaceNotSupported
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "obtain_typed_push_consumer",
      26,
      this->the_TAO_TypedSupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosTypedEventChannelAdmin_TypedSupplierAdmin_obtain_typed_push_consumer_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ProxyPullConsumer_ptr
CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_typed_pull_consumer (
  const char * uses_interface)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedSupplierAdmin_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedSupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ProxyPullConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_uses_interface (uses_interface);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_uses_interface
    };

  static TAO::Exception_Data
  _tao_CosTypedEventChannelAdmin_TypedSupplierAdmin_obtain_typed_pull_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosTypedEventChannelAdmin/NoSuchImplementation:1.0",
        CosTypedEventChannelAdmin::NoSuchImplementation::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosTypedEventChannelAdmin::_tc_NoSuchImplementation
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "obtain_typed_pull_consumer",
      26,
      this->the_TAO_TypedSupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosTypedEventChannelAdmin_TypedSupplierAdmin_obtain_typed_pull_consumer_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosTypedEventChannelAdmin::TypedSupplierAdmin::TypedSupplierAdmin (void)
 : the_TAO_TypedSupplierAdmin_Proxy_Broker_ (0)
{
  this->CosTypedEventChannelAdmin_TypedSupplierAdmin_setup_collocation ();
}

void
CosTypedEventChannelAdmin::TypedSupplierAdmin::CosTypedEventChannelAdmin_TypedSupplierAdmin_setup_collocation ()
{
  if (::CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TypedSupplierAdmin_Proxy_Broker_ =
        ::CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventChannelAdmin_SupplierAdmin_setup_collocation ();
}

CosTypedEventChannelAdmin::TypedSupplierAdmin::~TypedSupplierAdmin (void)
{}

void 
CosTypedEventChannelAdmin::TypedSupplierAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedSupplierAdmin *_tao_tmp_pointer =
    static_cast<TypedSupplierAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
CosTypedEventChannelAdmin::TypedSupplierAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedSupplierAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0",
        CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
CosTypedEventChannelAdmin::TypedSupplierAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedSupplierAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0",
        CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
CosTypedEventChannelAdmin::TypedSupplierAdmin::_nil (void)
{
  return 0;
}

CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
CosTypedEventChannelAdmin::TypedSupplierAdmin::_duplicate (TypedSupplierAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTypedEventChannelAdmin::TypedSupplierAdmin::_tao_release (TypedSupplierAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedSupplierAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTypedEventChannelAdmin::TypedSupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0";
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedSupplierAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTypedEventChannelAdmin_TypedSupplierAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0",
    "TypedSupplierAdmin");
  

namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypedSupplierAdmin =
    &_tao_tc_CosTypedEventChannelAdmin_TypedSupplierAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTypedEventChannelAdmin::TypedConsumerAdmin.

CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedConsumerAdmin>::duplicate (
    CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr p)
{
  return CosTypedEventChannelAdmin::TypedConsumerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedConsumerAdmin>::release (
    CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedConsumerAdmin>::nil (void)
{
  return CosTypedEventChannelAdmin::TypedConsumerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedConsumerAdmin>::marshal (
    const CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr
CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_typed_pull_supplier (
  const char * supported_interface)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTypedEventChannelAdmin::TypedProxyPullSupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_supported_interface (supported_interface);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_supported_interface
    };

  static TAO::Exception_Data
  _tao_CosTypedEventChannelAdmin_TypedConsumerAdmin_obtain_typed_pull_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosTypedEventChannelAdmin/InterfaceNotSupported:1.0",
        CosTypedEventChannelAdmin::InterfaceNotSupported::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosTypedEventChannelAdmin::_tc_InterfaceNotSupported
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "obtain_typed_pull_supplier",
      26,
      this->the_TAO_TypedConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosTypedEventChannelAdmin_TypedConsumerAdmin_obtain_typed_pull_supplier_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ProxyPushSupplier_ptr
CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_typed_push_supplier (
  const char * uses_interface)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ProxyPushSupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_uses_interface (uses_interface);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_uses_interface
    };

  static TAO::Exception_Data
  _tao_CosTypedEventChannelAdmin_TypedConsumerAdmin_obtain_typed_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosTypedEventChannelAdmin/NoSuchImplementation:1.0",
        CosTypedEventChannelAdmin::NoSuchImplementation::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosTypedEventChannelAdmin::_tc_NoSuchImplementation
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "obtain_typed_push_supplier",
      26,
      this->the_TAO_TypedConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosTypedEventChannelAdmin_TypedConsumerAdmin_obtain_typed_push_supplier_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosTypedEventChannelAdmin::TypedConsumerAdmin::TypedConsumerAdmin (void)
 : the_TAO_TypedConsumerAdmin_Proxy_Broker_ (0)
{
  this->CosTypedEventChannelAdmin_TypedConsumerAdmin_setup_collocation ();
}

void
CosTypedEventChannelAdmin::TypedConsumerAdmin::CosTypedEventChannelAdmin_TypedConsumerAdmin_setup_collocation ()
{
  if (::CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TypedConsumerAdmin_Proxy_Broker_ =
        ::CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventChannelAdmin_ConsumerAdmin_setup_collocation ();
}

CosTypedEventChannelAdmin::TypedConsumerAdmin::~TypedConsumerAdmin (void)
{}

void 
CosTypedEventChannelAdmin::TypedConsumerAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedConsumerAdmin *_tao_tmp_pointer =
    static_cast<TypedConsumerAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
CosTypedEventChannelAdmin::TypedConsumerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedConsumerAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0",
        CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
CosTypedEventChannelAdmin::TypedConsumerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedConsumerAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0",
        CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
CosTypedEventChannelAdmin::TypedConsumerAdmin::_nil (void)
{
  return 0;
}

CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
CosTypedEventChannelAdmin::TypedConsumerAdmin::_duplicate (TypedConsumerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTypedEventChannelAdmin::TypedConsumerAdmin::_tao_release (TypedConsumerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedConsumerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTypedEventChannelAdmin::TypedConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0";
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedConsumerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTypedEventChannelAdmin_TypedConsumerAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0",
    "TypedConsumerAdmin");
  

namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypedConsumerAdmin =
    &_tao_tc_CosTypedEventChannelAdmin_TypedConsumerAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTypedEventChannelAdmin::TypedEventChannel.

CosTypedEventChannelAdmin::TypedEventChannel_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedEventChannel>::duplicate (
    CosTypedEventChannelAdmin::TypedEventChannel_ptr p)
{
  return CosTypedEventChannelAdmin::TypedEventChannel::_duplicate (p);
}

void
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedEventChannel>::release (
    CosTypedEventChannelAdmin::TypedEventChannel_ptr p)
{
  ::CORBA::release (p);
}

CosTypedEventChannelAdmin::TypedEventChannel_ptr
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedEventChannel>::nil (void)
{
  return CosTypedEventChannelAdmin::TypedEventChannel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTypedEventChannelAdmin::TypedEventChannel>::marshal (
    const CosTypedEventChannelAdmin::TypedEventChannel_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr
CosTypedEventChannelAdmin::TypedEventChannel::for_consumers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedEventChannel_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedEventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTypedEventChannelAdmin::TypedConsumerAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "for_consumers",
      13,
      this->the_TAO_TypedEventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr
CosTypedEventChannelAdmin::TypedEventChannel::for_suppliers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedEventChannel_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedEventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTypedEventChannelAdmin::TypedSupplierAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "for_suppliers",
      13,
      this->the_TAO_TypedEventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosTypedEventChannelAdmin::TypedEventChannel::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TypedEventChannel_Proxy_Broker_ == 0)
    {
      CosTypedEventChannelAdmin_TypedEventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_TypedEventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosTypedEventChannelAdmin::TypedEventChannel::TypedEventChannel (void)
 : the_TAO_TypedEventChannel_Proxy_Broker_ (0)
{
  this->CosTypedEventChannelAdmin_TypedEventChannel_setup_collocation ();
}

void
CosTypedEventChannelAdmin::TypedEventChannel::CosTypedEventChannelAdmin_TypedEventChannel_setup_collocation ()
{
  if (::CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TypedEventChannel_Proxy_Broker_ =
        ::CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosTypedEventChannelAdmin::TypedEventChannel::~TypedEventChannel (void)
{}

void 
CosTypedEventChannelAdmin::TypedEventChannel::_tao_any_destructor (void *_tao_void_pointer)
{
  TypedEventChannel *_tao_tmp_pointer =
    static_cast<TypedEventChannel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTypedEventChannelAdmin::TypedEventChannel_ptr
CosTypedEventChannelAdmin::TypedEventChannel::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedEventChannel>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0",
        CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedEventChannel_ptr
CosTypedEventChannelAdmin::TypedEventChannel::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TypedEventChannel>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0",
        CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer
      );
}

CosTypedEventChannelAdmin::TypedEventChannel_ptr
CosTypedEventChannelAdmin::TypedEventChannel::_nil (void)
{
  return 0;
}

CosTypedEventChannelAdmin::TypedEventChannel_ptr
CosTypedEventChannelAdmin::TypedEventChannel::_duplicate (TypedEventChannel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTypedEventChannelAdmin::TypedEventChannel::_tao_release (TypedEventChannel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedEventChannel::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTypedEventChannelAdmin::TypedEventChannel::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0";
}

::CORBA::Boolean
CosTypedEventChannelAdmin::TypedEventChannel::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTypedEventChannelAdmin_TypedEventChannel (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0",
    "TypedEventChannel");
  

namespace CosTypedEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypedEventChannel =
    &_tao_tc_CosTypedEventChannelAdmin_TypedEventChannel;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosTypedEventChannelAdmin::InterfaceNotSupported>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosTypedEventChannelAdmin::InterfaceNotSupported &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosTypedEventChannelAdmin::InterfaceNotSupported>::insert_copy (
        _tao_any,
        ::CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor,
        ::CosTypedEventChannelAdmin::_tc_InterfaceNotSupported,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosTypedEventChannelAdmin::InterfaceNotSupported *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosTypedEventChannelAdmin::InterfaceNotSupported>::insert (
        _tao_any,
        ::CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor,
        ::CosTypedEventChannelAdmin::_tc_InterfaceNotSupported,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosTypedEventChannelAdmin::InterfaceNotSupported *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosTypedEventChannelAdmin::InterfaceNotSupported *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosTypedEventChannelAdmin::InterfaceNotSupported *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosTypedEventChannelAdmin::InterfaceNotSupported>::extract (
          _tao_any,
          ::CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor,
          ::CosTypedEventChannelAdmin::_tc_InterfaceNotSupported,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosTypedEventChannelAdmin::InterfaceNotSupported &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosTypedEventChannelAdmin::InterfaceNotSupported>::insert_copy (
      _tao_any,
      CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_InterfaceNotSupported,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::InterfaceNotSupported *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosTypedEventChannelAdmin::InterfaceNotSupported>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_InterfaceNotSupported,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::InterfaceNotSupported *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosTypedEventChannelAdmin::InterfaceNotSupported *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosTypedEventChannelAdmin::InterfaceNotSupported *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosTypedEventChannelAdmin::InterfaceNotSupported>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::InterfaceNotSupported::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_InterfaceNotSupported,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosTypedEventChannelAdmin::NoSuchImplementation>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosTypedEventChannelAdmin::NoSuchImplementation &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosTypedEventChannelAdmin::NoSuchImplementation>::insert_copy (
        _tao_any,
        ::CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor,
        ::CosTypedEventChannelAdmin::_tc_NoSuchImplementation,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosTypedEventChannelAdmin::NoSuchImplementation *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosTypedEventChannelAdmin::NoSuchImplementation>::insert (
        _tao_any,
        ::CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor,
        ::CosTypedEventChannelAdmin::_tc_NoSuchImplementation,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosTypedEventChannelAdmin::NoSuchImplementation *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosTypedEventChannelAdmin::NoSuchImplementation *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosTypedEventChannelAdmin::NoSuchImplementation *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosTypedEventChannelAdmin::NoSuchImplementation>::extract (
          _tao_any,
          ::CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor,
          ::CosTypedEventChannelAdmin::_tc_NoSuchImplementation,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosTypedEventChannelAdmin::NoSuchImplementation &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosTypedEventChannelAdmin::NoSuchImplementation>::insert_copy (
      _tao_any,
      CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_NoSuchImplementation,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::NoSuchImplementation *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosTypedEventChannelAdmin::NoSuchImplementation>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_NoSuchImplementation,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::NoSuchImplementation *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosTypedEventChannelAdmin::NoSuchImplementation *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosTypedEventChannelAdmin::NoSuchImplementation *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosTypedEventChannelAdmin::NoSuchImplementation>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::NoSuchImplementation::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_NoSuchImplementation,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedProxyPushConsumer_ptr _tao_elem)
  {
    TypedProxyPushConsumer_ptr _tao_objptr =
      TypedProxyPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedProxyPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TypedProxyPushConsumer>::insert (
        _tao_any,
        TypedProxyPushConsumer::_tao_any_destructor,
        _tc_TypedProxyPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TypedProxyPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TypedProxyPushConsumer>::extract (
          _tao_any,
          TypedProxyPushConsumer::_tao_any_destructor,
          _tc_TypedProxyPushConsumer,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr _tao_elem)
{
  CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr _tao_objptr =
    CosTypedEventChannelAdmin::TypedProxyPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::TypedProxyPushConsumer::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_TypedProxyPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedProxyPushConsumer>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::TypedProxyPushConsumer::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_TypedProxyPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedProxyPullSupplier_ptr _tao_elem)
  {
    TypedProxyPullSupplier_ptr _tao_objptr =
      TypedProxyPullSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedProxyPullSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TypedProxyPullSupplier>::insert (
        _tao_any,
        TypedProxyPullSupplier::_tao_any_destructor,
        _tc_TypedProxyPullSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TypedProxyPullSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TypedProxyPullSupplier>::extract (
          _tao_any,
          TypedProxyPullSupplier::_tao_any_destructor,
          _tc_TypedProxyPullSupplier,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr _tao_elem)
{
  CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr _tao_objptr =
    CosTypedEventChannelAdmin::TypedProxyPullSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::TypedProxyPullSupplier::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_TypedProxyPullSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedProxyPullSupplier>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::TypedProxyPullSupplier::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_TypedProxyPullSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTypedEventChannelAdmin::TypedSupplierAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedSupplierAdmin_ptr _tao_elem)
  {
    TypedSupplierAdmin_ptr _tao_objptr =
      TypedSupplierAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedSupplierAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TypedSupplierAdmin>::insert (
        _tao_any,
        TypedSupplierAdmin::_tao_any_destructor,
        _tc_TypedSupplierAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TypedSupplierAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TypedSupplierAdmin>::extract (
          _tao_any,
          TypedSupplierAdmin::_tao_any_destructor,
          _tc_TypedSupplierAdmin,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr _tao_elem)
{
  CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr _tao_objptr =
    CosTypedEventChannelAdmin::TypedSupplierAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedSupplierAdmin>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::TypedSupplierAdmin::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_TypedSupplierAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedSupplierAdmin>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::TypedSupplierAdmin::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_TypedSupplierAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTypedEventChannelAdmin::TypedConsumerAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedConsumerAdmin_ptr _tao_elem)
  {
    TypedConsumerAdmin_ptr _tao_objptr =
      TypedConsumerAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedConsumerAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TypedConsumerAdmin>::insert (
        _tao_any,
        TypedConsumerAdmin::_tao_any_destructor,
        _tc_TypedConsumerAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TypedConsumerAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TypedConsumerAdmin>::extract (
          _tao_any,
          TypedConsumerAdmin::_tao_any_destructor,
          _tc_TypedConsumerAdmin,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr _tao_elem)
{
  CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr _tao_objptr =
    CosTypedEventChannelAdmin::TypedConsumerAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedConsumerAdmin>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::TypedConsumerAdmin::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_TypedConsumerAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedConsumerAdmin>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::TypedConsumerAdmin::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_TypedConsumerAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTypedEventChannelAdmin::TypedEventChannel>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTypedEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedEventChannel_ptr _tao_elem)
  {
    TypedEventChannel_ptr _tao_objptr =
      TypedEventChannel::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TypedEventChannel_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TypedEventChannel>::insert (
        _tao_any,
        TypedEventChannel::_tao_any_destructor,
        _tc_TypedEventChannel,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TypedEventChannel_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TypedEventChannel>::extract (
          _tao_any,
          TypedEventChannel::_tao_any_destructor,
          _tc_TypedEventChannel,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedEventChannel_ptr _tao_elem)
{
  CosTypedEventChannelAdmin::TypedEventChannel_ptr _tao_objptr =
    CosTypedEventChannelAdmin::TypedEventChannel::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedEventChannel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedEventChannel>::insert (
      _tao_any,
      CosTypedEventChannelAdmin::TypedEventChannel::_tao_any_destructor,
      CosTypedEventChannelAdmin::_tc_TypedEventChannel,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTypedEventChannelAdmin::TypedEventChannel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTypedEventChannelAdmin::TypedEventChannel>::extract (
        _tao_any,
        CosTypedEventChannelAdmin::TypedEventChannel::_tao_any_destructor,
        CosTypedEventChannelAdmin::_tc_TypedEventChannel,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::InterfaceNotSupported &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosTypedEventChannelAdmin::InterfaceNotSupported&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::NoSuchImplementation &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosTypedEventChannelAdmin::NoSuchImplementation&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTypedEventChannelAdmin::TypedProxyPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTypedEventChannelAdmin::TypedProxyPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTypedEventChannelAdmin::TypedProxyPullSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTypedEventChannelAdmin::TypedProxyPullSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTypedEventChannelAdmin::TypedSupplierAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTypedEventChannelAdmin::TypedSupplierAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTypedEventChannelAdmin::TypedConsumerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTypedEventChannelAdmin::TypedConsumerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTypedEventChannelAdmin::TypedEventChannel_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTypedEventChannelAdmin::TypedEventChannel_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTypedEventChannelAdmin::TypedEventChannel RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



