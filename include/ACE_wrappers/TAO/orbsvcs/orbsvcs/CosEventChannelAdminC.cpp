// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosEventChannelAdminC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosEventChannelAdminC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosEventChannelAdmin::AlreadyConnected::AlreadyConnected (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        "AlreadyConnected"
      )
{
}

CosEventChannelAdmin::AlreadyConnected::~AlreadyConnected (void)
{
}

CosEventChannelAdmin::AlreadyConnected::AlreadyConnected (const ::CosEventChannelAdmin::AlreadyConnected &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosEventChannelAdmin::AlreadyConnected&
CosEventChannelAdmin::AlreadyConnected::operator= (const ::CosEventChannelAdmin::AlreadyConnected &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor (void *_tao_void_pointer)
{
  AlreadyConnected *_tao_tmp_pointer =
    static_cast<AlreadyConnected *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosEventChannelAdmin::AlreadyConnected *
CosEventChannelAdmin::AlreadyConnected::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AlreadyConnected *> (_tao_excp);
}

const CosEventChannelAdmin::AlreadyConnected *
CosEventChannelAdmin::AlreadyConnected::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AlreadyConnected *> (_tao_excp);
}

::CORBA::Exception *CosEventChannelAdmin::AlreadyConnected::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosEventChannelAdmin::AlreadyConnected, 0);
  return retval;
}

::CORBA::Exception *
CosEventChannelAdmin::AlreadyConnected::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosEventChannelAdmin::AlreadyConnected (*this),
      0
    );
  return result;
}

void CosEventChannelAdmin::AlreadyConnected::_raise (void) const
{
  throw *this;
}

void CosEventChannelAdmin::AlreadyConnected::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosEventChannelAdmin::AlreadyConnected::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosEventChannelAdmin::AlreadyConnected::_tao_type (void) const
{
  return ::CosEventChannelAdmin::_tc_AlreadyConnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosEventChannelAdmin_AlreadyConnected = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosEventChannelAdmin_AlreadyConnected (
  ::CORBA::tk_except,
  "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
  "AlreadyConnected",
  _tao_fields_CosEventChannelAdmin_AlreadyConnected,
  0);


namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AlreadyConnected =
    &_tao_tc_CosEventChannelAdmin_AlreadyConnected;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosEventChannelAdmin::TypeError::TypeError (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
        "TypeError"
      )
{
}

CosEventChannelAdmin::TypeError::~TypeError (void)
{
}

CosEventChannelAdmin::TypeError::TypeError (const ::CosEventChannelAdmin::TypeError &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosEventChannelAdmin::TypeError&
CosEventChannelAdmin::TypeError::operator= (const ::CosEventChannelAdmin::TypeError &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosEventChannelAdmin::TypeError::_tao_any_destructor (void *_tao_void_pointer)
{
  TypeError *_tao_tmp_pointer =
    static_cast<TypeError *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosEventChannelAdmin::TypeError *
CosEventChannelAdmin::TypeError::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<TypeError *> (_tao_excp);
}

const CosEventChannelAdmin::TypeError *
CosEventChannelAdmin::TypeError::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const TypeError *> (_tao_excp);
}

::CORBA::Exception *CosEventChannelAdmin::TypeError::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosEventChannelAdmin::TypeError, 0);
  return retval;
}

::CORBA::Exception *
CosEventChannelAdmin::TypeError::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosEventChannelAdmin::TypeError (*this),
      0
    );
  return result;
}

void CosEventChannelAdmin::TypeError::_raise (void) const
{
  throw *this;
}

void CosEventChannelAdmin::TypeError::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosEventChannelAdmin::TypeError::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosEventChannelAdmin::TypeError::_tao_type (void) const
{
  return ::CosEventChannelAdmin::_tc_TypeError;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosEventChannelAdmin_TypeError = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosEventChannelAdmin_TypeError (
  ::CORBA::tk_except,
  "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
  "TypeError",
  _tao_fields_CosEventChannelAdmin_TypeError,
  0);


namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypeError =
    &_tao_tc_CosEventChannelAdmin_TypeError;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::ProxyPushConsumer.

CosEventChannelAdmin::ProxyPushConsumer_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushConsumer>::duplicate (
    CosEventChannelAdmin::ProxyPushConsumer_ptr p)
{
  return CosEventChannelAdmin::ProxyPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushConsumer>::release (
    CosEventChannelAdmin::ProxyPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::ProxyPushConsumer_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushConsumer>::nil (void)
{
  return CosEventChannelAdmin::ProxyPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushConsumer>::marshal (
    const CosEventChannelAdmin::ProxyPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventChannelAdmin::ProxyPushConsumer::connect_push_supplier (
  ::CosEventComm::PushSupplier_ptr push_supplier)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushConsumer_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_ProxyPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosEventComm::PushSupplier>::in_arg_val _tao_push_supplier (push_supplier);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_supplier
    };

  static TAO::Exception_Data
  _tao_CosEventChannelAdmin_ProxyPushConsumer_connect_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_push_supplier",
      21,
      this->the_TAO_ProxyPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventChannelAdmin_ProxyPushConsumer_connect_push_supplier_exceptiondata,
      1
    );
}

CosEventChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (void)
 : the_TAO_ProxyPushConsumer_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_ProxyPushConsumer_setup_collocation ();
}

void
CosEventChannelAdmin::ProxyPushConsumer::CosEventChannelAdmin_ProxyPushConsumer_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPushConsumer_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventComm_PushConsumer_setup_collocation ();
}

CosEventChannelAdmin::ProxyPushConsumer::~ProxyPushConsumer (void)
{}

void 
CosEventChannelAdmin::ProxyPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushConsumer *_tao_tmp_pointer =
    static_cast<ProxyPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::ProxyPushConsumer_ptr
CosEventChannelAdmin::ProxyPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0",
        CosEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPushConsumer_ptr
CosEventChannelAdmin::ProxyPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0",
        CosEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPushConsumer_ptr
CosEventChannelAdmin::ProxyPushConsumer::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::ProxyPushConsumer_ptr
CosEventChannelAdmin::ProxyPushConsumer::_duplicate (ProxyPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::ProxyPushConsumer::_tao_release (ProxyPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::ProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_ProxyPushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0",
    "ProxyPushConsumer");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushConsumer =
    &_tao_tc_CosEventChannelAdmin_ProxyPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::ProxyPushSupplier.

CosEventChannelAdmin::ProxyPushSupplier_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushSupplier>::duplicate (
    CosEventChannelAdmin::ProxyPushSupplier_ptr p)
{
  return CosEventChannelAdmin::ProxyPushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushSupplier>::release (
    CosEventChannelAdmin::ProxyPushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::ProxyPushSupplier_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushSupplier>::nil (void)
{
  return CosEventChannelAdmin::ProxyPushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPushSupplier>::marshal (
    const CosEventChannelAdmin::ProxyPushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventChannelAdmin::ProxyPushSupplier::connect_push_consumer (
  ::CosEventComm::PushConsumer_ptr push_consumer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosEventComm::PushConsumer>::in_arg_val _tao_push_consumer (push_consumer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_consumer
    };

  static TAO::Exception_Data
  _tao_CosEventChannelAdmin_ProxyPushSupplier_connect_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
        CosEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_push_consumer",
      21,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventChannelAdmin_ProxyPushSupplier_connect_push_consumer_exceptiondata,
      2
    );
}

CosEventChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (void)
 : the_TAO_ProxyPushSupplier_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_ProxyPushSupplier_setup_collocation ();
}

void
CosEventChannelAdmin::ProxyPushSupplier::CosEventChannelAdmin_ProxyPushSupplier_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventComm_PushSupplier_setup_collocation ();
}

CosEventChannelAdmin::ProxyPushSupplier::~ProxyPushSupplier (void)
{}

void 
CosEventChannelAdmin::ProxyPushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushSupplier *_tao_tmp_pointer =
    static_cast<ProxyPushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::ProxyPushSupplier_ptr
CosEventChannelAdmin::ProxyPushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0",
        CosEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPushSupplier_ptr
CosEventChannelAdmin::ProxyPushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0",
        CosEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPushSupplier_ptr
CosEventChannelAdmin::ProxyPushSupplier::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::ProxyPushSupplier_ptr
CosEventChannelAdmin::ProxyPushSupplier::_duplicate (ProxyPushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::ProxyPushSupplier::_tao_release (ProxyPushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::ProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_ProxyPushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/ProxyPushSupplier:1.0",
    "ProxyPushSupplier");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushSupplier =
    &_tao_tc_CosEventChannelAdmin_ProxyPushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::ProxyPullSupplier.

CosEventChannelAdmin::ProxyPullSupplier_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullSupplier>::duplicate (
    CosEventChannelAdmin::ProxyPullSupplier_ptr p)
{
  return CosEventChannelAdmin::ProxyPullSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullSupplier>::release (
    CosEventChannelAdmin::ProxyPullSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::ProxyPullSupplier_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullSupplier>::nil (void)
{
  return CosEventChannelAdmin::ProxyPullSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullSupplier>::marshal (
    const CosEventChannelAdmin::ProxyPullSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_ProxyPullSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventChannelAdmin::ProxyPullSupplier::connect_pull_consumer (
  ::CosEventComm::PullConsumer_ptr pull_consumer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPullSupplier_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_ProxyPullSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosEventComm::PullConsumer>::in_arg_val _tao_pull_consumer (pull_consumer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_pull_consumer
    };

  static TAO::Exception_Data
  _tao_CosEventChannelAdmin_ProxyPullSupplier_connect_pull_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_pull_consumer",
      21,
      this->the_TAO_ProxyPullSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventChannelAdmin_ProxyPullSupplier_connect_pull_consumer_exceptiondata,
      1
    );
}

CosEventChannelAdmin::ProxyPullSupplier::ProxyPullSupplier (void)
 : the_TAO_ProxyPullSupplier_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_ProxyPullSupplier_setup_collocation ();
}

void
CosEventChannelAdmin::ProxyPullSupplier::CosEventChannelAdmin_ProxyPullSupplier_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_ProxyPullSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPullSupplier_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_ProxyPullSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventComm_PullSupplier_setup_collocation ();
}

CosEventChannelAdmin::ProxyPullSupplier::~ProxyPullSupplier (void)
{}

void 
CosEventChannelAdmin::ProxyPullSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPullSupplier *_tao_tmp_pointer =
    static_cast<ProxyPullSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::ProxyPullSupplier_ptr
CosEventChannelAdmin::ProxyPullSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPullSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0",
        CosEventChannelAdmin__TAO_ProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPullSupplier_ptr
CosEventChannelAdmin::ProxyPullSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPullSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0",
        CosEventChannelAdmin__TAO_ProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPullSupplier_ptr
CosEventChannelAdmin::ProxyPullSupplier::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::ProxyPullSupplier_ptr
CosEventChannelAdmin::ProxyPullSupplier::_duplicate (ProxyPullSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::ProxyPullSupplier::_tao_release (ProxyPullSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPullSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::ProxyPullSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPullSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_ProxyPullSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0",
    "ProxyPullSupplier");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPullSupplier =
    &_tao_tc_CosEventChannelAdmin_ProxyPullSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::ProxyPullConsumer.

CosEventChannelAdmin::ProxyPullConsumer_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullConsumer>::duplicate (
    CosEventChannelAdmin::ProxyPullConsumer_ptr p)
{
  return CosEventChannelAdmin::ProxyPullConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullConsumer>::release (
    CosEventChannelAdmin::ProxyPullConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::ProxyPullConsumer_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullConsumer>::nil (void)
{
  return CosEventChannelAdmin::ProxyPullConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::ProxyPullConsumer>::marshal (
    const CosEventChannelAdmin::ProxyPullConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_ProxyPullConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventChannelAdmin::ProxyPullConsumer::connect_pull_supplier (
  ::CosEventComm::PullSupplier_ptr pull_supplier)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPullConsumer_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_ProxyPullConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosEventComm::PullSupplier>::in_arg_val _tao_pull_supplier (pull_supplier);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_pull_supplier
    };

  static TAO::Exception_Data
  _tao_CosEventChannelAdmin_ProxyPullConsumer_connect_pull_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
        CosEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_pull_supplier",
      21,
      this->the_TAO_ProxyPullConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventChannelAdmin_ProxyPullConsumer_connect_pull_supplier_exceptiondata,
      2
    );
}

CosEventChannelAdmin::ProxyPullConsumer::ProxyPullConsumer (void)
 : the_TAO_ProxyPullConsumer_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_ProxyPullConsumer_setup_collocation ();
}

void
CosEventChannelAdmin::ProxyPullConsumer::CosEventChannelAdmin_ProxyPullConsumer_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_ProxyPullConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPullConsumer_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_ProxyPullConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosEventComm_PullConsumer_setup_collocation ();
}

CosEventChannelAdmin::ProxyPullConsumer::~ProxyPullConsumer (void)
{}

void 
CosEventChannelAdmin::ProxyPullConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPullConsumer *_tao_tmp_pointer =
    static_cast<ProxyPullConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::ProxyPullConsumer_ptr
CosEventChannelAdmin::ProxyPullConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPullConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0",
        CosEventChannelAdmin__TAO_ProxyPullConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPullConsumer_ptr
CosEventChannelAdmin::ProxyPullConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPullConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0",
        CosEventChannelAdmin__TAO_ProxyPullConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ProxyPullConsumer_ptr
CosEventChannelAdmin::ProxyPullConsumer::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::ProxyPullConsumer_ptr
CosEventChannelAdmin::ProxyPullConsumer::_duplicate (ProxyPullConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::ProxyPullConsumer::_tao_release (ProxyPullConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPullConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PullConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::ProxyPullConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::ProxyPullConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_ProxyPullConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/ProxyPullConsumer:1.0",
    "ProxyPullConsumer");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPullConsumer =
    &_tao_tc_CosEventChannelAdmin_ProxyPullConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::ConsumerAdmin.

CosEventChannelAdmin::ConsumerAdmin_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ConsumerAdmin>::duplicate (
    CosEventChannelAdmin::ConsumerAdmin_ptr p)
{
  return CosEventChannelAdmin::ConsumerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::ConsumerAdmin>::release (
    CosEventChannelAdmin::ConsumerAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::ConsumerAdmin_ptr
TAO::Objref_Traits<CosEventChannelAdmin::ConsumerAdmin>::nil (void)
{
  return CosEventChannelAdmin::ConsumerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::ConsumerAdmin>::marshal (
    const CosEventChannelAdmin::ConsumerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ProxyPushSupplier_ptr
CosEventChannelAdmin::ConsumerAdmin::obtain_push_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ProxyPushSupplier>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "obtain_push_supplier",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ProxyPullSupplier_ptr
CosEventChannelAdmin::ConsumerAdmin::obtain_pull_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ProxyPullSupplier>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "obtain_pull_supplier",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

CosEventChannelAdmin::ConsumerAdmin::ConsumerAdmin (void)
 : the_TAO_ConsumerAdmin_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_ConsumerAdmin_setup_collocation ();
}

void
CosEventChannelAdmin::ConsumerAdmin::CosEventChannelAdmin_ConsumerAdmin_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ConsumerAdmin_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventChannelAdmin::ConsumerAdmin::~ConsumerAdmin (void)
{}

void 
CosEventChannelAdmin::ConsumerAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  ConsumerAdmin *_tao_tmp_pointer =
    static_cast<ConsumerAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::ConsumerAdmin_ptr
CosEventChannelAdmin::ConsumerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0",
        CosEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ConsumerAdmin_ptr
CosEventChannelAdmin::ConsumerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0",
        CosEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::ConsumerAdmin_ptr
CosEventChannelAdmin::ConsumerAdmin::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::ConsumerAdmin_ptr
CosEventChannelAdmin::ConsumerAdmin::_duplicate (ConsumerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::ConsumerAdmin::_tao_release (ConsumerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::ConsumerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::ConsumerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_ConsumerAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0",
    "ConsumerAdmin");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerAdmin =
    &_tao_tc_CosEventChannelAdmin_ConsumerAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::SupplierAdmin.

CosEventChannelAdmin::SupplierAdmin_ptr
TAO::Objref_Traits<CosEventChannelAdmin::SupplierAdmin>::duplicate (
    CosEventChannelAdmin::SupplierAdmin_ptr p)
{
  return CosEventChannelAdmin::SupplierAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::SupplierAdmin>::release (
    CosEventChannelAdmin::SupplierAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::SupplierAdmin_ptr
TAO::Objref_Traits<CosEventChannelAdmin::SupplierAdmin>::nil (void)
{
  return CosEventChannelAdmin::SupplierAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::SupplierAdmin>::marshal (
    const CosEventChannelAdmin::SupplierAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ProxyPushConsumer_ptr
CosEventChannelAdmin::SupplierAdmin::obtain_push_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ProxyPushConsumer>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "obtain_push_consumer",
      20,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ProxyPullConsumer_ptr
CosEventChannelAdmin::SupplierAdmin::obtain_pull_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ProxyPullConsumer>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "obtain_pull_consumer",
      20,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

CosEventChannelAdmin::SupplierAdmin::SupplierAdmin (void)
 : the_TAO_SupplierAdmin_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_SupplierAdmin_setup_collocation ();
}

void
CosEventChannelAdmin::SupplierAdmin::CosEventChannelAdmin_SupplierAdmin_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SupplierAdmin_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventChannelAdmin::SupplierAdmin::~SupplierAdmin (void)
{}

void 
CosEventChannelAdmin::SupplierAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  SupplierAdmin *_tao_tmp_pointer =
    static_cast<SupplierAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::SupplierAdmin_ptr
CosEventChannelAdmin::SupplierAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0",
        CosEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::SupplierAdmin_ptr
CosEventChannelAdmin::SupplierAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0",
        CosEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::SupplierAdmin_ptr
CosEventChannelAdmin::SupplierAdmin::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::SupplierAdmin_ptr
CosEventChannelAdmin::SupplierAdmin::_duplicate (SupplierAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::SupplierAdmin::_tao_release (SupplierAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::SupplierAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::SupplierAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_SupplierAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0",
    "SupplierAdmin");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SupplierAdmin =
    &_tao_tc_CosEventChannelAdmin_SupplierAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventChannelAdmin::EventChannel.

CosEventChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<CosEventChannelAdmin::EventChannel>::duplicate (
    CosEventChannelAdmin::EventChannel_ptr p)
{
  return CosEventChannelAdmin::EventChannel::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventChannelAdmin::EventChannel>::release (
    CosEventChannelAdmin::EventChannel_ptr p)
{
  ::CORBA::release (p);
}

CosEventChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<CosEventChannelAdmin::EventChannel>::nil (void)
{
  return CosEventChannelAdmin::EventChannel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventChannelAdmin::EventChannel>::marshal (
    const CosEventChannelAdmin::EventChannel_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::ConsumerAdmin_ptr
CosEventChannelAdmin::EventChannel::for_consumers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "for_consumers",
      13,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosEventChannelAdmin::SupplierAdmin_ptr
CosEventChannelAdmin::EventChannel::for_suppliers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosEventChannelAdmin::SupplierAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "for_suppliers",
      13,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventChannelAdmin::EventChannel::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosEventChannelAdmin::EventChannel::EventChannel (void)
 : the_TAO_EventChannel_Proxy_Broker_ (0)
{
  this->CosEventChannelAdmin_EventChannel_setup_collocation ();
}

void
CosEventChannelAdmin::EventChannel::CosEventChannelAdmin_EventChannel_setup_collocation ()
{
  if (::CosEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannel_Proxy_Broker_ =
        ::CosEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventChannelAdmin::EventChannel::~EventChannel (void)
{}

void 
CosEventChannelAdmin::EventChannel::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannel *_tao_tmp_pointer =
    static_cast<EventChannel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventChannelAdmin::EventChannel_ptr
CosEventChannelAdmin::EventChannel::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0",
        CosEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::EventChannel_ptr
CosEventChannelAdmin::EventChannel::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0",
        CosEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

CosEventChannelAdmin::EventChannel_ptr
CosEventChannelAdmin::EventChannel::_nil (void)
{
  return 0;
}

CosEventChannelAdmin::EventChannel_ptr
CosEventChannelAdmin::EventChannel::_duplicate (EventChannel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventChannelAdmin::EventChannel::_tao_release (EventChannel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventChannelAdmin::EventChannel::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventChannelAdmin::EventChannel::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0";
}

::CORBA::Boolean
CosEventChannelAdmin::EventChannel::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventChannelAdmin_EventChannel (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0",
    "EventChannel");
  

namespace CosEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannel =
    &_tao_tc_CosEventChannelAdmin_EventChannel;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosEventChannelAdmin::AlreadyConnected>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosEventChannelAdmin::AlreadyConnected &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosEventChannelAdmin::AlreadyConnected>::insert_copy (
        _tao_any,
        ::CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
        ::CosEventChannelAdmin::_tc_AlreadyConnected,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosEventChannelAdmin::AlreadyConnected *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosEventChannelAdmin::AlreadyConnected>::insert (
        _tao_any,
        ::CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
        ::CosEventChannelAdmin::_tc_AlreadyConnected,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosEventChannelAdmin::AlreadyConnected *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosEventChannelAdmin::AlreadyConnected *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosEventChannelAdmin::AlreadyConnected *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosEventChannelAdmin::AlreadyConnected>::extract (
          _tao_any,
          ::CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
          ::CosEventChannelAdmin::_tc_AlreadyConnected,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosEventChannelAdmin::AlreadyConnected &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosEventChannelAdmin::AlreadyConnected>::insert_copy (
      _tao_any,
      CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
      CosEventChannelAdmin::_tc_AlreadyConnected,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::AlreadyConnected *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosEventChannelAdmin::AlreadyConnected>::insert (
      _tao_any,
      CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
      CosEventChannelAdmin::_tc_AlreadyConnected,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::AlreadyConnected *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosEventChannelAdmin::AlreadyConnected *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosEventChannelAdmin::AlreadyConnected *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosEventChannelAdmin::AlreadyConnected>::extract (
        _tao_any,
        CosEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
        CosEventChannelAdmin::_tc_AlreadyConnected,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosEventChannelAdmin::TypeError>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosEventChannelAdmin::TypeError &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosEventChannelAdmin::TypeError>::insert_copy (
        _tao_any,
        ::CosEventChannelAdmin::TypeError::_tao_any_destructor,
        ::CosEventChannelAdmin::_tc_TypeError,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosEventChannelAdmin::TypeError *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosEventChannelAdmin::TypeError>::insert (
        _tao_any,
        ::CosEventChannelAdmin::TypeError::_tao_any_destructor,
        ::CosEventChannelAdmin::_tc_TypeError,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosEventChannelAdmin::TypeError *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosEventChannelAdmin::TypeError *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosEventChannelAdmin::TypeError *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosEventChannelAdmin::TypeError>::extract (
          _tao_any,
          ::CosEventChannelAdmin::TypeError::_tao_any_destructor,
          ::CosEventChannelAdmin::_tc_TypeError,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosEventChannelAdmin::TypeError &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosEventChannelAdmin::TypeError>::insert_copy (
      _tao_any,
      CosEventChannelAdmin::TypeError::_tao_any_destructor,
      CosEventChannelAdmin::_tc_TypeError,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::TypeError *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosEventChannelAdmin::TypeError>::insert (
      _tao_any,
      CosEventChannelAdmin::TypeError::_tao_any_destructor,
      CosEventChannelAdmin::_tc_TypeError,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::TypeError *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosEventChannelAdmin::TypeError *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosEventChannelAdmin::TypeError *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosEventChannelAdmin::TypeError>::extract (
        _tao_any,
        CosEventChannelAdmin::TypeError::_tao_any_destructor,
        CosEventChannelAdmin::_tc_TypeError,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::ProxyPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr _tao_elem)
  {
    ProxyPushConsumer_ptr _tao_objptr =
      ProxyPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPushConsumer>::insert (
        _tao_any,
        ProxyPushConsumer::_tao_any_destructor,
        _tc_ProxyPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPushConsumer>::extract (
          _tao_any,
          ProxyPushConsumer::_tao_any_destructor,
          _tc_ProxyPushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPushConsumer_ptr _tao_elem)
{
  CosEventChannelAdmin::ProxyPushConsumer_ptr _tao_objptr =
    CosEventChannelAdmin::ProxyPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPushConsumer>::insert (
      _tao_any,
      CosEventChannelAdmin::ProxyPushConsumer::_tao_any_destructor,
      CosEventChannelAdmin::_tc_ProxyPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPushConsumer>::extract (
        _tao_any,
        CosEventChannelAdmin::ProxyPushConsumer::_tao_any_destructor,
        CosEventChannelAdmin::_tc_ProxyPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::ProxyPushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr _tao_elem)
  {
    ProxyPushSupplier_ptr _tao_objptr =
      ProxyPushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPushSupplier>::insert (
        _tao_any,
        ProxyPushSupplier::_tao_any_destructor,
        _tc_ProxyPushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPushSupplier>::extract (
          _tao_any,
          ProxyPushSupplier::_tao_any_destructor,
          _tc_ProxyPushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPushSupplier_ptr _tao_elem)
{
  CosEventChannelAdmin::ProxyPushSupplier_ptr _tao_objptr =
    CosEventChannelAdmin::ProxyPushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPushSupplier>::insert (
      _tao_any,
      CosEventChannelAdmin::ProxyPushSupplier::_tao_any_destructor,
      CosEventChannelAdmin::_tc_ProxyPushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPushSupplier>::extract (
        _tao_any,
        CosEventChannelAdmin::ProxyPushSupplier::_tao_any_destructor,
        CosEventChannelAdmin::_tc_ProxyPushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::ProxyPullSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPullSupplier_ptr _tao_elem)
  {
    ProxyPullSupplier_ptr _tao_objptr =
      ProxyPullSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPullSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPullSupplier>::insert (
        _tao_any,
        ProxyPullSupplier::_tao_any_destructor,
        _tc_ProxyPullSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPullSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPullSupplier>::extract (
          _tao_any,
          ProxyPullSupplier::_tao_any_destructor,
          _tc_ProxyPullSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPullSupplier_ptr _tao_elem)
{
  CosEventChannelAdmin::ProxyPullSupplier_ptr _tao_objptr =
    CosEventChannelAdmin::ProxyPullSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPullSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPullSupplier>::insert (
      _tao_any,
      CosEventChannelAdmin::ProxyPullSupplier::_tao_any_destructor,
      CosEventChannelAdmin::_tc_ProxyPullSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPullSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPullSupplier>::extract (
        _tao_any,
        CosEventChannelAdmin::ProxyPullSupplier::_tao_any_destructor,
        CosEventChannelAdmin::_tc_ProxyPullSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::ProxyPullConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPullConsumer_ptr _tao_elem)
  {
    ProxyPullConsumer_ptr _tao_objptr =
      ProxyPullConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPullConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPullConsumer>::insert (
        _tao_any,
        ProxyPullConsumer::_tao_any_destructor,
        _tc_ProxyPullConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPullConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPullConsumer>::extract (
          _tao_any,
          ProxyPullConsumer::_tao_any_destructor,
          _tc_ProxyPullConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPullConsumer_ptr _tao_elem)
{
  CosEventChannelAdmin::ProxyPullConsumer_ptr _tao_objptr =
    CosEventChannelAdmin::ProxyPullConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPullConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPullConsumer>::insert (
      _tao_any,
      CosEventChannelAdmin::ProxyPullConsumer::_tao_any_destructor,
      CosEventChannelAdmin::_tc_ProxyPullConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ProxyPullConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::ProxyPullConsumer>::extract (
        _tao_any,
        CosEventChannelAdmin::ProxyPullConsumer::_tao_any_destructor,
        CosEventChannelAdmin::_tc_ProxyPullConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::ConsumerAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr _tao_elem)
  {
    ConsumerAdmin_ptr _tao_objptr =
      ConsumerAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ConsumerAdmin>::insert (
        _tao_any,
        ConsumerAdmin::_tao_any_destructor,
        _tc_ConsumerAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ConsumerAdmin>::extract (
          _tao_any,
          ConsumerAdmin::_tao_any_destructor,
          _tc_ConsumerAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ConsumerAdmin_ptr _tao_elem)
{
  CosEventChannelAdmin::ConsumerAdmin_ptr _tao_objptr =
    CosEventChannelAdmin::ConsumerAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ConsumerAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::ConsumerAdmin>::insert (
      _tao_any,
      CosEventChannelAdmin::ConsumerAdmin::_tao_any_destructor,
      CosEventChannelAdmin::_tc_ConsumerAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::ConsumerAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::ConsumerAdmin>::extract (
        _tao_any,
        CosEventChannelAdmin::ConsumerAdmin::_tao_any_destructor,
        CosEventChannelAdmin::_tc_ConsumerAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::SupplierAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr _tao_elem)
  {
    SupplierAdmin_ptr _tao_objptr =
      SupplierAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SupplierAdmin>::insert (
        _tao_any,
        SupplierAdmin::_tao_any_destructor,
        _tc_SupplierAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SupplierAdmin>::extract (
          _tao_any,
          SupplierAdmin::_tao_any_destructor,
          _tc_SupplierAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::SupplierAdmin_ptr _tao_elem)
{
  CosEventChannelAdmin::SupplierAdmin_ptr _tao_objptr =
    CosEventChannelAdmin::SupplierAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::SupplierAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::SupplierAdmin>::insert (
      _tao_any,
      CosEventChannelAdmin::SupplierAdmin::_tao_any_destructor,
      CosEventChannelAdmin::_tc_SupplierAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::SupplierAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::SupplierAdmin>::extract (
        _tao_any,
        CosEventChannelAdmin::SupplierAdmin::_tao_any_destructor,
        CosEventChannelAdmin::_tc_SupplierAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventChannelAdmin::EventChannel>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr _tao_elem)
  {
    EventChannel_ptr _tao_objptr =
      EventChannel::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannel>::insert (
        _tao_any,
        EventChannel::_tao_any_destructor,
        _tc_EventChannel,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannel_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannel>::extract (
          _tao_any,
          EventChannel::_tao_any_destructor,
          _tc_EventChannel,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::EventChannel_ptr _tao_elem)
{
  CosEventChannelAdmin::EventChannel_ptr _tao_objptr =
    CosEventChannelAdmin::EventChannel::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::EventChannel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventChannelAdmin::EventChannel>::insert (
      _tao_any,
      CosEventChannelAdmin::EventChannel::_tao_any_destructor,
      CosEventChannelAdmin::_tc_EventChannel,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventChannelAdmin::EventChannel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventChannelAdmin::EventChannel>::extract (
        _tao_any,
        CosEventChannelAdmin::EventChannel::_tao_any_destructor,
        CosEventChannelAdmin::_tc_EventChannel,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::AlreadyConnected &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosEventChannelAdmin::AlreadyConnected&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::TypeError &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosEventChannelAdmin::TypeError&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::ProxyPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::ProxyPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::ProxyPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::ProxyPushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::ProxyPushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::ProxyPushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::ProxyPullSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::ProxyPullSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::ProxyPullSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_ProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::ProxyPullConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::ProxyPullConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::ProxyPullConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_ProxyPullConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::ConsumerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::ConsumerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::ConsumerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::SupplierAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::SupplierAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::SupplierAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventChannelAdmin::EventChannel_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventChannelAdmin::EventChannel_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventChannelAdmin::EventChannel RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


