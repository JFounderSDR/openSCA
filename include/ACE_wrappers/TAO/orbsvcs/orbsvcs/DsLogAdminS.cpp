// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_DSLOGADMINS_L7Q6DC_CPP_
#define _TAO_IDL_DSLOGADMINS_L7Q6DC_CPP_


#include "DsLogAdminS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "DsLogAdminS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_DsLogAdmin_Iterator_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DsLogAdmin_Iterator_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DsLogAdmin_Iterator_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  5, 16,  0, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16,  0, 16, 16, 16,
     16,  0, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_DsLogAdmin_Iterator_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 13,
      DUPLICATES = 0,
      WORDLIST_SIZE = 10
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},
      {"get", &POA_DsLogAdmin::Iterator::get_skel, 0},
      {"",0,0},
      {"_is_a", &POA_DsLogAdmin::Iterator::_is_a_skel, 0},
      {"",0,0},
      {"destroy", &POA_DsLogAdmin::Iterator::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_component", &POA_DsLogAdmin::Iterator::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_DsLogAdmin::Iterator::_non_existent_skel, 0},
      {"_repository_id", &POA_DsLogAdmin::Iterator::_repository_id_skel, 0},
      {"_interface", &POA_DsLogAdmin::Iterator::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_DsLogAdmin_Iterator_Perfect_Hash_OpTable tao_DsLogAdmin_Iterator_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_Initializer (size_t)
{
  DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_function_pointer = 
    DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
DsLogAdmin__TAO_Iterator_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_DsLogAdmin::Iterator::Iterator (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DsLogAdmin_Iterator_optable;
}

POA_DsLogAdmin::Iterator::Iterator (const Iterator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_DsLogAdmin::Iterator::~Iterator (void)
{
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_Iterator
    : public TAO::Upcall_Command
  {
  public:
    inline get_Iterator (
      POA_DsLogAdmin::Iterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::RecordList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::RecordList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->get (
          arg_1
          , arg_2);
    }
  
  private:
    POA_DsLogAdmin::Iterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Iterator::get_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidParam
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::RecordList>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_position;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_position,
      &_tao_how_many
    };
  
  static size_t const nargs = 3;

  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);

  get_Iterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_Iterator
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_Iterator (
      POA_DsLogAdmin::Iterator * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_DsLogAdmin::Iterator * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Iterator::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);

  destroy_Iterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_Iterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_Iterator_Upcall_Command (
      POA_DsLogAdmin::Iterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::Iterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Iterator::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);
  
  _is_a_Iterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_Iterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_Iterator_Upcall_Command (
      POA_DsLogAdmin::Iterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_DsLogAdmin::Iterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Iterator::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);
  
  _non_existent_Iterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_Iterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_Iterator_Upcall_Command (
      POA_DsLogAdmin::Iterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_DsLogAdmin::Iterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Iterator::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);
  
  _repository_id_Iterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_DsLogAdmin::Iterator::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_Iterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_Iterator_Upcall_Command (
      POA_DsLogAdmin::Iterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_DsLogAdmin::Iterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Iterator::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Iterator * const impl =
    static_cast<POA_DsLogAdmin::Iterator *> (servant);
  
  _get_component_Iterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_DsLogAdmin::Iterator::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/Iterator:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DsLogAdmin::Iterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/DsLogAdmin/Iterator:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_DsLogAdmin::Iterator::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

DsLogAdmin::Iterator *
POA_DsLogAdmin::Iterator::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DsLogAdmin::Iterator STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_DsLogAdmin_Log_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DsLogAdmin_Log_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DsLogAdmin_Log_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 15, 91, 10, 91,  0,
     35,  0, 40, 15,  0,  0, 91,  5,  5,  0,
     35, 91, 91, 10,  0,  0, 15, 91, 91, 10,
     91,  0, 91, 91, 91, 91, 91, 91,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_DsLogAdmin_Log_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 42,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 29,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 90,
      HASH_VALUE_RANGE = 87,
      DUPLICATES = 3,
      WORDLIST_SIZE = 46
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"copy", &POA_DsLogAdmin::Log::copy_skel, 0},
      {"match", &POA_DsLogAdmin::Log::match_skel, 0},
      {"retrieve", &POA_DsLogAdmin::Log::retrieve_skel, 0},
      {"my_factory", &POA_DsLogAdmin::Log::my_factory_skel, 0},
      {"set_log_qos", &POA_DsLogAdmin::Log::set_log_qos_skel, 0},
      {"set_max_size", &POA_DsLogAdmin::Log::set_max_size_skel, 0},
      {"query", &POA_DsLogAdmin::Log::query_skel, 0},
      {"set_interval", &POA_DsLogAdmin::Log::set_interval_skel, 0},
      {"set_week_mask", &POA_DsLogAdmin::Log::set_week_mask_skel, 0},
      {"set_max_record_life", &POA_DsLogAdmin::Log::set_max_record_life_skel, 0},
      {"set_forwarding_state", &POA_DsLogAdmin::Log::set_forwarding_state_skel, 0},
      {"set_record_attribute", &POA_DsLogAdmin::Log::set_record_attribute_skel, 0},
      {"set_records_attribute", &POA_DsLogAdmin::Log::set_records_attribute_skel, 0},
      {"write_records", &POA_DsLogAdmin::Log::write_records_skel, 0},
      {"set_administrative_state", &POA_DsLogAdmin::Log::set_administrative_state_skel, 0},
      {"_interface", &POA_DsLogAdmin::Log::_interface_skel, 0},
      {"get_log_qos", &POA_DsLogAdmin::Log::get_log_qos_skel, 0},
      {"get_max_size", &POA_DsLogAdmin::Log::get_max_size_skel, 0},
      {"get_n_records", &POA_DsLogAdmin::Log::get_n_records_skel, 0},
      {"set_capacity_alarm_thresholds", &POA_DsLogAdmin::Log::set_capacity_alarm_thresholds_skel, 0},
      {"_is_a", &POA_DsLogAdmin::Log::_is_a_skel, 0},
      {"get_current_size", &POA_DsLogAdmin::Log::get_current_size_skel, 0},
      {"get_interval", &POA_DsLogAdmin::Log::get_interval_skel, 0},
      {"get_week_mask", &POA_DsLogAdmin::Log::get_week_mask_skel, 0},
      {"get_max_record_life", &POA_DsLogAdmin::Log::get_max_record_life_skel, 0},
      {"get_forwarding_state", &POA_DsLogAdmin::Log::get_forwarding_state_skel, 0},
      {"get_record_attribute", &POA_DsLogAdmin::Log::get_record_attribute_skel, 0},
      {"get_operational_state", &POA_DsLogAdmin::Log::get_operational_state_skel, 0},
      {"id", &POA_DsLogAdmin::Log::id_skel, 0},
      {"get_availability_status", &POA_DsLogAdmin::Log::get_availability_status_skel, 0},
      {"get_administrative_state", &POA_DsLogAdmin::Log::get_administrative_state_skel, 0},
      {"_component", &POA_DsLogAdmin::Log::_component_skel, 0},
      {"write_recordlist", &POA_DsLogAdmin::Log::write_recordlist_skel, 0},
      {"_non_existent", &POA_DsLogAdmin::Log::_non_existent_skel, 0},
      {"get_capacity_alarm_thresholds", &POA_DsLogAdmin::Log::get_capacity_alarm_thresholds_skel, 0},
      {"flush", &POA_DsLogAdmin::Log::flush_skel, 0},
      {"copy_with_id", &POA_DsLogAdmin::Log::copy_with_id_skel, 0},
      {"delete_records", &POA_DsLogAdmin::Log::delete_records_skel, 0},
      {"set_log_full_action", &POA_DsLogAdmin::Log::set_log_full_action_skel, 0},
      {"_repository_id", &POA_DsLogAdmin::Log::_repository_id_skel, 0},
      {"get_log_full_action", &POA_DsLogAdmin::Log::get_log_full_action_skel, 0},
      {"delete_records_by_id", &POA_DsLogAdmin::Log::delete_records_by_id_skel, 0},
    };

  static const signed char lookup[] =
    {
        -1,   -1,   -1,   -1,    4,    5,  -14,   -2,    6,   -1,    7,    8,    9,  -29, 
        -2,   10,   -1,   11,   12,   13, -104,   16,   -1,   17,   18,   19,   20,   21, 
        22,   23,   24,   25,   26,   27,   28, -112,   31,   32,   33,   34,   35,   36, 
        -1,   37,   38,   39,   -1,   40,   -1,   41,   -1,   -1,   -1,   -1,   42,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   43,   -1,   -1,   -1,   -1,   44, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   45, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_DsLogAdmin_Log_Perfect_Hash_OpTable tao_DsLogAdmin_Log_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
DsLogAdmin__TAO_Log_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
DsLogAdmin__TAO_Log_Proxy_Broker_Factory_Initializer (size_t)
{
  DsLogAdmin__TAO_Log_Proxy_Broker_Factory_function_pointer = 
    DsLogAdmin__TAO_Log_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
DsLogAdmin__TAO_Log_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  DsLogAdmin__TAO_Log_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (DsLogAdmin__TAO_Log_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_DsLogAdmin::Log::Log (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DsLogAdmin_Log_optable;
}

POA_DsLogAdmin::Log::Log (const Log& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_DsLogAdmin::Log::~Log (void)
{
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class my_factory_Log
    : public TAO::Upcall_Command
  {
  public:
    inline my_factory_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::LogMgr>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::LogMgr> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->my_factory ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::my_factory_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::LogMgr>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  my_factory_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class id_Log
    : public TAO::Upcall_Command
  {
  public:
    inline id_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->id ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  id_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_log_qos_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_log_qos_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::QoSList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::QoSList> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_log_qos ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_log_qos_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::QoSList>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_log_qos_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_log_qos_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_log_qos_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::QoSList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::QoSList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_log_qos (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_log_qos_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_UnsupportedQoS
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::QoSList>::in_arg_val _tao_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_qos
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_log_qos_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_max_record_life_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_max_record_life_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_max_record_life ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_max_record_life_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_max_record_life_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_max_record_life_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_max_record_life_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_max_record_life (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_max_record_life_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_life;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_life
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_max_record_life_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_max_size_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_max_size_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_max_size ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_max_size_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULongLong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_max_size_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_max_size_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_max_size_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_max_size (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_max_size_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidParam
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_size;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_size
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_max_size_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_current_size_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_current_size_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_current_size ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_current_size_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULongLong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_current_size_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_n_records_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_n_records_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_n_records ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_n_records_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULongLong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_n_records_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_log_full_action_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_log_full_action_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::UShort>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_log_full_action ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_log_full_action_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::UShort>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_log_full_action_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_log_full_action_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_log_full_action_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_log_full_action (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_log_full_action_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidLogFullAction
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_action;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_action
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_log_full_action_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_administrative_state_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_administrative_state_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::AdministrativeState>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::AdministrativeState> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_administrative_state ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_administrative_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::AdministrativeState>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_administrative_state_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_administrative_state_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_administrative_state_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::AdministrativeState>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::AdministrativeState> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_administrative_state (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_administrative_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::AdministrativeState>::in_arg_val _tao_state;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_state
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_administrative_state_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_forwarding_state_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_forwarding_state_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::ForwardingState>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::ForwardingState> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_forwarding_state ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_forwarding_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::ForwardingState>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_forwarding_state_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_forwarding_state_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_forwarding_state_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::ForwardingState>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::ForwardingState> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_forwarding_state (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_forwarding_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::ForwardingState>::in_arg_val _tao_state;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_state
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_forwarding_state_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_operational_state_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_operational_state_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::OperationalState>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::OperationalState> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_operational_state ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_operational_state_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::OperationalState>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_operational_state_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_interval_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_interval_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::TimeInterval>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::TimeInterval> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_interval ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_interval_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::TimeInterval>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_interval_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_interval_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_interval_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::TimeInterval>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::TimeInterval> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_interval (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_interval_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidTime,
      DsLogAdmin::_tc_InvalidTimeInterval
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::TimeInterval>::in_arg_val _tao_interval;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_interval
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_interval_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_availability_status_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_availability_status_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::AvailabilityStatus>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::AvailabilityStatus> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_availability_status ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_availability_status_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::AvailabilityStatus>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_availability_status_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_capacity_alarm_thresholds_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_capacity_alarm_thresholds_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::CapacityAlarmThresholdList> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_capacity_alarm_thresholds ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_capacity_alarm_thresholds_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_capacity_alarm_thresholds_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_capacity_alarm_thresholds_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_capacity_alarm_thresholds_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::CapacityAlarmThresholdList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_capacity_alarm_thresholds (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_capacity_alarm_thresholds_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidThreshold
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::in_arg_val _tao_threshs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_threshs
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_capacity_alarm_thresholds_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_week_mask_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_week_mask_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::WeekMask>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::WeekMask> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_week_mask ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_week_mask_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::WeekMask>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_week_mask_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_week_mask_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_week_mask_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::WeekMask>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::WeekMask> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_week_mask (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_week_mask_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidTime,
      DsLogAdmin::_tc_InvalidTimeInterval,
      DsLogAdmin::_tc_InvalidMask
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::WeekMask>::in_arg_val _tao_masks;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_masks
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_week_mask_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class query_Log
    : public TAO::Upcall_Command
  {
  public:
    inline query_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::RecordList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::RecordList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::DsLogAdmin::Iterator>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::DsLogAdmin::Iterator> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->query (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::query_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidGrammar,
      DsLogAdmin::_tc_InvalidConstraint
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::RecordList>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_grammar;
  TAO::SArg_Traits< char *>::in_arg_val _tao_c;
  TAO::SArg_Traits< ::DsLogAdmin::Iterator>::out_arg_val _tao_i;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_grammar,
      &_tao_c,
      &_tao_i
    };
  
  static size_t const nargs = 4;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  query_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class retrieve_Log
    : public TAO::Upcall_Command
  {
  public:
    inline retrieve_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::RecordList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::RecordList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::DsLogAdmin::Iterator>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::DsLogAdmin::Iterator> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->retrieve (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::retrieve_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::RecordList>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_from_time;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::DsLogAdmin::Iterator>::out_arg_val _tao_i;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_from_time,
      &_tao_how_many,
      &_tao_i
    };
  
  static size_t const nargs = 4;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  retrieve_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_Log
    : public TAO::Upcall_Command
  {
  public:
    inline match_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->match (
          arg_1
          , arg_2);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::match_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidGrammar,
      DsLogAdmin::_tc_InvalidConstraint
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_grammar;
  TAO::SArg_Traits< char *>::in_arg_val _tao_c;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_grammar,
      &_tao_c
    };
  
  static size_t const nargs = 3;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  match_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_records_Log
    : public TAO::Upcall_Command
  {
  public:
    inline delete_records_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->delete_records (
          arg_1
          , arg_2);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::delete_records_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidGrammar,
      DsLogAdmin::_tc_InvalidConstraint
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_grammar;
  TAO::SArg_Traits< char *>::in_arg_val _tao_c;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_grammar,
      &_tao_c
    };
  
  static size_t const nargs = 3;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  delete_records_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_records_by_id_Log
    : public TAO::Upcall_Command
  {
  public:
    inline delete_records_by_id_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::DsLogAdmin::RecordIdList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::RecordIdList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->delete_records_by_id (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::delete_records_by_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::RecordIdList>::in_arg_val _tao_ids;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ids
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  delete_records_by_id_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class write_records_Log
    : public TAO::Upcall_Command
  {
  public:
    inline write_records_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::Anys>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::Anys> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->write_records (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::write_records_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_LogFull,
      DsLogAdmin::_tc_LogOffDuty,
      DsLogAdmin::_tc_LogLocked,
      DsLogAdmin::_tc_LogDisabled
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::Anys>::in_arg_val _tao_records;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_records
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  write_records_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class write_recordlist_Log
    : public TAO::Upcall_Command
  {
  public:
    inline write_recordlist_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::RecordList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::RecordList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->write_recordlist (
        arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::write_recordlist_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_LogFull,
      DsLogAdmin::_tc_LogOffDuty,
      DsLogAdmin::_tc_LogLocked,
      DsLogAdmin::_tc_LogDisabled
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::DsLogAdmin::RecordList>::in_arg_val _tao_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_list
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  write_recordlist_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_record_attribute_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_record_attribute_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::DsLogAdmin::NVList>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::NVList> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->set_record_attribute (
        arg_1
        , arg_2);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_record_attribute_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidRecordId,
      DsLogAdmin::_tc_InvalidAttribute
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_id;
  TAO::SArg_Traits< ::DsLogAdmin::NVList>::in_arg_val _tao_attr_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id,
      &_tao_attr_list
    };
  
  static size_t const nargs = 3;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_record_attribute_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_records_attribute_Log
    : public TAO::Upcall_Command
  {
  public:
    inline set_records_attribute_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::DsLogAdmin::NVList>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::NVList> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->set_records_attribute (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::set_records_attribute_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidGrammar,
      DsLogAdmin::_tc_InvalidConstraint,
      DsLogAdmin::_tc_InvalidAttribute
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_grammar;
  TAO::SArg_Traits< char *>::in_arg_val _tao_c;
  TAO::SArg_Traits< ::DsLogAdmin::NVList>::in_arg_val _tao_attr_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_grammar,
      &_tao_c,
      &_tao_attr_list
    };
  
  static size_t const nargs = 4;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  set_records_attribute_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_record_attribute_Log
    : public TAO::Upcall_Command
  {
  public:
    inline get_record_attribute_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::NVList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::NVList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_record_attribute (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::get_record_attribute_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidRecordId
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::NVList>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  get_record_attribute_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class copy_Log
    : public TAO::Upcall_Command
  {
  public:
    inline copy_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::Log>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::Log> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->copy (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::copy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::Log>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::out_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  copy_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class copy_with_id_Log
    : public TAO::Upcall_Command
  {
  public:
    inline copy_with_id_Log (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::Log>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::Log> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->copy_with_id (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::copy_with_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_LogIdAlreadyExists
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::Log>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  copy_with_id_Log command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class flush_Log
    : public TAO::Upcall_Command
  {
  public:
    inline flush_Log (
      POA_DsLogAdmin::Log * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->flush ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::Log::flush_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_UnsupportedQoS
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);

  flush_Log command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_Log_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_Log_Upcall_Command (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Log::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);
  
  _is_a_Log_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_Log_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_Log_Upcall_Command (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Log::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);
  
  _non_existent_Log_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_Log_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_Log_Upcall_Command (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Log::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);
  
  _repository_id_Log_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_DsLogAdmin::Log::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_Log_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_Log_Upcall_Command (
      POA_DsLogAdmin::Log * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_DsLogAdmin::Log * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::Log::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::Log * const impl =
    static_cast<POA_DsLogAdmin::Log *> (servant);
  
  _get_component_Log_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_DsLogAdmin::Log::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/Log:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DsLogAdmin::Log::_interface_repository_id (void) const
{
  return "IDL:omg.org/DsLogAdmin/Log:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_DsLogAdmin::Log::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

DsLogAdmin::Log *
POA_DsLogAdmin::Log::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DsLogAdmin::Log STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        DsLogAdmin__TAO_Log_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_DsLogAdmin_BasicLog_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DsLogAdmin_BasicLog_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DsLogAdmin_BasicLog_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 15, 91, 10, 91,  0,
     35,  0, 40, 15,  0,  0, 91,  5,  5,  0,
     35, 91, 91, 10,  0,  0, 15, 91, 91, 10,
     91,  0, 91, 91, 91, 91, 91, 91,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_DsLogAdmin_BasicLog_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 43,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 29,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 90,
      HASH_VALUE_RANGE = 87,
      DUPLICATES = 3,
      WORDLIST_SIZE = 47
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"copy", &POA_DsLogAdmin::BasicLog::copy_skel, 0},
      {"match", &POA_DsLogAdmin::BasicLog::match_skel, 0},
      {"retrieve", &POA_DsLogAdmin::BasicLog::retrieve_skel, 0},
      {"my_factory", &POA_DsLogAdmin::BasicLog::my_factory_skel, 0},
      {"set_log_qos", &POA_DsLogAdmin::BasicLog::set_log_qos_skel, 0},
      {"set_max_size", &POA_DsLogAdmin::BasicLog::set_max_size_skel, 0},
      {"query", &POA_DsLogAdmin::BasicLog::query_skel, 0},
      {"set_interval", &POA_DsLogAdmin::BasicLog::set_interval_skel, 0},
      {"set_week_mask", &POA_DsLogAdmin::BasicLog::set_week_mask_skel, 0},
      {"set_max_record_life", &POA_DsLogAdmin::BasicLog::set_max_record_life_skel, 0},
      {"set_forwarding_state", &POA_DsLogAdmin::BasicLog::set_forwarding_state_skel, 0},
      {"set_record_attribute", &POA_DsLogAdmin::BasicLog::set_record_attribute_skel, 0},
      {"set_records_attribute", &POA_DsLogAdmin::BasicLog::set_records_attribute_skel, 0},
      {"write_records", &POA_DsLogAdmin::BasicLog::write_records_skel, 0},
      {"set_administrative_state", &POA_DsLogAdmin::BasicLog::set_administrative_state_skel, 0},
      {"_interface", &POA_DsLogAdmin::BasicLog::_interface_skel, 0},
      {"get_log_qos", &POA_DsLogAdmin::BasicLog::get_log_qos_skel, 0},
      {"get_max_size", &POA_DsLogAdmin::BasicLog::get_max_size_skel, 0},
      {"get_n_records", &POA_DsLogAdmin::BasicLog::get_n_records_skel, 0},
      {"set_capacity_alarm_thresholds", &POA_DsLogAdmin::BasicLog::set_capacity_alarm_thresholds_skel, 0},
      {"_is_a", &POA_DsLogAdmin::BasicLog::_is_a_skel, 0},
      {"get_current_size", &POA_DsLogAdmin::BasicLog::get_current_size_skel, 0},
      {"get_interval", &POA_DsLogAdmin::BasicLog::get_interval_skel, 0},
      {"get_week_mask", &POA_DsLogAdmin::BasicLog::get_week_mask_skel, 0},
      {"get_max_record_life", &POA_DsLogAdmin::BasicLog::get_max_record_life_skel, 0},
      {"get_forwarding_state", &POA_DsLogAdmin::BasicLog::get_forwarding_state_skel, 0},
      {"get_record_attribute", &POA_DsLogAdmin::BasicLog::get_record_attribute_skel, 0},
      {"get_operational_state", &POA_DsLogAdmin::BasicLog::get_operational_state_skel, 0},
      {"id", &POA_DsLogAdmin::BasicLog::id_skel, 0},
      {"get_availability_status", &POA_DsLogAdmin::BasicLog::get_availability_status_skel, 0},
      {"get_administrative_state", &POA_DsLogAdmin::BasicLog::get_administrative_state_skel, 0},
      {"_component", &POA_DsLogAdmin::BasicLog::_component_skel, 0},
      {"write_recordlist", &POA_DsLogAdmin::BasicLog::write_recordlist_skel, 0},
      {"destroy", &POA_DsLogAdmin::BasicLog::destroy_skel, 0},
      {"_non_existent", &POA_DsLogAdmin::BasicLog::_non_existent_skel, 0},
      {"get_capacity_alarm_thresholds", &POA_DsLogAdmin::BasicLog::get_capacity_alarm_thresholds_skel, 0},
      {"flush", &POA_DsLogAdmin::BasicLog::flush_skel, 0},
      {"copy_with_id", &POA_DsLogAdmin::BasicLog::copy_with_id_skel, 0},
      {"delete_records", &POA_DsLogAdmin::BasicLog::delete_records_skel, 0},
      {"set_log_full_action", &POA_DsLogAdmin::BasicLog::set_log_full_action_skel, 0},
      {"_repository_id", &POA_DsLogAdmin::BasicLog::_repository_id_skel, 0},
      {"get_log_full_action", &POA_DsLogAdmin::BasicLog::get_log_full_action_skel, 0},
      {"delete_records_by_id", &POA_DsLogAdmin::BasicLog::delete_records_by_id_skel, 0},
    };

  static const signed char lookup[] =
    {
        -1,   -1,   -1,   -1,    4,    5,  -14,   -2,    6,   -1,    7,    8,    9,  -29, 
        -2,   10,   -1,   11,   12,   13, -104,   16,   -1,   17,   18,   19,   20,   21, 
        22,   23,   24,   25,   26,   27,   28, -112,   31,   32,   33,   34,   35,   36, 
        37,   38,   39,   40,   -1,   41,   -1,   42,   -1,   -1,   -1,   -1,   43,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,   -1,   -1,   -1,   -1,   45, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   46, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_DsLogAdmin_BasicLog_Perfect_Hash_OpTable tao_DsLogAdmin_BasicLog_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_Initializer (size_t)
{
  DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_function_pointer = 
    DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
DsLogAdmin__TAO_BasicLog_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_DsLogAdmin::BasicLog::BasicLog (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DsLogAdmin_BasicLog_optable;
}

POA_DsLogAdmin::BasicLog::BasicLog (const BasicLog& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_DsLogAdmin::Log (rhs)
{
}

POA_DsLogAdmin::BasicLog::~BasicLog (void)
{
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_BasicLog
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_BasicLog (
      POA_DsLogAdmin::BasicLog * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_DsLogAdmin::BasicLog * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::BasicLog::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLog * const impl =
    static_cast<POA_DsLogAdmin::BasicLog *> (servant);

  destroy_BasicLog command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_BasicLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_BasicLog_Upcall_Command (
      POA_DsLogAdmin::BasicLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::BasicLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLog::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::BasicLog * const impl =
    static_cast<POA_DsLogAdmin::BasicLog *> (servant);
  
  _is_a_BasicLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_BasicLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_BasicLog_Upcall_Command (
      POA_DsLogAdmin::BasicLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_DsLogAdmin::BasicLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLog::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLog * const impl =
    static_cast<POA_DsLogAdmin::BasicLog *> (servant);
  
  _non_existent_BasicLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_BasicLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_BasicLog_Upcall_Command (
      POA_DsLogAdmin::BasicLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_DsLogAdmin::BasicLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLog::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLog * const impl =
    static_cast<POA_DsLogAdmin::BasicLog *> (servant);
  
  _repository_id_BasicLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_DsLogAdmin::BasicLog::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_DsLogAdmin::BasicLog * const impl =
    static_cast<POA_DsLogAdmin::BasicLog *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_BasicLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_BasicLog_Upcall_Command (
      POA_DsLogAdmin::BasicLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_DsLogAdmin::BasicLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLog::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLog * const impl =
    static_cast<POA_DsLogAdmin::BasicLog *> (servant);
  
  _get_component_BasicLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_DsLogAdmin::BasicLog::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/Log:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/BasicLog:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DsLogAdmin::BasicLog::_interface_repository_id (void) const
{
  return "IDL:omg.org/DsLogAdmin/BasicLog:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_DsLogAdmin::BasicLog::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

DsLogAdmin::BasicLog *
POA_DsLogAdmin::BasicLog::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DsLogAdmin::BasicLog STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_DsLogAdmin_LogMgr_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DsLogAdmin_LogMgr_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DsLogAdmin_LogMgr_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  2,  0,  0, 16, 16, 16, 16,  0, 16,
     16, 16, 16, 16, 16,  0,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_DsLogAdmin_LogMgr_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 15,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 11,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_DsLogAdmin::LogMgr::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"find_log", &POA_DsLogAdmin::LogMgr::find_log_skel, 0},
      {"list_logs", &POA_DsLogAdmin::LogMgr::list_logs_skel, 0},
      {"_component", &POA_DsLogAdmin::LogMgr::_component_skel, 0},
      {"",0,0},
      {"_interface", &POA_DsLogAdmin::LogMgr::_interface_skel, 0},
      {"_non_existent", &POA_DsLogAdmin::LogMgr::_non_existent_skel, 0},
      {"_repository_id", &POA_DsLogAdmin::LogMgr::_repository_id_skel, 0},
      {"list_logs_by_id", &POA_DsLogAdmin::LogMgr::list_logs_by_id_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_DsLogAdmin_LogMgr_Perfect_Hash_OpTable tao_DsLogAdmin_LogMgr_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_Initializer (size_t)
{
  DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_function_pointer = 
    DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
DsLogAdmin__TAO_LogMgr_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_DsLogAdmin::LogMgr::LogMgr (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DsLogAdmin_LogMgr_optable;
}

POA_DsLogAdmin::LogMgr::LogMgr (const LogMgr& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_DsLogAdmin::LogMgr::~LogMgr (void)
{
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_logs_LogMgr
    : public TAO::Upcall_Command
  {
  public:
    inline list_logs_LogMgr (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::LogList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::LogList> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->list_logs ();
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::LogMgr::list_logs_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::LogList>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);

  list_logs_LogMgr command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class find_log_LogMgr
    : public TAO::Upcall_Command
  {
  public:
    inline find_log_LogMgr (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::Log>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::Log> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->find_log (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::LogMgr::find_log_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::Log>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);

  find_log_LogMgr command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_logs_by_id_LogMgr
    : public TAO::Upcall_Command
  {
  public:
    inline list_logs_by_id_LogMgr (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::LogIdList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::LogIdList> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->list_logs_by_id ();
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::LogMgr::list_logs_by_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::LogIdList>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);

  list_logs_by_id_LogMgr command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_LogMgr_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_LogMgr_Upcall_Command (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::LogMgr::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);
  
  _is_a_LogMgr_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_LogMgr_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_LogMgr_Upcall_Command (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::LogMgr::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);
  
  _non_existent_LogMgr_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_LogMgr_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_LogMgr_Upcall_Command (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::LogMgr::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);
  
  _repository_id_LogMgr_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_DsLogAdmin::LogMgr::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_LogMgr_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_LogMgr_Upcall_Command (
      POA_DsLogAdmin::LogMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_DsLogAdmin::LogMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::LogMgr::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::LogMgr * const impl =
    static_cast<POA_DsLogAdmin::LogMgr *> (servant);
  
  _get_component_LogMgr_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_DsLogAdmin::LogMgr::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/LogMgr:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DsLogAdmin::LogMgr::_interface_repository_id (void) const
{
  return "IDL:omg.org/DsLogAdmin/LogMgr:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_DsLogAdmin::LogMgr::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

DsLogAdmin::LogMgr *
POA_DsLogAdmin::LogMgr::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DsLogAdmin::LogMgr STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_DsLogAdmin_BasicLogFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_DsLogAdmin_BasicLogFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_DsLogAdmin_BasicLogFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22,  0, 22,  0, 22,  5,
      0, 10,  0,  0, 22, 22, 22, 22,  0, 22,
     22, 22, 22, 22, 22,  0,  0, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_DsLogAdmin_BasicLogFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 10,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 15,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 21,
      HASH_VALUE_RANGE = 17,
      DUPLICATES = 0,
      WORDLIST_SIZE = 15
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_DsLogAdmin::BasicLogFactory::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"find_log", &POA_DsLogAdmin::BasicLogFactory::find_log_skel, 0},
      {"list_logs", &POA_DsLogAdmin::BasicLogFactory::list_logs_skel, 0},
      {"_component", &POA_DsLogAdmin::BasicLogFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_DsLogAdmin::BasicLogFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_DsLogAdmin::BasicLogFactory::_repository_id_skel, 0},
      {"list_logs_by_id", &POA_DsLogAdmin::BasicLogFactory::list_logs_by_id_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_with_id", &POA_DsLogAdmin::BasicLogFactory::create_with_id_skel, 0},
      {"_interface", &POA_DsLogAdmin::BasicLogFactory::_interface_skel, 0},
      {"create", &POA_DsLogAdmin::BasicLogFactory::create_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_DsLogAdmin_BasicLogFactory_Perfect_Hash_OpTable tao_DsLogAdmin_BasicLogFactory_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_function_pointer = 
    DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_DsLogAdmin::BasicLogFactory::BasicLogFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_DsLogAdmin_BasicLogFactory_optable;
}

POA_DsLogAdmin::BasicLogFactory::BasicLogFactory (const BasicLogFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_DsLogAdmin::LogMgr (rhs)
{
}

POA_DsLogAdmin::BasicLogFactory::~BasicLogFactory (void)
{
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_BasicLogFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_BasicLogFactory (
      POA_DsLogAdmin::BasicLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::BasicLog>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::BasicLog> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULong>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_DsLogAdmin::BasicLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::BasicLogFactory::create_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidLogFullAction
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::BasicLog>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_full_action;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_max_size;
  TAO::SArg_Traits< ::CORBA::ULong>::out_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_full_action,
      &_tao_max_size,
      &_tao_id
    };
  
  static size_t const nargs = 4;

  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);

  create_BasicLogFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_with_id_BasicLogFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_with_id_BasicLogFactory (
      POA_DsLogAdmin::BasicLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::DsLogAdmin::BasicLog>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::DsLogAdmin::BasicLog> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create_with_id (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_DsLogAdmin::BasicLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_DsLogAdmin::BasicLogFactory::create_with_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_LogIdAlreadyExists,
      DsLogAdmin::_tc_InvalidLogFullAction
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::DsLogAdmin::BasicLog>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_id;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_full_action;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_max_size;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id,
      &_tao_full_action,
      &_tao_max_size
    };
  
  static size_t const nargs = 4;

  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);

  create_with_id_BasicLogFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_BasicLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_BasicLogFactory_Upcall_Command (
      POA_DsLogAdmin::BasicLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_DsLogAdmin::BasicLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLogFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);
  
  _is_a_BasicLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_BasicLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_BasicLogFactory_Upcall_Command (
      POA_DsLogAdmin::BasicLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_DsLogAdmin::BasicLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLogFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);
  
  _non_existent_BasicLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_BasicLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_BasicLogFactory_Upcall_Command (
      POA_DsLogAdmin::BasicLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_DsLogAdmin::BasicLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLogFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);
  
  _repository_id_BasicLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_DsLogAdmin::BasicLogFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_DsLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_BasicLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_BasicLogFactory_Upcall_Command (
      POA_DsLogAdmin::BasicLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_DsLogAdmin::BasicLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_DsLogAdmin::BasicLogFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_DsLogAdmin::BasicLogFactory * const impl =
    static_cast<POA_DsLogAdmin::BasicLogFactory *> (servant);
  
  _get_component_BasicLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_DsLogAdmin::BasicLogFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/LogMgr:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/BasicLogFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_DsLogAdmin::BasicLogFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/DsLogAdmin/BasicLogFactory:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_DsLogAdmin::BasicLogFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

DsLogAdmin::BasicLogFactory *
POA_DsLogAdmin::BasicLogFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::DsLogAdmin::BasicLogFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

