// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosPropertyC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosPropertyC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyName (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/PropertyName:1.0",
    "PropertyName",
    &CORBA::_tc_string);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyName =
    &_tao_tc_CosPropertyService_PropertyName;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosPropertyService_Property[] =
      {
        { "property_name", &CosPropertyService::_tc_PropertyName },
        { "property_value", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_Property (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosPropertyService/Property:1.0",
  "Property",
  _tao_fields_CosPropertyService_Property,
  2);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_Property =
    &_tao_tc_CosPropertyService_Property;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosPropertyService::Property::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Property *_tao_tmp_pointer =
    static_cast<Property *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosPropertyService_PropertyModeType[] =
  {
    "normal",
    "read_only",
    "fixed_normal",
    "fixed_readonly",
    "undefined"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyModeType (
    "IDL:omg.org/CosPropertyService/PropertyModeType:1.0",
    "PropertyModeType",
    _tao_enumerators_CosPropertyService_PropertyModeType,
    5);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyModeType =
    &_tao_tc_CosPropertyService_PropertyModeType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosPropertyService_PropertyDef[] =
      {
        { "property_name", &CosPropertyService::_tc_PropertyName },
        { "property_value", &CORBA::_tc_any },
        { "property_mode", &CosPropertyService::_tc_PropertyModeType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_PropertyDef (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosPropertyService/PropertyDef:1.0",
  "PropertyDef",
  _tao_fields_CosPropertyService_PropertyDef,
  3);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyDef =
    &_tao_tc_CosPropertyService_PropertyDef;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosPropertyService::PropertyDef::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PropertyDef *_tao_tmp_pointer =
    static_cast<PropertyDef *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosPropertyService_PropertyMode[] =
      {
        { "property_name", &CosPropertyService::_tc_PropertyName },
        { "property_mode", &CosPropertyService::_tc_PropertyModeType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_PropertyMode (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosPropertyService/PropertyMode:1.0",
  "PropertyMode",
  _tao_fields_CosPropertyService_PropertyMode,
  2);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyMode =
    &_tao_tc_CosPropertyService_PropertyMode;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosPropertyService::PropertyMode::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PropertyMode *_tao_tmp_pointer =
    static_cast<PropertyMode *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSPROPERTYSERVICE_PROPERTYNAMES_CS_)
#define _COSPROPERTYSERVICE_PROPERTYNAMES_CS_

CosPropertyService::PropertyNames::PropertyNames (void)
{}

CosPropertyService::PropertyNames::PropertyNames (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

CosPropertyService::PropertyNames::PropertyNames (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

CosPropertyService::PropertyNames::PropertyNames (
    const PropertyNames &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

CosPropertyService::PropertyNames::~PropertyNames (void)
{}

void CosPropertyService::PropertyNames::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertyNames * _tao_tmp_pointer =
    static_cast<PropertyNames *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosPropertyService_PropertyNames_GUARD
#define _TAO_TYPECODE_CosPropertyService_PropertyNames_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosPropertyService_PropertyNames_0 (
          ::CORBA::tk_sequence,
          &CosPropertyService::_tc_PropertyName,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosPropertyService_PropertyNames_0 =
        &CosPropertyService_PropertyNames_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosPropertyService_PropertyNames_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyNames (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/PropertyNames:1.0",
    "PropertyNames",
    &TAO::TypeCode::tc_CosPropertyService_PropertyNames_0);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyNames =
    &_tao_tc_CosPropertyService_PropertyNames;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSPROPERTYSERVICE_PROPERTIES_CS_)
#define _COSPROPERTYSERVICE_PROPERTIES_CS_

CosPropertyService::Properties::Properties (void)
{}

CosPropertyService::Properties::Properties (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Property
      > (max)
{}

CosPropertyService::Properties::Properties (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosPropertyService::Property * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Property
      >
    (max, length, buffer, release)
{}

CosPropertyService::Properties::Properties (
    const Properties &seq)
  : ::TAO::unbounded_value_sequence<
        Property
      > (seq)
{}

CosPropertyService::Properties::~Properties (void)
{}

void CosPropertyService::Properties::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Properties * _tao_tmp_pointer =
    static_cast<Properties *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosPropertyService_Properties_GUARD
#define _TAO_TYPECODE_CosPropertyService_Properties_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosPropertyService_Properties_0 (
          ::CORBA::tk_sequence,
          &CosPropertyService::_tc_Property,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosPropertyService_Properties_0 =
        &CosPropertyService_Properties_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosPropertyService_Properties_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_Properties (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/Properties:1.0",
    "Properties",
    &TAO::TypeCode::tc_CosPropertyService_Properties_0);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_Properties =
    &_tao_tc_CosPropertyService_Properties;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSPROPERTYSERVICE_PROPERTYDEFS_CS_)
#define _COSPROPERTYSERVICE_PROPERTYDEFS_CS_

CosPropertyService::PropertyDefs::PropertyDefs (void)
{}

CosPropertyService::PropertyDefs::PropertyDefs (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PropertyDef
      > (max)
{}

CosPropertyService::PropertyDefs::PropertyDefs (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosPropertyService::PropertyDef * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PropertyDef
      >
    (max, length, buffer, release)
{}

CosPropertyService::PropertyDefs::PropertyDefs (
    const PropertyDefs &seq)
  : ::TAO::unbounded_value_sequence<
        PropertyDef
      > (seq)
{}

CosPropertyService::PropertyDefs::~PropertyDefs (void)
{}

void CosPropertyService::PropertyDefs::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertyDefs * _tao_tmp_pointer =
    static_cast<PropertyDefs *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosPropertyService_PropertyDefs_GUARD
#define _TAO_TYPECODE_CosPropertyService_PropertyDefs_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosPropertyService_PropertyDefs_0 (
          ::CORBA::tk_sequence,
          &CosPropertyService::_tc_PropertyDef,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosPropertyService_PropertyDefs_0 =
        &CosPropertyService_PropertyDefs_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosPropertyService_PropertyDefs_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyDefs (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/PropertyDefs:1.0",
    "PropertyDefs",
    &TAO::TypeCode::tc_CosPropertyService_PropertyDefs_0);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyDefs =
    &_tao_tc_CosPropertyService_PropertyDefs;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSPROPERTYSERVICE_PROPERTYMODES_CS_)
#define _COSPROPERTYSERVICE_PROPERTYMODES_CS_

CosPropertyService::PropertyModes::PropertyModes (void)
{}

CosPropertyService::PropertyModes::PropertyModes (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PropertyMode
      > (max)
{}

CosPropertyService::PropertyModes::PropertyModes (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosPropertyService::PropertyMode * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PropertyMode
      >
    (max, length, buffer, release)
{}

CosPropertyService::PropertyModes::PropertyModes (
    const PropertyModes &seq)
  : ::TAO::unbounded_value_sequence<
        PropertyMode
      > (seq)
{}

CosPropertyService::PropertyModes::~PropertyModes (void)
{}

void CosPropertyService::PropertyModes::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertyModes * _tao_tmp_pointer =
    static_cast<PropertyModes *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosPropertyService_PropertyModes_GUARD
#define _TAO_TYPECODE_CosPropertyService_PropertyModes_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosPropertyService_PropertyModes_0 (
          ::CORBA::tk_sequence,
          &CosPropertyService::_tc_PropertyMode,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosPropertyService_PropertyModes_0 =
        &CosPropertyService_PropertyModes_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosPropertyService_PropertyModes_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyModes (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/PropertyModes:1.0",
    "PropertyModes",
    &TAO::TypeCode::tc_CosPropertyService_PropertyModes_0);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyModes =
    &_tao_tc_CosPropertyService_PropertyModes;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSPROPERTYSERVICE_PROPERTYTYPES_CS_)
#define _COSPROPERTYSERVICE_PROPERTYTYPES_CS_

CosPropertyService::PropertyTypes::PropertyTypes (void)
{}

CosPropertyService::PropertyTypes::PropertyTypes (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        ::CORBA::TypeCode,
        ::CORBA::TypeCode_var
      > (max)
{}

CosPropertyService::PropertyTypes::PropertyTypes (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::TypeCode_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        ::CORBA::TypeCode,
        ::CORBA::TypeCode_var
      >
    (max, length, buffer, release)
{}

CosPropertyService::PropertyTypes::PropertyTypes (
    const PropertyTypes &seq)
  : ::TAO::unbounded_object_reference_sequence<
        ::CORBA::TypeCode,
        ::CORBA::TypeCode_var
      > (seq)
{}

CosPropertyService::PropertyTypes::~PropertyTypes (void)
{}

void CosPropertyService::PropertyTypes::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertyTypes * _tao_tmp_pointer =
    static_cast<PropertyTypes *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosPropertyService_PropertyTypes_GUARD
#define _TAO_TYPECODE_CosPropertyService_PropertyTypes_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosPropertyService_PropertyTypes_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_TypeCode,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosPropertyService_PropertyTypes_0 =
        &CosPropertyService_PropertyTypes_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosPropertyService_PropertyTypes_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyTypes (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/PropertyTypes:1.0",
    "PropertyTypes",
    &TAO::TypeCode::tc_CosPropertyService_PropertyTypes_0);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyTypes =
    &_tao_tc_CosPropertyService_PropertyTypes;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::ConstraintNotSupported::ConstraintNotSupported (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/ConstraintNotSupported:1.0",
        "ConstraintNotSupported"
      )
{
}

CosPropertyService::ConstraintNotSupported::~ConstraintNotSupported (void)
{
}

CosPropertyService::ConstraintNotSupported::ConstraintNotSupported (const ::CosPropertyService::ConstraintNotSupported &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::ConstraintNotSupported&
CosPropertyService::ConstraintNotSupported::operator= (const ::CosPropertyService::ConstraintNotSupported &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::ConstraintNotSupported::_tao_any_destructor (void *_tao_void_pointer)
{
  ConstraintNotSupported *_tao_tmp_pointer =
    static_cast<ConstraintNotSupported *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::ConstraintNotSupported *
CosPropertyService::ConstraintNotSupported::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ConstraintNotSupported *> (_tao_excp);
}

const CosPropertyService::ConstraintNotSupported *
CosPropertyService::ConstraintNotSupported::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ConstraintNotSupported *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::ConstraintNotSupported::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::ConstraintNotSupported, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::ConstraintNotSupported::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::ConstraintNotSupported (*this),
      0
    );
  return result;
}

void CosPropertyService::ConstraintNotSupported::_raise (void) const
{
  throw *this;
}

void CosPropertyService::ConstraintNotSupported::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::ConstraintNotSupported::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::ConstraintNotSupported::_tao_type (void) const
{
  return ::CosPropertyService::_tc_ConstraintNotSupported;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_ConstraintNotSupported = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_ConstraintNotSupported (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/ConstraintNotSupported:1.0",
  "ConstraintNotSupported",
  _tao_fields_CosPropertyService_ConstraintNotSupported,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_ConstraintNotSupported =
    &_tao_tc_CosPropertyService_ConstraintNotSupported;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::InvalidPropertyName::InvalidPropertyName (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        "InvalidPropertyName"
      )
{
}

CosPropertyService::InvalidPropertyName::~InvalidPropertyName (void)
{
}

CosPropertyService::InvalidPropertyName::InvalidPropertyName (const ::CosPropertyService::InvalidPropertyName &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::InvalidPropertyName&
CosPropertyService::InvalidPropertyName::operator= (const ::CosPropertyService::InvalidPropertyName &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::InvalidPropertyName::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidPropertyName *_tao_tmp_pointer =
    static_cast<InvalidPropertyName *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::InvalidPropertyName *
CosPropertyService::InvalidPropertyName::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidPropertyName *> (_tao_excp);
}

const CosPropertyService::InvalidPropertyName *
CosPropertyService::InvalidPropertyName::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidPropertyName *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::InvalidPropertyName::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::InvalidPropertyName, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::InvalidPropertyName::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::InvalidPropertyName (*this),
      0
    );
  return result;
}

void CosPropertyService::InvalidPropertyName::_raise (void) const
{
  throw *this;
}

void CosPropertyService::InvalidPropertyName::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::InvalidPropertyName::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::InvalidPropertyName::_tao_type (void) const
{
  return ::CosPropertyService::_tc_InvalidPropertyName;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_InvalidPropertyName = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_InvalidPropertyName (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
  "InvalidPropertyName",
  _tao_fields_CosPropertyService_InvalidPropertyName,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_InvalidPropertyName =
    &_tao_tc_CosPropertyService_InvalidPropertyName;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::ConflictingProperty::ConflictingProperty (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/ConflictingProperty:1.0",
        "ConflictingProperty"
      )
{
}

CosPropertyService::ConflictingProperty::~ConflictingProperty (void)
{
}

CosPropertyService::ConflictingProperty::ConflictingProperty (const ::CosPropertyService::ConflictingProperty &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::ConflictingProperty&
CosPropertyService::ConflictingProperty::operator= (const ::CosPropertyService::ConflictingProperty &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::ConflictingProperty::_tao_any_destructor (void *_tao_void_pointer)
{
  ConflictingProperty *_tao_tmp_pointer =
    static_cast<ConflictingProperty *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::ConflictingProperty *
CosPropertyService::ConflictingProperty::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ConflictingProperty *> (_tao_excp);
}

const CosPropertyService::ConflictingProperty *
CosPropertyService::ConflictingProperty::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ConflictingProperty *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::ConflictingProperty::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::ConflictingProperty, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::ConflictingProperty::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::ConflictingProperty (*this),
      0
    );
  return result;
}

void CosPropertyService::ConflictingProperty::_raise (void) const
{
  throw *this;
}

void CosPropertyService::ConflictingProperty::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::ConflictingProperty::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::ConflictingProperty::_tao_type (void) const
{
  return ::CosPropertyService::_tc_ConflictingProperty;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_ConflictingProperty = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_ConflictingProperty (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/ConflictingProperty:1.0",
  "ConflictingProperty",
  _tao_fields_CosPropertyService_ConflictingProperty,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_ConflictingProperty =
    &_tao_tc_CosPropertyService_ConflictingProperty;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::PropertyNotFound::PropertyNotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/PropertyNotFound:1.0",
        "PropertyNotFound"
      )
{
}

CosPropertyService::PropertyNotFound::~PropertyNotFound (void)
{
}

CosPropertyService::PropertyNotFound::PropertyNotFound (const ::CosPropertyService::PropertyNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::PropertyNotFound&
CosPropertyService::PropertyNotFound::operator= (const ::CosPropertyService::PropertyNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::PropertyNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertyNotFound *_tao_tmp_pointer =
    static_cast<PropertyNotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::PropertyNotFound *
CosPropertyService::PropertyNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<PropertyNotFound *> (_tao_excp);
}

const CosPropertyService::PropertyNotFound *
CosPropertyService::PropertyNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const PropertyNotFound *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::PropertyNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::PropertyNotFound, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::PropertyNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::PropertyNotFound (*this),
      0
    );
  return result;
}

void CosPropertyService::PropertyNotFound::_raise (void) const
{
  throw *this;
}

void CosPropertyService::PropertyNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::PropertyNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::PropertyNotFound::_tao_type (void) const
{
  return ::CosPropertyService::_tc_PropertyNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_PropertyNotFound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_PropertyNotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/PropertyNotFound:1.0",
  "PropertyNotFound",
  _tao_fields_CosPropertyService_PropertyNotFound,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyNotFound =
    &_tao_tc_CosPropertyService_PropertyNotFound;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::UnsupportedTypeCode::UnsupportedTypeCode (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/UnsupportedTypeCode:1.0",
        "UnsupportedTypeCode"
      )
{
}

CosPropertyService::UnsupportedTypeCode::~UnsupportedTypeCode (void)
{
}

CosPropertyService::UnsupportedTypeCode::UnsupportedTypeCode (const ::CosPropertyService::UnsupportedTypeCode &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::UnsupportedTypeCode&
CosPropertyService::UnsupportedTypeCode::operator= (const ::CosPropertyService::UnsupportedTypeCode &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::UnsupportedTypeCode::_tao_any_destructor (void *_tao_void_pointer)
{
  UnsupportedTypeCode *_tao_tmp_pointer =
    static_cast<UnsupportedTypeCode *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::UnsupportedTypeCode *
CosPropertyService::UnsupportedTypeCode::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnsupportedTypeCode *> (_tao_excp);
}

const CosPropertyService::UnsupportedTypeCode *
CosPropertyService::UnsupportedTypeCode::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnsupportedTypeCode *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::UnsupportedTypeCode::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::UnsupportedTypeCode, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::UnsupportedTypeCode::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::UnsupportedTypeCode (*this),
      0
    );
  return result;
}

void CosPropertyService::UnsupportedTypeCode::_raise (void) const
{
  throw *this;
}

void CosPropertyService::UnsupportedTypeCode::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::UnsupportedTypeCode::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::UnsupportedTypeCode::_tao_type (void) const
{
  return ::CosPropertyService::_tc_UnsupportedTypeCode;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_UnsupportedTypeCode = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_UnsupportedTypeCode (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/UnsupportedTypeCode:1.0",
  "UnsupportedTypeCode",
  _tao_fields_CosPropertyService_UnsupportedTypeCode,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_UnsupportedTypeCode =
    &_tao_tc_CosPropertyService_UnsupportedTypeCode;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::UnsupportedProperty::UnsupportedProperty (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/UnsupportedProperty:1.0",
        "UnsupportedProperty"
      )
{
}

CosPropertyService::UnsupportedProperty::~UnsupportedProperty (void)
{
}

CosPropertyService::UnsupportedProperty::UnsupportedProperty (const ::CosPropertyService::UnsupportedProperty &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::UnsupportedProperty&
CosPropertyService::UnsupportedProperty::operator= (const ::CosPropertyService::UnsupportedProperty &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::UnsupportedProperty::_tao_any_destructor (void *_tao_void_pointer)
{
  UnsupportedProperty *_tao_tmp_pointer =
    static_cast<UnsupportedProperty *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::UnsupportedProperty *
CosPropertyService::UnsupportedProperty::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnsupportedProperty *> (_tao_excp);
}

const CosPropertyService::UnsupportedProperty *
CosPropertyService::UnsupportedProperty::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnsupportedProperty *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::UnsupportedProperty::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::UnsupportedProperty, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::UnsupportedProperty::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::UnsupportedProperty (*this),
      0
    );
  return result;
}

void CosPropertyService::UnsupportedProperty::_raise (void) const
{
  throw *this;
}

void CosPropertyService::UnsupportedProperty::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::UnsupportedProperty::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::UnsupportedProperty::_tao_type (void) const
{
  return ::CosPropertyService::_tc_UnsupportedProperty;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_UnsupportedProperty = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_UnsupportedProperty (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/UnsupportedProperty:1.0",
  "UnsupportedProperty",
  _tao_fields_CosPropertyService_UnsupportedProperty,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_UnsupportedProperty =
    &_tao_tc_CosPropertyService_UnsupportedProperty;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::UnsupportedMode::UnsupportedMode (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/UnsupportedMode:1.0",
        "UnsupportedMode"
      )
{
}

CosPropertyService::UnsupportedMode::~UnsupportedMode (void)
{
}

CosPropertyService::UnsupportedMode::UnsupportedMode (const ::CosPropertyService::UnsupportedMode &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::UnsupportedMode&
CosPropertyService::UnsupportedMode::operator= (const ::CosPropertyService::UnsupportedMode &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::UnsupportedMode::_tao_any_destructor (void *_tao_void_pointer)
{
  UnsupportedMode *_tao_tmp_pointer =
    static_cast<UnsupportedMode *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::UnsupportedMode *
CosPropertyService::UnsupportedMode::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnsupportedMode *> (_tao_excp);
}

const CosPropertyService::UnsupportedMode *
CosPropertyService::UnsupportedMode::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnsupportedMode *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::UnsupportedMode::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::UnsupportedMode, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::UnsupportedMode::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::UnsupportedMode (*this),
      0
    );
  return result;
}

void CosPropertyService::UnsupportedMode::_raise (void) const
{
  throw *this;
}

void CosPropertyService::UnsupportedMode::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::UnsupportedMode::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::UnsupportedMode::_tao_type (void) const
{
  return ::CosPropertyService::_tc_UnsupportedMode;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_UnsupportedMode = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_UnsupportedMode (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/UnsupportedMode:1.0",
  "UnsupportedMode",
  _tao_fields_CosPropertyService_UnsupportedMode,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_UnsupportedMode =
    &_tao_tc_CosPropertyService_UnsupportedMode;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::FixedProperty::FixedProperty (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/FixedProperty:1.0",
        "FixedProperty"
      )
{
}

CosPropertyService::FixedProperty::~FixedProperty (void)
{
}

CosPropertyService::FixedProperty::FixedProperty (const ::CosPropertyService::FixedProperty &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::FixedProperty&
CosPropertyService::FixedProperty::operator= (const ::CosPropertyService::FixedProperty &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::FixedProperty::_tao_any_destructor (void *_tao_void_pointer)
{
  FixedProperty *_tao_tmp_pointer =
    static_cast<FixedProperty *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::FixedProperty *
CosPropertyService::FixedProperty::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<FixedProperty *> (_tao_excp);
}

const CosPropertyService::FixedProperty *
CosPropertyService::FixedProperty::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const FixedProperty *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::FixedProperty::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::FixedProperty, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::FixedProperty::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::FixedProperty (*this),
      0
    );
  return result;
}

void CosPropertyService::FixedProperty::_raise (void) const
{
  throw *this;
}

void CosPropertyService::FixedProperty::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::FixedProperty::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::FixedProperty::_tao_type (void) const
{
  return ::CosPropertyService::_tc_FixedProperty;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_FixedProperty = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_FixedProperty (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/FixedProperty:1.0",
  "FixedProperty",
  _tao_fields_CosPropertyService_FixedProperty,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_FixedProperty =
    &_tao_tc_CosPropertyService_FixedProperty;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::ReadOnlyProperty::ReadOnlyProperty (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/ReadOnlyProperty:1.0",
        "ReadOnlyProperty"
      )
{
}

CosPropertyService::ReadOnlyProperty::~ReadOnlyProperty (void)
{
}

CosPropertyService::ReadOnlyProperty::ReadOnlyProperty (const ::CosPropertyService::ReadOnlyProperty &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosPropertyService::ReadOnlyProperty&
CosPropertyService::ReadOnlyProperty::operator= (const ::CosPropertyService::ReadOnlyProperty &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosPropertyService::ReadOnlyProperty::_tao_any_destructor (void *_tao_void_pointer)
{
  ReadOnlyProperty *_tao_tmp_pointer =
    static_cast<ReadOnlyProperty *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::ReadOnlyProperty *
CosPropertyService::ReadOnlyProperty::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ReadOnlyProperty *> (_tao_excp);
}

const CosPropertyService::ReadOnlyProperty *
CosPropertyService::ReadOnlyProperty::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ReadOnlyProperty *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::ReadOnlyProperty::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::ReadOnlyProperty, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::ReadOnlyProperty::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::ReadOnlyProperty (*this),
      0
    );
  return result;
}

void CosPropertyService::ReadOnlyProperty::_raise (void) const
{
  throw *this;
}

void CosPropertyService::ReadOnlyProperty::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::ReadOnlyProperty::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::ReadOnlyProperty::_tao_type (void) const
{
  return ::CosPropertyService::_tc_ReadOnlyProperty;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosPropertyService_ReadOnlyProperty = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_ReadOnlyProperty (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/ReadOnlyProperty:1.0",
  "ReadOnlyProperty",
  _tao_fields_CosPropertyService_ReadOnlyProperty,
  0);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_ReadOnlyProperty =
    &_tao_tc_CosPropertyService_ReadOnlyProperty;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosPropertyService_ExceptionReason[] =
  {
    "invalid_property_name",
    "conflicting_property",
    "property_not_found",
    "unsupported_type_code",
    "unsupported_property",
    "unsupported_mode",
    "fixed_property",
    "read_only_property"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_ExceptionReason (
    "IDL:omg.org/CosPropertyService/ExceptionReason:1.0",
    "ExceptionReason",
    _tao_enumerators_CosPropertyService_ExceptionReason,
    8);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_ExceptionReason =
    &_tao_tc_CosPropertyService_ExceptionReason;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosPropertyService_PropertyException[] =
      {
        { "reason", &CosPropertyService::_tc_ExceptionReason },
        { "failing_property_name", &CosPropertyService::_tc_PropertyName }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_PropertyException (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosPropertyService/PropertyException:1.0",
  "PropertyException",
  _tao_fields_CosPropertyService_PropertyException,
  2);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyException =
    &_tao_tc_CosPropertyService_PropertyException;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosPropertyService::PropertyException::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PropertyException *_tao_tmp_pointer =
    static_cast<PropertyException *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSPROPERTYSERVICE_PROPERTYEXCEPTIONS_CS_)
#define _COSPROPERTYSERVICE_PROPERTYEXCEPTIONS_CS_

CosPropertyService::PropertyExceptions::PropertyExceptions (void)
{}

CosPropertyService::PropertyExceptions::PropertyExceptions (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PropertyException
      > (max)
{}

CosPropertyService::PropertyExceptions::PropertyExceptions (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosPropertyService::PropertyException * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PropertyException
      >
    (max, length, buffer, release)
{}

CosPropertyService::PropertyExceptions::PropertyExceptions (
    const PropertyExceptions &seq)
  : ::TAO::unbounded_value_sequence<
        PropertyException
      > (seq)
{}

CosPropertyService::PropertyExceptions::~PropertyExceptions (void)
{}

void CosPropertyService::PropertyExceptions::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertyExceptions * _tao_tmp_pointer =
    static_cast<PropertyExceptions *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosPropertyService_PropertyExceptions_GUARD
#define _TAO_TYPECODE_CosPropertyService_PropertyExceptions_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosPropertyService_PropertyExceptions_0 (
          ::CORBA::tk_sequence,
          &CosPropertyService::_tc_PropertyException,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosPropertyService_PropertyExceptions_0 =
        &CosPropertyService_PropertyExceptions_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosPropertyService_PropertyExceptions_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyExceptions (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosPropertyService/PropertyExceptions:1.0",
    "PropertyExceptions",
    &TAO::TypeCode::tc_CosPropertyService_PropertyExceptions_0);
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyExceptions =
    &_tao_tc_CosPropertyService_PropertyExceptions;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosPropertyService::MultipleExceptions::MultipleExceptions (
    const CosPropertyService::PropertyExceptions & _tao_exceptions)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        "MultipleExceptions"
      )
{
  this->exceptions = _tao_exceptions;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosPropertyService::MultipleExceptions::MultipleExceptions (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        "MultipleExceptions"
      )
{
}

CosPropertyService::MultipleExceptions::~MultipleExceptions (void)
{
}

CosPropertyService::MultipleExceptions::MultipleExceptions (const ::CosPropertyService::MultipleExceptions &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->exceptions = _tao_excp.exceptions;
}

CosPropertyService::MultipleExceptions&
CosPropertyService::MultipleExceptions::operator= (const ::CosPropertyService::MultipleExceptions &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->exceptions = _tao_excp.exceptions;
  return *this;
}

void CosPropertyService::MultipleExceptions::_tao_any_destructor (void *_tao_void_pointer)
{
  MultipleExceptions *_tao_tmp_pointer =
    static_cast<MultipleExceptions *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosPropertyService::MultipleExceptions *
CosPropertyService::MultipleExceptions::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<MultipleExceptions *> (_tao_excp);
}

const CosPropertyService::MultipleExceptions *
CosPropertyService::MultipleExceptions::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const MultipleExceptions *> (_tao_excp);
}

::CORBA::Exception *CosPropertyService::MultipleExceptions::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosPropertyService::MultipleExceptions, 0);
  return retval;
}

::CORBA::Exception *
CosPropertyService::MultipleExceptions::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosPropertyService::MultipleExceptions (*this),
      0
    );
  return result;
}

void CosPropertyService::MultipleExceptions::_raise (void) const
{
  throw *this;
}

void CosPropertyService::MultipleExceptions::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosPropertyService::MultipleExceptions::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosPropertyService::MultipleExceptions::_tao_type (void) const
{
  return ::CosPropertyService::_tc_MultipleExceptions;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosPropertyService_MultipleExceptions[] =
      {
        { "exceptions", &CosPropertyService::_tc_PropertyExceptions }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosPropertyService_MultipleExceptions (
  ::CORBA::tk_except,
  "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
  "MultipleExceptions",
  _tao_fields_CosPropertyService_MultipleExceptions,
  1);


namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_MultipleExceptions =
    &_tao_tc_CosPropertyService_MultipleExceptions;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosPropertyService::PropertySetFactory.

CosPropertyService::PropertySetFactory_ptr
TAO::Objref_Traits<CosPropertyService::PropertySetFactory>::duplicate (
    CosPropertyService::PropertySetFactory_ptr p)
{
  return CosPropertyService::PropertySetFactory::_duplicate (p);
}

void
TAO::Objref_Traits<CosPropertyService::PropertySetFactory>::release (
    CosPropertyService::PropertySetFactory_ptr p)
{
  ::CORBA::release (p);
}

CosPropertyService::PropertySetFactory_ptr
TAO::Objref_Traits<CosPropertyService::PropertySetFactory>::nil (void)
{
  return CosPropertyService::PropertySetFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosPropertyService::PropertySetFactory>::marshal (
    const CosPropertyService::PropertySetFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySetFactory::create_propertyset (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetFactory_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertySet>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "create_propertyset",
      18,
      this->the_TAO_PropertySetFactory_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySetFactory::create_constrained_propertyset (
  const ::CosPropertyService::PropertyTypes & allowed_property_types,
  const ::CosPropertyService::Properties & allowed_properties)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetFactory_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertySet>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyTypes>::in_arg_val _tao_allowed_property_types (allowed_property_types);
  TAO::Arg_Traits< ::CosPropertyService::Properties>::in_arg_val _tao_allowed_properties (allowed_properties);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_allowed_property_types,
      &_tao_allowed_properties
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetFactory_create_constrained_propertyset_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/ConstraintNotSupported:1.0",
        CosPropertyService::ConstraintNotSupported::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_ConstraintNotSupported
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "create_constrained_propertyset",
      30,
      this->the_TAO_PropertySetFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetFactory_create_constrained_propertyset_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySetFactory::create_initial_propertyset (
  const ::CosPropertyService::Properties & initial_properties)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetFactory_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertySet>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::Properties>::in_arg_val _tao_initial_properties (initial_properties);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_initial_properties
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetFactory_create_initial_propertyset_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        CosPropertyService::MultipleExceptions::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_MultipleExceptions
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "create_initial_propertyset",
      26,
      this->the_TAO_PropertySetFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetFactory_create_initial_propertyset_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosPropertyService::PropertySetFactory::PropertySetFactory (void)
 : the_TAO_PropertySetFactory_Proxy_Broker_ (0)
{
  this->CosPropertyService_PropertySetFactory_setup_collocation ();
}

void
CosPropertyService::PropertySetFactory::CosPropertyService_PropertySetFactory_setup_collocation ()
{
  if (::CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PropertySetFactory_Proxy_Broker_ =
        ::CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosPropertyService::PropertySetFactory::~PropertySetFactory (void)
{}

void 
CosPropertyService::PropertySetFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertySetFactory *_tao_tmp_pointer =
    static_cast<PropertySetFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosPropertyService::PropertySetFactory_ptr
CosPropertyService::PropertySetFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySetFactory>::narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0",
        CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySetFactory_ptr
CosPropertyService::PropertySetFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySetFactory>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0",
        CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySetFactory_ptr
CosPropertyService::PropertySetFactory::_nil (void)
{
  return 0;
}

CosPropertyService::PropertySetFactory_ptr
CosPropertyService::PropertySetFactory::_duplicate (PropertySetFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosPropertyService::PropertySetFactory::_tao_release (PropertySetFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosPropertyService::PropertySetFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosPropertyService::PropertySetFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0";
}

::CORBA::Boolean
CosPropertyService::PropertySetFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertySetFactory (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0",
    "PropertySetFactory");
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertySetFactory =
    &_tao_tc_CosPropertyService_PropertySetFactory;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosPropertyService::PropertySetDefFactory.

CosPropertyService::PropertySetDefFactory_ptr
TAO::Objref_Traits<CosPropertyService::PropertySetDefFactory>::duplicate (
    CosPropertyService::PropertySetDefFactory_ptr p)
{
  return CosPropertyService::PropertySetDefFactory::_duplicate (p);
}

void
TAO::Objref_Traits<CosPropertyService::PropertySetDefFactory>::release (
    CosPropertyService::PropertySetDefFactory_ptr p)
{
  ::CORBA::release (p);
}

CosPropertyService::PropertySetDefFactory_ptr
TAO::Objref_Traits<CosPropertyService::PropertySetDefFactory>::nil (void)
{
  return CosPropertyService::PropertySetDefFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosPropertyService::PropertySetDefFactory>::marshal (
    const CosPropertyService::PropertySetDefFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDefFactory::create_propertysetdef (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDefFactory_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDefFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertySetDef>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "create_propertysetdef",
      21,
      this->the_TAO_PropertySetDefFactory_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDefFactory::create_constrained_propertysetdef (
  const ::CosPropertyService::PropertyTypes & allowed_property_types,
  const ::CosPropertyService::PropertyDefs & allowed_property_defs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDefFactory_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDefFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertySetDef>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyTypes>::in_arg_val _tao_allowed_property_types (allowed_property_types);
  TAO::Arg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_val _tao_allowed_property_defs (allowed_property_defs);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_allowed_property_types,
      &_tao_allowed_property_defs
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDefFactory_create_constrained_propertysetdef_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/ConstraintNotSupported:1.0",
        CosPropertyService::ConstraintNotSupported::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_ConstraintNotSupported
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "create_constrained_propertysetdef",
      33,
      this->the_TAO_PropertySetDefFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDefFactory_create_constrained_propertysetdef_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDefFactory::create_initial_propertysetdef (
  const ::CosPropertyService::PropertyDefs & initial_property_defs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDefFactory_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDefFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertySetDef>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_val _tao_initial_property_defs (initial_property_defs);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_initial_property_defs
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDefFactory_create_initial_propertysetdef_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        CosPropertyService::MultipleExceptions::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_MultipleExceptions
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "create_initial_propertysetdef",
      29,
      this->the_TAO_PropertySetDefFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDefFactory_create_initial_propertysetdef_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosPropertyService::PropertySetDefFactory::PropertySetDefFactory (void)
 : the_TAO_PropertySetDefFactory_Proxy_Broker_ (0)
{
  this->CosPropertyService_PropertySetDefFactory_setup_collocation ();
}

void
CosPropertyService::PropertySetDefFactory::CosPropertyService_PropertySetDefFactory_setup_collocation ()
{
  if (::CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PropertySetDefFactory_Proxy_Broker_ =
        ::CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosPropertyService::PropertySetDefFactory::~PropertySetDefFactory (void)
{}

void 
CosPropertyService::PropertySetDefFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertySetDefFactory *_tao_tmp_pointer =
    static_cast<PropertySetDefFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosPropertyService::PropertySetDefFactory_ptr
CosPropertyService::PropertySetDefFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySetDefFactory>::narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0",
        CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySetDefFactory_ptr
CosPropertyService::PropertySetDefFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySetDefFactory>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0",
        CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySetDefFactory_ptr
CosPropertyService::PropertySetDefFactory::_nil (void)
{
  return 0;
}

CosPropertyService::PropertySetDefFactory_ptr
CosPropertyService::PropertySetDefFactory::_duplicate (PropertySetDefFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosPropertyService::PropertySetDefFactory::_tao_release (PropertySetDefFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosPropertyService::PropertySetDefFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosPropertyService::PropertySetDefFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0";
}

::CORBA::Boolean
CosPropertyService::PropertySetDefFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertySetDefFactory (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0",
    "PropertySetDefFactory");
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertySetDefFactory =
    &_tao_tc_CosPropertyService_PropertySetDefFactory;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosPropertyService::PropertySet.

CosPropertyService::PropertySet_ptr
TAO::Objref_Traits<CosPropertyService::PropertySet>::duplicate (
    CosPropertyService::PropertySet_ptr p)
{
  return CosPropertyService::PropertySet::_duplicate (p);
}

void
TAO::Objref_Traits<CosPropertyService::PropertySet>::release (
    CosPropertyService::PropertySet_ptr p)
{
  ::CORBA::release (p);
}

CosPropertyService::PropertySet_ptr
TAO::Objref_Traits<CosPropertyService::PropertySet>::nil (void)
{
  return CosPropertyService::PropertySet::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosPropertyService::PropertySet>::marshal (
    const CosPropertyService::PropertySet_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySet::define_property (
  const char * property_name,
  const ::CORBA::Any & property_value)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_property_value (property_value);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name,
      &_tao_property_value
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySet_define_property_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/ConflictingProperty:1.0",
        CosPropertyService::ConflictingProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_ConflictingProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/UnsupportedTypeCode:1.0",
        CosPropertyService::UnsupportedTypeCode::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_UnsupportedTypeCode
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/UnsupportedProperty:1.0",
        CosPropertyService::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/ReadOnlyProperty:1.0",
        CosPropertyService::ReadOnlyProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_ReadOnlyProperty
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "define_property",
      15,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySet_define_property_exceptiondata,
      5
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySet::define_properties (
  const ::CosPropertyService::Properties & nproperties)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::Properties>::in_arg_val _tao_nproperties (nproperties);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_nproperties
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySet_define_properties_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        CosPropertyService::MultipleExceptions::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_MultipleExceptions
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "define_properties",
      17,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySet_define_properties_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::ULong
CosPropertyService::PropertySet::get_number_of_properties (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_number_of_properties",
      24,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySet::get_all_property_names (
  ::CORBA::ULong how_many,
  ::CosPropertyService::PropertyNames_out property_names,
  ::CosPropertyService::PropertyNamesIterator_out rest)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosPropertyService::PropertyNames>::out_arg_val _tao_property_names (property_names);
  TAO::Arg_Traits< ::CosPropertyService::PropertyNamesIterator>::out_arg_val _tao_rest (rest);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_property_names,
      &_tao_rest
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "get_all_property_names",
      22,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Any *
CosPropertyService::PropertySet::get_property_value (
  const char * property_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySet_get_property_value_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/PropertyNotFound:1.0",
        CosPropertyService::PropertyNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_PropertyNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_property_value",
      18,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySet_get_property_value_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertySet::get_properties (
  const ::CosPropertyService::PropertyNames & property_names,
  ::CosPropertyService::Properties_out nproperties)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyNames>::in_arg_val _tao_property_names (property_names);
  TAO::Arg_Traits< ::CosPropertyService::Properties>::out_arg_val _tao_nproperties (nproperties);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_names,
      &_tao_nproperties
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_properties",
      14,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySet::get_all_properties (
  ::CORBA::ULong how_many,
  ::CosPropertyService::Properties_out nproperties,
  ::CosPropertyService::PropertiesIterator_out rest)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosPropertyService::Properties>::out_arg_val _tao_nproperties (nproperties);
  TAO::Arg_Traits< ::CosPropertyService::PropertiesIterator>::out_arg_val _tao_rest (rest);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_nproperties,
      &_tao_rest
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "get_all_properties",
      18,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySet::delete_property (
  const char * property_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySet_delete_property_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/PropertyNotFound:1.0",
        CosPropertyService::PropertyNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_PropertyNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/FixedProperty:1.0",
        CosPropertyService::FixedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_FixedProperty
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "delete_property",
      15,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySet_delete_property_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySet::delete_properties (
  const ::CosPropertyService::PropertyNames & property_names)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyNames>::in_arg_val _tao_property_names (property_names);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_names
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySet_delete_properties_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        CosPropertyService::MultipleExceptions::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_MultipleExceptions
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "delete_properties",
      17,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySet_delete_properties_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertySet::delete_all_properties (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "delete_all_properties",
      21,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertySet::is_property_defined (
  const char * property_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySet_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySet_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySet_is_property_defined_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "is_property_defined",
      19,
      this->the_TAO_PropertySet_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySet_is_property_defined_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosPropertyService::PropertySet::PropertySet (void)
 : the_TAO_PropertySet_Proxy_Broker_ (0)
{
  this->CosPropertyService_PropertySet_setup_collocation ();
}

void
CosPropertyService::PropertySet::CosPropertyService_PropertySet_setup_collocation ()
{
  if (::CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PropertySet_Proxy_Broker_ =
        ::CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosPropertyService::PropertySet::~PropertySet (void)
{}

void 
CosPropertyService::PropertySet::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertySet *_tao_tmp_pointer =
    static_cast<PropertySet *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySet::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySet>::narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySet:1.0",
        CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySet::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySet>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySet:1.0",
        CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySet::_nil (void)
{
  return 0;
}

CosPropertyService::PropertySet_ptr
CosPropertyService::PropertySet::_duplicate (PropertySet_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosPropertyService::PropertySet::_tao_release (PropertySet_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosPropertyService::PropertySet::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySet:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosPropertyService::PropertySet::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySet:1.0";
}

::CORBA::Boolean
CosPropertyService::PropertySet::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertySet (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosPropertyService/PropertySet:1.0",
    "PropertySet");
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertySet =
    &_tao_tc_CosPropertyService_PropertySet;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosPropertyService::PropertySetDef.

CosPropertyService::PropertySetDef_ptr
TAO::Objref_Traits<CosPropertyService::PropertySetDef>::duplicate (
    CosPropertyService::PropertySetDef_ptr p)
{
  return CosPropertyService::PropertySetDef::_duplicate (p);
}

void
TAO::Objref_Traits<CosPropertyService::PropertySetDef>::release (
    CosPropertyService::PropertySetDef_ptr p)
{
  ::CORBA::release (p);
}

CosPropertyService::PropertySetDef_ptr
TAO::Objref_Traits<CosPropertyService::PropertySetDef>::nil (void)
{
  return CosPropertyService::PropertySetDef::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosPropertyService::PropertySetDef>::marshal (
    const CosPropertyService::PropertySetDef_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySetDef::get_allowed_property_types (
  ::CosPropertyService::PropertyTypes_out property_types)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyTypes>::out_arg_val _tao_property_types (property_types);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_types
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_allowed_property_types",
      26,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySetDef::get_allowed_properties (
  ::CosPropertyService::PropertyDefs_out property_defs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyDefs>::out_arg_val _tao_property_defs (property_defs);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_defs
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_allowed_properties",
      22,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySetDef::define_property_with_mode (
  const char * property_name,
  const ::CORBA::Any & property_value,
  ::CosPropertyService::PropertyModeType property_mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_property_value (property_value);
  TAO::Arg_Traits< ::CosPropertyService::PropertyModeType>::in_arg_val _tao_property_mode (property_mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name,
      &_tao_property_value,
      &_tao_property_mode
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDef_define_property_with_mode_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/ConflictingProperty:1.0",
        CosPropertyService::ConflictingProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_ConflictingProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/UnsupportedTypeCode:1.0",
        CosPropertyService::UnsupportedTypeCode::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_UnsupportedTypeCode
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/UnsupportedProperty:1.0",
        CosPropertyService::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/UnsupportedMode:1.0",
        CosPropertyService::UnsupportedMode::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_UnsupportedMode
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/ReadOnlyProperty:1.0",
        CosPropertyService::ReadOnlyProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_ReadOnlyProperty
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "define_property_with_mode",
      25,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDef_define_property_with_mode_exceptiondata,
      6
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySetDef::define_properties_with_modes (
  const ::CosPropertyService::PropertyDefs & property_defs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_val _tao_property_defs (property_defs);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_defs
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDef_define_properties_with_modes_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        CosPropertyService::MultipleExceptions::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_MultipleExceptions
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "define_properties_with_modes",
      28,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDef_define_properties_with_modes_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosPropertyService::PropertyModeType
CosPropertyService::PropertySetDef::get_property_mode (
  const char * property_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosPropertyService::PropertyModeType>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDef_get_property_mode_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/PropertyNotFound:1.0",
        CosPropertyService::PropertyNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_PropertyNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_property_mode",
      17,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDef_get_property_mode_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertySetDef::get_property_modes (
  const ::CosPropertyService::PropertyNames & property_names,
  ::CosPropertyService::PropertyModes_out property_modes)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyNames>::in_arg_val _tao_property_names (property_names);
  TAO::Arg_Traits< ::CosPropertyService::PropertyModes>::out_arg_val _tao_property_modes (property_modes);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_names,
      &_tao_property_modes
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_property_modes",
      18,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySetDef::set_property_mode (
  const char * property_name,
  ::CosPropertyService::PropertyModeType property_mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_property_name (property_name);
  TAO::Arg_Traits< ::CosPropertyService::PropertyModeType>::in_arg_val _tao_property_mode (property_mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name,
      &_tao_property_mode
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDef_set_property_mode_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/InvalidPropertyName:1.0",
        CosPropertyService::InvalidPropertyName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_InvalidPropertyName
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/PropertyNotFound:1.0",
        CosPropertyService::PropertyNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_PropertyNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosPropertyService/UnsupportedMode:1.0",
        CosPropertyService::UnsupportedMode::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_UnsupportedMode
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "set_property_mode",
      17,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDef_set_property_mode_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertySetDef::set_property_modes (
  const ::CosPropertyService::PropertyModes & property_modes)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertySetDef_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertySetDef_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::PropertyModes>::in_arg_val _tao_property_modes (property_modes);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_modes
    };

  static TAO::Exception_Data
  _tao_CosPropertyService_PropertySetDef_set_property_modes_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosPropertyService/MultipleExceptions:1.0",
        CosPropertyService::MultipleExceptions::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosPropertyService::_tc_MultipleExceptions
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_property_modes",
      18,
      this->the_TAO_PropertySetDef_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosPropertyService_PropertySetDef_set_property_modes_exceptiondata,
      1
    );
}

CosPropertyService::PropertySetDef::PropertySetDef (void)
 : the_TAO_PropertySetDef_Proxy_Broker_ (0)
{
  this->CosPropertyService_PropertySetDef_setup_collocation ();
}

void
CosPropertyService::PropertySetDef::CosPropertyService_PropertySetDef_setup_collocation ()
{
  if (::CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PropertySetDef_Proxy_Broker_ =
        ::CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosPropertyService_PropertySet_setup_collocation ();
}

CosPropertyService::PropertySetDef::~PropertySetDef (void)
{}

void 
CosPropertyService::PropertySetDef::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertySetDef *_tao_tmp_pointer =
    static_cast<PropertySetDef *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDef::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySetDef>::narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySetDef:1.0",
        CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDef::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertySetDef>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertySetDef:1.0",
        CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDef::_nil (void)
{
  return 0;
}

CosPropertyService::PropertySetDef_ptr
CosPropertyService::PropertySetDef::_duplicate (PropertySetDef_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosPropertyService::PropertySetDef::_tao_release (PropertySetDef_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosPropertyService::PropertySetDef::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySet:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySetDef:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosPropertyService::PropertySetDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySetDef:1.0";
}

::CORBA::Boolean
CosPropertyService::PropertySetDef::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertySetDef (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosPropertyService/PropertySetDef:1.0",
    "PropertySetDef");
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertySetDef =
    &_tao_tc_CosPropertyService_PropertySetDef;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosPropertyService::PropertyNamesIterator.

CosPropertyService::PropertyNamesIterator_ptr
TAO::Objref_Traits<CosPropertyService::PropertyNamesIterator>::duplicate (
    CosPropertyService::PropertyNamesIterator_ptr p)
{
  return CosPropertyService::PropertyNamesIterator::_duplicate (p);
}

void
TAO::Objref_Traits<CosPropertyService::PropertyNamesIterator>::release (
    CosPropertyService::PropertyNamesIterator_ptr p)
{
  ::CORBA::release (p);
}

CosPropertyService::PropertyNamesIterator_ptr
TAO::Objref_Traits<CosPropertyService::PropertyNamesIterator>::nil (void)
{
  return CosPropertyService::PropertyNamesIterator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosPropertyService::PropertyNamesIterator>::marshal (
    const CosPropertyService::PropertyNamesIterator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertyNamesIterator::reset (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertyNamesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertyNamesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "reset",
      5,
      this->the_TAO_PropertyNamesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertyNamesIterator::next_one (
  ::CORBA::String_out property_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertyNamesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertyNamesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::out_arg_val _tao_property_name (property_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_property_name
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "next_one",
      8,
      this->the_TAO_PropertyNamesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertyNamesIterator::next_n (
  ::CORBA::ULong how_many,
  ::CosPropertyService::PropertyNames_out property_names)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertyNamesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertyNamesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosPropertyService::PropertyNames>::out_arg_val _tao_property_names (property_names);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_property_names
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_n",
      6,
      this->the_TAO_PropertyNamesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertyNamesIterator::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertyNamesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertyNamesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_PropertyNamesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosPropertyService::PropertyNamesIterator::PropertyNamesIterator (void)
 : the_TAO_PropertyNamesIterator_Proxy_Broker_ (0)
{
  this->CosPropertyService_PropertyNamesIterator_setup_collocation ();
}

void
CosPropertyService::PropertyNamesIterator::CosPropertyService_PropertyNamesIterator_setup_collocation ()
{
  if (::CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PropertyNamesIterator_Proxy_Broker_ =
        ::CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosPropertyService::PropertyNamesIterator::~PropertyNamesIterator (void)
{}

void 
CosPropertyService::PropertyNamesIterator::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertyNamesIterator *_tao_tmp_pointer =
    static_cast<PropertyNamesIterator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosPropertyService::PropertyNamesIterator_ptr
CosPropertyService::PropertyNamesIterator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertyNamesIterator>::narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0",
        CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertyNamesIterator_ptr
CosPropertyService::PropertyNamesIterator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertyNamesIterator>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0",
        CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertyNamesIterator_ptr
CosPropertyService::PropertyNamesIterator::_nil (void)
{
  return 0;
}

CosPropertyService::PropertyNamesIterator_ptr
CosPropertyService::PropertyNamesIterator::_duplicate (PropertyNamesIterator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosPropertyService::PropertyNamesIterator::_tao_release (PropertyNamesIterator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosPropertyService::PropertyNamesIterator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosPropertyService::PropertyNamesIterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0";
}

::CORBA::Boolean
CosPropertyService::PropertyNamesIterator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertyNamesIterator (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0",
    "PropertyNamesIterator");
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertyNamesIterator =
    &_tao_tc_CosPropertyService_PropertyNamesIterator;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosPropertyService::PropertiesIterator.

CosPropertyService::PropertiesIterator_ptr
TAO::Objref_Traits<CosPropertyService::PropertiesIterator>::duplicate (
    CosPropertyService::PropertiesIterator_ptr p)
{
  return CosPropertyService::PropertiesIterator::_duplicate (p);
}

void
TAO::Objref_Traits<CosPropertyService::PropertiesIterator>::release (
    CosPropertyService::PropertiesIterator_ptr p)
{
  ::CORBA::release (p);
}

CosPropertyService::PropertiesIterator_ptr
TAO::Objref_Traits<CosPropertyService::PropertiesIterator>::nil (void)
{
  return CosPropertyService::PropertiesIterator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosPropertyService::PropertiesIterator>::marshal (
    const CosPropertyService::PropertiesIterator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertiesIterator::reset (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertiesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertiesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "reset",
      5,
      this->the_TAO_PropertiesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertiesIterator::next_one (
  ::CosPropertyService::Property_out aproperty)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertiesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertiesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosPropertyService::Property>::out_arg_val _tao_aproperty (aproperty);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_aproperty
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "next_one",
      8,
      this->the_TAO_PropertiesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosPropertyService::PropertiesIterator::next_n (
  ::CORBA::ULong how_many,
  ::CosPropertyService::Properties_out nproperties)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertiesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertiesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosPropertyService::Properties>::out_arg_val _tao_nproperties (nproperties);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_nproperties
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_n",
      6,
      this->the_TAO_PropertiesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosPropertyService::PropertiesIterator::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PropertiesIterator_Proxy_Broker_ == 0)
    {
      CosPropertyService_PropertiesIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_PropertiesIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosPropertyService::PropertiesIterator::PropertiesIterator (void)
 : the_TAO_PropertiesIterator_Proxy_Broker_ (0)
{
  this->CosPropertyService_PropertiesIterator_setup_collocation ();
}

void
CosPropertyService::PropertiesIterator::CosPropertyService_PropertiesIterator_setup_collocation ()
{
  if (::CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PropertiesIterator_Proxy_Broker_ =
        ::CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosPropertyService::PropertiesIterator::~PropertiesIterator (void)
{}

void 
CosPropertyService::PropertiesIterator::_tao_any_destructor (void *_tao_void_pointer)
{
  PropertiesIterator *_tao_tmp_pointer =
    static_cast<PropertiesIterator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosPropertyService::PropertiesIterator_ptr
CosPropertyService::PropertiesIterator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertiesIterator>::narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0",
        CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertiesIterator_ptr
CosPropertyService::PropertiesIterator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PropertiesIterator>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0",
        CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer
      );
}

CosPropertyService::PropertiesIterator_ptr
CosPropertyService::PropertiesIterator::_nil (void)
{
  return 0;
}

CosPropertyService::PropertiesIterator_ptr
CosPropertyService::PropertiesIterator::_duplicate (PropertiesIterator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosPropertyService::PropertiesIterator::_tao_release (PropertiesIterator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosPropertyService::PropertiesIterator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosPropertyService::PropertiesIterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0";
}

::CORBA::Boolean
CosPropertyService::PropertiesIterator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosPropertyService_PropertiesIterator (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0",
    "PropertiesIterator");
  

namespace CosPropertyService
{
  ::CORBA::TypeCode_ptr const _tc_PropertiesIterator =
    &_tao_tc_CosPropertyService_PropertiesIterator;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::Property &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::Property *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::Property>::insert_copy (
          _tao_any,
          ::CosPropertyService::Property::_tao_any_destructor,
          ::CosPropertyService::_tc_Property,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosPropertyService::Property *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::Property>::insert (
        _tao_any,
        ::CosPropertyService::Property::_tao_any_destructor,
        ::CosPropertyService::_tc_Property,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::Property *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::Property *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::Property *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::Property>::extract (
          _tao_any,
          ::CosPropertyService::Property::_tao_any_destructor,
          ::CosPropertyService::_tc_Property,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::Property &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::Property *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::Property>::insert_copy (
        _tao_any,
        CosPropertyService::Property::_tao_any_destructor,
        CosPropertyService::_tc_Property,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::Property *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::Property>::insert (
      _tao_any,
      CosPropertyService::Property::_tao_any_destructor,
      CosPropertyService::_tc_Property,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::Property *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::Property *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::Property *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::Property>::extract (
        _tao_any,
        CosPropertyService::Property::_tao_any_destructor,
        CosPropertyService::_tc_Property,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyModeType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosPropertyService::PropertyModeType>::insert (
        _tao_any,
        ::CosPropertyService::_tc_PropertyModeType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyModeType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosPropertyService::PropertyModeType>::extract (
          _tao_any,
          ::CosPropertyService::_tc_PropertyModeType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyModeType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosPropertyService::PropertyModeType>::insert (
      _tao_any,
      CosPropertyService::_tc_PropertyModeType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyModeType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosPropertyService::PropertyModeType>::extract (
        _tao_any,
        CosPropertyService::_tc_PropertyModeType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyDef &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyDef *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyDef>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyDef::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyDef,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosPropertyService::PropertyDef *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyDef>::insert (
        _tao_any,
        ::CosPropertyService::PropertyDef::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyDef,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyDef *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyDef *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyDef *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyDef>::extract (
          _tao_any,
          ::CosPropertyService::PropertyDef::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyDef,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyDef &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyDef *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyDef>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyDef::_tao_any_destructor,
        CosPropertyService::_tc_PropertyDef,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyDef *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyDef>::insert (
      _tao_any,
      CosPropertyService::PropertyDef::_tao_any_destructor,
      CosPropertyService::_tc_PropertyDef,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyDef *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyDef *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyDef *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyDef>::extract (
        _tao_any,
        CosPropertyService::PropertyDef::_tao_any_destructor,
        CosPropertyService::_tc_PropertyDef,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyMode &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyMode *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyMode>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyMode::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyMode,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosPropertyService::PropertyMode *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyMode>::insert (
        _tao_any,
        ::CosPropertyService::PropertyMode::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyMode,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyMode *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyMode *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyMode *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyMode>::extract (
          _tao_any,
          ::CosPropertyService::PropertyMode::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyMode,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyMode &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyMode *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyMode>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyMode::_tao_any_destructor,
        CosPropertyService::_tc_PropertyMode,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyMode *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyMode>::insert (
      _tao_any,
      CosPropertyService::PropertyMode::_tao_any_destructor,
      CosPropertyService::_tc_PropertyMode,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyMode *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyMode *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyMode *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyMode>::extract (
        _tao_any,
        CosPropertyService::PropertyMode::_tao_any_destructor,
        CosPropertyService::_tc_PropertyMode,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyNames &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyNames *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyNames>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyNames::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyNames,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyNames *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyNames>::insert (
        _tao_any,
        ::CosPropertyService::PropertyNames::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyNames,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyNames *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyNames *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyNames *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyNames>::extract (
          _tao_any,
          ::CosPropertyService::PropertyNames::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyNames,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyNames &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyNames *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyNames>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyNames::_tao_any_destructor,
        CosPropertyService::_tc_PropertyNames,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNames *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyNames>::insert (
      _tao_any,
      CosPropertyService::PropertyNames::_tao_any_destructor,
      CosPropertyService::_tc_PropertyNames,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNames *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyNames *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyNames *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyNames>::extract (
        _tao_any,
        CosPropertyService::PropertyNames::_tao_any_destructor,
        CosPropertyService::_tc_PropertyNames,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::Properties &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::Properties *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::Properties>::insert_copy (
          _tao_any,
          ::CosPropertyService::Properties::_tao_any_destructor,
          ::CosPropertyService::_tc_Properties,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::Properties *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::Properties>::insert (
        _tao_any,
        ::CosPropertyService::Properties::_tao_any_destructor,
        ::CosPropertyService::_tc_Properties,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::Properties *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::Properties *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::Properties *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::Properties>::extract (
          _tao_any,
          ::CosPropertyService::Properties::_tao_any_destructor,
          ::CosPropertyService::_tc_Properties,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::Properties &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::Properties *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::Properties>::insert_copy (
        _tao_any,
        CosPropertyService::Properties::_tao_any_destructor,
        CosPropertyService::_tc_Properties,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::Properties *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::Properties>::insert (
      _tao_any,
      CosPropertyService::Properties::_tao_any_destructor,
      CosPropertyService::_tc_Properties,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::Properties *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::Properties *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::Properties *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::Properties>::extract (
        _tao_any,
        CosPropertyService::Properties::_tao_any_destructor,
        CosPropertyService::_tc_Properties,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyDefs &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyDefs *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyDefs>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyDefs::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyDefs,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyDefs *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyDefs>::insert (
        _tao_any,
        ::CosPropertyService::PropertyDefs::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyDefs,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyDefs *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyDefs *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyDefs *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyDefs>::extract (
          _tao_any,
          ::CosPropertyService::PropertyDefs::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyDefs,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyDefs &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyDefs *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyDefs>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyDefs::_tao_any_destructor,
        CosPropertyService::_tc_PropertyDefs,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyDefs *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyDefs>::insert (
      _tao_any,
      CosPropertyService::PropertyDefs::_tao_any_destructor,
      CosPropertyService::_tc_PropertyDefs,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyDefs *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyDefs *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyDefs *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyDefs>::extract (
        _tao_any,
        CosPropertyService::PropertyDefs::_tao_any_destructor,
        CosPropertyService::_tc_PropertyDefs,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyModes &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyModes *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyModes>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyModes::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyModes,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyModes *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyModes>::insert (
        _tao_any,
        ::CosPropertyService::PropertyModes::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyModes,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyModes *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyModes *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyModes *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyModes>::extract (
          _tao_any,
          ::CosPropertyService::PropertyModes::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyModes,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyModes &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyModes *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyModes>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyModes::_tao_any_destructor,
        CosPropertyService::_tc_PropertyModes,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyModes *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyModes>::insert (
      _tao_any,
      CosPropertyService::PropertyModes::_tao_any_destructor,
      CosPropertyService::_tc_PropertyModes,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyModes *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyModes *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyModes *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyModes>::extract (
        _tao_any,
        CosPropertyService::PropertyModes::_tao_any_destructor,
        CosPropertyService::_tc_PropertyModes,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyTypes &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyTypes *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyTypes>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyTypes::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyTypes,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyTypes *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyTypes>::insert (
        _tao_any,
        ::CosPropertyService::PropertyTypes::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyTypes,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyTypes *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyTypes *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyTypes *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyTypes>::extract (
          _tao_any,
          ::CosPropertyService::PropertyTypes::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyTypes,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyTypes &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyTypes *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyTypes>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyTypes::_tao_any_destructor,
        CosPropertyService::_tc_PropertyTypes,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyTypes *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyTypes>::insert (
      _tao_any,
      CosPropertyService::PropertyTypes::_tao_any_destructor,
      CosPropertyService::_tc_PropertyTypes,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyTypes *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyTypes *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyTypes *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyTypes>::extract (
        _tao_any,
        CosPropertyService::PropertyTypes::_tao_any_destructor,
        CosPropertyService::_tc_PropertyTypes,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::ConstraintNotSupported>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::ConstraintNotSupported &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::ConstraintNotSupported>::insert_copy (
        _tao_any,
        ::CosPropertyService::ConstraintNotSupported::_tao_any_destructor,
        ::CosPropertyService::_tc_ConstraintNotSupported,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::ConstraintNotSupported *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::ConstraintNotSupported>::insert (
        _tao_any,
        ::CosPropertyService::ConstraintNotSupported::_tao_any_destructor,
        ::CosPropertyService::_tc_ConstraintNotSupported,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::ConstraintNotSupported *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::ConstraintNotSupported *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::ConstraintNotSupported *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::ConstraintNotSupported>::extract (
          _tao_any,
          ::CosPropertyService::ConstraintNotSupported::_tao_any_destructor,
          ::CosPropertyService::_tc_ConstraintNotSupported,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::ConstraintNotSupported &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::ConstraintNotSupported>::insert_copy (
      _tao_any,
      CosPropertyService::ConstraintNotSupported::_tao_any_destructor,
      CosPropertyService::_tc_ConstraintNotSupported,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::ConstraintNotSupported *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::ConstraintNotSupported>::insert (
      _tao_any,
      CosPropertyService::ConstraintNotSupported::_tao_any_destructor,
      CosPropertyService::_tc_ConstraintNotSupported,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::ConstraintNotSupported *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::ConstraintNotSupported *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::ConstraintNotSupported *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::ConstraintNotSupported>::extract (
        _tao_any,
        CosPropertyService::ConstraintNotSupported::_tao_any_destructor,
        CosPropertyService::_tc_ConstraintNotSupported,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::InvalidPropertyName>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::InvalidPropertyName &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::InvalidPropertyName>::insert_copy (
        _tao_any,
        ::CosPropertyService::InvalidPropertyName::_tao_any_destructor,
        ::CosPropertyService::_tc_InvalidPropertyName,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::InvalidPropertyName *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::InvalidPropertyName>::insert (
        _tao_any,
        ::CosPropertyService::InvalidPropertyName::_tao_any_destructor,
        ::CosPropertyService::_tc_InvalidPropertyName,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::InvalidPropertyName *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::InvalidPropertyName *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::InvalidPropertyName *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::InvalidPropertyName>::extract (
          _tao_any,
          ::CosPropertyService::InvalidPropertyName::_tao_any_destructor,
          ::CosPropertyService::_tc_InvalidPropertyName,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::InvalidPropertyName &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::InvalidPropertyName>::insert_copy (
      _tao_any,
      CosPropertyService::InvalidPropertyName::_tao_any_destructor,
      CosPropertyService::_tc_InvalidPropertyName,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::InvalidPropertyName *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::InvalidPropertyName>::insert (
      _tao_any,
      CosPropertyService::InvalidPropertyName::_tao_any_destructor,
      CosPropertyService::_tc_InvalidPropertyName,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::InvalidPropertyName *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::InvalidPropertyName *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::InvalidPropertyName *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::InvalidPropertyName>::extract (
        _tao_any,
        CosPropertyService::InvalidPropertyName::_tao_any_destructor,
        CosPropertyService::_tc_InvalidPropertyName,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::ConflictingProperty>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::ConflictingProperty &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::ConflictingProperty>::insert_copy (
        _tao_any,
        ::CosPropertyService::ConflictingProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_ConflictingProperty,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::ConflictingProperty *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::ConflictingProperty>::insert (
        _tao_any,
        ::CosPropertyService::ConflictingProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_ConflictingProperty,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::ConflictingProperty *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::ConflictingProperty *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::ConflictingProperty *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::ConflictingProperty>::extract (
          _tao_any,
          ::CosPropertyService::ConflictingProperty::_tao_any_destructor,
          ::CosPropertyService::_tc_ConflictingProperty,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::ConflictingProperty &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::ConflictingProperty>::insert_copy (
      _tao_any,
      CosPropertyService::ConflictingProperty::_tao_any_destructor,
      CosPropertyService::_tc_ConflictingProperty,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::ConflictingProperty *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::ConflictingProperty>::insert (
      _tao_any,
      CosPropertyService::ConflictingProperty::_tao_any_destructor,
      CosPropertyService::_tc_ConflictingProperty,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::ConflictingProperty *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::ConflictingProperty *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::ConflictingProperty *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::ConflictingProperty>::extract (
        _tao_any,
        CosPropertyService::ConflictingProperty::_tao_any_destructor,
        CosPropertyService::_tc_ConflictingProperty,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::PropertyNotFound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyNotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyNotFound>::insert_copy (
        _tao_any,
        ::CosPropertyService::PropertyNotFound::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyNotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyNotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyNotFound>::insert (
        _tao_any,
        ::CosPropertyService::PropertyNotFound::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyNotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyNotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyNotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyNotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyNotFound>::extract (
          _tao_any,
          ::CosPropertyService::PropertyNotFound::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyNotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyNotFound>::insert_copy (
      _tao_any,
      CosPropertyService::PropertyNotFound::_tao_any_destructor,
      CosPropertyService::_tc_PropertyNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyNotFound>::insert (
      _tao_any,
      CosPropertyService::PropertyNotFound::_tao_any_destructor,
      CosPropertyService::_tc_PropertyNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyNotFound>::extract (
        _tao_any,
        CosPropertyService::PropertyNotFound::_tao_any_destructor,
        CosPropertyService::_tc_PropertyNotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::UnsupportedTypeCode>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::UnsupportedTypeCode &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedTypeCode>::insert_copy (
        _tao_any,
        ::CosPropertyService::UnsupportedTypeCode::_tao_any_destructor,
        ::CosPropertyService::_tc_UnsupportedTypeCode,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::UnsupportedTypeCode *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedTypeCode>::insert (
        _tao_any,
        ::CosPropertyService::UnsupportedTypeCode::_tao_any_destructor,
        ::CosPropertyService::_tc_UnsupportedTypeCode,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::UnsupportedTypeCode *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::UnsupportedTypeCode *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::UnsupportedTypeCode *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedTypeCode>::extract (
          _tao_any,
          ::CosPropertyService::UnsupportedTypeCode::_tao_any_destructor,
          ::CosPropertyService::_tc_UnsupportedTypeCode,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::UnsupportedTypeCode &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedTypeCode>::insert_copy (
      _tao_any,
      CosPropertyService::UnsupportedTypeCode::_tao_any_destructor,
      CosPropertyService::_tc_UnsupportedTypeCode,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::UnsupportedTypeCode *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedTypeCode>::insert (
      _tao_any,
      CosPropertyService::UnsupportedTypeCode::_tao_any_destructor,
      CosPropertyService::_tc_UnsupportedTypeCode,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::UnsupportedTypeCode *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::UnsupportedTypeCode *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::UnsupportedTypeCode *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedTypeCode>::extract (
        _tao_any,
        CosPropertyService::UnsupportedTypeCode::_tao_any_destructor,
        CosPropertyService::_tc_UnsupportedTypeCode,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::UnsupportedProperty>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::UnsupportedProperty &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedProperty>::insert_copy (
        _tao_any,
        ::CosPropertyService::UnsupportedProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_UnsupportedProperty,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::UnsupportedProperty *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedProperty>::insert (
        _tao_any,
        ::CosPropertyService::UnsupportedProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_UnsupportedProperty,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::UnsupportedProperty *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::UnsupportedProperty *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::UnsupportedProperty *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedProperty>::extract (
          _tao_any,
          ::CosPropertyService::UnsupportedProperty::_tao_any_destructor,
          ::CosPropertyService::_tc_UnsupportedProperty,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::UnsupportedProperty &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedProperty>::insert_copy (
      _tao_any,
      CosPropertyService::UnsupportedProperty::_tao_any_destructor,
      CosPropertyService::_tc_UnsupportedProperty,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::UnsupportedProperty *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedProperty>::insert (
      _tao_any,
      CosPropertyService::UnsupportedProperty::_tao_any_destructor,
      CosPropertyService::_tc_UnsupportedProperty,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::UnsupportedProperty *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::UnsupportedProperty *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::UnsupportedProperty *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedProperty>::extract (
        _tao_any,
        CosPropertyService::UnsupportedProperty::_tao_any_destructor,
        CosPropertyService::_tc_UnsupportedProperty,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::UnsupportedMode>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::UnsupportedMode &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedMode>::insert_copy (
        _tao_any,
        ::CosPropertyService::UnsupportedMode::_tao_any_destructor,
        ::CosPropertyService::_tc_UnsupportedMode,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::UnsupportedMode *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedMode>::insert (
        _tao_any,
        ::CosPropertyService::UnsupportedMode::_tao_any_destructor,
        ::CosPropertyService::_tc_UnsupportedMode,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::UnsupportedMode *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::UnsupportedMode *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::UnsupportedMode *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::UnsupportedMode>::extract (
          _tao_any,
          ::CosPropertyService::UnsupportedMode::_tao_any_destructor,
          ::CosPropertyService::_tc_UnsupportedMode,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::UnsupportedMode &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedMode>::insert_copy (
      _tao_any,
      CosPropertyService::UnsupportedMode::_tao_any_destructor,
      CosPropertyService::_tc_UnsupportedMode,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::UnsupportedMode *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedMode>::insert (
      _tao_any,
      CosPropertyService::UnsupportedMode::_tao_any_destructor,
      CosPropertyService::_tc_UnsupportedMode,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::UnsupportedMode *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::UnsupportedMode *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::UnsupportedMode *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::UnsupportedMode>::extract (
        _tao_any,
        CosPropertyService::UnsupportedMode::_tao_any_destructor,
        CosPropertyService::_tc_UnsupportedMode,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::FixedProperty>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::FixedProperty &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::FixedProperty>::insert_copy (
        _tao_any,
        ::CosPropertyService::FixedProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_FixedProperty,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::FixedProperty *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::FixedProperty>::insert (
        _tao_any,
        ::CosPropertyService::FixedProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_FixedProperty,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::FixedProperty *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::FixedProperty *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::FixedProperty *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::FixedProperty>::extract (
          _tao_any,
          ::CosPropertyService::FixedProperty::_tao_any_destructor,
          ::CosPropertyService::_tc_FixedProperty,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::FixedProperty &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::FixedProperty>::insert_copy (
      _tao_any,
      CosPropertyService::FixedProperty::_tao_any_destructor,
      CosPropertyService::_tc_FixedProperty,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::FixedProperty *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::FixedProperty>::insert (
      _tao_any,
      CosPropertyService::FixedProperty::_tao_any_destructor,
      CosPropertyService::_tc_FixedProperty,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::FixedProperty *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::FixedProperty *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::FixedProperty *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::FixedProperty>::extract (
        _tao_any,
        CosPropertyService::FixedProperty::_tao_any_destructor,
        CosPropertyService::_tc_FixedProperty,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::ReadOnlyProperty>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::ReadOnlyProperty &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::ReadOnlyProperty>::insert_copy (
        _tao_any,
        ::CosPropertyService::ReadOnlyProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_ReadOnlyProperty,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::ReadOnlyProperty *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::ReadOnlyProperty>::insert (
        _tao_any,
        ::CosPropertyService::ReadOnlyProperty::_tao_any_destructor,
        ::CosPropertyService::_tc_ReadOnlyProperty,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::ReadOnlyProperty *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::ReadOnlyProperty *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::ReadOnlyProperty *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::ReadOnlyProperty>::extract (
          _tao_any,
          ::CosPropertyService::ReadOnlyProperty::_tao_any_destructor,
          ::CosPropertyService::_tc_ReadOnlyProperty,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::ReadOnlyProperty &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::ReadOnlyProperty>::insert_copy (
      _tao_any,
      CosPropertyService::ReadOnlyProperty::_tao_any_destructor,
      CosPropertyService::_tc_ReadOnlyProperty,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::ReadOnlyProperty *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::ReadOnlyProperty>::insert (
      _tao_any,
      CosPropertyService::ReadOnlyProperty::_tao_any_destructor,
      CosPropertyService::_tc_ReadOnlyProperty,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::ReadOnlyProperty *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::ReadOnlyProperty *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::ReadOnlyProperty *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::ReadOnlyProperty>::extract (
        _tao_any,
        CosPropertyService::ReadOnlyProperty::_tao_any_destructor,
        CosPropertyService::_tc_ReadOnlyProperty,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::ExceptionReason _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosPropertyService::ExceptionReason>::insert (
        _tao_any,
        ::CosPropertyService::_tc_ExceptionReason,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::ExceptionReason &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosPropertyService::ExceptionReason>::extract (
          _tao_any,
          ::CosPropertyService::_tc_ExceptionReason,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::ExceptionReason _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosPropertyService::ExceptionReason>::insert (
      _tao_any,
      CosPropertyService::_tc_ExceptionReason,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::ExceptionReason &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosPropertyService::ExceptionReason>::extract (
        _tao_any,
        CosPropertyService::_tc_ExceptionReason,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyException &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyException *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyException>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyException::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyException,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosPropertyService::PropertyException *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyException>::insert (
        _tao_any,
        ::CosPropertyService::PropertyException::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyException,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyException *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyException *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyException *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyException>::extract (
          _tao_any,
          ::CosPropertyService::PropertyException::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyException,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyException &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyException *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyException>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyException::_tao_any_destructor,
        CosPropertyService::_tc_PropertyException,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyException *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyException>::insert (
      _tao_any,
      CosPropertyService::PropertyException::_tao_any_destructor,
      CosPropertyService::_tc_PropertyException,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyException *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyException *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyException *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyException>::extract (
        _tao_any,
        CosPropertyService::PropertyException::_tao_any_destructor,
        CosPropertyService::_tc_PropertyException,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyExceptions &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosPropertyService::PropertyExceptions *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyExceptions>::insert_copy (
          _tao_any,
          ::CosPropertyService::PropertyExceptions::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyExceptions,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyExceptions *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyExceptions>::insert (
        _tao_any,
        ::CosPropertyService::PropertyExceptions::_tao_any_destructor,
        ::CosPropertyService::_tc_PropertyExceptions,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::PropertyExceptions *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::PropertyExceptions *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::PropertyExceptions *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::PropertyExceptions>::extract (
          _tao_any,
          ::CosPropertyService::PropertyExceptions::_tao_any_destructor,
          ::CosPropertyService::_tc_PropertyExceptions,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyExceptions &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosPropertyService::PropertyExceptions *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyExceptions>::insert_copy (
        _tao_any,
        CosPropertyService::PropertyExceptions::_tao_any_destructor,
        CosPropertyService::_tc_PropertyExceptions,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyExceptions *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::PropertyExceptions>::insert (
      _tao_any,
      CosPropertyService::PropertyExceptions::_tao_any_destructor,
      CosPropertyService::_tc_PropertyExceptions,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyExceptions *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::PropertyExceptions *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::PropertyExceptions *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::PropertyExceptions>::extract (
        _tao_any,
        CosPropertyService::PropertyExceptions::_tao_any_destructor,
        CosPropertyService::_tc_PropertyExceptions,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosPropertyService::MultipleExceptions>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosPropertyService::MultipleExceptions &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::MultipleExceptions>::insert_copy (
        _tao_any,
        ::CosPropertyService::MultipleExceptions::_tao_any_destructor,
        ::CosPropertyService::_tc_MultipleExceptions,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosPropertyService::MultipleExceptions *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosPropertyService::MultipleExceptions>::insert (
        _tao_any,
        ::CosPropertyService::MultipleExceptions::_tao_any_destructor,
        ::CosPropertyService::_tc_MultipleExceptions,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosPropertyService::MultipleExceptions *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosPropertyService::MultipleExceptions *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosPropertyService::MultipleExceptions *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosPropertyService::MultipleExceptions>::extract (
          _tao_any,
          ::CosPropertyService::MultipleExceptions::_tao_any_destructor,
          ::CosPropertyService::_tc_MultipleExceptions,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosPropertyService::MultipleExceptions &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::MultipleExceptions>::insert_copy (
      _tao_any,
      CosPropertyService::MultipleExceptions::_tao_any_destructor,
      CosPropertyService::_tc_MultipleExceptions,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::MultipleExceptions *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosPropertyService::MultipleExceptions>::insert (
      _tao_any,
      CosPropertyService::MultipleExceptions::_tao_any_destructor,
      CosPropertyService::_tc_MultipleExceptions,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::MultipleExceptions *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosPropertyService::MultipleExceptions *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosPropertyService::MultipleExceptions *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosPropertyService::MultipleExceptions>::extract (
        _tao_any,
        CosPropertyService::MultipleExceptions::_tao_any_destructor,
        CosPropertyService::_tc_MultipleExceptions,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosPropertyService::PropertySetFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySetFactory_ptr _tao_elem)
  {
    PropertySetFactory_ptr _tao_objptr =
      PropertySetFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySetFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PropertySetFactory>::insert (
        _tao_any,
        PropertySetFactory::_tao_any_destructor,
        _tc_PropertySetFactory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PropertySetFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PropertySetFactory>::extract (
          _tao_any,
          PropertySetFactory::_tao_any_destructor,
          _tc_PropertySetFactory,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetFactory_ptr _tao_elem)
{
  CosPropertyService::PropertySetFactory_ptr _tao_objptr =
    CosPropertyService::PropertySetFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosPropertyService::PropertySetFactory>::insert (
      _tao_any,
      CosPropertyService::PropertySetFactory::_tao_any_destructor,
      CosPropertyService::_tc_PropertySetFactory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosPropertyService::PropertySetFactory>::extract (
        _tao_any,
        CosPropertyService::PropertySetFactory::_tao_any_destructor,
        CosPropertyService::_tc_PropertySetFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosPropertyService::PropertySetDefFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySetDefFactory_ptr _tao_elem)
  {
    PropertySetDefFactory_ptr _tao_objptr =
      PropertySetDefFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySetDefFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PropertySetDefFactory>::insert (
        _tao_any,
        PropertySetDefFactory::_tao_any_destructor,
        _tc_PropertySetDefFactory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PropertySetDefFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PropertySetDefFactory>::extract (
          _tao_any,
          PropertySetDefFactory::_tao_any_destructor,
          _tc_PropertySetDefFactory,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetDefFactory_ptr _tao_elem)
{
  CosPropertyService::PropertySetDefFactory_ptr _tao_objptr =
    CosPropertyService::PropertySetDefFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetDefFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosPropertyService::PropertySetDefFactory>::insert (
      _tao_any,
      CosPropertyService::PropertySetDefFactory::_tao_any_destructor,
      CosPropertyService::_tc_PropertySetDefFactory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetDefFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosPropertyService::PropertySetDefFactory>::extract (
        _tao_any,
        CosPropertyService::PropertySetDefFactory::_tao_any_destructor,
        CosPropertyService::_tc_PropertySetDefFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosPropertyService::PropertySet>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySet_ptr _tao_elem)
  {
    PropertySet_ptr _tao_objptr =
      PropertySet::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySet_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PropertySet>::insert (
        _tao_any,
        PropertySet::_tao_any_destructor,
        _tc_PropertySet,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PropertySet_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PropertySet>::extract (
          _tao_any,
          PropertySet::_tao_any_destructor,
          _tc_PropertySet,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySet_ptr _tao_elem)
{
  CosPropertyService::PropertySet_ptr _tao_objptr =
    CosPropertyService::PropertySet::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySet_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosPropertyService::PropertySet>::insert (
      _tao_any,
      CosPropertyService::PropertySet::_tao_any_destructor,
      CosPropertyService::_tc_PropertySet,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySet_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosPropertyService::PropertySet>::extract (
        _tao_any,
        CosPropertyService::PropertySet::_tao_any_destructor,
        CosPropertyService::_tc_PropertySet,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosPropertyService::PropertySetDef>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySetDef_ptr _tao_elem)
  {
    PropertySetDef_ptr _tao_objptr =
      PropertySetDef::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertySetDef_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PropertySetDef>::insert (
        _tao_any,
        PropertySetDef::_tao_any_destructor,
        _tc_PropertySetDef,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PropertySetDef_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PropertySetDef>::extract (
          _tao_any,
          PropertySetDef::_tao_any_destructor,
          _tc_PropertySetDef,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetDef_ptr _tao_elem)
{
  CosPropertyService::PropertySetDef_ptr _tao_objptr =
    CosPropertyService::PropertySetDef::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetDef_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosPropertyService::PropertySetDef>::insert (
      _tao_any,
      CosPropertyService::PropertySetDef::_tao_any_destructor,
      CosPropertyService::_tc_PropertySetDef,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertySetDef_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosPropertyService::PropertySetDef>::extract (
        _tao_any,
        CosPropertyService::PropertySetDef::_tao_any_destructor,
        CosPropertyService::_tc_PropertySetDef,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosPropertyService::PropertyNamesIterator>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertyNamesIterator_ptr _tao_elem)
  {
    PropertyNamesIterator_ptr _tao_objptr =
      PropertyNamesIterator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertyNamesIterator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PropertyNamesIterator>::insert (
        _tao_any,
        PropertyNamesIterator::_tao_any_destructor,
        _tc_PropertyNamesIterator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PropertyNamesIterator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PropertyNamesIterator>::extract (
          _tao_any,
          PropertyNamesIterator::_tao_any_destructor,
          _tc_PropertyNamesIterator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNamesIterator_ptr _tao_elem)
{
  CosPropertyService::PropertyNamesIterator_ptr _tao_objptr =
    CosPropertyService::PropertyNamesIterator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNamesIterator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosPropertyService::PropertyNamesIterator>::insert (
      _tao_any,
      CosPropertyService::PropertyNamesIterator::_tao_any_destructor,
      CosPropertyService::_tc_PropertyNamesIterator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertyNamesIterator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosPropertyService::PropertyNamesIterator>::extract (
        _tao_any,
        CosPropertyService::PropertyNamesIterator::_tao_any_destructor,
        CosPropertyService::_tc_PropertyNamesIterator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosPropertyService::PropertiesIterator>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertiesIterator_ptr _tao_elem)
  {
    PropertiesIterator_ptr _tao_objptr =
      PropertiesIterator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PropertiesIterator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PropertiesIterator>::insert (
        _tao_any,
        PropertiesIterator::_tao_any_destructor,
        _tc_PropertiesIterator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PropertiesIterator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PropertiesIterator>::extract (
          _tao_any,
          PropertiesIterator::_tao_any_destructor,
          _tc_PropertiesIterator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertiesIterator_ptr _tao_elem)
{
  CosPropertyService::PropertiesIterator_ptr _tao_objptr =
    CosPropertyService::PropertiesIterator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosPropertyService::PropertiesIterator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosPropertyService::PropertiesIterator>::insert (
      _tao_any,
      CosPropertyService::PropertiesIterator::_tao_any_destructor,
      CosPropertyService::_tc_PropertiesIterator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosPropertyService::PropertiesIterator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosPropertyService::PropertiesIterator>::extract (
        _tao_any,
        CosPropertyService::PropertiesIterator::_tao_any_destructor,
        CosPropertyService::_tc_PropertiesIterator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::Property &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.property_name.in ()) &&
    (strm << _tao_aggregate.property_value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::Property &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.property_name.out ()) &&
    (strm >> _tao_aggregate.property_value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosPropertyService::PropertyModeType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosPropertyService::PropertyModeType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosPropertyService::PropertyModeType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyDef &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.property_name.in ()) &&
    (strm << _tao_aggregate.property_value) &&
    (strm << _tao_aggregate.property_mode);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyDef &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.property_name.out ()) &&
    (strm >> _tao_aggregate.property_value) &&
    (strm >> _tao_aggregate.property_mode);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyMode &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.property_name.in ()) &&
    (strm << _tao_aggregate.property_mode);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyMode &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.property_name.out ()) &&
    (strm >> _tao_aggregate.property_mode);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosPropertyService_PropertyNames_CPP_
#define _TAO_CDR_OP_CosPropertyService_PropertyNames_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyNames &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyNames &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosPropertyService_PropertyNames_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosPropertyService_Properties_CPP_
#define _TAO_CDR_OP_CosPropertyService_Properties_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::Properties &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::Properties &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosPropertyService_Properties_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosPropertyService_PropertyDefs_CPP_
#define _TAO_CDR_OP_CosPropertyService_PropertyDefs_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyDefs &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyDefs &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosPropertyService_PropertyDefs_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosPropertyService_PropertyModes_CPP_
#define _TAO_CDR_OP_CosPropertyService_PropertyModes_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyModes &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyModes &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosPropertyService_PropertyModes_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosPropertyService_PropertyTypes_CPP_
#define _TAO_CDR_OP_CosPropertyService_PropertyTypes_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyTypes &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyTypes &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosPropertyService_PropertyTypes_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::ConstraintNotSupported &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::ConstraintNotSupported&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::InvalidPropertyName &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::InvalidPropertyName&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::ConflictingProperty &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::ConflictingProperty&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyNotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::PropertyNotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::UnsupportedTypeCode &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::UnsupportedTypeCode&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::UnsupportedProperty &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::UnsupportedProperty&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::UnsupportedMode &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::UnsupportedMode&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::FixedProperty &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::FixedProperty&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::ReadOnlyProperty &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosPropertyService::ReadOnlyProperty&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosPropertyService::ExceptionReason _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosPropertyService::ExceptionReason & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosPropertyService::ExceptionReason> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyException &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.reason) &&
    (strm << _tao_aggregate.failing_property_name.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyException &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.reason) &&
    (strm >> _tao_aggregate.failing_property_name.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosPropertyService_PropertyExceptions_CPP_
#define _TAO_CDR_OP_CosPropertyService_PropertyExceptions_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyExceptions &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyExceptions &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosPropertyService_PropertyExceptions_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::MultipleExceptions &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.exceptions)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::MultipleExceptions &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.exceptions)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertySetFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertySetFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosPropertyService::PropertySetFactory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertySetDefFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertySetDefFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosPropertyService::PropertySetDefFactory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertySet_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertySet_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosPropertyService::PropertySet RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertySetDef_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertySetDef_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosPropertyService::PropertySetDef RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyNamesIterator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyNamesIterator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosPropertyService::PropertyNamesIterator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertiesIterator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertiesIterator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosPropertyService::PropertiesIterator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


