// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_RTEVENTLOGADMINS_WW8ZQA_CPP_
#define _TAO_IDL_RTEVENTLOGADMINS_WW8ZQA_CPP_


#include "RTEventLogAdminS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "RTEventLogAdminS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_RTEventLogAdmin_EventLog_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_RTEventLogAdmin_EventLog_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_RTEventLogAdmin_EventLog_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
     91, 91, 91, 91, 91, 15, 91, 30, 91,  0,
     35,  0,  0, 15,  0,  0, 91,  5,  5, 50,
     35, 91, 91, 25,  0,  0, 15, 91, 91, 10,
     91,  0, 91, 91, 91, 91, 91, 91,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_RTEventLogAdmin_EventLog_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 47,
      MIN_WORD_LENGTH = 2,
      MAX_WORD_LENGTH = 29,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 90,
      HASH_VALUE_RANGE = 87,
      DUPLICATES = 4,
      WORDLIST_SIZE = 51
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"copy", &POA_RTEventLogAdmin::EventLog::copy_skel, 0},
      {"flush", &POA_RTEventLogAdmin::EventLog::flush_skel, 0},
      {"retrieve", &POA_RTEventLogAdmin::EventLog::retrieve_skel, 0},
      {"set_log_qos", &POA_RTEventLogAdmin::EventLog::set_log_qos_skel, 0},
      {"set_max_size", &POA_RTEventLogAdmin::EventLog::set_max_size_skel, 0},
      {"for_consumers", &POA_RTEventLogAdmin::EventLog::for_consumers_skel, 0},
      {"for_suppliers", &POA_RTEventLogAdmin::EventLog::for_suppliers_skel, 0},
      {"remove_observer", &POA_RTEventLogAdmin::EventLog::remove_observer_skel, 0},
      {"set_interval", &POA_RTEventLogAdmin::EventLog::set_interval_skel, 0},
      {"set_week_mask", &POA_RTEventLogAdmin::EventLog::set_week_mask_skel, 0},
      {"set_max_record_life", &POA_RTEventLogAdmin::EventLog::set_max_record_life_skel, 0},
      {"set_forwarding_state", &POA_RTEventLogAdmin::EventLog::set_forwarding_state_skel, 0},
      {"set_record_attribute", &POA_RTEventLogAdmin::EventLog::set_record_attribute_skel, 0},
      {"set_records_attribute", &POA_RTEventLogAdmin::EventLog::set_records_attribute_skel, 0},
      {"write_records", &POA_RTEventLogAdmin::EventLog::write_records_skel, 0},
      {"set_administrative_state", &POA_RTEventLogAdmin::EventLog::set_administrative_state_skel, 0},
      {"_interface", &POA_RTEventLogAdmin::EventLog::_interface_skel, 0},
      {"get_log_qos", &POA_RTEventLogAdmin::EventLog::get_log_qos_skel, 0},
      {"get_max_size", &POA_RTEventLogAdmin::EventLog::get_max_size_skel, 0},
      {"get_n_records", &POA_RTEventLogAdmin::EventLog::get_n_records_skel, 0},
      {"set_capacity_alarm_thresholds", &POA_RTEventLogAdmin::EventLog::set_capacity_alarm_thresholds_skel, 0},
      {"query", &POA_RTEventLogAdmin::EventLog::query_skel, 0},
      {"get_current_size", &POA_RTEventLogAdmin::EventLog::get_current_size_skel, 0},
      {"get_interval", &POA_RTEventLogAdmin::EventLog::get_interval_skel, 0},
      {"get_week_mask", &POA_RTEventLogAdmin::EventLog::get_week_mask_skel, 0},
      {"get_max_record_life", &POA_RTEventLogAdmin::EventLog::get_max_record_life_skel, 0},
      {"get_forwarding_state", &POA_RTEventLogAdmin::EventLog::get_forwarding_state_skel, 0},
      {"get_record_attribute", &POA_RTEventLogAdmin::EventLog::get_record_attribute_skel, 0},
      {"get_operational_state", &POA_RTEventLogAdmin::EventLog::get_operational_state_skel, 0},
      {"id", &POA_RTEventLogAdmin::EventLog::id_skel, 0},
      {"get_availability_status", &POA_RTEventLogAdmin::EventLog::get_availability_status_skel, 0},
      {"get_administrative_state", &POA_RTEventLogAdmin::EventLog::get_administrative_state_skel, 0},
      {"_component", &POA_RTEventLogAdmin::EventLog::_component_skel, 0},
      {"write_recordlist", &POA_RTEventLogAdmin::EventLog::write_recordlist_skel, 0},
      {"destroy", &POA_RTEventLogAdmin::EventLog::destroy_skel, 0},
      {"_non_existent", &POA_RTEventLogAdmin::EventLog::_non_existent_skel, 0},
      {"get_capacity_alarm_thresholds", &POA_RTEventLogAdmin::EventLog::get_capacity_alarm_thresholds_skel, 0},
      {"append_observer", &POA_RTEventLogAdmin::EventLog::append_observer_skel, 0},
      {"copy_with_id", &POA_RTEventLogAdmin::EventLog::copy_with_id_skel, 0},
      {"delete_records", &POA_RTEventLogAdmin::EventLog::delete_records_skel, 0},
      {"_is_a", &POA_RTEventLogAdmin::EventLog::_is_a_skel, 0},
      {"set_log_full_action", &POA_RTEventLogAdmin::EventLog::set_log_full_action_skel, 0},
      {"match", &POA_RTEventLogAdmin::EventLog::match_skel, 0},
      {"my_factory", &POA_RTEventLogAdmin::EventLog::my_factory_skel, 0},
      {"_repository_id", &POA_RTEventLogAdmin::EventLog::_repository_id_skel, 0},
      {"get_log_full_action", &POA_RTEventLogAdmin::EventLog::get_log_full_action_skel, 0},
      {"delete_records_by_id", &POA_RTEventLogAdmin::EventLog::delete_records_by_id_skel, 0},
    };

  static const signed char lookup[] =
    {
        -1,   -1,   -9,   -2,    4,    5,  -15,   -2,    6,  -30,   -2,    7,    8, -101, 
        -1,   11,   -1,   12,   13,   14, -104,   17,   -1,   18,   19,   20,   21,   22, 
        23,   24,   25,   26,   27,   28,   29, -116,   32,   33,   34,   35,   36,   37, 
        38,   39,   40,   41,   -1,   42,   -1,   43,   44,   -1,   -1,   -1,   45,   46, 
        -1,   -1,   -1,   -1,   47,   -1,   -1,   -1,   48,   -1,   -1,   -1,   -1,   49, 
        -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   -1,   -1,   -1,   50, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_RTEventLogAdmin_EventLog_Perfect_Hash_OpTable tao_RTEventLogAdmin_EventLog_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_Initializer (size_t)
{
  RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_function_pointer = 
    RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_RTEventLogAdmin::EventLog::EventLog (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_RTEventLogAdmin_EventLog_optable;
}

POA_RTEventLogAdmin::EventLog::EventLog (const EventLog& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_DsLogAdmin::Log (rhs),
    POA_RtecEventChannelAdmin::EventChannel (rhs)
{
}

POA_RTEventLogAdmin::EventLog::~EventLog (void)
{
}


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_EventLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_EventLog_Upcall_Command (
      POA_RTEventLogAdmin::EventLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_RTEventLogAdmin::EventLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLog::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_RTEventLogAdmin::EventLog * const impl =
    static_cast<POA_RTEventLogAdmin::EventLog *> (servant);
  
  _is_a_EventLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_EventLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_EventLog_Upcall_Command (
      POA_RTEventLogAdmin::EventLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_RTEventLogAdmin::EventLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLog::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RTEventLogAdmin::EventLog * const impl =
    static_cast<POA_RTEventLogAdmin::EventLog *> (servant);
  
  _non_existent_EventLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_EventLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_EventLog_Upcall_Command (
      POA_RTEventLogAdmin::EventLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_RTEventLogAdmin::EventLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLog::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RTEventLogAdmin::EventLog * const impl =
    static_cast<POA_RTEventLogAdmin::EventLog *> (servant);
  
  _repository_id_EventLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_RTEventLogAdmin::EventLog::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_RTEventLogAdmin::EventLog * const impl =
    static_cast<POA_RTEventLogAdmin::EventLog *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_EventLog_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_EventLog_Upcall_Command (
      POA_RTEventLogAdmin::EventLog * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_RTEventLogAdmin::EventLog * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLog::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RTEventLogAdmin::EventLog * const impl =
    static_cast<POA_RTEventLogAdmin::EventLog *> (servant);
  
  _get_component_EventLog_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_RTEventLogAdmin::EventLog::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/Log:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTEventLogAdmin/EventLog:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_RTEventLogAdmin::EventLog::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTEventLogAdmin/EventLog:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_RTEventLogAdmin::EventLog::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

RTEventLogAdmin::EventLog *
POA_RTEventLogAdmin::EventLog::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::RTEventLogAdmin::EventLog STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RTEventLogAdmin__TAO_EventLog_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_RTEventLogAdmin_EventLogFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_RTEventLogAdmin_EventLogFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_RTEventLogAdmin_EventLogFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26,  0, 26,  0, 26,  5,
      0, 10,  0,  0, 26, 26, 26, 26,  0, 26,
     26,  5, 26, 26,  0,  0,  0, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_RTEventLogAdmin_EventLogFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 11,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 20,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 25,
      HASH_VALUE_RANGE = 21,
      DUPLICATES = 0,
      WORDLIST_SIZE = 16
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_RTEventLogAdmin::EventLogFactory::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"find_log", &POA_RTEventLogAdmin::EventLogFactory::find_log_skel, 0},
      {"list_logs", &POA_RTEventLogAdmin::EventLogFactory::list_logs_skel, 0},
      {"_component", &POA_RTEventLogAdmin::EventLogFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_RTEventLogAdmin::EventLogFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_RTEventLogAdmin::EventLogFactory::_repository_id_skel, 0},
      {"list_logs_by_id", &POA_RTEventLogAdmin::EventLogFactory::list_logs_by_id_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_with_id", &POA_RTEventLogAdmin::EventLogFactory::create_with_id_skel, 0},
      {"_interface", &POA_RTEventLogAdmin::EventLogFactory::_interface_skel, 0},
      {"create", &POA_RTEventLogAdmin::EventLogFactory::create_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"obtain_push_supplier", &POA_RTEventLogAdmin::EventLogFactory::obtain_push_supplier_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_RTEventLogAdmin_EventLogFactory_Perfect_Hash_OpTable tao_RTEventLogAdmin_EventLogFactory_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_function_pointer = 
    RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_RTEventLogAdmin::EventLogFactory::EventLogFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_RTEventLogAdmin_EventLogFactory_optable;
}

POA_RTEventLogAdmin::EventLogFactory::EventLogFactory (const EventLogFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_DsLogAdmin::LogMgr (rhs),
    POA_RtecEventChannelAdmin::ConsumerAdmin (rhs)
{
}

POA_RTEventLogAdmin::EventLogFactory::~EventLogFactory (void)
{
}

namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_EventLogFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_EventLogFactory (
      POA_RTEventLogAdmin::EventLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RTEventLogAdmin::EventLog>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::RTEventLogAdmin::EventLog> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::CapacityAlarmThresholdList> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::CORBA::ULong>::out_arg_type arg_4 =
        TAO::Portable_Server::get_out_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_RTEventLogAdmin::EventLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RTEventLogAdmin::EventLogFactory::create_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_InvalidLogFullAction,
      DsLogAdmin::_tc_InvalidThreshold
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::RTEventLogAdmin::EventLog>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_full_action;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_max_size;
  TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::in_arg_val _tao_thresholds;
  TAO::SArg_Traits< ::CORBA::ULong>::out_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_full_action,
      &_tao_max_size,
      &_tao_thresholds,
      &_tao_id
    };
  
  static size_t const nargs = 5;

  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);

  create_EventLogFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_with_id_EventLogFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_with_id_EventLogFactory (
      POA_RTEventLogAdmin::EventLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::RTEventLogAdmin::EventLog>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::RTEventLogAdmin::EventLog> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::UShort>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::UShort> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::DsLogAdmin::CapacityAlarmThresholdList> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_with_id (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_RTEventLogAdmin::EventLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_RTEventLogAdmin::EventLogFactory::create_with_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      DsLogAdmin::_tc_LogIdAlreadyExists,
      DsLogAdmin::_tc_InvalidLogFullAction,
      DsLogAdmin::_tc_InvalidThreshold
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::RTEventLogAdmin::EventLog>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_id;
  TAO::SArg_Traits< ::CORBA::UShort>::in_arg_val _tao_full_action;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_max_size;
  TAO::SArg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>::in_arg_val _tao_thresholds;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id,
      &_tao_full_action,
      &_tao_max_size,
      &_tao_thresholds
    };
  
  static size_t const nargs = 5;

  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);

  create_with_id_EventLogFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_EventLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_EventLogFactory_Upcall_Command (
      POA_RTEventLogAdmin::EventLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_RTEventLogAdmin::EventLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLogFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);
  
  _is_a_EventLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_EventLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_EventLogFactory_Upcall_Command (
      POA_RTEventLogAdmin::EventLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_RTEventLogAdmin::EventLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLogFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);
  
  _non_existent_EventLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_EventLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_EventLogFactory_Upcall_Command (
      POA_RTEventLogAdmin::EventLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_RTEventLogAdmin::EventLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLogFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);
  
  _repository_id_EventLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_RTEventLogAdmin::EventLogFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_RTEventLogAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_EventLogFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_EventLogFactory_Upcall_Command (
      POA_RTEventLogAdmin::EventLogFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_RTEventLogAdmin::EventLogFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_RTEventLogAdmin::EventLogFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_RTEventLogAdmin::EventLogFactory * const impl =
    static_cast<POA_RTEventLogAdmin::EventLogFactory *> (servant);
  
  _get_component_EventLogFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_RTEventLogAdmin::EventLogFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/DsLogAdmin/LogMgr:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTEventLogAdmin/EventLogFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_RTEventLogAdmin::EventLogFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTEventLogAdmin/EventLogFactory:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_RTEventLogAdmin::EventLogFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

RTEventLogAdmin::EventLogFactory *
POA_RTEventLogAdmin::EventLogFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::RTEventLogAdmin::EventLogFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RTEventLogAdmin__TAO_EventLogFactory_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

