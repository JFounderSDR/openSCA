// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_COSPROPERTYS_PY7LAY_CPP_
#define _TAO_IDL_COSPROPERTYS_PY7LAY_CPP_


#include "CosPropertyS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "CosPropertyS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosPropertyService_PropertySetFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosPropertyService_PropertySetFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosPropertyService_PropertySetFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31,  0, 31,  0, 31,  0,
      0,  5, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31,  0, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosPropertyService_PropertySetFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 30,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 30,
      HASH_VALUE_RANGE = 26,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosPropertyService::PropertySetFactory::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_CosPropertyService::PropertySetFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosPropertyService::PropertySetFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_CosPropertyService::PropertySetFactory::_repository_id_skel, 0},
      {"_interface", &POA_CosPropertyService::PropertySetFactory::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"create_propertyset", &POA_CosPropertyService::PropertySetFactory::create_propertyset_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"create_initial_propertyset", &POA_CosPropertyService::PropertySetFactory::create_initial_propertyset_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_constrained_propertyset", &POA_CosPropertyService::PropertySetFactory::create_constrained_propertyset_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosPropertyService_PropertySetFactory_Perfect_Hash_OpTable tao_CosPropertyService_PropertySetFactory_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer = 
    CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosPropertyService::PropertySetFactory::PropertySetFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosPropertyService_PropertySetFactory_optable;
}

POA_CosPropertyService::PropertySetFactory::PropertySetFactory (const PropertySetFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosPropertyService::PropertySetFactory::~PropertySetFactory (void)
{
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_propertyset_PropertySetFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_propertyset_PropertySetFactory (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertySet>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertySet> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->create_propertyset ();
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetFactory::create_propertyset_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertySet>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);

  create_propertyset_PropertySetFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_constrained_propertyset_PropertySetFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_constrained_propertyset_PropertySetFactory (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertySet>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertySet> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::PropertyTypes>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyTypes> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::Properties>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->create_constrained_propertyset (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetFactory::create_constrained_propertyset_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_ConstraintNotSupported
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertySet>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyTypes>::in_arg_val _tao_allowed_property_types;
  TAO::SArg_Traits< ::CosPropertyService::Properties>::in_arg_val _tao_allowed_properties;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_allowed_property_types,
      &_tao_allowed_properties
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);

  create_constrained_propertyset_PropertySetFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_initial_propertyset_PropertySetFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_initial_propertyset_PropertySetFactory (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertySet>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertySet> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->create_initial_propertyset (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetFactory::create_initial_propertyset_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_MultipleExceptions
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertySet>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::Properties>::in_arg_val _tao_initial_properties;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_initial_properties
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);

  create_initial_propertyset_PropertySetFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertySetFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertySetFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);
  
  _is_a_PropertySetFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertySetFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertySetFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);
  
  _non_existent_PropertySetFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertySetFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertySetFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);
  
  _repository_id_PropertySetFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosPropertyService::PropertySetFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertySetFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertySetFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosPropertyService::PropertySetFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetFactory *> (servant);
  
  _get_component_PropertySetFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosPropertyService::PropertySetFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosPropertyService::PropertySetFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySetFactory:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosPropertyService::PropertySetFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosPropertyService::PropertySetFactory *
POA_CosPropertyService::PropertySetFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosPropertyService::PropertySetFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosPropertyService_PropertySetDefFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosPropertyService_PropertySetDefFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosPropertyService_PropertySetDefFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34,  0, 34,  0, 34,  0,
      0,  5,  0, 34, 34, 34, 34, 34, 34, 34,
     34, 34, 34, 34, 34, 34,  0, 34, 34, 34,
     34, 34, 34, 34, 34, 34, 34, 34,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosPropertyService_PropertySetDefFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 33,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 33,
      HASH_VALUE_RANGE = 29,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosPropertyService::PropertySetDefFactory::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_CosPropertyService::PropertySetDefFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosPropertyService::PropertySetDefFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_CosPropertyService::PropertySetDefFactory::_repository_id_skel, 0},
      {"_interface", &POA_CosPropertyService::PropertySetDefFactory::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"create_propertysetdef", &POA_CosPropertyService::PropertySetDefFactory::create_propertysetdef_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"create_initial_propertysetdef", &POA_CosPropertyService::PropertySetDefFactory::create_initial_propertysetdef_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_constrained_propertysetdef", &POA_CosPropertyService::PropertySetDefFactory::create_constrained_propertysetdef_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosPropertyService_PropertySetDefFactory_Perfect_Hash_OpTable tao_CosPropertyService_PropertySetDefFactory_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer = 
    CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosPropertyService::PropertySetDefFactory::PropertySetDefFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosPropertyService_PropertySetDefFactory_optable;
}

POA_CosPropertyService::PropertySetDefFactory::PropertySetDefFactory (const PropertySetDefFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosPropertyService::PropertySetDefFactory::~PropertySetDefFactory (void)
{
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_propertysetdef_PropertySetDefFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_propertysetdef_PropertySetDefFactory (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertySetDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertySetDef> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->create_propertysetdef ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDefFactory::create_propertysetdef_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertySetDef>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);

  create_propertysetdef_PropertySetDefFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_constrained_propertysetdef_PropertySetDefFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_constrained_propertysetdef_PropertySetDefFactory (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertySetDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertySetDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::PropertyTypes>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyTypes> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyDefs> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->create_constrained_propertysetdef (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDefFactory::create_constrained_propertysetdef_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_ConstraintNotSupported
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertySetDef>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyTypes>::in_arg_val _tao_allowed_property_types;
  TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_val _tao_allowed_property_defs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_allowed_property_types,
      &_tao_allowed_property_defs
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);

  create_constrained_propertysetdef_PropertySetDefFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_initial_propertysetdef_PropertySetDefFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_initial_propertysetdef_PropertySetDefFactory (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertySetDef>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertySetDef> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyDefs> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->create_initial_propertysetdef (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDefFactory::create_initial_propertysetdef_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_MultipleExceptions
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertySetDef>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_val _tao_initial_property_defs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_initial_property_defs
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);

  create_initial_propertysetdef_PropertySetDefFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertySetDefFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertySetDefFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDefFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);
  
  _is_a_PropertySetDefFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertySetDefFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertySetDefFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDefFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);
  
  _non_existent_PropertySetDefFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertySetDefFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertySetDefFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDefFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);
  
  _repository_id_PropertySetDefFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosPropertyService::PropertySetDefFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertySetDefFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertySetDefFactory_Upcall_Command (
      POA_CosPropertyService::PropertySetDefFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDefFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDefFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDefFactory * const impl =
    static_cast<POA_CosPropertyService::PropertySetDefFactory *> (servant);
  
  _get_component_PropertySetDefFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosPropertyService::PropertySetDefFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosPropertyService::PropertySetDefFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySetDefFactory:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosPropertyService::PropertySetDefFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosPropertyService::PropertySetDefFactory *
POA_CosPropertyService::PropertySetDefFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosPropertyService::PropertySetDefFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosPropertyService_PropertySet_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosPropertyService_PropertySet_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosPropertyService_PropertySet_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  5, 30,  0, 30, 30,
      0, 10, 30,  0, 30, 10, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0,  5, 30, 30, 30,
     30,  0, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosPropertyService_PropertySet_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 16,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 24,
      MIN_HASH_VALUE = 10,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 20,
      DUPLICATES = 3,
      WORDLIST_SIZE = 26
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"",0,0},
      {"_is_a", &POA_CosPropertyService::PropertySet::_is_a_skel, 0},
      {"get_properties", &POA_CosPropertyService::PropertySet::get_properties_skel, 0},
      {"define_property", &POA_CosPropertyService::PropertySet::define_property_skel, 0},
      {"delete_property", &POA_CosPropertyService::PropertySet::delete_property_skel, 0},
      {"define_properties", &POA_CosPropertyService::PropertySet::define_properties_skel, 0},
      {"delete_properties", &POA_CosPropertyService::PropertySet::delete_properties_skel, 0},
      {"get_all_properties", &POA_CosPropertyService::PropertySet::get_all_properties_skel, 0},
      {"_repository_id", &POA_CosPropertyService::PropertySet::_repository_id_skel, 0},
      {"_component", &POA_CosPropertyService::PropertySet::_component_skel, 0},
      {"delete_all_properties", &POA_CosPropertyService::PropertySet::delete_all_properties_skel, 0},
      {"get_all_property_names", &POA_CosPropertyService::PropertySet::get_all_property_names_skel, 0},
      {"_non_existent", &POA_CosPropertyService::PropertySet::_non_existent_skel, 0},
      {"get_number_of_properties", &POA_CosPropertyService::PropertySet::get_number_of_properties_skel, 0},
      {"_interface", &POA_CosPropertyService::PropertySet::_interface_skel, 0},
      {"get_property_value", &POA_CosPropertyService::PropertySet::get_property_value_skel, 0},
      {"is_property_defined", &POA_CosPropertyService::PropertySet::is_property_defined_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -12,  -2,  10,  -1, -14,  -2, 
       11, -36,  -1, -34,  16,  17,  18,  19,  20,  21,  22,  23,  -1,  -1, 
       24,  25, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosPropertyService_PropertySet_Perfect_Hash_OpTable tao_CosPropertyService_PropertySet_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_Initializer (size_t)
{
  CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer = 
    CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosPropertyService__TAO_PropertySet_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosPropertyService::PropertySet::PropertySet (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosPropertyService_PropertySet_optable;
}

POA_CosPropertyService::PropertySet::PropertySet (const PropertySet& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosPropertyService::PropertySet::~PropertySet (void)
{
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class define_property_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline define_property_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->define_property (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::define_property_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_InvalidPropertyName,
      CosPropertyService::_tc_ConflictingProperty,
      CosPropertyService::_tc_UnsupportedTypeCode,
      CosPropertyService::_tc_UnsupportedProperty,
      CosPropertyService::_tc_ReadOnlyProperty
    };
  static ::CORBA::ULong const nexceptions = 5;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_property_value;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name,
      &_tao_property_value
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  define_property_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class define_properties_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline define_properties_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->define_properties (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::define_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_MultipleExceptions
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::Properties>::in_arg_val _tao_nproperties;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_nproperties
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  define_properties_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_number_of_properties_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline get_number_of_properties_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_number_of_properties ();
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::get_number_of_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULong>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  get_number_of_properties_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_all_property_names_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_property_names_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertyNames> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyNamesIterator>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertyNamesIterator> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->get_all_property_names (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::get_all_property_names_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::out_arg_val _tao_property_names;
  TAO::SArg_Traits< ::CosPropertyService::PropertyNamesIterator>::out_arg_val _tao_rest;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_how_many,
      &_tao_property_names,
      &_tao_rest
    };
  
  static size_t const nargs = 4;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  get_all_property_names_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_property_value_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline get_property_value_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_property_value (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::get_property_value_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_PropertyNotFound,
      CosPropertyService::_tc_InvalidPropertyName
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  get_property_value_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_properties_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline get_properties_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyNames> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::Properties>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->get_properties (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::get_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::in_arg_val _tao_property_names;
  TAO::SArg_Traits< ::CosPropertyService::Properties>::out_arg_val _tao_nproperties;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_names,
      &_tao_nproperties
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  get_properties_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_all_properties_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_properties_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::Properties>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertiesIterator>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertiesIterator> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->get_all_properties (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::get_all_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::CosPropertyService::Properties>::out_arg_val _tao_nproperties;
  TAO::SArg_Traits< ::CosPropertyService::PropertiesIterator>::out_arg_val _tao_rest;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_how_many,
      &_tao_nproperties,
      &_tao_rest
    };
  
  static size_t const nargs = 4;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  get_all_properties_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_property_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline delete_property_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->delete_property (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::delete_property_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_PropertyNotFound,
      CosPropertyService::_tc_InvalidPropertyName,
      CosPropertyService::_tc_FixedProperty
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  delete_property_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_properties_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline delete_properties_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyNames> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->delete_properties (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::delete_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_MultipleExceptions
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::in_arg_val _tao_property_names;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_names
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  delete_properties_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_all_properties_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline delete_all_properties_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->delete_all_properties ();
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::delete_all_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  delete_all_properties_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class is_property_defined_PropertySet
    : public TAO::Upcall_Command
  {
  public:
    inline is_property_defined_PropertySet (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->is_property_defined (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySet::is_property_defined_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_InvalidPropertyName
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);

  is_property_defined_PropertySet command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertySet_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertySet_Upcall_Command (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySet::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);
  
  _is_a_PropertySet_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertySet_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertySet_Upcall_Command (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySet::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);
  
  _non_existent_PropertySet_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertySet_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertySet_Upcall_Command (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySet::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);
  
  _repository_id_PropertySet_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosPropertyService::PropertySet::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertySet_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertySet_Upcall_Command (
      POA_CosPropertyService::PropertySet * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosPropertyService::PropertySet * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySet::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySet * const impl =
    static_cast<POA_CosPropertyService::PropertySet *> (servant);
  
  _get_component_PropertySet_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosPropertyService::PropertySet::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySet:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosPropertyService::PropertySet::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySet:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosPropertyService::PropertySet::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosPropertyService::PropertySet *
POA_CosPropertyService::PropertySet::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosPropertyService::PropertySet STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosPropertyService_PropertySetDef_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosPropertyService_PropertySetDef_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosPropertyService_PropertySetDef_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41,  0, 41,  0, 41, 41,
      0, 15, 41,  5, 41,  5, 41, 41, 41, 41,
     41, 41, 41, 41, 41,  0,  0, 41, 41, 41,
     41,  0, 41, 41, 41, 41, 41, 41,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosPropertyService_PropertySetDef_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 24,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 28,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 40,
      HASH_VALUE_RANGE = 36,
      DUPLICATES = 5,
      WORDLIST_SIZE = 29
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosPropertyService::PropertySetDef::_is_a_skel, 0},
      {"_component", &POA_CosPropertyService::PropertySetDef::_component_skel, 0},
      {"_non_existent", &POA_CosPropertyService::PropertySetDef::_non_existent_skel, 0},
      {"_repository_id", &POA_CosPropertyService::PropertySetDef::_repository_id_skel, 0},
      {"define_property", &POA_CosPropertyService::PropertySetDef::define_property_skel, 0},
      {"delete_property", &POA_CosPropertyService::PropertySetDef::delete_property_skel, 0},
      {"define_properties", &POA_CosPropertyService::PropertySetDef::define_properties_skel, 0},
      {"delete_properties", &POA_CosPropertyService::PropertySetDef::delete_properties_skel, 0},
      {"set_property_modes", &POA_CosPropertyService::PropertySetDef::set_property_modes_skel, 0},
      {"get_properties", &POA_CosPropertyService::PropertySetDef::get_properties_skel, 0},
      {"delete_all_properties", &POA_CosPropertyService::PropertySetDef::delete_all_properties_skel, 0},
      {"get_all_properties", &POA_CosPropertyService::PropertySetDef::get_all_properties_skel, 0},
      {"get_property_modes", &POA_CosPropertyService::PropertySetDef::get_property_modes_skel, 0},
      {"is_property_defined", &POA_CosPropertyService::PropertySetDef::is_property_defined_skel, 0},
      {"_interface", &POA_CosPropertyService::PropertySetDef::_interface_skel, 0},
      {"get_all_property_names", &POA_CosPropertyService::PropertySetDef::get_all_property_names_skel, 0},
      {"get_allowed_properties", &POA_CosPropertyService::PropertySetDef::get_allowed_properties_skel, 0},
      {"define_properties_with_modes", &POA_CosPropertyService::PropertySetDef::define_properties_with_modes_skel, 0},
      {"get_number_of_properties", &POA_CosPropertyService::PropertySetDef::get_number_of_properties_skel, 0},
      {"get_allowed_property_types", &POA_CosPropertyService::PropertySetDef::get_allowed_property_types_skel, 0},
      {"set_property_mode", &POA_CosPropertyService::PropertySetDef::set_property_mode_skel, 0},
      {"get_property_mode", &POA_CosPropertyService::PropertySetDef::get_property_mode_skel, 0},
      {"get_property_value", &POA_CosPropertyService::PropertySetDef::get_property_value_skel, 0},
      {"define_property_with_mode", &POA_CosPropertyService::PropertySetDef::define_property_with_mode_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -9,  -2,   5, -11,  -2, -16,  -2,   6, -20,  -2,   7, 
        8, -52,  -1, -51,  13,  14,  -1,  15,  -1, -55,  18,  19,  -1, -56, 
       22,  23,  -1,  24,  25,  -1,  -1,  -1,  -1,  26,  27,  -1,  28, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosPropertyService_PropertySetDef_Perfect_Hash_OpTable tao_CosPropertyService_PropertySetDef_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_Initializer (size_t)
{
  CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer = 
    CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosPropertyService::PropertySetDef::PropertySetDef (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosPropertyService_PropertySetDef_optable;
}

POA_CosPropertyService::PropertySetDef::PropertySetDef (const PropertySetDef& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosPropertyService::PropertySet (rhs)
{
}

POA_CosPropertyService::PropertySetDef::~PropertySetDef (void)
{
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_allowed_property_types_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline get_allowed_property_types_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertyTypes>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertyTypes> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_allowed_property_types (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::get_allowed_property_types_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyTypes>::out_arg_val _tao_property_types;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_types
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  get_allowed_property_types_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_allowed_properties_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline get_allowed_properties_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertyDefs> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_allowed_properties (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::get_allowed_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::out_arg_val _tao_property_defs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_defs
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  get_allowed_properties_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class define_property_with_mode_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline define_property_with_mode_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyModeType>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyModeType> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->define_property_with_mode (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::define_property_with_mode_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_InvalidPropertyName,
      CosPropertyService::_tc_ConflictingProperty,
      CosPropertyService::_tc_UnsupportedTypeCode,
      CosPropertyService::_tc_UnsupportedProperty,
      CosPropertyService::_tc_UnsupportedMode,
      CosPropertyService::_tc_ReadOnlyProperty
    };
  static ::CORBA::ULong const nexceptions = 6;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_property_value;
  TAO::SArg_Traits< ::CosPropertyService::PropertyModeType>::in_arg_val _tao_property_mode;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name,
      &_tao_property_value,
      &_tao_property_mode
    };
  
  static size_t const nargs = 4;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  define_property_with_mode_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class define_properties_with_modes_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline define_properties_with_modes_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyDefs> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->define_properties_with_modes (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::define_properties_with_modes_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_MultipleExceptions
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyDefs>::in_arg_val _tao_property_defs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_defs
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  define_properties_with_modes_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_property_mode_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline get_property_mode_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertyModeType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosPropertyService::PropertyModeType> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_property_mode (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::get_property_mode_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_PropertyNotFound,
      CosPropertyService::_tc_InvalidPropertyName
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosPropertyService::PropertyModeType>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  get_property_mode_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_property_modes_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline get_property_modes_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyNames> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyModes>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertyModes> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->get_property_modes (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::get_property_modes_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::in_arg_val _tao_property_names;
  TAO::SArg_Traits< ::CosPropertyService::PropertyModes>::out_arg_val _tao_property_modes;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_names,
      &_tao_property_modes
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  get_property_modes_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_property_mode_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline set_property_mode_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyModeType>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyModeType> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->set_property_mode (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::set_property_mode_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_InvalidPropertyName,
      CosPropertyService::_tc_PropertyNotFound,
      CosPropertyService::_tc_UnsupportedMode
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_property_name;
  TAO::SArg_Traits< ::CosPropertyService::PropertyModeType>::in_arg_val _tao_property_mode;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name,
      &_tao_property_mode
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  set_property_mode_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_property_modes_PropertySetDef
    : public TAO::Upcall_Command
  {
  public:
    inline set_property_modes_PropertySetDef (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosPropertyService::PropertyModes>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosPropertyService::PropertyModes> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_property_modes (
        arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertySetDef::set_property_modes_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosPropertyService::_tc_MultipleExceptions
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::PropertyModes>::in_arg_val _tao_property_modes;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_modes
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);

  set_property_modes_PropertySetDef command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertySetDef_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertySetDef_Upcall_Command (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDef::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);
  
  _is_a_PropertySetDef_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertySetDef_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertySetDef_Upcall_Command (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDef::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);
  
  _non_existent_PropertySetDef_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertySetDef_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertySetDef_Upcall_Command (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDef::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);
  
  _repository_id_PropertySetDef_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosPropertyService::PropertySetDef::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertySetDef_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertySetDef_Upcall_Command (
      POA_CosPropertyService::PropertySetDef * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosPropertyService::PropertySetDef * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertySetDef::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertySetDef * const impl =
    static_cast<POA_CosPropertyService::PropertySetDef *> (servant);
  
  _get_component_PropertySetDef_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosPropertyService::PropertySetDef::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySet:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertySetDef:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosPropertyService::PropertySetDef::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertySetDef:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosPropertyService::PropertySetDef::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosPropertyService::PropertySetDef *
POA_CosPropertyService::PropertySetDef::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosPropertyService::PropertySetDef STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosPropertyService_PropertyNamesIterator_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosPropertyService_PropertyNamesIterator_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosPropertyService_PropertyNamesIterator_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21,  0, 21, 10, 21, 21,
      0, 10, 21, 21, 21, 21, 21, 21, 21, 21,
      0, 21, 21, 21,  0, 21,  0, 21, 21, 21,
     21,  0, 21, 21, 21, 21, 21, 21,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosPropertyService_PropertyNamesIterator_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 20,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 0,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"reset", &POA_CosPropertyService::PropertyNamesIterator::reset_skel, 0},
      {"next_n", &POA_CosPropertyService::PropertyNamesIterator::next_n_skel, 0},
      {"destroy", &POA_CosPropertyService::PropertyNamesIterator::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_component", &POA_CosPropertyService::PropertyNamesIterator::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosPropertyService::PropertyNamesIterator::_non_existent_skel, 0},
      {"_repository_id", &POA_CosPropertyService::PropertyNamesIterator::_repository_id_skel, 0},
      {"_is_a", &POA_CosPropertyService::PropertyNamesIterator::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"next_one", &POA_CosPropertyService::PropertyNamesIterator::next_one_skel, 0},
      {"",0,0},
      {"_interface", &POA_CosPropertyService::PropertyNamesIterator::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosPropertyService_PropertyNamesIterator_Perfect_Hash_OpTable tao_CosPropertyService_PropertyNamesIterator_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_Initializer (size_t)
{
  CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer = 
    CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosPropertyService::PropertyNamesIterator::PropertyNamesIterator (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosPropertyService_PropertyNamesIterator_optable;
}

POA_CosPropertyService::PropertyNamesIterator::PropertyNamesIterator (const PropertyNamesIterator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosPropertyService::PropertyNamesIterator::~PropertyNamesIterator (void)
{
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class reset_PropertyNamesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline reset_PropertyNamesIterator (
      POA_CosPropertyService::PropertyNamesIterator * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->reset ();
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertyNamesIterator::reset_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);

  reset_PropertyNamesIterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class next_one_PropertyNamesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_one_PropertyNamesIterator (
      POA_CosPropertyService::PropertyNamesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->next_one (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertyNamesIterator::next_one_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::out_arg_val _tao_property_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_property_name
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);

  next_one_PropertyNamesIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class next_n_PropertyNamesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_n_PropertyNamesIterator (
      POA_CosPropertyService::PropertyNamesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::PropertyNames> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->next_n (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertyNamesIterator::next_n_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::CosPropertyService::PropertyNames>::out_arg_val _tao_property_names;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_how_many,
      &_tao_property_names
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);

  next_n_PropertyNamesIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_PropertyNamesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_PropertyNamesIterator (
      POA_CosPropertyService::PropertyNamesIterator * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertyNamesIterator::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);

  destroy_PropertyNamesIterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertyNamesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertyNamesIterator_Upcall_Command (
      POA_CosPropertyService::PropertyNamesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertyNamesIterator::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);
  
  _is_a_PropertyNamesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertyNamesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertyNamesIterator_Upcall_Command (
      POA_CosPropertyService::PropertyNamesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertyNamesIterator::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);
  
  _non_existent_PropertyNamesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertyNamesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertyNamesIterator_Upcall_Command (
      POA_CosPropertyService::PropertyNamesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertyNamesIterator::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);
  
  _repository_id_PropertyNamesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosPropertyService::PropertyNamesIterator::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertyNamesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertyNamesIterator_Upcall_Command (
      POA_CosPropertyService::PropertyNamesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosPropertyService::PropertyNamesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertyNamesIterator::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertyNamesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertyNamesIterator *> (servant);
  
  _get_component_PropertyNamesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosPropertyService::PropertyNamesIterator::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosPropertyService::PropertyNamesIterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertyNamesIterator:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosPropertyService::PropertyNamesIterator::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosPropertyService::PropertyNamesIterator *
POA_CosPropertyService::PropertyNamesIterator::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosPropertyService::PropertyNamesIterator STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosPropertyService_PropertiesIterator_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosPropertyService_PropertiesIterator_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosPropertyService_PropertiesIterator_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21,  0, 21, 10, 21, 21,
      0, 10, 21, 21, 21, 21, 21, 21, 21, 21,
      0, 21, 21, 21,  0, 21,  0, 21, 21, 21,
     21,  0, 21, 21, 21, 21, 21, 21,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosPropertyService_PropertiesIterator_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 20,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 0,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"reset", &POA_CosPropertyService::PropertiesIterator::reset_skel, 0},
      {"next_n", &POA_CosPropertyService::PropertiesIterator::next_n_skel, 0},
      {"destroy", &POA_CosPropertyService::PropertiesIterator::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_component", &POA_CosPropertyService::PropertiesIterator::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosPropertyService::PropertiesIterator::_non_existent_skel, 0},
      {"_repository_id", &POA_CosPropertyService::PropertiesIterator::_repository_id_skel, 0},
      {"_is_a", &POA_CosPropertyService::PropertiesIterator::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"next_one", &POA_CosPropertyService::PropertiesIterator::next_one_skel, 0},
      {"",0,0},
      {"_interface", &POA_CosPropertyService::PropertiesIterator::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosPropertyService_PropertiesIterator_Perfect_Hash_OpTable tao_CosPropertyService_PropertiesIterator_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_Initializer (size_t)
{
  CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer = 
    CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosPropertyService::PropertiesIterator::PropertiesIterator (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosPropertyService_PropertiesIterator_optable;
}

POA_CosPropertyService::PropertiesIterator::PropertiesIterator (const PropertiesIterator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosPropertyService::PropertiesIterator::~PropertiesIterator (void)
{
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class reset_PropertiesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline reset_PropertiesIterator (
      POA_CosPropertyService::PropertiesIterator * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->reset ();
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertiesIterator::reset_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);

  reset_PropertiesIterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class next_one_PropertiesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_one_PropertiesIterator (
      POA_CosPropertyService::PropertiesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosPropertyService::Property>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::Property> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->next_one (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertiesIterator::next_one_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosPropertyService::Property>::out_arg_val _tao_aproperty;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_aproperty
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);

  next_one_PropertiesIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class next_n_PropertiesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_n_PropertiesIterator (
      POA_CosPropertyService::PropertiesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosPropertyService::Properties>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosPropertyService::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->next_n (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertiesIterator::next_n_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::CosPropertyService::Properties>::out_arg_val _tao_nproperties;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_how_many,
      &_tao_nproperties
    };
  
  static size_t const nargs = 3;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);

  next_n_PropertiesIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_PropertiesIterator
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_PropertiesIterator (
      POA_CosPropertyService::PropertiesIterator * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosPropertyService::PropertiesIterator::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);

  destroy_PropertiesIterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertiesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertiesIterator_Upcall_Command (
      POA_CosPropertyService::PropertiesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertiesIterator::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);
  
  _is_a_PropertiesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertiesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertiesIterator_Upcall_Command (
      POA_CosPropertyService::PropertiesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertiesIterator::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);
  
  _non_existent_PropertiesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertiesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertiesIterator_Upcall_Command (
      POA_CosPropertyService::PropertiesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertiesIterator::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);
  
  _repository_id_PropertiesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosPropertyService::PropertiesIterator::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosPropertyService
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertiesIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertiesIterator_Upcall_Command (
      POA_CosPropertyService::PropertiesIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosPropertyService::PropertiesIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosPropertyService::PropertiesIterator::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosPropertyService::PropertiesIterator * const impl =
    static_cast<POA_CosPropertyService::PropertiesIterator *> (servant);
  
  _get_component_PropertiesIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosPropertyService::PropertiesIterator::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosPropertyService::PropertiesIterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosPropertyService/PropertiesIterator:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosPropertyService::PropertiesIterator::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosPropertyService::PropertiesIterator *
POA_CosPropertyService::PropertiesIterator::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosPropertyService::PropertiesIterator STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

