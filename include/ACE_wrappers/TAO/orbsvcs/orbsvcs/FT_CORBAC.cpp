// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FT_CORBAC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FT_CORBAC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_ReplicationStyleValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/ReplicationStyleValue:1.0",
    "ReplicationStyleValue",
    &CORBA::_tc_long);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ReplicationStyleValue =
    &_tao_tc_FT_ReplicationStyleValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_ConsistencyStyleValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/ConsistencyStyleValue:1.0",
    "ConsistencyStyleValue",
    &CORBA::_tc_long);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ConsistencyStyleValue =
    &_tao_tc_FT_ConsistencyStyleValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_FaultMonitoringStyleValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/FaultMonitoringStyleValue:1.0",
    "FaultMonitoringStyleValue",
    &CORBA::_tc_long);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FaultMonitoringStyleValue =
    &_tao_tc_FT_FaultMonitoringStyleValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_FaultMonitoringGranularityValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/FaultMonitoringGranularityValue:1.0",
    "FaultMonitoringGranularityValue",
    &CORBA::_tc_long);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FaultMonitoringGranularityValue =
    &_tao_tc_FT_FaultMonitoringGranularityValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FT_FaultMonitoringIntervalAndTimeoutValue[] =
      {
        { "monitoring_interval", &TimeBase::_tc_TimeT },
        { "timeout", &TimeBase::_tc_TimeT }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_FaultMonitoringIntervalAndTimeoutValue (
  ::CORBA::tk_struct,
  "IDL:omg.org/FT/FaultMonitoringIntervalAndTimeoutValue:1.0",
  "FaultMonitoringIntervalAndTimeoutValue",
  _tao_fields_FT_FaultMonitoringIntervalAndTimeoutValue,
  2);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FaultMonitoringIntervalAndTimeoutValue =
    &_tao_tc_FT_FaultMonitoringIntervalAndTimeoutValue;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FaultMonitoringIntervalAndTimeoutValue *_tao_tmp_pointer =
    static_cast<FaultMonitoringIntervalAndTimeoutValue *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::BadReplicationStyle::BadReplicationStyle (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/BadReplicationStyle:1.0",
        "BadReplicationStyle"
      )
{
}

FT::BadReplicationStyle::~BadReplicationStyle (void)
{
}

FT::BadReplicationStyle::BadReplicationStyle (const ::FT::BadReplicationStyle &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::BadReplicationStyle&
FT::BadReplicationStyle::operator= (const ::FT::BadReplicationStyle &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::BadReplicationStyle::_tao_any_destructor (void *_tao_void_pointer)
{
  BadReplicationStyle *_tao_tmp_pointer =
    static_cast<BadReplicationStyle *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::BadReplicationStyle *
FT::BadReplicationStyle::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<BadReplicationStyle *> (_tao_excp);
}

const FT::BadReplicationStyle *
FT::BadReplicationStyle::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const BadReplicationStyle *> (_tao_excp);
}

::CORBA::Exception *FT::BadReplicationStyle::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::BadReplicationStyle, 0);
  return retval;
}

::CORBA::Exception *
FT::BadReplicationStyle::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::BadReplicationStyle (*this),
      0
    );
  return result;
}

void FT::BadReplicationStyle::_raise (void) const
{
  throw *this;
}

void FT::BadReplicationStyle::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::BadReplicationStyle::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::BadReplicationStyle::_tao_type (void) const
{
  return ::FT::_tc_BadReplicationStyle;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_BadReplicationStyle = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_BadReplicationStyle (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/BadReplicationStyle:1.0",
  "BadReplicationStyle",
  _tao_fields_FT_BadReplicationStyle,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_BadReplicationStyle =
    &_tao_tc_FT_BadReplicationStyle;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::PrimaryNotSet::PrimaryNotSet (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/PrimaryNotSet:1.0",
        "PrimaryNotSet"
      )
{
}

FT::PrimaryNotSet::~PrimaryNotSet (void)
{
}

FT::PrimaryNotSet::PrimaryNotSet (const ::FT::PrimaryNotSet &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::PrimaryNotSet&
FT::PrimaryNotSet::operator= (const ::FT::PrimaryNotSet &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::PrimaryNotSet::_tao_any_destructor (void *_tao_void_pointer)
{
  PrimaryNotSet *_tao_tmp_pointer =
    static_cast<PrimaryNotSet *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::PrimaryNotSet *
FT::PrimaryNotSet::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<PrimaryNotSet *> (_tao_excp);
}

const FT::PrimaryNotSet *
FT::PrimaryNotSet::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const PrimaryNotSet *> (_tao_excp);
}

::CORBA::Exception *FT::PrimaryNotSet::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::PrimaryNotSet, 0);
  return retval;
}

::CORBA::Exception *
FT::PrimaryNotSet::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::PrimaryNotSet (*this),
      0
    );
  return result;
}

void FT::PrimaryNotSet::_raise (void) const
{
  throw *this;
}

void FT::PrimaryNotSet::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::PrimaryNotSet::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::PrimaryNotSet::_tao_type (void) const
{
  return ::FT::_tc_PrimaryNotSet;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_PrimaryNotSet = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_PrimaryNotSet (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/PrimaryNotSet:1.0",
  "PrimaryNotSet",
  _tao_fields_FT_PrimaryNotSet,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_PrimaryNotSet =
    &_tao_tc_FT_PrimaryNotSet;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_TypeId (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/TypeId:1.0",
    "TypeId",
    &PortableGroup::_tc_TypeId);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_TypeId =
    &_tao_tc_FT_TypeId;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_ObjectGroup (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/ObjectGroup:1.0",
    "ObjectGroup",
    &PortableGroup::_tc_ObjectGroup);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ObjectGroup =
    &_tao_tc_FT_ObjectGroup;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Name (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Name:1.0",
    "Name",
    &PortableGroup::_tc_Name);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Name =
    &_tao_tc_FT_Name;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Value (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Value:1.0",
    "Value",
    &PortableGroup::_tc_Value);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Value =
    &_tao_tc_FT_Value;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Property (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Property:1.0",
    "Property",
    &PortableGroup::_tc_Property);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Property =
    &_tao_tc_FT_Property;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Properties (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Properties:1.0",
    "Properties",
    &PortableGroup::_tc_Properties);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Properties =
    &_tao_tc_FT_Properties;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Location (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Location:1.0",
    "Location",
    &PortableGroup::_tc_Location);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Location =
    &_tao_tc_FT_Location;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Locations (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Locations:1.0",
    "Locations",
    &PortableGroup::_tc_Locations);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Locations =
    &_tao_tc_FT_Locations;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Criteria (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/Criteria:1.0",
    "Criteria",
    &PortableGroup::_tc_Criteria);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Criteria =
    &_tao_tc_FT_Criteria;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_FactoryInfo (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/FactoryInfo:1.0",
    "FactoryInfo",
    &PortableGroup::_tc_FactoryInfo);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FactoryInfo =
    &_tao_tc_FT_FactoryInfo;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_FactoryInfos (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/FactoryInfos:1.0",
    "FactoryInfos",
    &PortableGroup::_tc_FactoryInfos);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FactoryInfos =
    &_tao_tc_FT_FactoryInfos;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_MembershipStyleValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/MembershipStyleValue:1.0",
    "MembershipStyleValue",
    &PortableGroup::_tc_MembershipStyleValue);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_MembershipStyleValue =
    &_tao_tc_FT_MembershipStyleValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_FactoriesValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/FactoriesValue:1.0",
    "FactoriesValue",
    &PortableGroup::_tc_FactoriesValue);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FactoriesValue =
    &_tao_tc_FT_FactoriesValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_InitialNumberMembersValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/InitialNumberMembersValue:1.0",
    "InitialNumberMembersValue",
    &PortableGroup::_tc_InitialNumberMembersValue);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_InitialNumberMembersValue =
    &_tao_tc_FT_InitialNumberMembersValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_MinimumNumberMembersValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/MinimumNumberMembersValue:1.0",
    "MinimumNumberMembersValue",
    &PortableGroup::_tc_MinimumNumberMembersValue);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_MinimumNumberMembersValue =
    &_tao_tc_FT_MinimumNumberMembersValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_PropertyManager (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/PropertyManager:1.0",
    "PropertyManager",
    &PortableGroup::_tc_PropertyManager);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_PropertyManager =
    &_tao_tc_FT_PropertyManager;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_ObjectGroupManager (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/ObjectGroupManager:1.0",
    "ObjectGroupManager",
    &PortableGroup::_tc_ObjectGroupManager);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ObjectGroupManager =
    &_tao_tc_FT_ObjectGroupManager;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_GenericFactory (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/GenericFactory:1.0",
    "GenericFactory",
    &PortableGroup::_tc_GenericFactory);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_GenericFactory =
    &_tao_tc_FT_GenericFactory;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::FTObjectGroupManager.

FT::FTObjectGroupManager_ptr
TAO::Objref_Traits<FT::FTObjectGroupManager>::duplicate (
    FT::FTObjectGroupManager_ptr p)
{
  return FT::FTObjectGroupManager::_duplicate (p);
}

void
TAO::Objref_Traits<FT::FTObjectGroupManager>::release (
    FT::FTObjectGroupManager_ptr p)
{
  ::CORBA::release (p);
}

FT::FTObjectGroupManager_ptr
TAO::Objref_Traits<FT::FTObjectGroupManager>::nil (void)
{
  return FT::FTObjectGroupManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::FTObjectGroupManager>::marshal (
    const FT::FTObjectGroupManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FT__TAO_FTObjectGroupManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::PortableGroup::ObjectGroup_ptr
FT::FTObjectGroupManager::set_primary_member (
  ::PortableGroup::ObjectGroup_ptr object_group,
  const ::PortableGroup::Location & the_location)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_FTObjectGroupManager_Proxy_Broker_ == 0)
    {
      FT_FTObjectGroupManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group (object_group);
  TAO::Arg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location (the_location);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_object_group,
      &_tao_the_location
    };

  static TAO::Exception_Data
  _tao_FT_FTObjectGroupManager_set_primary_member_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/MemberNotFound:1.0",
        PortableGroup::MemberNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_MemberNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/FT/PrimaryNotSet:1.0",
        FT::PrimaryNotSet::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_PrimaryNotSet
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/FT/BadReplicationStyle:1.0",
        FT::BadReplicationStyle::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_BadReplicationStyle
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "set_primary_member",
      18,
      this->the_TAO_FTObjectGroupManager_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FT_FTObjectGroupManager_set_primary_member_exceptiondata,
      4
    );

  return _tao_retval.retn ();
}

FT::FTObjectGroupManager::FTObjectGroupManager (void)
 : the_TAO_FTObjectGroupManager_Proxy_Broker_ (0)
{
  this->FT_FTObjectGroupManager_setup_collocation ();
}

void
FT::FTObjectGroupManager::FT_FTObjectGroupManager_setup_collocation ()
{
  if (::FT__TAO_FTObjectGroupManager_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_FTObjectGroupManager_Proxy_Broker_ =
        ::FT__TAO_FTObjectGroupManager_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->PortableGroup_ObjectGroupManager_setup_collocation ();
}

FT::FTObjectGroupManager::~FTObjectGroupManager (void)
{}

void 
FT::FTObjectGroupManager::_tao_any_destructor (void *_tao_void_pointer)
{
  FTObjectGroupManager *_tao_tmp_pointer =
    static_cast<FTObjectGroupManager *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::FTObjectGroupManager_ptr
FT::FTObjectGroupManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<FTObjectGroupManager>::narrow (
        _tao_objref,
        "IDL:omg.org/FT/FTObjectGroupManager:1.0",
        FT__TAO_FTObjectGroupManager_Proxy_Broker_Factory_function_pointer
      );
}

FT::FTObjectGroupManager_ptr
FT::FTObjectGroupManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<FTObjectGroupManager>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/FT/FTObjectGroupManager:1.0",
        FT__TAO_FTObjectGroupManager_Proxy_Broker_Factory_function_pointer
      );
}

FT::FTObjectGroupManager_ptr
FT::FTObjectGroupManager::_nil (void)
{
  return 0;
}

FT::FTObjectGroupManager_ptr
FT::FTObjectGroupManager::_duplicate (FTObjectGroupManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::FTObjectGroupManager::_tao_release (FTObjectGroupManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::FTObjectGroupManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/FTObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT::FTObjectGroupManager::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/FTObjectGroupManager:1.0";
}

::CORBA::Boolean
FT::FTObjectGroupManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_FTObjectGroupManager (
    ::CORBA::tk_objref,
    "IDL:omg.org/FT/FTObjectGroupManager:1.0",
    "FTObjectGroupManager");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FTObjectGroupManager =
    &_tao_tc_FT_FTObjectGroupManager;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::FaultMonitoringIntervalAndTimeoutValue &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::FaultMonitoringIntervalAndTimeoutValue *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::FaultMonitoringIntervalAndTimeoutValue>::insert_copy (
          _tao_any,
          ::FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor,
          ::FT::_tc_FaultMonitoringIntervalAndTimeoutValue,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FT::FaultMonitoringIntervalAndTimeoutValue *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::FaultMonitoringIntervalAndTimeoutValue>::insert (
        _tao_any,
        ::FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor,
        ::FT::_tc_FaultMonitoringIntervalAndTimeoutValue,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::FaultMonitoringIntervalAndTimeoutValue *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::FaultMonitoringIntervalAndTimeoutValue *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::FaultMonitoringIntervalAndTimeoutValue *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::FaultMonitoringIntervalAndTimeoutValue>::extract (
          _tao_any,
          ::FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor,
          ::FT::_tc_FaultMonitoringIntervalAndTimeoutValue,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::FaultMonitoringIntervalAndTimeoutValue &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::FaultMonitoringIntervalAndTimeoutValue *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::FaultMonitoringIntervalAndTimeoutValue>::insert_copy (
        _tao_any,
        FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor,
        FT::_tc_FaultMonitoringIntervalAndTimeoutValue,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::FaultMonitoringIntervalAndTimeoutValue *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::FaultMonitoringIntervalAndTimeoutValue>::insert (
      _tao_any,
      FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor,
      FT::_tc_FaultMonitoringIntervalAndTimeoutValue,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::FaultMonitoringIntervalAndTimeoutValue *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::FaultMonitoringIntervalAndTimeoutValue *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::FaultMonitoringIntervalAndTimeoutValue *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::FaultMonitoringIntervalAndTimeoutValue>::extract (
        _tao_any,
        FT::FaultMonitoringIntervalAndTimeoutValue::_tao_any_destructor,
        FT::_tc_FaultMonitoringIntervalAndTimeoutValue,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::BadReplicationStyle>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::BadReplicationStyle &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::BadReplicationStyle>::insert_copy (
        _tao_any,
        ::FT::BadReplicationStyle::_tao_any_destructor,
        ::FT::_tc_BadReplicationStyle,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::BadReplicationStyle *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::BadReplicationStyle>::insert (
        _tao_any,
        ::FT::BadReplicationStyle::_tao_any_destructor,
        ::FT::_tc_BadReplicationStyle,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::BadReplicationStyle *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::BadReplicationStyle *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::BadReplicationStyle *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::BadReplicationStyle>::extract (
          _tao_any,
          ::FT::BadReplicationStyle::_tao_any_destructor,
          ::FT::_tc_BadReplicationStyle,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::BadReplicationStyle &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::BadReplicationStyle>::insert_copy (
      _tao_any,
      FT::BadReplicationStyle::_tao_any_destructor,
      FT::_tc_BadReplicationStyle,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::BadReplicationStyle *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::BadReplicationStyle>::insert (
      _tao_any,
      FT::BadReplicationStyle::_tao_any_destructor,
      FT::_tc_BadReplicationStyle,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::BadReplicationStyle *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::BadReplicationStyle *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::BadReplicationStyle *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::BadReplicationStyle>::extract (
        _tao_any,
        FT::BadReplicationStyle::_tao_any_destructor,
        FT::_tc_BadReplicationStyle,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::PrimaryNotSet>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::PrimaryNotSet &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::PrimaryNotSet>::insert_copy (
        _tao_any,
        ::FT::PrimaryNotSet::_tao_any_destructor,
        ::FT::_tc_PrimaryNotSet,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::PrimaryNotSet *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::PrimaryNotSet>::insert (
        _tao_any,
        ::FT::PrimaryNotSet::_tao_any_destructor,
        ::FT::_tc_PrimaryNotSet,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::PrimaryNotSet *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::PrimaryNotSet *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::PrimaryNotSet *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::PrimaryNotSet>::extract (
          _tao_any,
          ::FT::PrimaryNotSet::_tao_any_destructor,
          ::FT::_tc_PrimaryNotSet,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::PrimaryNotSet &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::PrimaryNotSet>::insert_copy (
      _tao_any,
      FT::PrimaryNotSet::_tao_any_destructor,
      FT::_tc_PrimaryNotSet,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::PrimaryNotSet *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::PrimaryNotSet>::insert (
      _tao_any,
      FT::PrimaryNotSet::_tao_any_destructor,
      FT::_tc_PrimaryNotSet,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::PrimaryNotSet *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::PrimaryNotSet *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::PrimaryNotSet *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::PrimaryNotSet>::extract (
        _tao_any,
        FT::PrimaryNotSet::_tao_any_destructor,
        FT::_tc_PrimaryNotSet,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::FTObjectGroupManager>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      FTObjectGroupManager_ptr _tao_elem)
  {
    FTObjectGroupManager_ptr _tao_objptr =
      FTObjectGroupManager::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      FTObjectGroupManager_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<FTObjectGroupManager>::insert (
        _tao_any,
        FTObjectGroupManager::_tao_any_destructor,
        _tc_FTObjectGroupManager,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      FTObjectGroupManager_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<FTObjectGroupManager>::extract (
          _tao_any,
          FTObjectGroupManager::_tao_any_destructor,
          _tc_FTObjectGroupManager,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::FTObjectGroupManager_ptr _tao_elem)
{
  FT::FTObjectGroupManager_ptr _tao_objptr =
    FT::FTObjectGroupManager::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::FTObjectGroupManager_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::FTObjectGroupManager>::insert (
      _tao_any,
      FT::FTObjectGroupManager::_tao_any_destructor,
      FT::_tc_FTObjectGroupManager,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::FTObjectGroupManager_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::FTObjectGroupManager>::extract (
        _tao_any,
        FT::FTObjectGroupManager::_tao_any_destructor,
        FT::_tc_FTObjectGroupManager,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::FaultMonitoringIntervalAndTimeoutValue &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.monitoring_interval) &&
    (strm << _tao_aggregate.timeout);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::FaultMonitoringIntervalAndTimeoutValue &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.monitoring_interval) &&
    (strm >> _tao_aggregate.timeout);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::BadReplicationStyle &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::BadReplicationStyle&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::PrimaryNotSet &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::PrimaryNotSet&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::FTObjectGroupManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::FTObjectGroupManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT::FTObjectGroupManager RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FT__TAO_FTObjectGroupManager_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


