// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FT_CORBA_ORBC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FT_CORBA_ORBC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_FTDomainId (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/FTDomainId:1.0",
    "FTDomainId",
    &PortableGroup::_tc_GroupDomainId);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FTDomainId =
    &_tao_tc_FT_FTDomainId;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_ObjectGroupId (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/ObjectGroupId:1.0",
    "ObjectGroupId",
    &PortableGroup::_tc_ObjectGroupId);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ObjectGroupId =
    &_tao_tc_FT_ObjectGroupId;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_ObjectGroupRefVersion (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/ObjectGroupRefVersion:1.0",
    "ObjectGroupRefVersion",
    &PortableGroup::_tc_ObjectGroupRefVersion);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ObjectGroupRefVersion =
    &_tao_tc_FT_ObjectGroupRefVersion;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_TagFTGroupTaggedComponent (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/TagFTGroupTaggedComponent:1.0",
    "TagFTGroupTaggedComponent",
    &PortableGroup::_tc_TagGroupTaggedComponent);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_TagFTGroupTaggedComponent =
    &_tao_tc_FT_TagFTGroupTaggedComponent;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FT_TagFTPrimaryTaggedComponent[] =
      {
        { "primary", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_TagFTPrimaryTaggedComponent (
  ::CORBA::tk_struct,
  "IDL:omg.org/FT/TagFTPrimaryTaggedComponent:1.0",
  "TagFTPrimaryTaggedComponent",
  _tao_fields_FT_TagFTPrimaryTaggedComponent,
  1);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_TagFTPrimaryTaggedComponent =
    &_tao_tc_FT_TagFTPrimaryTaggedComponent;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FT::TagFTPrimaryTaggedComponent::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TagFTPrimaryTaggedComponent *_tao_tmp_pointer =
    static_cast<TagFTPrimaryTaggedComponent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FT_FTGroupVersionServiceContext[] =
      {
        { "object_group_ref_version", &FT::_tc_ObjectGroupRefVersion }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_FTGroupVersionServiceContext (
  ::CORBA::tk_struct,
  "IDL:omg.org/FT/FTGroupVersionServiceContext:1.0",
  "FTGroupVersionServiceContext",
  _tao_fields_FT_FTGroupVersionServiceContext,
  1);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FTGroupVersionServiceContext =
    &_tao_tc_FT_FTGroupVersionServiceContext;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FT::FTGroupVersionServiceContext::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FTGroupVersionServiceContext *_tao_tmp_pointer =
    static_cast<FTGroupVersionServiceContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FT_FTRequestServiceContext[] =
      {
        { "client_id", &CORBA::_tc_string },
        { "retention_id", &CORBA::_tc_long },
        { "expiration_time", &TimeBase::_tc_TimeT }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_FTRequestServiceContext (
  ::CORBA::tk_struct,
  "IDL:omg.org/FT/FTRequestServiceContext:1.0",
  "FTRequestServiceContext",
  _tao_fields_FT_FTRequestServiceContext,
  3);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_FTRequestServiceContext =
    &_tao_tc_FT_FTRequestServiceContext;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FT::FTRequestServiceContext::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FTRequestServiceContext *_tao_tmp_pointer =
    static_cast<FTRequestServiceContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::RequestDurationPolicy.

FT::RequestDurationPolicy_ptr
TAO::Objref_Traits<FT::RequestDurationPolicy>::duplicate (
    FT::RequestDurationPolicy_ptr p)
{
  return FT::RequestDurationPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<FT::RequestDurationPolicy>::release (
    FT::RequestDurationPolicy_ptr p)
{
  ::CORBA::release (p);
}

FT::RequestDurationPolicy_ptr
TAO::Objref_Traits<FT::RequestDurationPolicy>::nil (void)
{
  return FT::RequestDurationPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::RequestDurationPolicy>::marshal (
    const FT::RequestDurationPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

FT::RequestDurationPolicy::RequestDurationPolicy (void)
{}

FT::RequestDurationPolicy::~RequestDurationPolicy (void)
{}

void 
FT::RequestDurationPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  RequestDurationPolicy *_tao_tmp_pointer =
    static_cast<RequestDurationPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return RequestDurationPolicy::_duplicate (
      dynamic_cast<RequestDurationPolicy_ptr> (_tao_objref)
    );
}

FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return RequestDurationPolicy::_duplicate (
      dynamic_cast<RequestDurationPolicy_ptr> (_tao_objref)
    );
}

FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy::_nil (void)
{
  return 0;
}

FT::RequestDurationPolicy_ptr
FT::RequestDurationPolicy::_duplicate (RequestDurationPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::RequestDurationPolicy::_tao_release (RequestDurationPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::RequestDurationPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/RequestDurationPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* FT::RequestDurationPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/RequestDurationPolicy:1.0";
}

::CORBA::Boolean
FT::RequestDurationPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_RequestDurationPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/FT/RequestDurationPolicy:1.0",
    "RequestDurationPolicy");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_RequestDurationPolicy =
    &_tao_tc_FT_RequestDurationPolicy;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FT_HeartbeatPolicyValue[] =
      {
        { "heartbeat", &CORBA::_tc_boolean },
        { "heartbeat_interval", &TimeBase::_tc_TimeT },
        { "heartbeat_timeout", &TimeBase::_tc_TimeT }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_HeartbeatPolicyValue (
  ::CORBA::tk_struct,
  "IDL:omg.org/FT/HeartbeatPolicyValue:1.0",
  "HeartbeatPolicyValue",
  _tao_fields_FT_HeartbeatPolicyValue,
  3);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_HeartbeatPolicyValue =
    &_tao_tc_FT_HeartbeatPolicyValue;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FT::HeartbeatPolicyValue::_tao_any_destructor (
    void *_tao_void_pointer)
{
  HeartbeatPolicyValue *_tao_tmp_pointer =
    static_cast<HeartbeatPolicyValue *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::HeartbeatPolicy.

FT::HeartbeatPolicy_ptr
TAO::Objref_Traits<FT::HeartbeatPolicy>::duplicate (
    FT::HeartbeatPolicy_ptr p)
{
  return FT::HeartbeatPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<FT::HeartbeatPolicy>::release (
    FT::HeartbeatPolicy_ptr p)
{
  ::CORBA::release (p);
}

FT::HeartbeatPolicy_ptr
TAO::Objref_Traits<FT::HeartbeatPolicy>::nil (void)
{
  return FT::HeartbeatPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::HeartbeatPolicy>::marshal (
    const FT::HeartbeatPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

FT::HeartbeatPolicy::HeartbeatPolicy (void)
{}

FT::HeartbeatPolicy::~HeartbeatPolicy (void)
{}

void 
FT::HeartbeatPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  HeartbeatPolicy *_tao_tmp_pointer =
    static_cast<HeartbeatPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return HeartbeatPolicy::_duplicate (
      dynamic_cast<HeartbeatPolicy_ptr> (_tao_objref)
    );
}

FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return HeartbeatPolicy::_duplicate (
      dynamic_cast<HeartbeatPolicy_ptr> (_tao_objref)
    );
}

FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy::_nil (void)
{
  return 0;
}

FT::HeartbeatPolicy_ptr
FT::HeartbeatPolicy::_duplicate (HeartbeatPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::HeartbeatPolicy::_tao_release (HeartbeatPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::HeartbeatPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/HeartbeatPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* FT::HeartbeatPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/HeartbeatPolicy:1.0";
}

::CORBA::Boolean
FT::HeartbeatPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_HeartbeatPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/FT/HeartbeatPolicy:1.0",
    "HeartbeatPolicy");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_HeartbeatPolicy =
    &_tao_tc_FT_HeartbeatPolicy;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FT_TagFTHeartbeatEnabledTaggedComponent[] =
      {
        { "heartbeat_enabled", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_TagFTHeartbeatEnabledTaggedComponent (
  ::CORBA::tk_struct,
  "IDL:omg.org/FT/TagFTHeartbeatEnabledTaggedComponent:1.0",
  "TagFTHeartbeatEnabledTaggedComponent",
  _tao_fields_FT_TagFTHeartbeatEnabledTaggedComponent,
  1);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_TagFTHeartbeatEnabledTaggedComponent =
    &_tao_tc_FT_TagFTHeartbeatEnabledTaggedComponent;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TagFTHeartbeatEnabledTaggedComponent *_tao_tmp_pointer =
    static_cast<TagFTHeartbeatEnabledTaggedComponent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::HeartbeatEnabledPolicy.

FT::HeartbeatEnabledPolicy_ptr
TAO::Objref_Traits<FT::HeartbeatEnabledPolicy>::duplicate (
    FT::HeartbeatEnabledPolicy_ptr p)
{
  return FT::HeartbeatEnabledPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<FT::HeartbeatEnabledPolicy>::release (
    FT::HeartbeatEnabledPolicy_ptr p)
{
  ::CORBA::release (p);
}

FT::HeartbeatEnabledPolicy_ptr
TAO::Objref_Traits<FT::HeartbeatEnabledPolicy>::nil (void)
{
  return FT::HeartbeatEnabledPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::HeartbeatEnabledPolicy>::marshal (
    const FT::HeartbeatEnabledPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

FT::HeartbeatEnabledPolicy::HeartbeatEnabledPolicy (void)
{}

FT::HeartbeatEnabledPolicy::~HeartbeatEnabledPolicy (void)
{}

void 
FT::HeartbeatEnabledPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  HeartbeatEnabledPolicy *_tao_tmp_pointer =
    static_cast<HeartbeatEnabledPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return HeartbeatEnabledPolicy::_duplicate (
      dynamic_cast<HeartbeatEnabledPolicy_ptr> (_tao_objref)
    );
}

FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return HeartbeatEnabledPolicy::_duplicate (
      dynamic_cast<HeartbeatEnabledPolicy_ptr> (_tao_objref)
    );
}

FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy::_nil (void)
{
  return 0;
}

FT::HeartbeatEnabledPolicy_ptr
FT::HeartbeatEnabledPolicy::_duplicate (HeartbeatEnabledPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::HeartbeatEnabledPolicy::_tao_release (HeartbeatEnabledPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::HeartbeatEnabledPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/HeartbeatEnabledPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* FT::HeartbeatEnabledPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/HeartbeatEnabledPolicy:1.0";
}

::CORBA::Boolean
FT::HeartbeatEnabledPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_HeartbeatEnabledPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/FT/HeartbeatEnabledPolicy:1.0",
    "HeartbeatEnabledPolicy");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_HeartbeatEnabledPolicy =
    &_tao_tc_FT_HeartbeatEnabledPolicy;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::TagFTPrimaryTaggedComponent &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::TagFTPrimaryTaggedComponent *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::TagFTPrimaryTaggedComponent>::insert_copy (
          _tao_any,
          ::FT::TagFTPrimaryTaggedComponent::_tao_any_destructor,
          ::FT::_tc_TagFTPrimaryTaggedComponent,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FT::TagFTPrimaryTaggedComponent *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::TagFTPrimaryTaggedComponent>::insert (
        _tao_any,
        ::FT::TagFTPrimaryTaggedComponent::_tao_any_destructor,
        ::FT::_tc_TagFTPrimaryTaggedComponent,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::TagFTPrimaryTaggedComponent *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::TagFTPrimaryTaggedComponent *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::TagFTPrimaryTaggedComponent *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::TagFTPrimaryTaggedComponent>::extract (
          _tao_any,
          ::FT::TagFTPrimaryTaggedComponent::_tao_any_destructor,
          ::FT::_tc_TagFTPrimaryTaggedComponent,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::TagFTPrimaryTaggedComponent &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::TagFTPrimaryTaggedComponent *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::TagFTPrimaryTaggedComponent>::insert_copy (
        _tao_any,
        FT::TagFTPrimaryTaggedComponent::_tao_any_destructor,
        FT::_tc_TagFTPrimaryTaggedComponent,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::TagFTPrimaryTaggedComponent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::TagFTPrimaryTaggedComponent>::insert (
      _tao_any,
      FT::TagFTPrimaryTaggedComponent::_tao_any_destructor,
      FT::_tc_TagFTPrimaryTaggedComponent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::TagFTPrimaryTaggedComponent *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::TagFTPrimaryTaggedComponent *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::TagFTPrimaryTaggedComponent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::TagFTPrimaryTaggedComponent>::extract (
        _tao_any,
        FT::TagFTPrimaryTaggedComponent::_tao_any_destructor,
        FT::_tc_TagFTPrimaryTaggedComponent,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::FTGroupVersionServiceContext &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::FTGroupVersionServiceContext *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::FTGroupVersionServiceContext>::insert_copy (
          _tao_any,
          ::FT::FTGroupVersionServiceContext::_tao_any_destructor,
          ::FT::_tc_FTGroupVersionServiceContext,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FT::FTGroupVersionServiceContext *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::FTGroupVersionServiceContext>::insert (
        _tao_any,
        ::FT::FTGroupVersionServiceContext::_tao_any_destructor,
        ::FT::_tc_FTGroupVersionServiceContext,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::FTGroupVersionServiceContext *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::FTGroupVersionServiceContext *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::FTGroupVersionServiceContext *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::FTGroupVersionServiceContext>::extract (
          _tao_any,
          ::FT::FTGroupVersionServiceContext::_tao_any_destructor,
          ::FT::_tc_FTGroupVersionServiceContext,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::FTGroupVersionServiceContext &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::FTGroupVersionServiceContext *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::FTGroupVersionServiceContext>::insert_copy (
        _tao_any,
        FT::FTGroupVersionServiceContext::_tao_any_destructor,
        FT::_tc_FTGroupVersionServiceContext,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::FTGroupVersionServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::FTGroupVersionServiceContext>::insert (
      _tao_any,
      FT::FTGroupVersionServiceContext::_tao_any_destructor,
      FT::_tc_FTGroupVersionServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::FTGroupVersionServiceContext *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::FTGroupVersionServiceContext *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::FTGroupVersionServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::FTGroupVersionServiceContext>::extract (
        _tao_any,
        FT::FTGroupVersionServiceContext::_tao_any_destructor,
        FT::_tc_FTGroupVersionServiceContext,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::FTRequestServiceContext &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::FTRequestServiceContext *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::FTRequestServiceContext>::insert_copy (
          _tao_any,
          ::FT::FTRequestServiceContext::_tao_any_destructor,
          ::FT::_tc_FTRequestServiceContext,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FT::FTRequestServiceContext *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::FTRequestServiceContext>::insert (
        _tao_any,
        ::FT::FTRequestServiceContext::_tao_any_destructor,
        ::FT::_tc_FTRequestServiceContext,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::FTRequestServiceContext *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::FTRequestServiceContext *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::FTRequestServiceContext *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::FTRequestServiceContext>::extract (
          _tao_any,
          ::FT::FTRequestServiceContext::_tao_any_destructor,
          ::FT::_tc_FTRequestServiceContext,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::FTRequestServiceContext &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::FTRequestServiceContext *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::FTRequestServiceContext>::insert_copy (
        _tao_any,
        FT::FTRequestServiceContext::_tao_any_destructor,
        FT::_tc_FTRequestServiceContext,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::FTRequestServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::FTRequestServiceContext>::insert (
      _tao_any,
      FT::FTRequestServiceContext::_tao_any_destructor,
      FT::_tc_FTRequestServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::FTRequestServiceContext *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::FTRequestServiceContext *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::FTRequestServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::FTRequestServiceContext>::extract (
        _tao_any,
        FT::FTRequestServiceContext::_tao_any_destructor,
        FT::_tc_FTRequestServiceContext,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::RequestDurationPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::RequestDurationPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::RequestDurationPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RequestDurationPolicy_ptr _tao_elem)
  {
    RequestDurationPolicy_ptr _tao_objptr =
      RequestDurationPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RequestDurationPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<RequestDurationPolicy>::insert (
        _tao_any,
        RequestDurationPolicy::_tao_any_destructor,
        _tc_RequestDurationPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      RequestDurationPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<RequestDurationPolicy>::extract (
          _tao_any,
          RequestDurationPolicy::_tao_any_destructor,
          _tc_RequestDurationPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::RequestDurationPolicy_ptr _tao_elem)
{
  FT::RequestDurationPolicy_ptr _tao_objptr =
    FT::RequestDurationPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::RequestDurationPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::RequestDurationPolicy>::insert (
      _tao_any,
      FT::RequestDurationPolicy::_tao_any_destructor,
      FT::_tc_RequestDurationPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::RequestDurationPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::RequestDurationPolicy>::extract (
        _tao_any,
        FT::RequestDurationPolicy::_tao_any_destructor,
        FT::_tc_RequestDurationPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::HeartbeatPolicyValue &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::HeartbeatPolicyValue *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::HeartbeatPolicyValue>::insert_copy (
          _tao_any,
          ::FT::HeartbeatPolicyValue::_tao_any_destructor,
          ::FT::_tc_HeartbeatPolicyValue,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FT::HeartbeatPolicyValue *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::HeartbeatPolicyValue>::insert (
        _tao_any,
        ::FT::HeartbeatPolicyValue::_tao_any_destructor,
        ::FT::_tc_HeartbeatPolicyValue,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::HeartbeatPolicyValue *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::HeartbeatPolicyValue *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::HeartbeatPolicyValue *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::HeartbeatPolicyValue>::extract (
          _tao_any,
          ::FT::HeartbeatPolicyValue::_tao_any_destructor,
          ::FT::_tc_HeartbeatPolicyValue,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::HeartbeatPolicyValue &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::HeartbeatPolicyValue *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::HeartbeatPolicyValue>::insert_copy (
        _tao_any,
        FT::HeartbeatPolicyValue::_tao_any_destructor,
        FT::_tc_HeartbeatPolicyValue,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::HeartbeatPolicyValue *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::HeartbeatPolicyValue>::insert (
      _tao_any,
      FT::HeartbeatPolicyValue::_tao_any_destructor,
      FT::_tc_HeartbeatPolicyValue,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::HeartbeatPolicyValue *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::HeartbeatPolicyValue *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::HeartbeatPolicyValue *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::HeartbeatPolicyValue>::extract (
        _tao_any,
        FT::HeartbeatPolicyValue::_tao_any_destructor,
        FT::_tc_HeartbeatPolicyValue,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::HeartbeatPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::HeartbeatPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::HeartbeatPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      HeartbeatPolicy_ptr _tao_elem)
  {
    HeartbeatPolicy_ptr _tao_objptr =
      HeartbeatPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      HeartbeatPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<HeartbeatPolicy>::insert (
        _tao_any,
        HeartbeatPolicy::_tao_any_destructor,
        _tc_HeartbeatPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      HeartbeatPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<HeartbeatPolicy>::extract (
          _tao_any,
          HeartbeatPolicy::_tao_any_destructor,
          _tc_HeartbeatPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::HeartbeatPolicy_ptr _tao_elem)
{
  FT::HeartbeatPolicy_ptr _tao_objptr =
    FT::HeartbeatPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::HeartbeatPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::HeartbeatPolicy>::insert (
      _tao_any,
      FT::HeartbeatPolicy::_tao_any_destructor,
      FT::_tc_HeartbeatPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::HeartbeatPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::HeartbeatPolicy>::extract (
        _tao_any,
        FT::HeartbeatPolicy::_tao_any_destructor,
        FT::_tc_HeartbeatPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::TagFTHeartbeatEnabledTaggedComponent &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::TagFTHeartbeatEnabledTaggedComponent *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::TagFTHeartbeatEnabledTaggedComponent>::insert_copy (
          _tao_any,
          ::FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor,
          ::FT::_tc_TagFTHeartbeatEnabledTaggedComponent,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FT::TagFTHeartbeatEnabledTaggedComponent *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::TagFTHeartbeatEnabledTaggedComponent>::insert (
        _tao_any,
        ::FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor,
        ::FT::_tc_TagFTHeartbeatEnabledTaggedComponent,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::TagFTHeartbeatEnabledTaggedComponent *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::TagFTHeartbeatEnabledTaggedComponent *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::TagFTHeartbeatEnabledTaggedComponent *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::TagFTHeartbeatEnabledTaggedComponent>::extract (
          _tao_any,
          ::FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor,
          ::FT::_tc_TagFTHeartbeatEnabledTaggedComponent,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::TagFTHeartbeatEnabledTaggedComponent &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::TagFTHeartbeatEnabledTaggedComponent *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::TagFTHeartbeatEnabledTaggedComponent>::insert_copy (
        _tao_any,
        FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor,
        FT::_tc_TagFTHeartbeatEnabledTaggedComponent,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::TagFTHeartbeatEnabledTaggedComponent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::TagFTHeartbeatEnabledTaggedComponent>::insert (
      _tao_any,
      FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor,
      FT::_tc_TagFTHeartbeatEnabledTaggedComponent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::TagFTHeartbeatEnabledTaggedComponent *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::TagFTHeartbeatEnabledTaggedComponent *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::TagFTHeartbeatEnabledTaggedComponent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::TagFTHeartbeatEnabledTaggedComponent>::extract (
        _tao_any,
        FT::TagFTHeartbeatEnabledTaggedComponent::_tao_any_destructor,
        FT::_tc_TagFTHeartbeatEnabledTaggedComponent,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::HeartbeatEnabledPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::HeartbeatEnabledPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::HeartbeatEnabledPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      HeartbeatEnabledPolicy_ptr _tao_elem)
  {
    HeartbeatEnabledPolicy_ptr _tao_objptr =
      HeartbeatEnabledPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      HeartbeatEnabledPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<HeartbeatEnabledPolicy>::insert (
        _tao_any,
        HeartbeatEnabledPolicy::_tao_any_destructor,
        _tc_HeartbeatEnabledPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      HeartbeatEnabledPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<HeartbeatEnabledPolicy>::extract (
          _tao_any,
          HeartbeatEnabledPolicy::_tao_any_destructor,
          _tc_HeartbeatEnabledPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::HeartbeatEnabledPolicy_ptr _tao_elem)
{
  FT::HeartbeatEnabledPolicy_ptr _tao_objptr =
    FT::HeartbeatEnabledPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::HeartbeatEnabledPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::HeartbeatEnabledPolicy>::insert (
      _tao_any,
      FT::HeartbeatEnabledPolicy::_tao_any_destructor,
      FT::_tc_HeartbeatEnabledPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::HeartbeatEnabledPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::HeartbeatEnabledPolicy>::extract (
        _tao_any,
        FT::HeartbeatEnabledPolicy::_tao_any_destructor,
        FT::_tc_HeartbeatEnabledPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::TagFTPrimaryTaggedComponent &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.primary));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::TagFTPrimaryTaggedComponent &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.primary));
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::FTGroupVersionServiceContext &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.object_group_ref_version);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::FTGroupVersionServiceContext &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.object_group_ref_version);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::FTRequestServiceContext &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.client_id.in ()) &&
    (strm << _tao_aggregate.retention_id) &&
    (strm << _tao_aggregate.expiration_time);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::FTRequestServiceContext &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.client_id.out ()) &&
    (strm >> _tao_aggregate.retention_id) &&
    (strm >> _tao_aggregate.expiration_time);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::HeartbeatPolicyValue &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.heartbeat)) &&
    (strm << _tao_aggregate.heartbeat_interval) &&
    (strm << _tao_aggregate.heartbeat_timeout);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::HeartbeatPolicyValue &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.heartbeat)) &&
    (strm >> _tao_aggregate.heartbeat_interval) &&
    (strm >> _tao_aggregate.heartbeat_timeout);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::TagFTHeartbeatEnabledTaggedComponent &_tao_aggregate)
{
  return
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.heartbeat_enabled));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::TagFTHeartbeatEnabledTaggedComponent &_tao_aggregate)
{
  return
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.heartbeat_enabled));
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


