// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "LifeCycleServiceC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "LifeCycleServiceC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for LifeCycleService::Life_Cycle_Service.

LifeCycleService::Life_Cycle_Service_ptr
TAO::Objref_Traits<LifeCycleService::Life_Cycle_Service>::duplicate (
    LifeCycleService::Life_Cycle_Service_ptr p)
{
  return LifeCycleService::Life_Cycle_Service::_duplicate (p);
}

void
TAO::Objref_Traits<LifeCycleService::Life_Cycle_Service>::release (
    LifeCycleService::Life_Cycle_Service_ptr p)
{
  ::CORBA::release (p);
}

LifeCycleService::Life_Cycle_Service_ptr
TAO::Objref_Traits<LifeCycleService::Life_Cycle_Service>::nil (void)
{
  return LifeCycleService::Life_Cycle_Service::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<LifeCycleService::Life_Cycle_Service>::marshal (
    const LifeCycleService::Life_Cycle_Service_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*LifeCycleService__TAO_Life_Cycle_Service_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
LifeCycleService::Life_Cycle_Service::register_factory (
  const char * name,
  const char * location,
  const char * description,
  ::CORBA::Object_ptr object)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Life_Cycle_Service_Proxy_Broker_ == 0)
    {
      LifeCycleService_Life_Cycle_Service_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< char *>::in_arg_val _tao_location (location);
  TAO::Arg_Traits< char *>::in_arg_val _tao_description (description);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_object (object);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_location,
      &_tao_description,
      &_tao_object
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "register_factory",
      16,
      this->the_TAO_Life_Cycle_Service_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

LifeCycleService::Life_Cycle_Service::Life_Cycle_Service (void)
 : the_TAO_Life_Cycle_Service_Proxy_Broker_ (0)
{
  this->LifeCycleService_Life_Cycle_Service_setup_collocation ();
}

void
LifeCycleService::Life_Cycle_Service::LifeCycleService_Life_Cycle_Service_setup_collocation ()
{
  if (::LifeCycleService__TAO_Life_Cycle_Service_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Life_Cycle_Service_Proxy_Broker_ =
        ::LifeCycleService__TAO_Life_Cycle_Service_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosLifeCycle_GenericFactory_setup_collocation ();
}

LifeCycleService::Life_Cycle_Service::~Life_Cycle_Service (void)
{}

void 
LifeCycleService::Life_Cycle_Service::_tao_any_destructor (void *_tao_void_pointer)
{
  Life_Cycle_Service *_tao_tmp_pointer =
    static_cast<Life_Cycle_Service *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

LifeCycleService::Life_Cycle_Service_ptr
LifeCycleService::Life_Cycle_Service::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Life_Cycle_Service>::narrow (
        _tao_objref,
        "IDL:LifeCycleService/Life_Cycle_Service:1.0",
        LifeCycleService__TAO_Life_Cycle_Service_Proxy_Broker_Factory_function_pointer
      );
}

LifeCycleService::Life_Cycle_Service_ptr
LifeCycleService::Life_Cycle_Service::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Life_Cycle_Service>::unchecked_narrow (
        _tao_objref,
        "IDL:LifeCycleService/Life_Cycle_Service:1.0",
        LifeCycleService__TAO_Life_Cycle_Service_Proxy_Broker_Factory_function_pointer
      );
}

LifeCycleService::Life_Cycle_Service_ptr
LifeCycleService::Life_Cycle_Service::_nil (void)
{
  return 0;
}

LifeCycleService::Life_Cycle_Service_ptr
LifeCycleService::Life_Cycle_Service::_duplicate (Life_Cycle_Service_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
LifeCycleService::Life_Cycle_Service::_tao_release (Life_Cycle_Service_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
LifeCycleService::Life_Cycle_Service::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosLifeCycle/GenericFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:LifeCycleService/Life_Cycle_Service:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* LifeCycleService::Life_Cycle_Service::_interface_repository_id (void) const
{
  return "IDL:LifeCycleService/Life_Cycle_Service:1.0";
}

::CORBA::Boolean
LifeCycleService::Life_Cycle_Service::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_LifeCycleService_Life_Cycle_Service (
    ::CORBA::tk_objref,
    "IDL:LifeCycleService/Life_Cycle_Service:1.0",
    "Life_Cycle_Service");
  

namespace LifeCycleService
{
  ::CORBA::TypeCode_ptr const _tc_Life_Cycle_Service =
    &_tao_tc_LifeCycleService_Life_Cycle_Service;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for LifeCycleService::Criteria_Evaluator.

LifeCycleService::Criteria_Evaluator_ptr
TAO::Objref_Traits<LifeCycleService::Criteria_Evaluator>::duplicate (
    LifeCycleService::Criteria_Evaluator_ptr p)
{
  return LifeCycleService::Criteria_Evaluator::_duplicate (p);
}

void
TAO::Objref_Traits<LifeCycleService::Criteria_Evaluator>::release (
    LifeCycleService::Criteria_Evaluator_ptr p)
{
  ::CORBA::release (p);
}

LifeCycleService::Criteria_Evaluator_ptr
TAO::Objref_Traits<LifeCycleService::Criteria_Evaluator>::nil (void)
{
  return LifeCycleService::Criteria_Evaluator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<LifeCycleService::Criteria_Evaluator>::marshal (
    const LifeCycleService::Criteria_Evaluator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*LifeCycleService__TAO_Criteria_Evaluator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LifeCycleService_Criteria_Evaluator_SeqNamedValuePair (
    ::CORBA::tk_alias,
    "IDL:LifeCycleService/Criteria_Evaluator/SeqNamedValuePair:1.0",
    "SeqNamedValuePair",
    &CosLifeCycle::_tc_Criteria);
  
::CORBA::TypeCode_ptr const LifeCycleService::Criteria_Evaluator::_tc_SeqNamedValuePair =
  &_tao_tc_LifeCycleService_Criteria_Evaluator_SeqNamedValuePair;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_LifeCycleService_Criteria_Evaluator_Criteria (
    ::CORBA::tk_alias,
    "IDL:LifeCycleService/Criteria_Evaluator/Criteria:1.0",
    "Criteria",
    &CosLifeCycle::_tc_Criteria);
  
::CORBA::TypeCode_ptr const LifeCycleService::Criteria_Evaluator::_tc_Criteria =
  &_tao_tc_LifeCycleService_Criteria_Evaluator_Criteria;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

LifeCycleService::Criteria_Evaluator::NotAvailable::NotAvailable (
    const char * _tao_reason)
  : ::CORBA::UserException (
        "IDL:LifeCycleService/Criteria_Evaluator/NotAvailable:1.0",
        "NotAvailable"
      )
{
  this->reason = ::CORBA::string_dup (_tao_reason);
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

LifeCycleService::Criteria_Evaluator::NotAvailable::NotAvailable (void)
  : ::CORBA::UserException (
        "IDL:LifeCycleService/Criteria_Evaluator/NotAvailable:1.0",
        "NotAvailable"
      )
{
}

LifeCycleService::Criteria_Evaluator::NotAvailable::~NotAvailable (void)
{
}

LifeCycleService::Criteria_Evaluator::NotAvailable::NotAvailable (const ::LifeCycleService::Criteria_Evaluator::NotAvailable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
}

LifeCycleService::Criteria_Evaluator::NotAvailable&
LifeCycleService::Criteria_Evaluator::NotAvailable::operator= (const ::LifeCycleService::Criteria_Evaluator::NotAvailable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
  return *this;
}

void LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor (void *_tao_void_pointer)
{
  NotAvailable *_tao_tmp_pointer =
    static_cast<NotAvailable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

LifeCycleService::Criteria_Evaluator::NotAvailable *
LifeCycleService::Criteria_Evaluator::NotAvailable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotAvailable *> (_tao_excp);
}

const LifeCycleService::Criteria_Evaluator::NotAvailable *
LifeCycleService::Criteria_Evaluator::NotAvailable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotAvailable *> (_tao_excp);
}

::CORBA::Exception *LifeCycleService::Criteria_Evaluator::NotAvailable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::LifeCycleService::Criteria_Evaluator::NotAvailable, 0);
  return retval;
}

::CORBA::Exception *
LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::LifeCycleService::Criteria_Evaluator::NotAvailable (*this),
      0
    );
  return result;
}

void LifeCycleService::Criteria_Evaluator::NotAvailable::_raise (void) const
{
  throw *this;
}

void LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_type (void) const
{
  return ::LifeCycleService::Criteria_Evaluator::_tc_NotAvailable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_LifeCycleService_Criteria_Evaluator_NotAvailable[] =
      {
        { "reason", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_LifeCycleService_Criteria_Evaluator_NotAvailable (
  ::CORBA::tk_except,
  "IDL:LifeCycleService/Criteria_Evaluator/NotAvailable:1.0",
  "NotAvailable",
  _tao_fields_LifeCycleService_Criteria_Evaluator_NotAvailable,
  1);

::CORBA::TypeCode_ptr const LifeCycleService::Criteria_Evaluator::_tc_NotAvailable =
  &_tao_tc_LifeCycleService_Criteria_Evaluator_NotAvailable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::LifeCycleService::Criteria_Evaluator::SeqNamedValuePair *
LifeCycleService::Criteria_Evaluator::getInitialization (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Criteria_Evaluator_Proxy_Broker_ == 0)
    {
      LifeCycleService_Criteria_Evaluator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::LifeCycleService::Criteria_Evaluator::SeqNamedValuePair>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getInitialization",
      17,
      this->the_TAO_Criteria_Evaluator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

char *
LifeCycleService::Criteria_Evaluator::getFilter (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Criteria_Evaluator_Proxy_Broker_ == 0)
    {
      LifeCycleService_Criteria_Evaluator_setup_collocation ();
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getFilter",
      9,
      this->the_TAO_Criteria_Evaluator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::LifeCycleService::Criteria_Evaluator::SeqNamedValuePair *
LifeCycleService::Criteria_Evaluator::getLogicalLocation (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Criteria_Evaluator_Proxy_Broker_ == 0)
    {
      LifeCycleService_Criteria_Evaluator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::LifeCycleService::Criteria_Evaluator::SeqNamedValuePair>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getLogicalLocation",
      18,
      this->the_TAO_Criteria_Evaluator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

char *
LifeCycleService::Criteria_Evaluator::getPreferences (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Criteria_Evaluator_Proxy_Broker_ == 0)
    {
      LifeCycleService_Criteria_Evaluator_setup_collocation ();
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "getPreferences",
      14,
      this->the_TAO_Criteria_Evaluator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
LifeCycleService::Criteria_Evaluator::setCriteria (
  const ::LifeCycleService::Criteria_Evaluator::Criteria & criteria_)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Criteria_Evaluator_Proxy_Broker_ == 0)
    {
      LifeCycleService_Criteria_Evaluator_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::LifeCycleService::Criteria_Evaluator::Criteria>::in_arg_val _tao_criteria_ (criteria_);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_criteria_
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "setCriteria",
      11,
      this->the_TAO_Criteria_Evaluator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

LifeCycleService::Criteria_Evaluator::Criteria_Evaluator (void)
 : the_TAO_Criteria_Evaluator_Proxy_Broker_ (0)
{
  this->LifeCycleService_Criteria_Evaluator_setup_collocation ();
}

void
LifeCycleService::Criteria_Evaluator::LifeCycleService_Criteria_Evaluator_setup_collocation ()
{
  if (::LifeCycleService__TAO_Criteria_Evaluator_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Criteria_Evaluator_Proxy_Broker_ =
        ::LifeCycleService__TAO_Criteria_Evaluator_Proxy_Broker_Factory_function_pointer (this);
    }
}

LifeCycleService::Criteria_Evaluator::~Criteria_Evaluator (void)
{}

void 
LifeCycleService::Criteria_Evaluator::_tao_any_destructor (void *_tao_void_pointer)
{
  Criteria_Evaluator *_tao_tmp_pointer =
    static_cast<Criteria_Evaluator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

LifeCycleService::Criteria_Evaluator_ptr
LifeCycleService::Criteria_Evaluator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Criteria_Evaluator>::narrow (
        _tao_objref,
        "IDL:LifeCycleService/Criteria_Evaluator:1.0",
        LifeCycleService__TAO_Criteria_Evaluator_Proxy_Broker_Factory_function_pointer
      );
}

LifeCycleService::Criteria_Evaluator_ptr
LifeCycleService::Criteria_Evaluator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Criteria_Evaluator>::unchecked_narrow (
        _tao_objref,
        "IDL:LifeCycleService/Criteria_Evaluator:1.0",
        LifeCycleService__TAO_Criteria_Evaluator_Proxy_Broker_Factory_function_pointer
      );
}

LifeCycleService::Criteria_Evaluator_ptr
LifeCycleService::Criteria_Evaluator::_nil (void)
{
  return 0;
}

LifeCycleService::Criteria_Evaluator_ptr
LifeCycleService::Criteria_Evaluator::_duplicate (Criteria_Evaluator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
LifeCycleService::Criteria_Evaluator::_tao_release (Criteria_Evaluator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
LifeCycleService::Criteria_Evaluator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:LifeCycleService/Criteria_Evaluator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* LifeCycleService::Criteria_Evaluator::_interface_repository_id (void) const
{
  return "IDL:LifeCycleService/Criteria_Evaluator:1.0";
}

::CORBA::Boolean
LifeCycleService::Criteria_Evaluator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_LifeCycleService_Criteria_Evaluator (
    ::CORBA::tk_objref,
    "IDL:LifeCycleService/Criteria_Evaluator:1.0",
    "Criteria_Evaluator");
  

namespace LifeCycleService
{
  ::CORBA::TypeCode_ptr const _tc_Criteria_Evaluator =
    &_tao_tc_LifeCycleService_Criteria_Evaluator;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<LifeCycleService::Life_Cycle_Service>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LifeCycleService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Life_Cycle_Service_ptr _tao_elem)
  {
    Life_Cycle_Service_ptr _tao_objptr =
      Life_Cycle_Service::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Life_Cycle_Service_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Life_Cycle_Service>::insert (
        _tao_any,
        Life_Cycle_Service::_tao_any_destructor,
        _tc_Life_Cycle_Service,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Life_Cycle_Service_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Life_Cycle_Service>::extract (
          _tao_any,
          Life_Cycle_Service::_tao_any_destructor,
          _tc_Life_Cycle_Service,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    LifeCycleService::Life_Cycle_Service_ptr _tao_elem)
{
  LifeCycleService::Life_Cycle_Service_ptr _tao_objptr =
    LifeCycleService::Life_Cycle_Service::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    LifeCycleService::Life_Cycle_Service_ptr *_tao_elem)
{
  TAO::Any_Impl_T<LifeCycleService::Life_Cycle_Service>::insert (
      _tao_any,
      LifeCycleService::Life_Cycle_Service::_tao_any_destructor,
      LifeCycleService::_tc_Life_Cycle_Service,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    LifeCycleService::Life_Cycle_Service_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<LifeCycleService::Life_Cycle_Service>::extract (
        _tao_any,
        LifeCycleService::Life_Cycle_Service::_tao_any_destructor,
        LifeCycleService::_tc_Life_Cycle_Service,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<LifeCycleService::Criteria_Evaluator>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LifeCycleService
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Criteria_Evaluator_ptr _tao_elem)
  {
    Criteria_Evaluator_ptr _tao_objptr =
      Criteria_Evaluator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Criteria_Evaluator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Criteria_Evaluator>::insert (
        _tao_any,
        Criteria_Evaluator::_tao_any_destructor,
        _tc_Criteria_Evaluator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Criteria_Evaluator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Criteria_Evaluator>::extract (
          _tao_any,
          Criteria_Evaluator::_tao_any_destructor,
          _tc_Criteria_Evaluator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    LifeCycleService::Criteria_Evaluator_ptr _tao_elem)
{
  LifeCycleService::Criteria_Evaluator_ptr _tao_objptr =
    LifeCycleService::Criteria_Evaluator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    LifeCycleService::Criteria_Evaluator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<LifeCycleService::Criteria_Evaluator>::insert (
      _tao_any,
      LifeCycleService::Criteria_Evaluator::_tao_any_destructor,
      LifeCycleService::_tc_Criteria_Evaluator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    LifeCycleService::Criteria_Evaluator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<LifeCycleService::Criteria_Evaluator>::extract (
        _tao_any,
        LifeCycleService::Criteria_Evaluator::_tao_any_destructor,
        LifeCycleService::_tc_Criteria_Evaluator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<LifeCycleService::Criteria_Evaluator::NotAvailable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace LifeCycleService
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::LifeCycleService::Criteria_Evaluator::NotAvailable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::LifeCycleService::Criteria_Evaluator::NotAvailable>::insert_copy (
        _tao_any,
        ::LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor,
        ::LifeCycleService::Criteria_Evaluator::_tc_NotAvailable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::LifeCycleService::Criteria_Evaluator::NotAvailable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::LifeCycleService::Criteria_Evaluator::NotAvailable>::insert (
        _tao_any,
        ::LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor,
        ::LifeCycleService::Criteria_Evaluator::_tc_NotAvailable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::LifeCycleService::Criteria_Evaluator::NotAvailable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::LifeCycleService::Criteria_Evaluator::NotAvailable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::LifeCycleService::Criteria_Evaluator::NotAvailable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::LifeCycleService::Criteria_Evaluator::NotAvailable>::extract (
          _tao_any,
          ::LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor,
          ::LifeCycleService::Criteria_Evaluator::_tc_NotAvailable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const LifeCycleService::Criteria_Evaluator::NotAvailable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<LifeCycleService::Criteria_Evaluator::NotAvailable>::insert_copy (
      _tao_any,
      LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor,
      LifeCycleService::Criteria_Evaluator::_tc_NotAvailable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    LifeCycleService::Criteria_Evaluator::NotAvailable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<LifeCycleService::Criteria_Evaluator::NotAvailable>::insert (
      _tao_any,
      LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor,
      LifeCycleService::Criteria_Evaluator::_tc_NotAvailable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    LifeCycleService::Criteria_Evaluator::NotAvailable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const LifeCycleService::Criteria_Evaluator::NotAvailable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const LifeCycleService::Criteria_Evaluator::NotAvailable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<LifeCycleService::Criteria_Evaluator::NotAvailable>::extract (
        _tao_any,
        LifeCycleService::Criteria_Evaluator::NotAvailable::_tao_any_destructor,
        LifeCycleService::Criteria_Evaluator::_tc_NotAvailable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LifeCycleService::Life_Cycle_Service_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LifeCycleService::Life_Cycle_Service_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::LifeCycleService::Life_Cycle_Service RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        LifeCycleService__TAO_Life_Cycle_Service_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LifeCycleService::Criteria_Evaluator::NotAvailable &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LifeCycleService::Criteria_Evaluator::NotAvailable &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LifeCycleService::Criteria_Evaluator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LifeCycleService::Criteria_Evaluator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::LifeCycleService::Criteria_Evaluator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        LifeCycleService__TAO_Criteria_Evaluator_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


