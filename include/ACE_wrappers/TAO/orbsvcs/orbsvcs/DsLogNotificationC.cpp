// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "DsLogNotificationC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "DsLogNotificationC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_Log (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/Log:1.0",
    "Log",
    &DsLogAdmin::_tc_Log);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_Log =
    &_tao_tc_DsLogNotification_Log;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_LogId (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/LogId:1.0",
    "LogId",
    &DsLogAdmin::_tc_LogId);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_LogId =
    &_tao_tc_DsLogNotification_LogId;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_Threshold (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/Threshold:1.0",
    "Threshold",
    &DsLogAdmin::_tc_Threshold);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_Threshold =
    &_tao_tc_DsLogNotification_Threshold;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_TimeT (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/TimeT:1.0",
    "TimeT",
    &TimeBase::_tc_TimeT);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_TimeT =
    &_tao_tc_DsLogNotification_TimeT;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_PerceivedSeverityType (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/PerceivedSeverityType:1.0",
    "PerceivedSeverityType",
    &CORBA::_tc_ushort);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_PerceivedSeverityType =
    &_tao_tc_DsLogNotification_PerceivedSeverityType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DsLogNotification_ThresholdAlarm[] =
      {
        { "logref", &DsLogNotification::_tc_Log },
        { "id", &DsLogNotification::_tc_LogId },
        { "time", &DsLogNotification::_tc_TimeT },
        { "crossed_value", &DsLogNotification::_tc_Threshold },
        { "observed_value", &DsLogNotification::_tc_Threshold },
        { "perceived_severity", &DsLogNotification::_tc_PerceivedSeverityType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DsLogNotification_ThresholdAlarm (
  ::CORBA::tk_struct,
  "IDL:omg.org/DsLogNotification/ThresholdAlarm:1.0",
  "ThresholdAlarm",
  _tao_fields_DsLogNotification_ThresholdAlarm,
  6);


namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_ThresholdAlarm =
    &_tao_tc_DsLogNotification_ThresholdAlarm;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
DsLogNotification::ThresholdAlarm::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ThresholdAlarm *_tao_tmp_pointer =
    static_cast<ThresholdAlarm *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DsLogNotification_ObjectCreation[] =
      {
        { "id", &DsLogNotification::_tc_LogId },
        { "time", &DsLogNotification::_tc_TimeT }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DsLogNotification_ObjectCreation (
  ::CORBA::tk_struct,
  "IDL:omg.org/DsLogNotification/ObjectCreation:1.0",
  "ObjectCreation",
  _tao_fields_DsLogNotification_ObjectCreation,
  2);


namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_ObjectCreation =
    &_tao_tc_DsLogNotification_ObjectCreation;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
DsLogNotification::ObjectCreation::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ObjectCreation *_tao_tmp_pointer =
    static_cast<ObjectCreation *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DsLogNotification_ObjectDeletion[] =
      {
        { "id", &DsLogNotification::_tc_LogId },
        { "time", &DsLogNotification::_tc_TimeT }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DsLogNotification_ObjectDeletion (
  ::CORBA::tk_struct,
  "IDL:omg.org/DsLogNotification/ObjectDeletion:1.0",
  "ObjectDeletion",
  _tao_fields_DsLogNotification_ObjectDeletion,
  2);


namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_ObjectDeletion =
    &_tao_tc_DsLogNotification_ObjectDeletion;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
DsLogNotification::ObjectDeletion::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ObjectDeletion *_tao_tmp_pointer =
    static_cast<ObjectDeletion *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_AttributeType (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/AttributeType:1.0",
    "AttributeType",
    &CORBA::_tc_ushort);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_AttributeType =
    &_tao_tc_DsLogNotification_AttributeType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DsLogNotification_AttributeValueChange[] =
      {
        { "logref", &DsLogNotification::_tc_Log },
        { "id", &DsLogNotification::_tc_LogId },
        { "time", &DsLogNotification::_tc_TimeT },
        { "type", &DsLogNotification::_tc_AttributeType },
        { "old_value", &CORBA::_tc_any },
        { "new_value", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DsLogNotification_AttributeValueChange (
  ::CORBA::tk_struct,
  "IDL:omg.org/DsLogNotification/AttributeValueChange:1.0",
  "AttributeValueChange",
  _tao_fields_DsLogNotification_AttributeValueChange,
  6);


namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_AttributeValueChange =
    &_tao_tc_DsLogNotification_AttributeValueChange;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
DsLogNotification::AttributeValueChange::_tao_any_destructor (
    void *_tao_void_pointer)
{
  AttributeValueChange *_tao_tmp_pointer =
    static_cast<AttributeValueChange *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_DsLogNotification_StateType (
    ::CORBA::tk_alias,
    "IDL:omg.org/DsLogNotification/StateType:1.0",
    "StateType",
    &CORBA::_tc_ushort);
  

namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_StateType =
    &_tao_tc_DsLogNotification_StateType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DsLogNotification_StateChange[] =
      {
        { "logref", &DsLogNotification::_tc_Log },
        { "id", &DsLogNotification::_tc_LogId },
        { "time", &DsLogNotification::_tc_TimeT },
        { "type", &DsLogNotification::_tc_StateType },
        { "new_value", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DsLogNotification_StateChange (
  ::CORBA::tk_struct,
  "IDL:omg.org/DsLogNotification/StateChange:1.0",
  "StateChange",
  _tao_fields_DsLogNotification_StateChange,
  5);


namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_StateChange =
    &_tao_tc_DsLogNotification_StateChange;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
DsLogNotification::StateChange::_tao_any_destructor (
    void *_tao_void_pointer)
{
  StateChange *_tao_tmp_pointer =
    static_cast<StateChange *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DsLogNotification_ProcessingErrorAlarm[] =
      {
        { "error_num", &CORBA::_tc_long },
        { "error_string", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DsLogNotification_ProcessingErrorAlarm (
  ::CORBA::tk_struct,
  "IDL:omg.org/DsLogNotification/ProcessingErrorAlarm:1.0",
  "ProcessingErrorAlarm",
  _tao_fields_DsLogNotification_ProcessingErrorAlarm,
  2);


namespace DsLogNotification
{
  ::CORBA::TypeCode_ptr const _tc_ProcessingErrorAlarm =
    &_tao_tc_DsLogNotification_ProcessingErrorAlarm;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ProcessingErrorAlarm *_tao_tmp_pointer =
    static_cast<ProcessingErrorAlarm *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ThresholdAlarm &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::DsLogNotification::ThresholdAlarm *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ThresholdAlarm>::insert_copy (
          _tao_any,
          ::DsLogNotification::ThresholdAlarm::_tao_any_destructor,
          ::DsLogNotification::_tc_ThresholdAlarm,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      DsLogNotification::ThresholdAlarm *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DsLogNotification::ThresholdAlarm>::insert (
        _tao_any,
        ::DsLogNotification::ThresholdAlarm::_tao_any_destructor,
        ::DsLogNotification::_tc_ThresholdAlarm,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DsLogNotification::ThresholdAlarm *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::DsLogNotification::ThresholdAlarm *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ThresholdAlarm *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ThresholdAlarm>::extract (
          _tao_any,
          ::DsLogNotification::ThresholdAlarm::_tao_any_destructor,
          ::DsLogNotification::_tc_ThresholdAlarm,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DsLogNotification::ThresholdAlarm &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DsLogNotification::ThresholdAlarm *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DsLogNotification::ThresholdAlarm>::insert_copy (
        _tao_any,
        DsLogNotification::ThresholdAlarm::_tao_any_destructor,
        DsLogNotification::_tc_ThresholdAlarm,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DsLogNotification::ThresholdAlarm *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DsLogNotification::ThresholdAlarm>::insert (
      _tao_any,
      DsLogNotification::ThresholdAlarm::_tao_any_destructor,
      DsLogNotification::_tc_ThresholdAlarm,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DsLogNotification::ThresholdAlarm *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DsLogNotification::ThresholdAlarm *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DsLogNotification::ThresholdAlarm *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DsLogNotification::ThresholdAlarm>::extract (
        _tao_any,
        DsLogNotification::ThresholdAlarm::_tao_any_destructor,
        DsLogNotification::_tc_ThresholdAlarm,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ObjectCreation &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::DsLogNotification::ObjectCreation *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ObjectCreation>::insert_copy (
          _tao_any,
          ::DsLogNotification::ObjectCreation::_tao_any_destructor,
          ::DsLogNotification::_tc_ObjectCreation,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      DsLogNotification::ObjectCreation *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DsLogNotification::ObjectCreation>::insert (
        _tao_any,
        ::DsLogNotification::ObjectCreation::_tao_any_destructor,
        ::DsLogNotification::_tc_ObjectCreation,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DsLogNotification::ObjectCreation *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::DsLogNotification::ObjectCreation *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ObjectCreation *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ObjectCreation>::extract (
          _tao_any,
          ::DsLogNotification::ObjectCreation::_tao_any_destructor,
          ::DsLogNotification::_tc_ObjectCreation,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DsLogNotification::ObjectCreation &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DsLogNotification::ObjectCreation *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DsLogNotification::ObjectCreation>::insert_copy (
        _tao_any,
        DsLogNotification::ObjectCreation::_tao_any_destructor,
        DsLogNotification::_tc_ObjectCreation,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DsLogNotification::ObjectCreation *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DsLogNotification::ObjectCreation>::insert (
      _tao_any,
      DsLogNotification::ObjectCreation::_tao_any_destructor,
      DsLogNotification::_tc_ObjectCreation,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DsLogNotification::ObjectCreation *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DsLogNotification::ObjectCreation *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DsLogNotification::ObjectCreation *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DsLogNotification::ObjectCreation>::extract (
        _tao_any,
        DsLogNotification::ObjectCreation::_tao_any_destructor,
        DsLogNotification::_tc_ObjectCreation,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ObjectDeletion &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::DsLogNotification::ObjectDeletion *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ObjectDeletion>::insert_copy (
          _tao_any,
          ::DsLogNotification::ObjectDeletion::_tao_any_destructor,
          ::DsLogNotification::_tc_ObjectDeletion,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      DsLogNotification::ObjectDeletion *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DsLogNotification::ObjectDeletion>::insert (
        _tao_any,
        ::DsLogNotification::ObjectDeletion::_tao_any_destructor,
        ::DsLogNotification::_tc_ObjectDeletion,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DsLogNotification::ObjectDeletion *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::DsLogNotification::ObjectDeletion *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ObjectDeletion *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ObjectDeletion>::extract (
          _tao_any,
          ::DsLogNotification::ObjectDeletion::_tao_any_destructor,
          ::DsLogNotification::_tc_ObjectDeletion,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DsLogNotification::ObjectDeletion &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DsLogNotification::ObjectDeletion *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DsLogNotification::ObjectDeletion>::insert_copy (
        _tao_any,
        DsLogNotification::ObjectDeletion::_tao_any_destructor,
        DsLogNotification::_tc_ObjectDeletion,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DsLogNotification::ObjectDeletion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DsLogNotification::ObjectDeletion>::insert (
      _tao_any,
      DsLogNotification::ObjectDeletion::_tao_any_destructor,
      DsLogNotification::_tc_ObjectDeletion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DsLogNotification::ObjectDeletion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DsLogNotification::ObjectDeletion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DsLogNotification::ObjectDeletion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DsLogNotification::ObjectDeletion>::extract (
        _tao_any,
        DsLogNotification::ObjectDeletion::_tao_any_destructor,
        DsLogNotification::_tc_ObjectDeletion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DsLogNotification::AttributeValueChange &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::DsLogNotification::AttributeValueChange *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::DsLogNotification::AttributeValueChange>::insert_copy (
          _tao_any,
          ::DsLogNotification::AttributeValueChange::_tao_any_destructor,
          ::DsLogNotification::_tc_AttributeValueChange,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      DsLogNotification::AttributeValueChange *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DsLogNotification::AttributeValueChange>::insert (
        _tao_any,
        ::DsLogNotification::AttributeValueChange::_tao_any_destructor,
        ::DsLogNotification::_tc_AttributeValueChange,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DsLogNotification::AttributeValueChange *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::DsLogNotification::AttributeValueChange *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::DsLogNotification::AttributeValueChange *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::DsLogNotification::AttributeValueChange>::extract (
          _tao_any,
          ::DsLogNotification::AttributeValueChange::_tao_any_destructor,
          ::DsLogNotification::_tc_AttributeValueChange,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DsLogNotification::AttributeValueChange &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DsLogNotification::AttributeValueChange *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DsLogNotification::AttributeValueChange>::insert_copy (
        _tao_any,
        DsLogNotification::AttributeValueChange::_tao_any_destructor,
        DsLogNotification::_tc_AttributeValueChange,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DsLogNotification::AttributeValueChange *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DsLogNotification::AttributeValueChange>::insert (
      _tao_any,
      DsLogNotification::AttributeValueChange::_tao_any_destructor,
      DsLogNotification::_tc_AttributeValueChange,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DsLogNotification::AttributeValueChange *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DsLogNotification::AttributeValueChange *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DsLogNotification::AttributeValueChange *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DsLogNotification::AttributeValueChange>::extract (
        _tao_any,
        DsLogNotification::AttributeValueChange::_tao_any_destructor,
        DsLogNotification::_tc_AttributeValueChange,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DsLogNotification::StateChange &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::DsLogNotification::StateChange *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::DsLogNotification::StateChange>::insert_copy (
          _tao_any,
          ::DsLogNotification::StateChange::_tao_any_destructor,
          ::DsLogNotification::_tc_StateChange,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      DsLogNotification::StateChange *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DsLogNotification::StateChange>::insert (
        _tao_any,
        ::DsLogNotification::StateChange::_tao_any_destructor,
        ::DsLogNotification::_tc_StateChange,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DsLogNotification::StateChange *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::DsLogNotification::StateChange *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::DsLogNotification::StateChange *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::DsLogNotification::StateChange>::extract (
          _tao_any,
          ::DsLogNotification::StateChange::_tao_any_destructor,
          ::DsLogNotification::_tc_StateChange,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DsLogNotification::StateChange &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DsLogNotification::StateChange *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DsLogNotification::StateChange>::insert_copy (
        _tao_any,
        DsLogNotification::StateChange::_tao_any_destructor,
        DsLogNotification::_tc_StateChange,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DsLogNotification::StateChange *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DsLogNotification::StateChange>::insert (
      _tao_any,
      DsLogNotification::StateChange::_tao_any_destructor,
      DsLogNotification::_tc_StateChange,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DsLogNotification::StateChange *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DsLogNotification::StateChange *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DsLogNotification::StateChange *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DsLogNotification::StateChange>::extract (
        _tao_any,
        DsLogNotification::StateChange::_tao_any_destructor,
        DsLogNotification::_tc_StateChange,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ProcessingErrorAlarm &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::DsLogNotification::ProcessingErrorAlarm *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ProcessingErrorAlarm>::insert_copy (
          _tao_any,
          ::DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor,
          ::DsLogNotification::_tc_ProcessingErrorAlarm,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      DsLogNotification::ProcessingErrorAlarm *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::DsLogNotification::ProcessingErrorAlarm>::insert (
        _tao_any,
        ::DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor,
        ::DsLogNotification::_tc_ProcessingErrorAlarm,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::DsLogNotification::ProcessingErrorAlarm *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::DsLogNotification::ProcessingErrorAlarm *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::DsLogNotification::ProcessingErrorAlarm *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::DsLogNotification::ProcessingErrorAlarm>::extract (
          _tao_any,
          ::DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor,
          ::DsLogNotification::_tc_ProcessingErrorAlarm,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DsLogNotification::ProcessingErrorAlarm &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DsLogNotification::ProcessingErrorAlarm *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DsLogNotification::ProcessingErrorAlarm>::insert_copy (
        _tao_any,
        DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor,
        DsLogNotification::_tc_ProcessingErrorAlarm,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DsLogNotification::ProcessingErrorAlarm *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DsLogNotification::ProcessingErrorAlarm>::insert (
      _tao_any,
      DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor,
      DsLogNotification::_tc_ProcessingErrorAlarm,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DsLogNotification::ProcessingErrorAlarm *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DsLogNotification::ProcessingErrorAlarm *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DsLogNotification::ProcessingErrorAlarm *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DsLogNotification::ProcessingErrorAlarm>::extract (
        _tao_any,
        DsLogNotification::ProcessingErrorAlarm::_tao_any_destructor,
        DsLogNotification::_tc_ProcessingErrorAlarm,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogNotification::ThresholdAlarm &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.logref.in (),
        strm
      ) &&
    (strm << _tao_aggregate.id) &&
    (strm << _tao_aggregate.time) &&
    (strm << _tao_aggregate.crossed_value) &&
    (strm << _tao_aggregate.observed_value) &&
    (strm << _tao_aggregate.perceived_severity);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogNotification::ThresholdAlarm &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.logref.out ()) &&
    (strm >> _tao_aggregate.id) &&
    (strm >> _tao_aggregate.time) &&
    (strm >> _tao_aggregate.crossed_value) &&
    (strm >> _tao_aggregate.observed_value) &&
    (strm >> _tao_aggregate.perceived_severity);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogNotification::ObjectCreation &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id) &&
    (strm << _tao_aggregate.time);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogNotification::ObjectCreation &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id) &&
    (strm >> _tao_aggregate.time);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogNotification::ObjectDeletion &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id) &&
    (strm << _tao_aggregate.time);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogNotification::ObjectDeletion &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id) &&
    (strm >> _tao_aggregate.time);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogNotification::AttributeValueChange &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.logref.in (),
        strm
      ) &&
    (strm << _tao_aggregate.id) &&
    (strm << _tao_aggregate.time) &&
    (strm << _tao_aggregate.type) &&
    (strm << _tao_aggregate.old_value) &&
    (strm << _tao_aggregate.new_value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogNotification::AttributeValueChange &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.logref.out ()) &&
    (strm >> _tao_aggregate.id) &&
    (strm >> _tao_aggregate.time) &&
    (strm >> _tao_aggregate.type) &&
    (strm >> _tao_aggregate.old_value) &&
    (strm >> _tao_aggregate.new_value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogNotification::StateChange &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.logref.in (),
        strm
      ) &&
    (strm << _tao_aggregate.id) &&
    (strm << _tao_aggregate.time) &&
    (strm << _tao_aggregate.type) &&
    (strm << _tao_aggregate.new_value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogNotification::StateChange &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.logref.out ()) &&
    (strm >> _tao_aggregate.id) &&
    (strm >> _tao_aggregate.time) &&
    (strm >> _tao_aggregate.type) &&
    (strm >> _tao_aggregate.new_value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogNotification::ProcessingErrorAlarm &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.error_num) &&
    (strm << _tao_aggregate.error_string.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogNotification::ProcessingErrorAlarm &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.error_num) &&
    (strm >> _tao_aggregate.error_string.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


