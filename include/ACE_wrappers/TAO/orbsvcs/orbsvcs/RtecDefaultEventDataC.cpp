// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "RtecDefaultEventDataC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "RtecDefaultEventDataC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_EventPayload (
    ::CORBA::tk_alias,
    "IDL:EventPayload:1.0",
    "EventPayload",
    &CORBA::_tc_OctetSeq);
  
::CORBA::TypeCode_ptr const _tc_EventPayload =
  &_tao_tc_EventPayload;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecEventData[] =
      {
        { "pad1", &CORBA::_tc_long },
        { "payload", &_tc_EventPayload },
        { "any_value", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventData (
  ::CORBA::tk_struct,
  "IDL:RtecEventData:1.0",
  "RtecEventData",
  _tao_fields_RtecEventData,
  3);

::CORBA::TypeCode_ptr const _tc_RtecEventData =
  &_tao_tc_RtecEventData;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecEventData::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RtecEventData *_tao_tmp_pointer =
    static_cast<RtecEventData *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventData &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventData *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventData>::insert_copy (
        _tao_any,
        RtecEventData::_tao_any_destructor,
        _tc_RtecEventData,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventData *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventData>::insert (
      _tao_any,
      RtecEventData::_tao_any_destructor,
      _tc_RtecEventData,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventData *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventData *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventData *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventData>::extract (
        _tao_any,
        RtecEventData::_tao_any_destructor,
        _tc_RtecEventData,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventData &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.pad1) &&
    (strm << _tao_aggregate.payload) &&
    (strm << _tao_aggregate.any_value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventData &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.pad1) &&
    (strm >> _tao_aggregate.payload) &&
    (strm >> _tao_aggregate.any_value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


