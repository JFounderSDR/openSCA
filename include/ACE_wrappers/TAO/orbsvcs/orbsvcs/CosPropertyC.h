// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_COSPROPERTYC_VHINUJ_H_
#define _TAO_IDL_COSPROPERTYC_VHINUJ_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Property/property_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/OctetSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/PolicyC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/orb_typesC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Property_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace CosPropertyService
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * PropertyName;
  typedef ::CORBA::String_var PropertyName_var;
  typedef ::CORBA::String_out PropertyName_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyName;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Property;

  typedef
    ::TAO_Var_Var_T<
        Property
      >
    Property_var;
  
  typedef
    ::TAO_Out_T<
        Property
      >
    Property_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Property_Export Property
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Property_var _var_type;
    typedef Property_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager property_name;
    ::CORBA::Any property_value;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_Property;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum PropertyModeType
  {
    normal,
    read_only,
    fixed_normal,
    fixed_readonly,
    undefined
  };

  typedef PropertyModeType &PropertyModeType_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyModeType;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct PropertyDef;

  typedef
    ::TAO_Var_Var_T<
        PropertyDef
      >
    PropertyDef_var;
  
  typedef
    ::TAO_Out_T<
        PropertyDef
      >
    PropertyDef_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Property_Export PropertyDef
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyDef_var _var_type;
    typedef PropertyDef_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager property_name;
    ::CORBA::Any property_value;
    CosPropertyService::PropertyModeType property_mode;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyDef;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct PropertyMode;

  typedef
    ::TAO_Var_Var_T<
        PropertyMode
      >
    PropertyMode_var;
  
  typedef
    ::TAO_Out_T<
        PropertyMode
      >
    PropertyMode_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Property_Export PropertyMode
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyMode_var _var_type;
    typedef PropertyMode_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager property_name;
    CosPropertyService::PropertyModeType property_mode;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyMode;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSPROPERTYSERVICE_PROPERTYNAMES_CH_)
#define _COSPROPERTYSERVICE_PROPERTYNAMES_CH_

  class PropertyNames;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertyNames
      >
    PropertyNames_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertyNames
      >
    PropertyNames_out;

  class TAO_Property_Export PropertyNames
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    PropertyNames (void);
    PropertyNames ( ::CORBA::ULong max);
    PropertyNames (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer, 
      ::CORBA::Boolean release = false);
    PropertyNames (const PropertyNames &);
    virtual ~PropertyNames (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyNames_var _var_type;
    typedef PropertyNames_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyNames;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSPROPERTYSERVICE_PROPERTIES_CH_)
#define _COSPROPERTYSERVICE_PROPERTIES_CH_

  class Properties;

  typedef
    ::TAO_VarSeq_Var_T<
        Properties
      >
    Properties_var;

  typedef
    ::TAO_Seq_Out_T<
        Properties
      >
    Properties_out;

  class TAO_Property_Export Properties
    : public
        ::TAO::unbounded_value_sequence<
            Property
          >
  {
  public:
    Properties (void);
    Properties ( ::CORBA::ULong max);
    Properties (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Property* buffer, 
      ::CORBA::Boolean release = false);
    Properties (const Properties &);
    virtual ~Properties (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Properties_var _var_type;
    typedef Properties_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_Properties;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSPROPERTYSERVICE_PROPERTYDEFS_CH_)
#define _COSPROPERTYSERVICE_PROPERTYDEFS_CH_

  class PropertyDefs;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertyDefs
      >
    PropertyDefs_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertyDefs
      >
    PropertyDefs_out;

  class TAO_Property_Export PropertyDefs
    : public
        ::TAO::unbounded_value_sequence<
            PropertyDef
          >
  {
  public:
    PropertyDefs (void);
    PropertyDefs ( ::CORBA::ULong max);
    PropertyDefs (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PropertyDef* buffer, 
      ::CORBA::Boolean release = false);
    PropertyDefs (const PropertyDefs &);
    virtual ~PropertyDefs (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyDefs_var _var_type;
    typedef PropertyDefs_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyDefs;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSPROPERTYSERVICE_PROPERTYMODES_CH_)
#define _COSPROPERTYSERVICE_PROPERTYMODES_CH_

  class PropertyModes;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertyModes
      >
    PropertyModes_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertyModes
      >
    PropertyModes_out;

  class TAO_Property_Export PropertyModes
    : public
        ::TAO::unbounded_value_sequence<
            PropertyMode
          >
  {
  public:
    PropertyModes (void);
    PropertyModes ( ::CORBA::ULong max);
    PropertyModes (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PropertyMode* buffer, 
      ::CORBA::Boolean release = false);
    PropertyModes (const PropertyModes &);
    virtual ~PropertyModes (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyModes_var _var_type;
    typedef PropertyModes_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyModes;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSPROPERTYSERVICE_PROPERTYTYPES_CH_)
#define _COSPROPERTYSERVICE_PROPERTYTYPES_CH_

  class PropertyTypes;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertyTypes
      >
    PropertyTypes_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertyTypes
      >
    PropertyTypes_out;

  class TAO_Property_Export PropertyTypes
    : public
        ::TAO::unbounded_object_reference_sequence<
            ::CORBA::TypeCode,
            ::CORBA::TypeCode_var
          >
  {
  public:
    PropertyTypes (void);
    PropertyTypes ( ::CORBA::ULong max);
    PropertyTypes (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::TypeCode_ptr* buffer, 
      ::CORBA::Boolean release = false);
    PropertyTypes (const PropertyTypes &);
    virtual ~PropertyTypes (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyTypes_var _var_type;
    typedef PropertyTypes_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyTypes;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSPROPERTYSERVICE_PROPERTYNAMESITERATOR__VAR_OUT_CH_)
#define _COSPROPERTYSERVICE_PROPERTYNAMESITERATOR__VAR_OUT_CH_

  class PropertyNamesIterator;
  typedef PropertyNamesIterator *PropertyNamesIterator_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertyNamesIterator
      >
    PropertyNamesIterator_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertyNamesIterator
      >
    PropertyNamesIterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSPROPERTYSERVICE_PROPERTIESITERATOR__VAR_OUT_CH_)
#define _COSPROPERTYSERVICE_PROPERTIESITERATOR__VAR_OUT_CH_

  class PropertiesIterator;
  typedef PropertiesIterator *PropertiesIterator_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertiesIterator
      >
    PropertiesIterator_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertiesIterator
      >
    PropertiesIterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETFACTORY__VAR_OUT_CH_)
#define _COSPROPERTYSERVICE_PROPERTYSETFACTORY__VAR_OUT_CH_

  class PropertySetFactory;
  typedef PropertySetFactory *PropertySetFactory_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertySetFactory
      >
    PropertySetFactory_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertySetFactory
      >
    PropertySetFactory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETDEF__VAR_OUT_CH_)
#define _COSPROPERTYSERVICE_PROPERTYSETDEF__VAR_OUT_CH_

  class PropertySetDef;
  typedef PropertySetDef *PropertySetDef_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertySetDef
      >
    PropertySetDef_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertySetDef
      >
    PropertySetDef_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSPROPERTYSERVICE_PROPERTYSET__VAR_OUT_CH_)
#define _COSPROPERTYSERVICE_PROPERTYSET__VAR_OUT_CH_

  class PropertySet;
  typedef PropertySet *PropertySet_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertySet
      >
    PropertySet_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertySet
      >
    PropertySet_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export ConstraintNotSupported : public ::CORBA::UserException
  {
  public:
    
    ConstraintNotSupported (void);
    ConstraintNotSupported (const ConstraintNotSupported &);
    ~ConstraintNotSupported (void);

    ConstraintNotSupported &operator= (const ConstraintNotSupported &);

    static void _tao_any_destructor (void *);

    static ConstraintNotSupported *_downcast ( ::CORBA::Exception *);
    static const ConstraintNotSupported *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_ConstraintNotSupported;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export InvalidPropertyName : public ::CORBA::UserException
  {
  public:
    
    InvalidPropertyName (void);
    InvalidPropertyName (const InvalidPropertyName &);
    ~InvalidPropertyName (void);

    InvalidPropertyName &operator= (const InvalidPropertyName &);

    static void _tao_any_destructor (void *);

    static InvalidPropertyName *_downcast ( ::CORBA::Exception *);
    static const InvalidPropertyName *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_InvalidPropertyName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export ConflictingProperty : public ::CORBA::UserException
  {
  public:
    
    ConflictingProperty (void);
    ConflictingProperty (const ConflictingProperty &);
    ~ConflictingProperty (void);

    ConflictingProperty &operator= (const ConflictingProperty &);

    static void _tao_any_destructor (void *);

    static ConflictingProperty *_downcast ( ::CORBA::Exception *);
    static const ConflictingProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_ConflictingProperty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export PropertyNotFound : public ::CORBA::UserException
  {
  public:
    
    PropertyNotFound (void);
    PropertyNotFound (const PropertyNotFound &);
    ~PropertyNotFound (void);

    PropertyNotFound &operator= (const PropertyNotFound &);

    static void _tao_any_destructor (void *);

    static PropertyNotFound *_downcast ( ::CORBA::Exception *);
    static const PropertyNotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyNotFound;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export UnsupportedTypeCode : public ::CORBA::UserException
  {
  public:
    
    UnsupportedTypeCode (void);
    UnsupportedTypeCode (const UnsupportedTypeCode &);
    ~UnsupportedTypeCode (void);

    UnsupportedTypeCode &operator= (const UnsupportedTypeCode &);

    static void _tao_any_destructor (void *);

    static UnsupportedTypeCode *_downcast ( ::CORBA::Exception *);
    static const UnsupportedTypeCode *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_UnsupportedTypeCode;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export UnsupportedProperty : public ::CORBA::UserException
  {
  public:
    
    UnsupportedProperty (void);
    UnsupportedProperty (const UnsupportedProperty &);
    ~UnsupportedProperty (void);

    UnsupportedProperty &operator= (const UnsupportedProperty &);

    static void _tao_any_destructor (void *);

    static UnsupportedProperty *_downcast ( ::CORBA::Exception *);
    static const UnsupportedProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_UnsupportedProperty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export UnsupportedMode : public ::CORBA::UserException
  {
  public:
    
    UnsupportedMode (void);
    UnsupportedMode (const UnsupportedMode &);
    ~UnsupportedMode (void);

    UnsupportedMode &operator= (const UnsupportedMode &);

    static void _tao_any_destructor (void *);

    static UnsupportedMode *_downcast ( ::CORBA::Exception *);
    static const UnsupportedMode *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_UnsupportedMode;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export FixedProperty : public ::CORBA::UserException
  {
  public:
    
    FixedProperty (void);
    FixedProperty (const FixedProperty &);
    ~FixedProperty (void);

    FixedProperty &operator= (const FixedProperty &);

    static void _tao_any_destructor (void *);

    static FixedProperty *_downcast ( ::CORBA::Exception *);
    static const FixedProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_FixedProperty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export ReadOnlyProperty : public ::CORBA::UserException
  {
  public:
    
    ReadOnlyProperty (void);
    ReadOnlyProperty (const ReadOnlyProperty &);
    ~ReadOnlyProperty (void);

    ReadOnlyProperty &operator= (const ReadOnlyProperty &);

    static void _tao_any_destructor (void *);

    static ReadOnlyProperty *_downcast ( ::CORBA::Exception *);
    static const ReadOnlyProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_ReadOnlyProperty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum ExceptionReason
  {
    invalid_property_name,
    conflicting_property,
    property_not_found,
    unsupported_type_code,
    unsupported_property,
    unsupported_mode,
    fixed_property,
    read_only_property
  };

  typedef ExceptionReason &ExceptionReason_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_ExceptionReason;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct PropertyException;

  typedef
    ::TAO_Var_Var_T<
        PropertyException
      >
    PropertyException_var;
  
  typedef
    ::TAO_Out_T<
        PropertyException
      >
    PropertyException_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Property_Export PropertyException
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyException_var _var_type;
    typedef PropertyException_out _out_type;

    static void _tao_any_destructor (void *);
    
    CosPropertyService::ExceptionReason reason;
    ::TAO::String_Manager failing_property_name;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyException;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSPROPERTYSERVICE_PROPERTYEXCEPTIONS_CH_)
#define _COSPROPERTYSERVICE_PROPERTYEXCEPTIONS_CH_

  class PropertyExceptions;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertyExceptions
      >
    PropertyExceptions_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertyExceptions
      >
    PropertyExceptions_out;

  class TAO_Property_Export PropertyExceptions
    : public
        ::TAO::unbounded_value_sequence<
            PropertyException
          >
  {
  public:
    PropertyExceptions (void);
    PropertyExceptions ( ::CORBA::ULong max);
    PropertyExceptions (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PropertyException* buffer, 
      ::CORBA::Boolean release = false);
    PropertyExceptions (const PropertyExceptions &);
    virtual ~PropertyExceptions (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyExceptions_var _var_type;
    typedef PropertyExceptions_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyExceptions;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Property_Export MultipleExceptions : public ::CORBA::UserException
  {
  public:
    
    CosPropertyService::PropertyExceptions exceptions;
    MultipleExceptions (void);
    MultipleExceptions (const MultipleExceptions &);
    ~MultipleExceptions (void);

    MultipleExceptions &operator= (const MultipleExceptions &);

    static void _tao_any_destructor (void *);

    static MultipleExceptions *_downcast ( ::CORBA::Exception *);
    static const MultipleExceptions *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    MultipleExceptions (
        const CosPropertyService::PropertyExceptions & _tao_exceptions);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_MultipleExceptions;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Property_Export PropertySetFactory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PropertySetFactory>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertySetFactory_ptr _ptr_type;
    typedef PropertySetFactory_var _var_type;
    typedef PropertySetFactory_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertySetFactory_ptr _duplicate (PropertySetFactory_ptr obj);

    static void _tao_release (PropertySetFactory_ptr obj);

    static PropertySetFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertySetFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertySetFactory_ptr _nil (void);

    virtual ::CosPropertyService::PropertySet_ptr create_propertyset (
      void);

    virtual ::CosPropertyService::PropertySet_ptr create_constrained_propertyset (
      const ::CosPropertyService::PropertyTypes & allowed_property_types,
      const ::CosPropertyService::Properties & allowed_properties);

    virtual ::CosPropertyService::PropertySet_ptr create_initial_propertyset (
      const ::CosPropertyService::Properties & initial_properties);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertySetFactory_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertySetFactory (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosPropertyService_PropertySetFactory_setup_collocation (void);

    // Concrete non-local interface only.
    PropertySetFactory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertySetFactory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertySetFactory (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertySetFactory (const PropertySetFactory &);

    void operator= (const PropertySetFactory &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertySetFactory;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETDEFFACTORY__VAR_OUT_CH_)
#define _COSPROPERTYSERVICE_PROPERTYSETDEFFACTORY__VAR_OUT_CH_

  class PropertySetDefFactory;
  typedef PropertySetDefFactory *PropertySetDefFactory_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertySetDefFactory
      >
    PropertySetDefFactory_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertySetDefFactory
      >
    PropertySetDefFactory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Property_Export PropertySetDefFactory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PropertySetDefFactory>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertySetDefFactory_ptr _ptr_type;
    typedef PropertySetDefFactory_var _var_type;
    typedef PropertySetDefFactory_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertySetDefFactory_ptr _duplicate (PropertySetDefFactory_ptr obj);

    static void _tao_release (PropertySetDefFactory_ptr obj);

    static PropertySetDefFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertySetDefFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertySetDefFactory_ptr _nil (void);

    virtual ::CosPropertyService::PropertySetDef_ptr create_propertysetdef (
      void);

    virtual ::CosPropertyService::PropertySetDef_ptr create_constrained_propertysetdef (
      const ::CosPropertyService::PropertyTypes & allowed_property_types,
      const ::CosPropertyService::PropertyDefs & allowed_property_defs);

    virtual ::CosPropertyService::PropertySetDef_ptr create_initial_propertysetdef (
      const ::CosPropertyService::PropertyDefs & initial_property_defs);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertySetDefFactory_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertySetDefFactory (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosPropertyService_PropertySetDefFactory_setup_collocation (void);

    // Concrete non-local interface only.
    PropertySetDefFactory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertySetDefFactory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertySetDefFactory (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertySetDefFactory (const PropertySetDefFactory &);

    void operator= (const PropertySetDefFactory &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertySetDefFactory;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Property_Export PropertySet
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PropertySet>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertySet_ptr _ptr_type;
    typedef PropertySet_var _var_type;
    typedef PropertySet_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertySet_ptr _duplicate (PropertySet_ptr obj);

    static void _tao_release (PropertySet_ptr obj);

    static PropertySet_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertySet_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertySet_ptr _nil (void);

    virtual void define_property (
      const char * property_name,
      const ::CORBA::Any & property_value);

    virtual void define_properties (
      const ::CosPropertyService::Properties & nproperties);

    virtual ::CORBA::ULong get_number_of_properties (
      void);

    virtual void get_all_property_names (
      ::CORBA::ULong how_many,
      ::CosPropertyService::PropertyNames_out property_names,
      ::CosPropertyService::PropertyNamesIterator_out rest);

    virtual ::CORBA::Any * get_property_value (
      const char * property_name);

    virtual ::CORBA::Boolean get_properties (
      const ::CosPropertyService::PropertyNames & property_names,
      ::CosPropertyService::Properties_out nproperties);

    virtual void get_all_properties (
      ::CORBA::ULong how_many,
      ::CosPropertyService::Properties_out nproperties,
      ::CosPropertyService::PropertiesIterator_out rest);

    virtual void delete_property (
      const char * property_name);

    virtual void delete_properties (
      const ::CosPropertyService::PropertyNames & property_names);

    virtual ::CORBA::Boolean delete_all_properties (
      void);

    virtual ::CORBA::Boolean is_property_defined (
      const char * property_name);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertySet_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertySet (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosPropertyService_PropertySet_setup_collocation (void);

    // Concrete non-local interface only.
    PropertySet (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertySet (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertySet (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertySet (const PropertySet &);

    void operator= (const PropertySet &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertySet;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Property_Export PropertySetDef
    : public virtual ::CosPropertyService::PropertySet
  
  {
  public:
    friend class TAO::Narrow_Utils<PropertySetDef>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertySetDef_ptr _ptr_type;
    typedef PropertySetDef_var _var_type;
    typedef PropertySetDef_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertySetDef_ptr _duplicate (PropertySetDef_ptr obj);

    static void _tao_release (PropertySetDef_ptr obj);

    static PropertySetDef_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertySetDef_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertySetDef_ptr _nil (void);

    virtual void get_allowed_property_types (
      ::CosPropertyService::PropertyTypes_out property_types);

    virtual void get_allowed_properties (
      ::CosPropertyService::PropertyDefs_out property_defs);

    virtual void define_property_with_mode (
      const char * property_name,
      const ::CORBA::Any & property_value,
      ::CosPropertyService::PropertyModeType property_mode);

    virtual void define_properties_with_modes (
      const ::CosPropertyService::PropertyDefs & property_defs);

    virtual ::CosPropertyService::PropertyModeType get_property_mode (
      const char * property_name);

    virtual ::CORBA::Boolean get_property_modes (
      const ::CosPropertyService::PropertyNames & property_names,
      ::CosPropertyService::PropertyModes_out property_modes);

    virtual void set_property_mode (
      const char * property_name,
      ::CosPropertyService::PropertyModeType property_mode);

    virtual void set_property_modes (
      const ::CosPropertyService::PropertyModes & property_modes);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertySetDef_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertySetDef (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosPropertyService_PropertySetDef_setup_collocation (void);

    // Concrete non-local interface only.
    PropertySetDef (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertySetDef (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertySetDef (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertySetDef (const PropertySetDef &);

    void operator= (const PropertySetDef &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertySetDef;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Property_Export PropertyNamesIterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PropertyNamesIterator>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyNamesIterator_ptr _ptr_type;
    typedef PropertyNamesIterator_var _var_type;
    typedef PropertyNamesIterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertyNamesIterator_ptr _duplicate (PropertyNamesIterator_ptr obj);

    static void _tao_release (PropertyNamesIterator_ptr obj);

    static PropertyNamesIterator_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertyNamesIterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertyNamesIterator_ptr _nil (void);

    virtual void reset (
      void);

    virtual ::CORBA::Boolean next_one (
      ::CORBA::String_out property_name);

    virtual ::CORBA::Boolean next_n (
      ::CORBA::ULong how_many,
      ::CosPropertyService::PropertyNames_out property_names);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertyNamesIterator_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertyNamesIterator (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosPropertyService_PropertyNamesIterator_setup_collocation (void);

    // Concrete non-local interface only.
    PropertyNamesIterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertyNamesIterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertyNamesIterator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertyNamesIterator (const PropertyNamesIterator &);

    void operator= (const PropertyNamesIterator &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertyNamesIterator;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Property_Export PropertiesIterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PropertiesIterator>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertiesIterator_ptr _ptr_type;
    typedef PropertiesIterator_var _var_type;
    typedef PropertiesIterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertiesIterator_ptr _duplicate (PropertiesIterator_ptr obj);

    static void _tao_release (PropertiesIterator_ptr obj);

    static PropertiesIterator_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertiesIterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertiesIterator_ptr _nil (void);

    virtual void reset (
      void);

    virtual ::CORBA::Boolean next_one (
      ::CosPropertyService::Property_out aproperty);

    virtual ::CORBA::Boolean next_n (
      ::CORBA::ULong how_many,
      ::CosPropertyService::Properties_out nproperties);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertiesIterator_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertiesIterator (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosPropertyService_PropertiesIterator_setup_collocation (void);

    // Concrete non-local interface only.
    PropertiesIterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertiesIterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertiesIterator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertiesIterator (const PropertiesIterator &);

    void operator= (const PropertiesIterator &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Property_Export ::CORBA::TypeCode_ptr const _tc_PropertiesIterator;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module CosPropertyService

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosPropertyService::Property>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::Property,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyModeType>
    : public
        Basic_Arg_Traits_T<
            ::CosPropertyService::PropertyModeType,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyDef>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyDef,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyMode>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyMode,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyNames>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyNames,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosPropertyService::Properties>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::Properties,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyDefs>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyDefs,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyModes>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyModes,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyTypes>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyTypes,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSPROPERTYSERVICE_PROPERTYNAMESITERATOR__ARG_TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYNAMESITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosPropertyService::PropertyNamesIterator>
    : public
        Object_Arg_Traits_T<
            ::CosPropertyService::PropertyNamesIterator_ptr,
            ::CosPropertyService::PropertyNamesIterator_var,
            ::CosPropertyService::PropertyNamesIterator_out,
            TAO::Objref_Traits<CosPropertyService::PropertyNamesIterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSPROPERTYSERVICE_PROPERTIESITERATOR__ARG_TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTIESITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosPropertyService::PropertiesIterator>
    : public
        Object_Arg_Traits_T<
            ::CosPropertyService::PropertiesIterator_ptr,
            ::CosPropertyService::PropertiesIterator_var,
            ::CosPropertyService::PropertiesIterator_out,
            TAO::Objref_Traits<CosPropertyService::PropertiesIterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETFACTORY__ARG_TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSETFACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosPropertyService::PropertySetFactory>
    : public
        Object_Arg_Traits_T<
            ::CosPropertyService::PropertySetFactory_ptr,
            ::CosPropertyService::PropertySetFactory_var,
            ::CosPropertyService::PropertySetFactory_out,
            TAO::Objref_Traits<CosPropertyService::PropertySetFactory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETDEF__ARG_TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSETDEF__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosPropertyService::PropertySetDef>
    : public
        Object_Arg_Traits_T<
            ::CosPropertyService::PropertySetDef_ptr,
            ::CosPropertyService::PropertySetDef_var,
            ::CosPropertyService::PropertySetDef_out,
            TAO::Objref_Traits<CosPropertyService::PropertySetDef>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSPROPERTYSERVICE_PROPERTYSET__ARG_TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSET__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosPropertyService::PropertySet>
    : public
        Object_Arg_Traits_T<
            ::CosPropertyService::PropertySet_ptr,
            ::CosPropertyService::PropertySet_var,
            ::CosPropertyService::PropertySet_out,
            TAO::Objref_Traits<CosPropertyService::PropertySet>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::CosPropertyService::ExceptionReason>
    : public
        Basic_Arg_Traits_T<
            ::CosPropertyService::ExceptionReason,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyException>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyException,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosPropertyService::PropertyExceptions>
    : public
        Var_Size_Arg_Traits_T<
            ::CosPropertyService::PropertyExceptions,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETDEFFACTORY__ARG_TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSETDEFFACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosPropertyService::PropertySetDefFactory>
    : public
        Object_Arg_Traits_T<
            ::CosPropertyService::PropertySetDefFactory_ptr,
            ::CosPropertyService::PropertySetDefFactory_var,
            ::CosPropertyService::PropertySetDefFactory_out,
            TAO::Objref_Traits<CosPropertyService::PropertySetDefFactory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_Property_Export
TAO::Collocation_Proxy_Broker *
(*CosPropertyService__TAO_PropertySetFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Property_Export
TAO::Collocation_Proxy_Broker *
(*CosPropertyService__TAO_PropertySetDefFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Property_Export
TAO::Collocation_Proxy_Broker *
(*CosPropertyService__TAO_PropertySet_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Property_Export
TAO::Collocation_Proxy_Broker *
(*CosPropertyService__TAO_PropertySetDef_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Property_Export
TAO::Collocation_Proxy_Broker *
(*CosPropertyService__TAO_PropertyNamesIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Property_Export
TAO::Collocation_Proxy_Broker *
(*CosPropertyService__TAO_PropertiesIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETFACTORY__TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSETFACTORY__TRAITS_

  template<>
  struct TAO_Property_Export Objref_Traits< ::CosPropertyService::PropertySetFactory>
  {
    static ::CosPropertyService::PropertySetFactory_ptr duplicate (
        ::CosPropertyService::PropertySetFactory_ptr p);
    static void release (
        ::CosPropertyService::PropertySetFactory_ptr p);
    static ::CosPropertyService::PropertySetFactory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosPropertyService::PropertySetFactory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETDEFFACTORY__TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSETDEFFACTORY__TRAITS_

  template<>
  struct TAO_Property_Export Objref_Traits< ::CosPropertyService::PropertySetDefFactory>
  {
    static ::CosPropertyService::PropertySetDefFactory_ptr duplicate (
        ::CosPropertyService::PropertySetDefFactory_ptr p);
    static void release (
        ::CosPropertyService::PropertySetDefFactory_ptr p);
    static ::CosPropertyService::PropertySetDefFactory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosPropertyService::PropertySetDefFactory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSPROPERTYSERVICE_PROPERTYSET__TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSET__TRAITS_

  template<>
  struct TAO_Property_Export Objref_Traits< ::CosPropertyService::PropertySet>
  {
    static ::CosPropertyService::PropertySet_ptr duplicate (
        ::CosPropertyService::PropertySet_ptr p);
    static void release (
        ::CosPropertyService::PropertySet_ptr p);
    static ::CosPropertyService::PropertySet_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosPropertyService::PropertySet_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSPROPERTYSERVICE_PROPERTYSETDEF__TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYSETDEF__TRAITS_

  template<>
  struct TAO_Property_Export Objref_Traits< ::CosPropertyService::PropertySetDef>
  {
    static ::CosPropertyService::PropertySetDef_ptr duplicate (
        ::CosPropertyService::PropertySetDef_ptr p);
    static void release (
        ::CosPropertyService::PropertySetDef_ptr p);
    static ::CosPropertyService::PropertySetDef_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosPropertyService::PropertySetDef_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSPROPERTYSERVICE_PROPERTYNAMESITERATOR__TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTYNAMESITERATOR__TRAITS_

  template<>
  struct TAO_Property_Export Objref_Traits< ::CosPropertyService::PropertyNamesIterator>
  {
    static ::CosPropertyService::PropertyNamesIterator_ptr duplicate (
        ::CosPropertyService::PropertyNamesIterator_ptr p);
    static void release (
        ::CosPropertyService::PropertyNamesIterator_ptr p);
    static ::CosPropertyService::PropertyNamesIterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosPropertyService::PropertyNamesIterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSPROPERTYSERVICE_PROPERTIESITERATOR__TRAITS_)
#define _COSPROPERTYSERVICE_PROPERTIESITERATOR__TRAITS_

  template<>
  struct TAO_Property_Export Objref_Traits< ::CosPropertyService::PropertiesIterator>
  {
    static ::CosPropertyService::PropertiesIterator_ptr duplicate (
        ::CosPropertyService::PropertiesIterator_ptr p);
    static void release (
        ::CosPropertyService::PropertiesIterator_ptr p);
    static ::CosPropertyService::PropertiesIterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosPropertyService::PropertiesIterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::Property &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::Property*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::Property *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::Property *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::Property &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::Property*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::Property *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::Property *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::PropertyModeType);
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyModeType &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyModeType);
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyModeType &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::PropertyDef &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::PropertyDef*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyDef *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyDef *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::PropertyDef &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyDef*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyDef *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyDef *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::PropertyMode &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::PropertyMode*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyMode *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyMode *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::PropertyMode &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyMode*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyMode *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyMode *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, const ::CosPropertyService::PropertyNames &); // copying version
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, ::CosPropertyService::PropertyNames*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyNames *&); // deprecated
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyNames *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= ( ::CORBA::Any &, const CosPropertyService::PropertyNames &); // copying version
TAO_Property_Export void operator<<= ( ::CORBA::Any &, CosPropertyService::PropertyNames*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyNames *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyNames *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, const ::CosPropertyService::Properties &); // copying version
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, ::CosPropertyService::Properties*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::Properties *&); // deprecated
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::Properties *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= ( ::CORBA::Any &, const CosPropertyService::Properties &); // copying version
TAO_Property_Export void operator<<= ( ::CORBA::Any &, CosPropertyService::Properties*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::Properties *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::Properties *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, const ::CosPropertyService::PropertyDefs &); // copying version
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, ::CosPropertyService::PropertyDefs*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyDefs *&); // deprecated
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyDefs *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= ( ::CORBA::Any &, const CosPropertyService::PropertyDefs &); // copying version
TAO_Property_Export void operator<<= ( ::CORBA::Any &, CosPropertyService::PropertyDefs*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyDefs *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyDefs *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, const ::CosPropertyService::PropertyModes &); // copying version
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, ::CosPropertyService::PropertyModes*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyModes *&); // deprecated
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyModes *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= ( ::CORBA::Any &, const CosPropertyService::PropertyModes &); // copying version
TAO_Property_Export void operator<<= ( ::CORBA::Any &, CosPropertyService::PropertyModes*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyModes *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyModes *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, const ::CosPropertyService::PropertyTypes &); // copying version
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, ::CosPropertyService::PropertyTypes*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyTypes *&); // deprecated
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyTypes *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= ( ::CORBA::Any &, const CosPropertyService::PropertyTypes &); // copying version
TAO_Property_Export void operator<<= ( ::CORBA::Any &, CosPropertyService::PropertyTypes*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyTypes *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyTypes *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::ConstraintNotSupported &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::ConstraintNotSupported*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::ConstraintNotSupported *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::ConstraintNotSupported *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::ConstraintNotSupported &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::ConstraintNotSupported*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::ConstraintNotSupported *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::ConstraintNotSupported *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::InvalidPropertyName &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::InvalidPropertyName*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::InvalidPropertyName *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::InvalidPropertyName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::InvalidPropertyName &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::InvalidPropertyName*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::InvalidPropertyName *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::InvalidPropertyName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::ConflictingProperty &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::ConflictingProperty*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::ConflictingProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::ConflictingProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::ConflictingProperty &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::ConflictingProperty*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::ConflictingProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::ConflictingProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::PropertyNotFound &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::PropertyNotFound*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyNotFound *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::PropertyNotFound &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyNotFound*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyNotFound *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::UnsupportedTypeCode &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::UnsupportedTypeCode*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::UnsupportedTypeCode *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::UnsupportedTypeCode *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::UnsupportedTypeCode &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::UnsupportedTypeCode*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::UnsupportedTypeCode *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::UnsupportedTypeCode *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::UnsupportedProperty &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::UnsupportedProperty*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::UnsupportedProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::UnsupportedProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::UnsupportedProperty &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::UnsupportedProperty*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::UnsupportedProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::UnsupportedProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::UnsupportedMode &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::UnsupportedMode*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::UnsupportedMode *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::UnsupportedMode *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::UnsupportedMode &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::UnsupportedMode*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::UnsupportedMode *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::UnsupportedMode *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::FixedProperty &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::FixedProperty*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::FixedProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::FixedProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::FixedProperty &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::FixedProperty*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::FixedProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::FixedProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::ReadOnlyProperty &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::ReadOnlyProperty*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::ReadOnlyProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::ReadOnlyProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::ReadOnlyProperty &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::ReadOnlyProperty*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::ReadOnlyProperty *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::ReadOnlyProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::ExceptionReason);
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::ExceptionReason &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::ExceptionReason);
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::ExceptionReason &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::PropertyException &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::PropertyException*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyException *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyException *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::PropertyException &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyException*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyException *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyException *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, const ::CosPropertyService::PropertyExceptions &); // copying version
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, ::CosPropertyService::PropertyExceptions*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::PropertyExceptions *&); // deprecated
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::PropertyExceptions *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= ( ::CORBA::Any &, const CosPropertyService::PropertyExceptions &); // copying version
TAO_Property_Export void operator<<= ( ::CORBA::Any &, CosPropertyService::PropertyExceptions*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyExceptions *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::PropertyExceptions *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  

  TAO_Property_Export void operator<<= (::CORBA::Any &, const ::CosPropertyService::MultipleExceptions &); // copying version
  TAO_Property_Export void operator<<= (::CORBA::Any &, ::CosPropertyService::MultipleExceptions*); // noncopying version
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosPropertyService::MultipleExceptions *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosPropertyService::MultipleExceptions *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export void operator<<= (::CORBA::Any &, const CosPropertyService::MultipleExceptions &); // copying version
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::MultipleExceptions*); // noncopying version
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::MultipleExceptions *&); // deprecated
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosPropertyService::MultipleExceptions *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySetFactory_ptr); // copying
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySetFactory_ptr *); // non-copying
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertySetFactory_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySetFactory_ptr); // copying
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySetFactory_ptr *); // non-copying
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertySetFactory_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySetDefFactory_ptr); // copying
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySetDefFactory_ptr *); // non-copying
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertySetDefFactory_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySetDefFactory_ptr); // copying
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySetDefFactory_ptr *); // non-copying
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertySetDefFactory_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySet_ptr); // copying
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySet_ptr *); // non-copying
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertySet_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySet_ptr); // copying
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySet_ptr *); // non-copying
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertySet_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySetDef_ptr); // copying
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertySetDef_ptr *); // non-copying
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertySetDef_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySetDef_ptr); // copying
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertySetDef_ptr *); // non-copying
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertySetDef_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertyNamesIterator_ptr); // copying
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertyNamesIterator_ptr *); // non-copying
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertyNamesIterator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyNamesIterator_ptr); // copying
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertyNamesIterator_ptr *); // non-copying
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertyNamesIterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosPropertyService
{
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertiesIterator_ptr); // copying
  TAO_Property_Export void operator<<= ( ::CORBA::Any &, PropertiesIterator_ptr *); // non-copying
  TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertiesIterator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertiesIterator_ptr); // copying
TAO_Property_Export void operator<<= (::CORBA::Any &, CosPropertyService::PropertiesIterator_ptr *); // non-copying
TAO_Property_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosPropertyService::PropertiesIterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::Property &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::Property &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosPropertyService::PropertyModeType _tao_enumerator);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosPropertyService::PropertyModeType &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertyDef &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertyDef &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertyMode &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertyMode &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosPropertyService_PropertyNames_H_
#define _TAO_CDR_OP_CosPropertyService_PropertyNames_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Property_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyNames &_tao_sequence);
TAO_Property_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyNames &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosPropertyService_PropertyNames_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosPropertyService_Properties_H_
#define _TAO_CDR_OP_CosPropertyService_Properties_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Property_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::Properties &_tao_sequence);
TAO_Property_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::Properties &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosPropertyService_Properties_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosPropertyService_PropertyDefs_H_
#define _TAO_CDR_OP_CosPropertyService_PropertyDefs_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Property_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyDefs &_tao_sequence);
TAO_Property_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyDefs &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosPropertyService_PropertyDefs_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosPropertyService_PropertyModes_H_
#define _TAO_CDR_OP_CosPropertyService_PropertyModes_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Property_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyModes &_tao_sequence);
TAO_Property_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyModes &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosPropertyService_PropertyModes_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosPropertyService_PropertyTypes_H_
#define _TAO_CDR_OP_CosPropertyService_PropertyTypes_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Property_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyTypes &_tao_sequence);
TAO_Property_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyTypes &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosPropertyService_PropertyTypes_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::ConstraintNotSupported &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::ConstraintNotSupported &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::InvalidPropertyName &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::InvalidPropertyName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::ConflictingProperty &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::ConflictingProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertyNotFound &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertyNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::UnsupportedTypeCode &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::UnsupportedTypeCode &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::UnsupportedProperty &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::UnsupportedProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::UnsupportedMode &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::UnsupportedMode &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::FixedProperty &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::FixedProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::ReadOnlyProperty &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::ReadOnlyProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosPropertyService::ExceptionReason _tao_enumerator);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosPropertyService::ExceptionReason &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertyException &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertyException &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosPropertyService_PropertyExceptions_H_
#define _TAO_CDR_OP_CosPropertyService_PropertyExceptions_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Property_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosPropertyService::PropertyExceptions &_tao_sequence);
TAO_Property_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosPropertyService::PropertyExceptions &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosPropertyService_PropertyExceptions_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::MultipleExceptions &);
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::MultipleExceptions &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertySetFactory_ptr );
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertySetFactory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertySetDefFactory_ptr );
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertySetDefFactory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertySet_ptr );
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertySet_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertySetDef_ptr );
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertySetDef_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertyNamesIterator_ptr );
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertyNamesIterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Property_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosPropertyService::PropertiesIterator_ptr );
TAO_Property_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosPropertyService::PropertiesIterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "CosPropertyC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

