// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosNotifyCommC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosNotifyCommC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosNotifyComm::InvalidEventType::InvalidEventType (
    const CosNotification::EventType & _tao_type)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyComm/InvalidEventType:1.0",
        "InvalidEventType"
      )
{
  this->type = _tao_type;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyComm::InvalidEventType::InvalidEventType (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyComm/InvalidEventType:1.0",
        "InvalidEventType"
      )
{
}

CosNotifyComm::InvalidEventType::~InvalidEventType (void)
{
}

CosNotifyComm::InvalidEventType::InvalidEventType (const ::CosNotifyComm::InvalidEventType &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->type = _tao_excp.type;
}

CosNotifyComm::InvalidEventType&
CosNotifyComm::InvalidEventType::operator= (const ::CosNotifyComm::InvalidEventType &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->type = _tao_excp.type;
  return *this;
}

void CosNotifyComm::InvalidEventType::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidEventType *_tao_tmp_pointer =
    static_cast<InvalidEventType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyComm::InvalidEventType *
CosNotifyComm::InvalidEventType::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidEventType *> (_tao_excp);
}

const CosNotifyComm::InvalidEventType *
CosNotifyComm::InvalidEventType::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidEventType *> (_tao_excp);
}

::CORBA::Exception *CosNotifyComm::InvalidEventType::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyComm::InvalidEventType, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyComm::InvalidEventType::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyComm::InvalidEventType (*this),
      0
    );
  return result;
}

void CosNotifyComm::InvalidEventType::_raise (void) const
{
  throw *this;
}

void CosNotifyComm::InvalidEventType::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyComm::InvalidEventType::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyComm::InvalidEventType::_tao_type (void) const
{
  return ::CosNotifyComm::_tc_InvalidEventType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotifyComm_InvalidEventType[] =
      {
        { "type", &CosNotification::_tc_EventType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyComm_InvalidEventType (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyComm/InvalidEventType:1.0",
  "InvalidEventType",
  _tao_fields_CosNotifyComm_InvalidEventType,
  1);


namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_InvalidEventType =
    &_tao_tc_CosNotifyComm_InvalidEventType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::NotifyPublish.

CosNotifyComm::NotifyPublish_ptr
TAO::Objref_Traits<CosNotifyComm::NotifyPublish>::duplicate (
    CosNotifyComm::NotifyPublish_ptr p)
{
  return CosNotifyComm::NotifyPublish::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::NotifyPublish>::release (
    CosNotifyComm::NotifyPublish_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::NotifyPublish_ptr
TAO::Objref_Traits<CosNotifyComm::NotifyPublish>::nil (void)
{
  return CosNotifyComm::NotifyPublish::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::NotifyPublish>::marshal (
    const CosNotifyComm::NotifyPublish_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_NotifyPublish_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::NotifyPublish::offer_change (
  const ::CosNotification::EventTypeSeq & added,
  const ::CosNotification::EventTypeSeq & removed)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotifyPublish_Proxy_Broker_ == 0)
    {
      CosNotifyComm_NotifyPublish_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::EventTypeSeq>::in_arg_val _tao_added (added);
  TAO::Arg_Traits< ::CosNotification::EventTypeSeq>::in_arg_val _tao_removed (removed);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_added,
      &_tao_removed
    };

  static TAO::Exception_Data
  _tao_CosNotifyComm_NotifyPublish_offer_change_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyComm/InvalidEventType:1.0",
        CosNotifyComm::InvalidEventType::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyComm::_tc_InvalidEventType
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "offer_change",
      12,
      this->the_TAO_NotifyPublish_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyComm_NotifyPublish_offer_change_exceptiondata,
      1
    );
}

CosNotifyComm::NotifyPublish::NotifyPublish (void)
 : the_TAO_NotifyPublish_Proxy_Broker_ (0)
{
  this->CosNotifyComm_NotifyPublish_setup_collocation ();
}

void
CosNotifyComm::NotifyPublish::CosNotifyComm_NotifyPublish_setup_collocation ()
{
  if (::CosNotifyComm__TAO_NotifyPublish_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_NotifyPublish_Proxy_Broker_ =
        ::CosNotifyComm__TAO_NotifyPublish_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNotifyComm::NotifyPublish::~NotifyPublish (void)
{}

void 
CosNotifyComm::NotifyPublish::_tao_any_destructor (void *_tao_void_pointer)
{
  NotifyPublish *_tao_tmp_pointer =
    static_cast<NotifyPublish *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::NotifyPublish_ptr
CosNotifyComm::NotifyPublish::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NotifyPublish>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0",
        CosNotifyComm__TAO_NotifyPublish_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::NotifyPublish_ptr
CosNotifyComm::NotifyPublish::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NotifyPublish>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0",
        CosNotifyComm__TAO_NotifyPublish_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::NotifyPublish_ptr
CosNotifyComm::NotifyPublish::_nil (void)
{
  return 0;
}

CosNotifyComm::NotifyPublish_ptr
CosNotifyComm::NotifyPublish::_duplicate (NotifyPublish_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::NotifyPublish::_tao_release (NotifyPublish_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::NotifyPublish::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::NotifyPublish::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0";
}

::CORBA::Boolean
CosNotifyComm::NotifyPublish::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_NotifyPublish (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0",
    "NotifyPublish");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_NotifyPublish =
    &_tao_tc_CosNotifyComm_NotifyPublish;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::NotifySubscribe.

CosNotifyComm::NotifySubscribe_ptr
TAO::Objref_Traits<CosNotifyComm::NotifySubscribe>::duplicate (
    CosNotifyComm::NotifySubscribe_ptr p)
{
  return CosNotifyComm::NotifySubscribe::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::NotifySubscribe>::release (
    CosNotifyComm::NotifySubscribe_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::NotifySubscribe_ptr
TAO::Objref_Traits<CosNotifyComm::NotifySubscribe>::nil (void)
{
  return CosNotifyComm::NotifySubscribe::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::NotifySubscribe>::marshal (
    const CosNotifyComm::NotifySubscribe_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_NotifySubscribe_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::NotifySubscribe::subscription_change (
  const ::CosNotification::EventTypeSeq & added,
  const ::CosNotification::EventTypeSeq & removed)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NotifySubscribe_Proxy_Broker_ == 0)
    {
      CosNotifyComm_NotifySubscribe_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::EventTypeSeq>::in_arg_val _tao_added (added);
  TAO::Arg_Traits< ::CosNotification::EventTypeSeq>::in_arg_val _tao_removed (removed);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_added,
      &_tao_removed
    };

  static TAO::Exception_Data
  _tao_CosNotifyComm_NotifySubscribe_subscription_change_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyComm/InvalidEventType:1.0",
        CosNotifyComm::InvalidEventType::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyComm::_tc_InvalidEventType
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "subscription_change",
      19,
      this->the_TAO_NotifySubscribe_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyComm_NotifySubscribe_subscription_change_exceptiondata,
      1
    );
}

CosNotifyComm::NotifySubscribe::NotifySubscribe (void)
 : the_TAO_NotifySubscribe_Proxy_Broker_ (0)
{
  this->CosNotifyComm_NotifySubscribe_setup_collocation ();
}

void
CosNotifyComm::NotifySubscribe::CosNotifyComm_NotifySubscribe_setup_collocation ()
{
  if (::CosNotifyComm__TAO_NotifySubscribe_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_NotifySubscribe_Proxy_Broker_ =
        ::CosNotifyComm__TAO_NotifySubscribe_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNotifyComm::NotifySubscribe::~NotifySubscribe (void)
{}

void 
CosNotifyComm::NotifySubscribe::_tao_any_destructor (void *_tao_void_pointer)
{
  NotifySubscribe *_tao_tmp_pointer =
    static_cast<NotifySubscribe *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::NotifySubscribe_ptr
CosNotifyComm::NotifySubscribe::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NotifySubscribe>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0",
        CosNotifyComm__TAO_NotifySubscribe_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::NotifySubscribe_ptr
CosNotifyComm::NotifySubscribe::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NotifySubscribe>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0",
        CosNotifyComm__TAO_NotifySubscribe_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::NotifySubscribe_ptr
CosNotifyComm::NotifySubscribe::_nil (void)
{
  return 0;
}

CosNotifyComm::NotifySubscribe_ptr
CosNotifyComm::NotifySubscribe::_duplicate (NotifySubscribe_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::NotifySubscribe::_tao_release (NotifySubscribe_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::NotifySubscribe::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::NotifySubscribe::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0";
}

::CORBA::Boolean
CosNotifyComm::NotifySubscribe::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_NotifySubscribe (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0",
    "NotifySubscribe");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_NotifySubscribe =
    &_tao_tc_CosNotifyComm_NotifySubscribe;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::PushConsumer.

CosNotifyComm::PushConsumer_ptr
TAO::Objref_Traits<CosNotifyComm::PushConsumer>::duplicate (
    CosNotifyComm::PushConsumer_ptr p)
{
  return CosNotifyComm::PushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::PushConsumer>::release (
    CosNotifyComm::PushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::PushConsumer_ptr
TAO::Objref_Traits<CosNotifyComm::PushConsumer>::nil (void)
{
  return CosNotifyComm::PushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::PushConsumer>::marshal (
    const CosNotifyComm::PushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

CosNotifyComm::PushConsumer::PushConsumer (void)
 : the_TAO_PushConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyComm_PushConsumer_setup_collocation ();
}

void
CosNotifyComm::PushConsumer::CosNotifyComm_PushConsumer_setup_collocation ()
{
  if (::CosNotifyComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PushConsumer_Proxy_Broker_ =
        ::CosNotifyComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyComm_NotifyPublish_setup_collocation ();
  this->CosEventComm_PushConsumer_setup_collocation ();
}

CosNotifyComm::PushConsumer::~PushConsumer (void)
{}

void 
CosNotifyComm::PushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  PushConsumer *_tao_tmp_pointer =
    static_cast<PushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::PushConsumer_ptr
CosNotifyComm::PushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/PushConsumer:1.0",
        CosNotifyComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::PushConsumer_ptr
CosNotifyComm::PushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/PushConsumer:1.0",
        CosNotifyComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::PushConsumer_ptr
CosNotifyComm::PushConsumer::_nil (void)
{
  return 0;
}

CosNotifyComm::PushConsumer_ptr
CosNotifyComm::PushConsumer::_duplicate (PushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::PushConsumer::_tao_release (PushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::PushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::PushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/PushConsumer:1.0";
}

::CORBA::Boolean
CosNotifyComm::PushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_PushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/PushConsumer:1.0",
    "PushConsumer");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_PushConsumer =
    &_tao_tc_CosNotifyComm_PushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::PushSupplier.

CosNotifyComm::PushSupplier_ptr
TAO::Objref_Traits<CosNotifyComm::PushSupplier>::duplicate (
    CosNotifyComm::PushSupplier_ptr p)
{
  return CosNotifyComm::PushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::PushSupplier>::release (
    CosNotifyComm::PushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::PushSupplier_ptr
TAO::Objref_Traits<CosNotifyComm::PushSupplier>::nil (void)
{
  return CosNotifyComm::PushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::PushSupplier>::marshal (
    const CosNotifyComm::PushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

CosNotifyComm::PushSupplier::PushSupplier (void)
 : the_TAO_PushSupplier_Proxy_Broker_ (0)
{
  this->CosNotifyComm_PushSupplier_setup_collocation ();
}

void
CosNotifyComm::PushSupplier::CosNotifyComm_PushSupplier_setup_collocation ()
{
  if (::CosNotifyComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PushSupplier_Proxy_Broker_ =
        ::CosNotifyComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyComm_NotifySubscribe_setup_collocation ();
  this->CosEventComm_PushSupplier_setup_collocation ();
}

CosNotifyComm::PushSupplier::~PushSupplier (void)
{}

void 
CosNotifyComm::PushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  PushSupplier *_tao_tmp_pointer =
    static_cast<PushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::PushSupplier_ptr
CosNotifyComm::PushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/PushSupplier:1.0",
        CosNotifyComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::PushSupplier_ptr
CosNotifyComm::PushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/PushSupplier:1.0",
        CosNotifyComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::PushSupplier_ptr
CosNotifyComm::PushSupplier::_nil (void)
{
  return 0;
}

CosNotifyComm::PushSupplier_ptr
CosNotifyComm::PushSupplier::_duplicate (PushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::PushSupplier::_tao_release (PushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::PushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::PushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/PushSupplier:1.0";
}

::CORBA::Boolean
CosNotifyComm::PushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_PushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/PushSupplier:1.0",
    "PushSupplier");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_PushSupplier =
    &_tao_tc_CosNotifyComm_PushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::StructuredPushConsumer.

CosNotifyComm::StructuredPushConsumer_ptr
TAO::Objref_Traits<CosNotifyComm::StructuredPushConsumer>::duplicate (
    CosNotifyComm::StructuredPushConsumer_ptr p)
{
  return CosNotifyComm::StructuredPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::StructuredPushConsumer>::release (
    CosNotifyComm::StructuredPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::StructuredPushConsumer_ptr
TAO::Objref_Traits<CosNotifyComm::StructuredPushConsumer>::nil (void)
{
  return CosNotifyComm::StructuredPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::StructuredPushConsumer>::marshal (
    const CosNotifyComm::StructuredPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_StructuredPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::StructuredPushConsumer::push_structured_event (
  const ::CosNotification::StructuredEvent & notification)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredPushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyComm_StructuredPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_notification (notification);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_notification
    };

  static TAO::Exception_Data
  _tao_CosNotifyComm_StructuredPushConsumer_push_structured_event_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventComm/Disconnected:1.0",
        CosEventComm::Disconnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventComm::_tc_Disconnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "push_structured_event",
      21,
      this->the_TAO_StructuredPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyComm_StructuredPushConsumer_push_structured_event_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::StructuredPushConsumer::disconnect_structured_push_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredPushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyComm_StructuredPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_structured_push_consumer",
      35,
      this->the_TAO_StructuredPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNotifyComm::StructuredPushConsumer::StructuredPushConsumer (void)
 : the_TAO_StructuredPushConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyComm_StructuredPushConsumer_setup_collocation ();
}

void
CosNotifyComm::StructuredPushConsumer::CosNotifyComm_StructuredPushConsumer_setup_collocation ()
{
  if (::CosNotifyComm__TAO_StructuredPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_StructuredPushConsumer_Proxy_Broker_ =
        ::CosNotifyComm__TAO_StructuredPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyComm_NotifyPublish_setup_collocation ();
}

CosNotifyComm::StructuredPushConsumer::~StructuredPushConsumer (void)
{}

void 
CosNotifyComm::StructuredPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  StructuredPushConsumer *_tao_tmp_pointer =
    static_cast<StructuredPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::StructuredPushConsumer_ptr
CosNotifyComm::StructuredPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredPushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0",
        CosNotifyComm__TAO_StructuredPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::StructuredPushConsumer_ptr
CosNotifyComm::StructuredPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0",
        CosNotifyComm__TAO_StructuredPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::StructuredPushConsumer_ptr
CosNotifyComm::StructuredPushConsumer::_nil (void)
{
  return 0;
}

CosNotifyComm::StructuredPushConsumer_ptr
CosNotifyComm::StructuredPushConsumer::_duplicate (StructuredPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::StructuredPushConsumer::_tao_release (StructuredPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::StructuredPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::StructuredPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0";
}

::CORBA::Boolean
CosNotifyComm::StructuredPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_StructuredPushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0",
    "StructuredPushConsumer");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_StructuredPushConsumer =
    &_tao_tc_CosNotifyComm_StructuredPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::StructuredPushSupplier.

CosNotifyComm::StructuredPushSupplier_ptr
TAO::Objref_Traits<CosNotifyComm::StructuredPushSupplier>::duplicate (
    CosNotifyComm::StructuredPushSupplier_ptr p)
{
  return CosNotifyComm::StructuredPushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::StructuredPushSupplier>::release (
    CosNotifyComm::StructuredPushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::StructuredPushSupplier_ptr
TAO::Objref_Traits<CosNotifyComm::StructuredPushSupplier>::nil (void)
{
  return CosNotifyComm::StructuredPushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::StructuredPushSupplier>::marshal (
    const CosNotifyComm::StructuredPushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_StructuredPushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::StructuredPushSupplier::disconnect_structured_push_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyComm_StructuredPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_structured_push_supplier",
      35,
      this->the_TAO_StructuredPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNotifyComm::StructuredPushSupplier::StructuredPushSupplier (void)
 : the_TAO_StructuredPushSupplier_Proxy_Broker_ (0)
{
  this->CosNotifyComm_StructuredPushSupplier_setup_collocation ();
}

void
CosNotifyComm::StructuredPushSupplier::CosNotifyComm_StructuredPushSupplier_setup_collocation ()
{
  if (::CosNotifyComm__TAO_StructuredPushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_StructuredPushSupplier_Proxy_Broker_ =
        ::CosNotifyComm__TAO_StructuredPushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyComm_NotifySubscribe_setup_collocation ();
}

CosNotifyComm::StructuredPushSupplier::~StructuredPushSupplier (void)
{}

void 
CosNotifyComm::StructuredPushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  StructuredPushSupplier *_tao_tmp_pointer =
    static_cast<StructuredPushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::StructuredPushSupplier_ptr
CosNotifyComm::StructuredPushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredPushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0",
        CosNotifyComm__TAO_StructuredPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::StructuredPushSupplier_ptr
CosNotifyComm::StructuredPushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredPushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0",
        CosNotifyComm__TAO_StructuredPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::StructuredPushSupplier_ptr
CosNotifyComm::StructuredPushSupplier::_nil (void)
{
  return 0;
}

CosNotifyComm::StructuredPushSupplier_ptr
CosNotifyComm::StructuredPushSupplier::_duplicate (StructuredPushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::StructuredPushSupplier::_tao_release (StructuredPushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::StructuredPushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::StructuredPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0";
}

::CORBA::Boolean
CosNotifyComm::StructuredPushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_StructuredPushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0",
    "StructuredPushSupplier");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_StructuredPushSupplier =
    &_tao_tc_CosNotifyComm_StructuredPushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::SequencePushConsumer.

CosNotifyComm::SequencePushConsumer_ptr
TAO::Objref_Traits<CosNotifyComm::SequencePushConsumer>::duplicate (
    CosNotifyComm::SequencePushConsumer_ptr p)
{
  return CosNotifyComm::SequencePushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::SequencePushConsumer>::release (
    CosNotifyComm::SequencePushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::SequencePushConsumer_ptr
TAO::Objref_Traits<CosNotifyComm::SequencePushConsumer>::nil (void)
{
  return CosNotifyComm::SequencePushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::SequencePushConsumer>::marshal (
    const CosNotifyComm::SequencePushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_SequencePushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::SequencePushConsumer::push_structured_events (
  const ::CosNotification::EventBatch & notifications)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequencePushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyComm_SequencePushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::EventBatch>::in_arg_val _tao_notifications (notifications);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_notifications
    };

  static TAO::Exception_Data
  _tao_CosNotifyComm_SequencePushConsumer_push_structured_events_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventComm/Disconnected:1.0",
        CosEventComm::Disconnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventComm::_tc_Disconnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "push_structured_events",
      22,
      this->the_TAO_SequencePushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyComm_SequencePushConsumer_push_structured_events_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::SequencePushConsumer::disconnect_sequence_push_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequencePushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyComm_SequencePushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_sequence_push_consumer",
      33,
      this->the_TAO_SequencePushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNotifyComm::SequencePushConsumer::SequencePushConsumer (void)
 : the_TAO_SequencePushConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyComm_SequencePushConsumer_setup_collocation ();
}

void
CosNotifyComm::SequencePushConsumer::CosNotifyComm_SequencePushConsumer_setup_collocation ()
{
  if (::CosNotifyComm__TAO_SequencePushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SequencePushConsumer_Proxy_Broker_ =
        ::CosNotifyComm__TAO_SequencePushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyComm_NotifyPublish_setup_collocation ();
}

CosNotifyComm::SequencePushConsumer::~SequencePushConsumer (void)
{}

void 
CosNotifyComm::SequencePushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  SequencePushConsumer *_tao_tmp_pointer =
    static_cast<SequencePushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::SequencePushConsumer_ptr
CosNotifyComm::SequencePushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequencePushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0",
        CosNotifyComm__TAO_SequencePushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::SequencePushConsumer_ptr
CosNotifyComm::SequencePushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequencePushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0",
        CosNotifyComm__TAO_SequencePushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::SequencePushConsumer_ptr
CosNotifyComm::SequencePushConsumer::_nil (void)
{
  return 0;
}

CosNotifyComm::SequencePushConsumer_ptr
CosNotifyComm::SequencePushConsumer::_duplicate (SequencePushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::SequencePushConsumer::_tao_release (SequencePushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::SequencePushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::SequencePushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0";
}

::CORBA::Boolean
CosNotifyComm::SequencePushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_SequencePushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0",
    "SequencePushConsumer");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_SequencePushConsumer =
    &_tao_tc_CosNotifyComm_SequencePushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyComm::SequencePushSupplier.

CosNotifyComm::SequencePushSupplier_ptr
TAO::Objref_Traits<CosNotifyComm::SequencePushSupplier>::duplicate (
    CosNotifyComm::SequencePushSupplier_ptr p)
{
  return CosNotifyComm::SequencePushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyComm::SequencePushSupplier>::release (
    CosNotifyComm::SequencePushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyComm::SequencePushSupplier_ptr
TAO::Objref_Traits<CosNotifyComm::SequencePushSupplier>::nil (void)
{
  return CosNotifyComm::SequencePushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyComm::SequencePushSupplier>::marshal (
    const CosNotifyComm::SequencePushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyComm__TAO_SequencePushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyComm::SequencePushSupplier::disconnect_sequence_push_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequencePushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyComm_SequencePushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_sequence_push_supplier",
      33,
      this->the_TAO_SequencePushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNotifyComm::SequencePushSupplier::SequencePushSupplier (void)
 : the_TAO_SequencePushSupplier_Proxy_Broker_ (0)
{
  this->CosNotifyComm_SequencePushSupplier_setup_collocation ();
}

void
CosNotifyComm::SequencePushSupplier::CosNotifyComm_SequencePushSupplier_setup_collocation ()
{
  if (::CosNotifyComm__TAO_SequencePushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SequencePushSupplier_Proxy_Broker_ =
        ::CosNotifyComm__TAO_SequencePushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyComm_NotifySubscribe_setup_collocation ();
}

CosNotifyComm::SequencePushSupplier::~SequencePushSupplier (void)
{}

void 
CosNotifyComm::SequencePushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  SequencePushSupplier *_tao_tmp_pointer =
    static_cast<SequencePushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyComm::SequencePushSupplier_ptr
CosNotifyComm::SequencePushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequencePushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0",
        CosNotifyComm__TAO_SequencePushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::SequencePushSupplier_ptr
CosNotifyComm::SequencePushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequencePushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0",
        CosNotifyComm__TAO_SequencePushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyComm::SequencePushSupplier_ptr
CosNotifyComm::SequencePushSupplier::_nil (void)
{
  return 0;
}

CosNotifyComm::SequencePushSupplier_ptr
CosNotifyComm::SequencePushSupplier::_duplicate (SequencePushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyComm::SequencePushSupplier::_tao_release (SequencePushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyComm::SequencePushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyComm::SequencePushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0";
}

::CORBA::Boolean
CosNotifyComm::SequencePushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyComm_SequencePushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0",
    "SequencePushSupplier");
  

namespace CosNotifyComm
{
  ::CORBA::TypeCode_ptr const _tc_SequencePushSupplier =
    &_tao_tc_CosNotifyComm_SequencePushSupplier;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyComm::InvalidEventType>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyComm::InvalidEventType &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyComm::InvalidEventType>::insert_copy (
        _tao_any,
        ::CosNotifyComm::InvalidEventType::_tao_any_destructor,
        ::CosNotifyComm::_tc_InvalidEventType,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyComm::InvalidEventType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyComm::InvalidEventType>::insert (
        _tao_any,
        ::CosNotifyComm::InvalidEventType::_tao_any_destructor,
        ::CosNotifyComm::_tc_InvalidEventType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyComm::InvalidEventType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyComm::InvalidEventType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyComm::InvalidEventType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyComm::InvalidEventType>::extract (
          _tao_any,
          ::CosNotifyComm::InvalidEventType::_tao_any_destructor,
          ::CosNotifyComm::_tc_InvalidEventType,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyComm::InvalidEventType &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyComm::InvalidEventType>::insert_copy (
      _tao_any,
      CosNotifyComm::InvalidEventType::_tao_any_destructor,
      CosNotifyComm::_tc_InvalidEventType,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::InvalidEventType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyComm::InvalidEventType>::insert (
      _tao_any,
      CosNotifyComm::InvalidEventType::_tao_any_destructor,
      CosNotifyComm::_tc_InvalidEventType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::InvalidEventType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyComm::InvalidEventType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyComm::InvalidEventType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyComm::InvalidEventType>::extract (
        _tao_any,
        CosNotifyComm::InvalidEventType::_tao_any_destructor,
        CosNotifyComm::_tc_InvalidEventType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::NotifyPublish>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NotifyPublish_ptr _tao_elem)
  {
    NotifyPublish_ptr _tao_objptr =
      NotifyPublish::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NotifyPublish_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<NotifyPublish>::insert (
        _tao_any,
        NotifyPublish::_tao_any_destructor,
        _tc_NotifyPublish,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NotifyPublish_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<NotifyPublish>::extract (
          _tao_any,
          NotifyPublish::_tao_any_destructor,
          _tc_NotifyPublish,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::NotifyPublish_ptr _tao_elem)
{
  CosNotifyComm::NotifyPublish_ptr _tao_objptr =
    CosNotifyComm::NotifyPublish::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::NotifyPublish_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::NotifyPublish>::insert (
      _tao_any,
      CosNotifyComm::NotifyPublish::_tao_any_destructor,
      CosNotifyComm::_tc_NotifyPublish,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::NotifyPublish_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::NotifyPublish>::extract (
        _tao_any,
        CosNotifyComm::NotifyPublish::_tao_any_destructor,
        CosNotifyComm::_tc_NotifyPublish,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::NotifySubscribe>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NotifySubscribe_ptr _tao_elem)
  {
    NotifySubscribe_ptr _tao_objptr =
      NotifySubscribe::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NotifySubscribe_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<NotifySubscribe>::insert (
        _tao_any,
        NotifySubscribe::_tao_any_destructor,
        _tc_NotifySubscribe,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NotifySubscribe_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<NotifySubscribe>::extract (
          _tao_any,
          NotifySubscribe::_tao_any_destructor,
          _tc_NotifySubscribe,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::NotifySubscribe_ptr _tao_elem)
{
  CosNotifyComm::NotifySubscribe_ptr _tao_objptr =
    CosNotifyComm::NotifySubscribe::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::NotifySubscribe_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::NotifySubscribe>::insert (
      _tao_any,
      CosNotifyComm::NotifySubscribe::_tao_any_destructor,
      CosNotifyComm::_tc_NotifySubscribe,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::NotifySubscribe_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::NotifySubscribe>::extract (
        _tao_any,
        CosNotifyComm::NotifySubscribe::_tao_any_destructor,
        CosNotifyComm::_tc_NotifySubscribe,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::PushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushConsumer_ptr _tao_elem)
  {
    PushConsumer_ptr _tao_objptr =
      PushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PushConsumer>::insert (
        _tao_any,
        PushConsumer::_tao_any_destructor,
        _tc_PushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PushConsumer>::extract (
          _tao_any,
          PushConsumer::_tao_any_destructor,
          _tc_PushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::PushConsumer_ptr _tao_elem)
{
  CosNotifyComm::PushConsumer_ptr _tao_objptr =
    CosNotifyComm::PushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::PushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::PushConsumer>::insert (
      _tao_any,
      CosNotifyComm::PushConsumer::_tao_any_destructor,
      CosNotifyComm::_tc_PushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::PushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::PushConsumer>::extract (
        _tao_any,
        CosNotifyComm::PushConsumer::_tao_any_destructor,
        CosNotifyComm::_tc_PushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::PushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushSupplier_ptr _tao_elem)
  {
    PushSupplier_ptr _tao_objptr =
      PushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PushSupplier>::insert (
        _tao_any,
        PushSupplier::_tao_any_destructor,
        _tc_PushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PushSupplier>::extract (
          _tao_any,
          PushSupplier::_tao_any_destructor,
          _tc_PushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::PushSupplier_ptr _tao_elem)
{
  CosNotifyComm::PushSupplier_ptr _tao_objptr =
    CosNotifyComm::PushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::PushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::PushSupplier>::insert (
      _tao_any,
      CosNotifyComm::PushSupplier::_tao_any_destructor,
      CosNotifyComm::_tc_PushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::PushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::PushSupplier>::extract (
        _tao_any,
        CosNotifyComm::PushSupplier::_tao_any_destructor,
        CosNotifyComm::_tc_PushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::StructuredPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredPushConsumer_ptr _tao_elem)
  {
    StructuredPushConsumer_ptr _tao_objptr =
      StructuredPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<StructuredPushConsumer>::insert (
        _tao_any,
        StructuredPushConsumer::_tao_any_destructor,
        _tc_StructuredPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      StructuredPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<StructuredPushConsumer>::extract (
          _tao_any,
          StructuredPushConsumer::_tao_any_destructor,
          _tc_StructuredPushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::StructuredPushConsumer_ptr _tao_elem)
{
  CosNotifyComm::StructuredPushConsumer_ptr _tao_objptr =
    CosNotifyComm::StructuredPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::StructuredPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::StructuredPushConsumer>::insert (
      _tao_any,
      CosNotifyComm::StructuredPushConsumer::_tao_any_destructor,
      CosNotifyComm::_tc_StructuredPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::StructuredPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::StructuredPushConsumer>::extract (
        _tao_any,
        CosNotifyComm::StructuredPushConsumer::_tao_any_destructor,
        CosNotifyComm::_tc_StructuredPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::StructuredPushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredPushSupplier_ptr _tao_elem)
  {
    StructuredPushSupplier_ptr _tao_objptr =
      StructuredPushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredPushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<StructuredPushSupplier>::insert (
        _tao_any,
        StructuredPushSupplier::_tao_any_destructor,
        _tc_StructuredPushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      StructuredPushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<StructuredPushSupplier>::extract (
          _tao_any,
          StructuredPushSupplier::_tao_any_destructor,
          _tc_StructuredPushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::StructuredPushSupplier_ptr _tao_elem)
{
  CosNotifyComm::StructuredPushSupplier_ptr _tao_objptr =
    CosNotifyComm::StructuredPushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::StructuredPushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::StructuredPushSupplier>::insert (
      _tao_any,
      CosNotifyComm::StructuredPushSupplier::_tao_any_destructor,
      CosNotifyComm::_tc_StructuredPushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::StructuredPushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::StructuredPushSupplier>::extract (
        _tao_any,
        CosNotifyComm::StructuredPushSupplier::_tao_any_destructor,
        CosNotifyComm::_tc_StructuredPushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::SequencePushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequencePushConsumer_ptr _tao_elem)
  {
    SequencePushConsumer_ptr _tao_objptr =
      SequencePushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequencePushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SequencePushConsumer>::insert (
        _tao_any,
        SequencePushConsumer::_tao_any_destructor,
        _tc_SequencePushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SequencePushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SequencePushConsumer>::extract (
          _tao_any,
          SequencePushConsumer::_tao_any_destructor,
          _tc_SequencePushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::SequencePushConsumer_ptr _tao_elem)
{
  CosNotifyComm::SequencePushConsumer_ptr _tao_objptr =
    CosNotifyComm::SequencePushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::SequencePushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::SequencePushConsumer>::insert (
      _tao_any,
      CosNotifyComm::SequencePushConsumer::_tao_any_destructor,
      CosNotifyComm::_tc_SequencePushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::SequencePushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::SequencePushConsumer>::extract (
        _tao_any,
        CosNotifyComm::SequencePushConsumer::_tao_any_destructor,
        CosNotifyComm::_tc_SequencePushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyComm::SequencePushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequencePushSupplier_ptr _tao_elem)
  {
    SequencePushSupplier_ptr _tao_objptr =
      SequencePushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequencePushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SequencePushSupplier>::insert (
        _tao_any,
        SequencePushSupplier::_tao_any_destructor,
        _tc_SequencePushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SequencePushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SequencePushSupplier>::extract (
          _tao_any,
          SequencePushSupplier::_tao_any_destructor,
          _tc_SequencePushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::SequencePushSupplier_ptr _tao_elem)
{
  CosNotifyComm::SequencePushSupplier_ptr _tao_objptr =
    CosNotifyComm::SequencePushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyComm::SequencePushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyComm::SequencePushSupplier>::insert (
      _tao_any,
      CosNotifyComm::SequencePushSupplier::_tao_any_destructor,
      CosNotifyComm::_tc_SequencePushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyComm::SequencePushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyComm::SequencePushSupplier>::extract (
        _tao_any,
        CosNotifyComm::SequencePushSupplier::_tao_any_destructor,
        CosNotifyComm::_tc_SequencePushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::InvalidEventType &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.type)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::InvalidEventType &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.type)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::NotifyPublish_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::NotifyPublish_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::NotifyPublish RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_NotifyPublish_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::NotifySubscribe_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::NotifySubscribe_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::NotifySubscribe RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_NotifySubscribe_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::PushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::PushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::PushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::PushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::PushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::PushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::StructuredPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::StructuredPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::StructuredPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_StructuredPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::StructuredPushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::StructuredPushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::StructuredPushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_StructuredPushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::SequencePushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::SequencePushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::SequencePushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_SequencePushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyComm::SequencePushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyComm::SequencePushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyComm::SequencePushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyComm__TAO_SequencePushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


