// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_FTRT_GROUPMANAGERC_O5RYVV_H_
#define _TAO_IDL_FTRT_GROUPMANAGERC_O5RYVV_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/FtRtEvent/Utils/ftrtevent_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/RtecEventChannelAdminC.h"
#include "tao/OctetSeqC.h"
#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/UShortSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/PolicyC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/orb_typesC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"
#include "orbsvcs/CosNamingC.h"
#include "FTRTC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_FtRtEvent_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

typedef CORBA::OctetSeq EventPayload;
typedef CORBA::OctetSeq_var EventPayload_var;
typedef CORBA::OctetSeq_out EventPayload_out;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace FTRT
{

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

  typedef CosNaming::Name Location;
  typedef CosNaming::Name_var Location_var;
  typedef CosNaming::Name_out Location_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_Location;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FTRT_FAULTLISTENER__VAR_OUT_CH_)
#define _FTRT_FAULTLISTENER__VAR_OUT_CH_

  class AMI_FaultListenerHandler;
  typedef AMI_FaultListenerHandler *AMI_FaultListenerHandler_ptr;

  class FaultListener;
  typedef FaultListener *FaultListener_ptr;

  typedef
    TAO_Objref_Var_T<
        FaultListener
      >
    FaultListener_var;
  
  typedef
    TAO_Objref_Out_T<
        FaultListener
      >
    FaultListener_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FtRtEvent_Export FaultListener
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<FaultListener>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef FaultListener_ptr _ptr_type;
    typedef FaultListener_var _var_type;
    typedef FaultListener_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static FaultListener_ptr _duplicate (FaultListener_ptr obj);

    static void _tao_release (FaultListener_ptr obj);

    static FaultListener_ptr _narrow (::CORBA::Object_ptr obj);
    static FaultListener_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static FaultListener_ptr _nil (void);

    virtual void replica_crashed (
      const ::FTRT::Location & the_location);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_FaultListener_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    FaultListener (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FTRT_FaultListener_setup_collocation (void);

    // Concrete non-local interface only.
    FaultListener (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    FaultListener (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~FaultListener (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    FaultListener (const FaultListener &);

    void operator= (const FaultListener &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_FaultListener;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FTRT_AMI_FAULTLISTENERHANDLER__VAR_OUT_CH_)
#define _FTRT_AMI_FAULTLISTENERHANDLER__VAR_OUT_CH_

  class AMI_FaultListenerHandler;
  typedef AMI_FaultListenerHandler *AMI_FaultListenerHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_FaultListenerHandler
      >
    AMI_FaultListenerHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_FaultListenerHandler
      >
    AMI_FaultListenerHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FtRtEvent_Export AMI_FaultListenerHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_FaultListenerHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_FaultListenerHandler_ptr _ptr_type;
    typedef AMI_FaultListenerHandler_var _var_type;
    typedef AMI_FaultListenerHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_FaultListenerHandler_ptr _duplicate (AMI_FaultListenerHandler_ptr obj);

    static void _tao_release (AMI_FaultListenerHandler_ptr obj);

    static AMI_FaultListenerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_FaultListenerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_FaultListenerHandler_ptr _nil (void);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_FaultListenerHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_FaultListenerHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FTRT_AMI_FaultListenerHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_FaultListenerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_FaultListenerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_FaultListenerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_FaultListenerHandler (const AMI_FaultListenerHandler &);

    void operator= (const AMI_FaultListenerHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_AMI_FaultListenerHandler;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FTRT_OBJECTGROUPMANAGER__VAR_OUT_CH_)
#define _FTRT_OBJECTGROUPMANAGER__VAR_OUT_CH_

  class AMI_ObjectGroupManagerHandler;
  typedef AMI_ObjectGroupManagerHandler *AMI_ObjectGroupManagerHandler_ptr;

  class ObjectGroupManager;
  typedef ObjectGroupManager *ObjectGroupManager_ptr;

  typedef
    TAO_Objref_Var_T<
        ObjectGroupManager
      >
    ObjectGroupManager_var;
  
  typedef
    TAO_Objref_Out_T<
        ObjectGroupManager
      >
    ObjectGroupManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct ManagerInfo;

  typedef
    ::TAO_Var_Var_T<
        ManagerInfo
      >
    ManagerInfo_var;
  
  typedef
    ::TAO_Out_T<
        ManagerInfo
      >
    ManagerInfo_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_FtRtEvent_Export ManagerInfo
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ManagerInfo_var _var_type;
    typedef ManagerInfo_out _out_type;

    static void _tao_any_destructor (void *);
    
    FTRT::Location the_location;
    FTRT::ObjectGroupManager_var ior;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_ManagerInfo;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_FtRtEvent_Export PredecessorUnreachable : public ::CORBA::UserException
  {
  public:
    
    PredecessorUnreachable (void);
    PredecessorUnreachable (const PredecessorUnreachable &);
    ~PredecessorUnreachable (void);

    PredecessorUnreachable &operator= (const PredecessorUnreachable &);

    static void _tao_any_destructor (void *);

    static PredecessorUnreachable *_downcast ( ::CORBA::Exception *);
    static const PredecessorUnreachable *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_PredecessorUnreachable;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_FTRT_MANAGERINFOLIST_CH_)
#define _FTRT_MANAGERINFOLIST_CH_

  class ManagerInfoList;

  typedef
    ::TAO_VarSeq_Var_T<
        ManagerInfoList
      >
    ManagerInfoList_var;

  typedef
    ::TAO_Seq_Out_T<
        ManagerInfoList
      >
    ManagerInfoList_out;

  class TAO_FtRtEvent_Export ManagerInfoList
    : public
        ::TAO::unbounded_value_sequence<
            ManagerInfo
          >
  {
  public:
    ManagerInfoList (void);
    ManagerInfoList ( ::CORBA::ULong max);
    ManagerInfoList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ManagerInfo* buffer, 
      ::CORBA::Boolean release = false);
    ManagerInfoList (const ManagerInfoList &);
    virtual ~ManagerInfoList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ManagerInfoList_var _var_type;
    typedef ManagerInfoList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_ManagerInfoList;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_FtRtEvent_Export InvalidState : public ::CORBA::UserException
  {
  public:
    
    InvalidState (void);
    InvalidState (const InvalidState &);
    ~InvalidState (void);

    InvalidState &operator= (const InvalidState &);

    static void _tao_any_destructor (void *);

    static InvalidState *_downcast ( ::CORBA::Exception *);
    static const InvalidState *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_InvalidState;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FtRtEvent_Export ObjectGroupManager
    : public virtual ::FTRT::FaultListener
  
  {
  public:
    friend class TAO::Narrow_Utils<ObjectGroupManager>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ObjectGroupManager_ptr _ptr_type;
    typedef ObjectGroupManager_var _var_type;
    typedef ObjectGroupManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ObjectGroupManager_ptr _duplicate (ObjectGroupManager_ptr obj);

    static void _tao_release (ObjectGroupManager_ptr obj);

    static ObjectGroupManager_ptr _narrow (::CORBA::Object_ptr obj);
    static ObjectGroupManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ObjectGroupManager_ptr _nil (void);

    virtual ::CORBA::Boolean start (
      ::FTRT::FaultListener_ptr listener,
      ::FTRT::Location_out the_location);

    virtual void create_group (
      const ::FTRT::ManagerInfoList & info_list,
      ::CORBA::ULong object_group_ref_version);

    virtual void join_group (
      const ::FTRT::ManagerInfo & info);

    virtual void add_member (
      const ::FTRT::ManagerInfo & info,
      ::CORBA::ULong object_group_ref_version);

    virtual void remove_member (
      const ::FTRT::Location & crashed_location,
      ::CORBA::ULong object_group_ref_version);

    virtual void set_state (
      const ::FTRT::State & stat);

    virtual void sendc_start (
      ::FTRT::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::FTRT::FaultListener_ptr listener);

    virtual void sendc_create_group (
      ::FTRT::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      const ::FTRT::ManagerInfoList & info_list,
      ::CORBA::ULong object_group_ref_version);

    virtual void sendc_add_member (
      ::FTRT::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      const ::FTRT::ManagerInfo & info,
      ::CORBA::ULong object_group_ref_version);

    virtual void sendc_set_state (
      ::FTRT::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      const ::FTRT::State & stat);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ObjectGroupManager_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    ObjectGroupManager (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FTRT_ObjectGroupManager_setup_collocation (void);

    // Concrete non-local interface only.
    ObjectGroupManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ObjectGroupManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~ObjectGroupManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ObjectGroupManager (const ObjectGroupManager &);

    void operator= (const ObjectGroupManager &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroupManager;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FTRT_AMI_OBJECTGROUPMANAGERHANDLER__VAR_OUT_CH_)
#define _FTRT_AMI_OBJECTGROUPMANAGERHANDLER__VAR_OUT_CH_

  class AMI_ObjectGroupManagerHandler;
  typedef AMI_ObjectGroupManagerHandler *AMI_ObjectGroupManagerHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_ObjectGroupManagerHandler
      >
    AMI_ObjectGroupManagerHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_ObjectGroupManagerHandler
      >
    AMI_ObjectGroupManagerHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FtRtEvent_Export AMI_ObjectGroupManagerHandler
    : public virtual ::FTRT::AMI_FaultListenerHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_ObjectGroupManagerHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_ObjectGroupManagerHandler_ptr _ptr_type;
    typedef AMI_ObjectGroupManagerHandler_var _var_type;
    typedef AMI_ObjectGroupManagerHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_ObjectGroupManagerHandler_ptr _duplicate (AMI_ObjectGroupManagerHandler_ptr obj);

    static void _tao_release (AMI_ObjectGroupManagerHandler_ptr obj);

    static AMI_ObjectGroupManagerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_ObjectGroupManagerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_ObjectGroupManagerHandler_ptr _nil (void);

    virtual void start (
      ::CORBA::Boolean ami_return_val,
      const ::FTRT::Location & the_location);

    static void 
    start_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void start_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void create_group (
      void);

    static void 
    create_group_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void create_group_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void add_member (
      void);

    static void 
    add_member_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void add_member_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void set_state (
      void);

    static void 
    set_state_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void set_state_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_ObjectGroupManagerHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FTRT_AMI_ObjectGroupManagerHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_ObjectGroupManagerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_ObjectGroupManagerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_ObjectGroupManagerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_ObjectGroupManagerHandler (const AMI_ObjectGroupManagerHandler &);

    void operator= (const AMI_ObjectGroupManagerHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FtRtEvent_Export ::CORBA::TypeCode_ptr const _tc_AMI_ObjectGroupManagerHandler;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module FTRT

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:308

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FTRT_FAULTLISTENER__ARG_TRAITS_)
#define _FTRT_FAULTLISTENER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FTRT::FaultListener>
    : public
        Object_Arg_Traits_T<
            ::FTRT::FaultListener_ptr,
            ::FTRT::FaultListener_var,
            ::FTRT::FaultListener_out,
            TAO::Objref_Traits<FTRT::FaultListener>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FTRT_AMI_FAULTLISTENERHANDLER__ARG_TRAITS_)
#define _FTRT_AMI_FAULTLISTENERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FTRT::AMI_FaultListenerHandler>
    : public
        Object_Arg_Traits_T<
            ::FTRT::AMI_FaultListenerHandler_ptr,
            ::FTRT::AMI_FaultListenerHandler_var,
            ::FTRT::AMI_FaultListenerHandler_out,
            TAO::Objref_Traits<FTRT::AMI_FaultListenerHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FTRT_OBJECTGROUPMANAGER__ARG_TRAITS_)
#define _FTRT_OBJECTGROUPMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FTRT::ObjectGroupManager>
    : public
        Object_Arg_Traits_T<
            ::FTRT::ObjectGroupManager_ptr,
            ::FTRT::ObjectGroupManager_var,
            ::FTRT::ObjectGroupManager_out,
            TAO::Objref_Traits<FTRT::ObjectGroupManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::FTRT::ManagerInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::FTRT::ManagerInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::FTRT::ManagerInfoList>
    : public
        Var_Size_Arg_Traits_T<
            ::FTRT::ManagerInfoList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FTRT_AMI_OBJECTGROUPMANAGERHANDLER__ARG_TRAITS_)
#define _FTRT_AMI_OBJECTGROUPMANAGERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FTRT::AMI_ObjectGroupManagerHandler>
    : public
        Object_Arg_Traits_T<
            ::FTRT::AMI_ObjectGroupManagerHandler_ptr,
            ::FTRT::AMI_ObjectGroupManagerHandler_var,
            ::FTRT::AMI_ObjectGroupManagerHandler_out,
            TAO::Objref_Traits<FTRT::AMI_ObjectGroupManagerHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_FtRtEvent_Export
TAO::Collocation_Proxy_Broker *
(*FTRT__TAO_FaultListener_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_FtRtEvent_Export
TAO::Collocation_Proxy_Broker *
(*FTRT__TAO_AMI_FaultListenerHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_FtRtEvent_Export
TAO::Collocation_Proxy_Broker *
(*FTRT__TAO_ObjectGroupManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_FtRtEvent_Export
TAO::Collocation_Proxy_Broker *
(*FTRT__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FTRT_FAULTLISTENER__TRAITS_)
#define _FTRT_FAULTLISTENER__TRAITS_

  template<>
  struct TAO_FtRtEvent_Export Objref_Traits< ::FTRT::FaultListener>
  {
    static ::FTRT::FaultListener_ptr duplicate (
        ::FTRT::FaultListener_ptr p);
    static void release (
        ::FTRT::FaultListener_ptr p);
    static ::FTRT::FaultListener_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FTRT::FaultListener_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FTRT_AMI_FAULTLISTENERHANDLER__TRAITS_)
#define _FTRT_AMI_FAULTLISTENERHANDLER__TRAITS_

  template<>
  struct TAO_FtRtEvent_Export Objref_Traits< ::FTRT::AMI_FaultListenerHandler>
  {
    static ::FTRT::AMI_FaultListenerHandler_ptr duplicate (
        ::FTRT::AMI_FaultListenerHandler_ptr p);
    static void release (
        ::FTRT::AMI_FaultListenerHandler_ptr p);
    static ::FTRT::AMI_FaultListenerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FTRT::AMI_FaultListenerHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FTRT_OBJECTGROUPMANAGER__TRAITS_)
#define _FTRT_OBJECTGROUPMANAGER__TRAITS_

  template<>
  struct TAO_FtRtEvent_Export Objref_Traits< ::FTRT::ObjectGroupManager>
  {
    static ::FTRT::ObjectGroupManager_ptr duplicate (
        ::FTRT::ObjectGroupManager_ptr p);
    static void release (
        ::FTRT::ObjectGroupManager_ptr p);
    static ::FTRT::ObjectGroupManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FTRT::ObjectGroupManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FTRT_AMI_OBJECTGROUPMANAGERHANDLER__TRAITS_)
#define _FTRT_AMI_OBJECTGROUPMANAGERHANDLER__TRAITS_

  template<>
  struct TAO_FtRtEvent_Export Objref_Traits< ::FTRT::AMI_ObjectGroupManagerHandler>
  {
    static ::FTRT::AMI_ObjectGroupManagerHandler_ptr duplicate (
        ::FTRT::AMI_ObjectGroupManagerHandler_ptr p);
    static void release (
        ::FTRT::AMI_ObjectGroupManagerHandler_ptr p);
    static ::FTRT::AMI_ObjectGroupManagerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FTRT::AMI_ObjectGroupManagerHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, FaultListener_ptr); // copying
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, FaultListener_ptr *); // non-copying
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FaultListener_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::FaultListener_ptr); // copying
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::FaultListener_ptr *); // non-copying
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::FaultListener_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, AMI_FaultListenerHandler_ptr); // copying
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, AMI_FaultListenerHandler_ptr *); // non-copying
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_FaultListenerHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::AMI_FaultListenerHandler_ptr); // copying
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::AMI_FaultListenerHandler_ptr *); // non-copying
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::AMI_FaultListenerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, const ::FTRT::ManagerInfo &); // copying version
  TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, ::FTRT::ManagerInfo*); // noncopying version
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FTRT::ManagerInfo *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FTRT::ManagerInfo *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, const FTRT::ManagerInfo &); // copying version
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::ManagerInfo*); // noncopying version
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::ManagerInfo *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FTRT::ManagerInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, const ::FTRT::PredecessorUnreachable &); // copying version
  TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, ::FTRT::PredecessorUnreachable*); // noncopying version
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FTRT::PredecessorUnreachable *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FTRT::PredecessorUnreachable *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, const FTRT::PredecessorUnreachable &); // copying version
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::PredecessorUnreachable*); // noncopying version
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::PredecessorUnreachable *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FTRT::PredecessorUnreachable *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, const ::FTRT::ManagerInfoList &); // copying version
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, ::FTRT::ManagerInfoList*); // noncopying version
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FTRT::ManagerInfoList *&); // deprecated
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FTRT::ManagerInfoList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, const FTRT::ManagerInfoList &); // copying version
TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, FTRT::ManagerInfoList*); // noncopying version
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::ManagerInfoList *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FTRT::ManagerInfoList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, const ::FTRT::InvalidState &); // copying version
  TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, ::FTRT::InvalidState*); // noncopying version
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FTRT::InvalidState *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FTRT::InvalidState *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, const FTRT::InvalidState &); // copying version
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::InvalidState*); // noncopying version
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::InvalidState *&); // deprecated
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FTRT::InvalidState *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, ObjectGroupManager_ptr); // copying
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, ObjectGroupManager_ptr *); // non-copying
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ObjectGroupManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::ObjectGroupManager_ptr); // copying
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::ObjectGroupManager_ptr *); // non-copying
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::ObjectGroupManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, AMI_ObjectGroupManagerHandler_ptr); // copying
  TAO_FtRtEvent_Export void operator<<= ( ::CORBA::Any &, AMI_ObjectGroupManagerHandler_ptr *); // non-copying
  TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ObjectGroupManagerHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::AMI_ObjectGroupManagerHandler_ptr); // copying
TAO_FtRtEvent_Export void operator<<= (::CORBA::Any &, FTRT::AMI_ObjectGroupManagerHandler_ptr *); // non-copying
TAO_FtRtEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FTRT::AMI_ObjectGroupManagerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::FaultListener_ptr );
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::FaultListener_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::AMI_FaultListenerHandler_ptr );
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::AMI_FaultListenerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::ManagerInfo &);
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::ManagerInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::PredecessorUnreachable &);
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::PredecessorUnreachable &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_FTRT_ManagerInfoList_H_
#define _TAO_CDR_OP_FTRT_ManagerInfoList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::ManagerInfoList &_tao_sequence);
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::ManagerInfoList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_FTRT_ManagerInfoList_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::InvalidState &);
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::InvalidState &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::ObjectGroupManager_ptr );
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::ObjectGroupManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtRtEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FTRT::AMI_ObjectGroupManagerHandler_ptr );
TAO_FtRtEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FTRT::AMI_ObjectGroupManagerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "FTRT_GroupManagerC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

