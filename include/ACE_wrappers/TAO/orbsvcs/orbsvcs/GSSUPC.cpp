// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "GSSUPC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "GSSUPC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_GSSUP_InitialContextToken[] =
      {
        { "username", &CSI::_tc_UTF8String },
        { "password", &CSI::_tc_UTF8String },
        { "target_name", &CSI::_tc_GSS_NT_ExportedName }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_GSSUP_InitialContextToken (
  ::CORBA::tk_struct,
  "IDL:omg.org/GSSUP/InitialContextToken:1.0",
  "InitialContextToken",
  _tao_fields_GSSUP_InitialContextToken,
  3);


namespace GSSUP
{
  ::CORBA::TypeCode_ptr const _tc_InitialContextToken =
    &_tao_tc_GSSUP_InitialContextToken;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
GSSUP::InitialContextToken::_tao_any_destructor (
    void *_tao_void_pointer)
{
  InitialContextToken *_tao_tmp_pointer =
    static_cast<InitialContextToken *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_GSSUP_ErrorCode (
    ::CORBA::tk_alias,
    "IDL:omg.org/GSSUP/ErrorCode:1.0",
    "ErrorCode",
    &CORBA::_tc_ulong);
  

namespace GSSUP
{
  ::CORBA::TypeCode_ptr const _tc_ErrorCode =
    &_tao_tc_GSSUP_ErrorCode;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_GSSUP_ErrorToken[] =
      {
        { "error_code", &GSSUP::_tc_ErrorCode }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_GSSUP_ErrorToken (
  ::CORBA::tk_struct,
  "IDL:omg.org/GSSUP/ErrorToken:1.0",
  "ErrorToken",
  _tao_fields_GSSUP_ErrorToken,
  1);


namespace GSSUP
{
  ::CORBA::TypeCode_ptr const _tc_ErrorToken =
    &_tao_tc_GSSUP_ErrorToken;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
GSSUP::ErrorToken::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ErrorToken *_tao_tmp_pointer =
    static_cast<ErrorToken *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace GSSUP
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::GSSUP::InitialContextToken &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::GSSUP::InitialContextToken *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::GSSUP::InitialContextToken>::insert_copy (
          _tao_any,
          ::GSSUP::InitialContextToken::_tao_any_destructor,
          ::GSSUP::_tc_InitialContextToken,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      GSSUP::InitialContextToken *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::GSSUP::InitialContextToken>::insert (
        _tao_any,
        ::GSSUP::InitialContextToken::_tao_any_destructor,
        ::GSSUP::_tc_InitialContextToken,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::GSSUP::InitialContextToken *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::GSSUP::InitialContextToken *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::GSSUP::InitialContextToken *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::GSSUP::InitialContextToken>::extract (
          _tao_any,
          ::GSSUP::InitialContextToken::_tao_any_destructor,
          ::GSSUP::_tc_InitialContextToken,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const GSSUP::InitialContextToken &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<GSSUP::InitialContextToken *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<GSSUP::InitialContextToken>::insert_copy (
        _tao_any,
        GSSUP::InitialContextToken::_tao_any_destructor,
        GSSUP::_tc_InitialContextToken,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    GSSUP::InitialContextToken *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<GSSUP::InitialContextToken>::insert (
      _tao_any,
      GSSUP::InitialContextToken::_tao_any_destructor,
      GSSUP::_tc_InitialContextToken,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    GSSUP::InitialContextToken *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const GSSUP::InitialContextToken *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const GSSUP::InitialContextToken *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<GSSUP::InitialContextToken>::extract (
        _tao_any,
        GSSUP::InitialContextToken::_tao_any_destructor,
        GSSUP::_tc_InitialContextToken,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace GSSUP
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::GSSUP::ErrorToken &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::GSSUP::ErrorToken *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::GSSUP::ErrorToken>::insert_copy (
          _tao_any,
          ::GSSUP::ErrorToken::_tao_any_destructor,
          ::GSSUP::_tc_ErrorToken,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      GSSUP::ErrorToken *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::GSSUP::ErrorToken>::insert (
        _tao_any,
        ::GSSUP::ErrorToken::_tao_any_destructor,
        ::GSSUP::_tc_ErrorToken,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::GSSUP::ErrorToken *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::GSSUP::ErrorToken *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::GSSUP::ErrorToken *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::GSSUP::ErrorToken>::extract (
          _tao_any,
          ::GSSUP::ErrorToken::_tao_any_destructor,
          ::GSSUP::_tc_ErrorToken,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const GSSUP::ErrorToken &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<GSSUP::ErrorToken *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<GSSUP::ErrorToken>::insert_copy (
        _tao_any,
        GSSUP::ErrorToken::_tao_any_destructor,
        GSSUP::_tc_ErrorToken,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    GSSUP::ErrorToken *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<GSSUP::ErrorToken>::insert (
      _tao_any,
      GSSUP::ErrorToken::_tao_any_destructor,
      GSSUP::_tc_ErrorToken,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    GSSUP::ErrorToken *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const GSSUP::ErrorToken *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const GSSUP::ErrorToken *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<GSSUP::ErrorToken>::extract (
        _tao_any,
        GSSUP::ErrorToken::_tao_any_destructor,
        GSSUP::_tc_ErrorToken,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const GSSUP::InitialContextToken &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.username) &&
    (strm << _tao_aggregate.password) &&
    (strm << _tao_aggregate.target_name);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    GSSUP::InitialContextToken &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.username) &&
    (strm >> _tao_aggregate.password) &&
    (strm >> _tao_aggregate.target_name);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const GSSUP::ErrorToken &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.error_code);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    GSSUP::ErrorToken &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.error_code);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


