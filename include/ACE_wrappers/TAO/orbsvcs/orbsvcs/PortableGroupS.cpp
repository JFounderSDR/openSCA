// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_PORTABLEGROUPS_TFQO1U_CPP_
#define _TAO_IDL_PORTABLEGROUPS_TFQO1U_CPP_


#include "PortableGroupS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/Exception_Data.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "PortableGroupS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_PropertyManager_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_PropertyManager_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_PropertyManager_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33,  0, 33,  0, 33, 33,
      0,  5, 33, 10, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33,  5,  0,  0, 33, 33, 33,
     33,  0, 33, 33, 33, 33, 33, 33,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_PropertyManager_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 13,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 26,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 32,
      HASH_VALUE_RANGE = 28,
      DUPLICATES = 0,
      WORDLIST_SIZE = 18
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::PropertyManager::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::PropertyManager::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::PropertyManager::_non_existent_skel, 0},
      {"_repository_id", &POA_PortableGroup::PropertyManager::_repository_id_skel, 0},
      {"_interface", &POA_PortableGroup::PropertyManager::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"set_type_properties", &POA_PortableGroup::PropertyManager::set_type_properties_skel, 0},
      {"",0,0},{"",0,0},
      {"set_default_properties", &POA_PortableGroup::PropertyManager::set_default_properties_skel, 0},
      {"",0,0},
      {"get_properties", &POA_PortableGroup::PropertyManager::get_properties_skel, 0},
      {"",0,0},
      {"set_properties_dynamically", &POA_PortableGroup::PropertyManager::set_properties_dynamically_skel, 0},
      {"remove_type_properties", &POA_PortableGroup::PropertyManager::remove_type_properties_skel, 0},
      {"",0,0},
      {"get_type_properties", &POA_PortableGroup::PropertyManager::get_type_properties_skel, 0},
      {"remove_default_properties", &POA_PortableGroup::PropertyManager::remove_default_properties_skel, 0},
      {"",0,0},
      {"get_default_properties", &POA_PortableGroup::PropertyManager::get_default_properties_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_PropertyManager_Perfect_Hash_OpTable tao_PortableGroup_PropertyManager_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_PropertyManager_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::PropertyManager::PropertyManager (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_PropertyManager_optable;
}

POA_PortableGroup::PropertyManager::PropertyManager (const PropertyManager& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_PortableGroup::PropertyManager::~PropertyManager (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_default_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline set_default_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_default_properties (
        arg_1);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::set_default_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_props;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_props
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  set_default_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_default_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_default_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_default_properties ();
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::get_default_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::Properties>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  get_default_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_default_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline remove_default_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->remove_default_properties (
        arg_1);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::remove_default_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_props;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_props
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  remove_default_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_type_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline set_type_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->set_type_properties (
        arg_1
        , arg_2);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::set_type_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_overrides;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_type_id,
      &_tao_overrides
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  set_type_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_type_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_type_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_type_properties (
          arg_1);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::get_type_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::Properties>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_type_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  get_type_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_type_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline remove_type_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->remove_type_properties (
        arg_1
        , arg_2);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::remove_type_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_props;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_type_id,
      &_tao_props
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  remove_type_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_properties_dynamically_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline set_properties_dynamically_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->set_properties_dynamically (
        arg_1
        , arg_2);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::set_properties_dynamically_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_overrides;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group,
      &_tao_overrides
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  set_properties_dynamically_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_properties_PropertyManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_properties_PropertyManager (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_properties (
          arg_1);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::PropertyManager::get_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::Properties>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);

  get_properties_PropertyManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_PropertyManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_PropertyManager_Upcall_Command (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::PropertyManager::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);
  
  _is_a_PropertyManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_PropertyManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_PropertyManager_Upcall_Command (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::PropertyManager::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);
  
  _non_existent_PropertyManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_PropertyManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_PropertyManager_Upcall_Command (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::PropertyManager::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);
  
  _repository_id_PropertyManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::PropertyManager::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_PropertyManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_PropertyManager_Upcall_Command (
      POA_PortableGroup::PropertyManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::PropertyManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::PropertyManager::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::PropertyManager * const impl =
    static_cast<POA_PortableGroup::PropertyManager *> (servant);
  
  _get_component_PropertyManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::PropertyManager::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/PropertyManager:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::PropertyManager::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/PropertyManager:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::PropertyManager::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::PropertyManager *
POA_PortableGroup::PropertyManager::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::PropertyManager STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_AMI_PropertyManagerHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_AMI_PropertyManagerHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_AMI_PropertyManagerHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
     44, 44, 44, 44, 44,  0, 44,  0, 44, 44,
      0,  5, 44, 15, 44, 44, 44, 44, 44, 44,
     44, 44,  0, 44,  5,  0,  0, 44, 44, 44,
     44,  0, 44, 44, 44, 44, 44, 44,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_AMI_PropertyManagerHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 21,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 32,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 43,
      HASH_VALUE_RANGE = 39,
      DUPLICATES = 0,
      WORDLIST_SIZE = 26
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::AMI_PropertyManagerHandler::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::AMI_PropertyManagerHandler::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::AMI_PropertyManagerHandler::_non_existent_skel, 0},
      {"_repository_id", &POA_PortableGroup::AMI_PropertyManagerHandler::_repository_id_skel, 0},
      {"_interface", &POA_PortableGroup::AMI_PropertyManagerHandler::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"set_type_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::set_type_properties_skel, 0},
      {"",0,0},{"",0,0},
      {"set_default_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::set_default_properties_skel, 0},
      {"",0,0},{"",0,0},
      {"set_type_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::set_type_properties_excep_skel, 0},
      {"set_properties_dynamically", &POA_PortableGroup::AMI_PropertyManagerHandler::set_properties_dynamically_skel, 0},
      {"remove_type_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_type_properties_skel, 0},
      {"set_default_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::set_default_properties_excep_skel, 0},
      {"get_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::get_properties_skel, 0},
      {"remove_default_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_default_properties_skel, 0},
      {"",0,0},
      {"set_properties_dynamically_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::set_properties_dynamically_excep_skel, 0},
      {"remove_type_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_type_properties_excep_skel, 0},
      {"get_type_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::get_type_properties_skel, 0},
      {"get_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::get_properties_excep_skel, 0},
      {"remove_default_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_default_properties_excep_skel, 0},
      {"get_default_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::get_default_properties_skel, 0},
      {"",0,0},{"",0,0},
      {"get_type_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::get_type_properties_excep_skel, 0},
      {"",0,0},{"",0,0},
      {"get_default_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::get_default_properties_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_AMI_PropertyManagerHandler_Perfect_Hash_OpTable tao_PortableGroup_AMI_PropertyManagerHandler_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::AMI_PropertyManagerHandler::AMI_PropertyManagerHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_AMI_PropertyManagerHandler_optable;
}

POA_PortableGroup::AMI_PropertyManagerHandler::AMI_PropertyManagerHandler (const AMI_PropertyManagerHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_PortableGroup::AMI_PropertyManagerHandler::~AMI_PropertyManagerHandler (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_default_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_default_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->set_default_properties ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::set_default_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  set_default_properties_AMI_PropertyManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_default_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_default_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_PropertyManagerHandler_set_default_properties_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0",
            PortableGroup::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_PropertyManagerHandler_set_default_properties_excep_exceptiondata, 2);
        }
      
      this->servant_->set_default_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::set_default_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  set_default_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_default_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_default_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_default_properties (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::get_default_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  get_default_properties_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_default_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_default_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_default_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::get_default_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  get_default_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_default_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_default_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->remove_default_properties ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::remove_default_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  remove_default_properties_AMI_PropertyManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_default_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_default_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_PropertyManagerHandler_remove_default_properties_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0",
            PortableGroup::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_PropertyManagerHandler_remove_default_properties_excep_exceptiondata, 2);
        }
      
      this->servant_->remove_default_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::remove_default_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  remove_default_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_type_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_type_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->set_type_properties ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::set_type_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  set_type_properties_AMI_PropertyManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_type_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_type_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_PropertyManagerHandler_set_type_properties_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0",
            PortableGroup::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_PropertyManagerHandler_set_type_properties_excep_exceptiondata, 2);
        }
      
      this->servant_->set_type_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::set_type_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  set_type_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_type_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_type_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_type_properties (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::get_type_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  get_type_properties_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_type_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_type_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_type_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::get_type_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  get_type_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_type_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_type_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->remove_type_properties ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::remove_type_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  remove_type_properties_AMI_PropertyManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_type_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_type_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_PropertyManagerHandler_remove_type_properties_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0",
            PortableGroup::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_PropertyManagerHandler_remove_type_properties_excep_exceptiondata, 2);
        }
      
      this->servant_->remove_type_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::remove_type_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  remove_type_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_properties_dynamically_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_properties_dynamically_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->set_properties_dynamically ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::set_properties_dynamically_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  set_properties_dynamically_AMI_PropertyManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class set_properties_dynamically_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_properties_dynamically_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_PropertyManagerHandler_set_properties_dynamically_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0",
            PortableGroup::UnsupportedProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_UnsupportedProperty
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_PropertyManagerHandler_set_properties_dynamically_excep_exceptiondata, 3);
        }
      
      this->servant_->set_properties_dynamically_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::set_properties_dynamically_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_UnsupportedProperty
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  set_properties_dynamically_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_properties_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_properties_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Properties> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_properties (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::get_properties_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Properties>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  get_properties_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_properties_excep_AMI_PropertyManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_properties_excep_AMI_PropertyManagerHandler (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_PropertyManagerHandler_get_properties_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_PropertyManagerHandler_get_properties_excep_exceptiondata, 1);
        }
      
      this->servant_->get_properties_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_PropertyManagerHandler::get_properties_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);

  get_properties_excep_AMI_PropertyManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_AMI_PropertyManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_AMI_PropertyManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_PropertyManagerHandler::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);
  
  _is_a_AMI_PropertyManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_AMI_PropertyManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_AMI_PropertyManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_PropertyManagerHandler::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);
  
  _non_existent_AMI_PropertyManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_AMI_PropertyManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_AMI_PropertyManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_PropertyManagerHandler::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);
  
  _repository_id_AMI_PropertyManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::AMI_PropertyManagerHandler::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_AMI_PropertyManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_AMI_PropertyManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_PropertyManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::AMI_PropertyManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_PropertyManagerHandler::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_PropertyManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_PropertyManagerHandler *> (servant);
  
  _get_component_AMI_PropertyManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::AMI_PropertyManagerHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_PropertyManagerHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::AMI_PropertyManagerHandler::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/AMI_PropertyManagerHandler:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::AMI_PropertyManagerHandler::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::AMI_PropertyManagerHandler *
POA_PortableGroup::AMI_PropertyManagerHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::AMI_PropertyManagerHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_ObjectGroupManager_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_ObjectGroupManager_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_ObjectGroupManager_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31,  0, 31,  0, 31,  4,
      0, 15, 10,  0, 31, 31, 31, 31,  0, 31,
      5, 31, 31, 31,  0,  0,  5, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_ObjectGroupManager_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 14,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 28,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 30,
      HASH_VALUE_RANGE = 26,
      DUPLICATES = 0,
      WORDLIST_SIZE = 19
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::ObjectGroupManager::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_member", &POA_PortableGroup::ObjectGroupManager::add_member_skel, 0},
      {"",0,0},{"",0,0},
      {"remove_member", &POA_PortableGroup::ObjectGroupManager::remove_member_skel, 0},
      {"_repository_id", &POA_PortableGroup::ObjectGroupManager::_repository_id_skel, 0},
      {"_component", &POA_PortableGroup::ObjectGroupManager::_component_skel, 0},
      {"",0,0},
      {"create_member", &POA_PortableGroup::ObjectGroupManager::create_member_skel, 0},
      {"_non_existent", &POA_PortableGroup::ObjectGroupManager::_non_existent_skel, 0},
      {"get_object_group_id", &POA_PortableGroup::ObjectGroupManager::get_object_group_id_skel, 0},
      {"locations_of_members", &POA_PortableGroup::ObjectGroupManager::locations_of_members_skel, 0},
      {"",0,0},{"",0,0},
      {"groups_at_location", &POA_PortableGroup::ObjectGroupManager::groups_at_location_skel, 0},
      {"get_member_ref", &POA_PortableGroup::ObjectGroupManager::get_member_ref_skel, 0},
      {"_interface", &POA_PortableGroup::ObjectGroupManager::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"get_object_group_ref_from_id", &POA_PortableGroup::ObjectGroupManager::get_object_group_ref_from_id_skel, 0},
      {"",0,0},
      {"get_object_group_ref", &POA_PortableGroup::ObjectGroupManager::get_object_group_ref_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_ObjectGroupManager_Perfect_Hash_OpTable tao_PortableGroup_ObjectGroupManager_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::ObjectGroupManager::ObjectGroupManager (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_ObjectGroupManager_optable;
}

POA_PortableGroup::ObjectGroupManager::ObjectGroupManager (const ObjectGroupManager& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_PortableGroup::ObjectGroupManager::~ObjectGroupManager (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_member_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline create_member_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< ::PortableGroup::Criteria>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Criteria> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_member (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::create_member_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_NoFactory,
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 6;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;
  TAO::SArg_Traits< ::PortableGroup::Criteria>::in_arg_val _tao_the_criteria;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group,
      &_tao_the_location,
      &_tao_type_id,
      &_tao_the_criteria
    };
  
  static size_t const nargs = 5;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  create_member_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_member_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline add_member_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->add_member (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::add_member_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_ObjectNotAdded
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_member;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group,
      &_tao_the_location,
      &_tao_member
    };
  
  static size_t const nargs = 4;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  add_member_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_member_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline remove_member_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->remove_member (
          arg_1
          , arg_2);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::remove_member_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group,
      &_tao_the_location
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  remove_member_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class locations_of_members_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline locations_of_members_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Locations>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::Locations> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->locations_of_members (
          arg_1);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::locations_of_members_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::Locations>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  locations_of_members_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class groups_at_location_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline groups_at_location_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::ObjectGroups>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::ObjectGroups> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->groups_at_location (
          arg_1);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::groups_at_location_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::ObjectGroups>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_the_location
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  groups_at_location_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_id_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_id_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_object_group_id (
          arg_1);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::get_object_group_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::ULongLong>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  get_object_group_id_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_ref_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_object_group_ref (
          arg_1);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::get_object_group_ref_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  get_object_group_ref_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_member_ref_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_member_ref_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->get_member_ref (
          arg_1
          , arg_2);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::get_member_ref_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_object_group;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_loc;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_object_group,
      &_tao_loc
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  get_member_ref_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_ref_from_id_ObjectGroupManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_from_id_ObjectGroupManager (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_object_group_ref_from_id (
          arg_1);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::ObjectGroupManager::get_object_group_ref_from_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_group_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_group_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);

  get_object_group_ref_from_id_ObjectGroupManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_ObjectGroupManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_ObjectGroupManager_Upcall_Command (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::ObjectGroupManager::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);
  
  _is_a_ObjectGroupManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_ObjectGroupManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_ObjectGroupManager_Upcall_Command (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::ObjectGroupManager::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);
  
  _non_existent_ObjectGroupManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_ObjectGroupManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_ObjectGroupManager_Upcall_Command (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::ObjectGroupManager::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);
  
  _repository_id_ObjectGroupManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::ObjectGroupManager::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_ObjectGroupManager_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_ObjectGroupManager_Upcall_Command (
      POA_PortableGroup::ObjectGroupManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::ObjectGroupManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::ObjectGroupManager::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::ObjectGroupManager * const impl =
    static_cast<POA_PortableGroup::ObjectGroupManager *> (servant);
  
  _get_component_ObjectGroupManager_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::ObjectGroupManager::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::ObjectGroupManager::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/ObjectGroupManager:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::ObjectGroupManager::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::ObjectGroupManager *
POA_PortableGroup::ObjectGroupManager::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::ObjectGroupManager STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_AMI_ObjectGroupManagerHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_AMI_ObjectGroupManagerHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_AMI_ObjectGroupManagerHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
     50, 50, 50, 50, 50,  0, 50,  0, 50, 30,
      8,  5, 25,  0, 50, 50, 50, 50,  5, 50,
      0, 50,  0, 50,  0, 10, 20, 50, 50, 50,
     50, 50, 50, 50, 50, 50, 50, 50,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_AMI_ObjectGroupManagerHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 23,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 34,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 49,
      HASH_VALUE_RANGE = 45,
      DUPLICATES = 0,
      WORDLIST_SIZE = 28
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_member", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::add_member_skel, 0},
      {"",0,0},{"",0,0},
      {"remove_member", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::remove_member_skel, 0},
      {"",0,0},
      {"_interface", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::_interface_skel, 0},
      {"add_member_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::add_member_excep_skel, 0},
      {"",0,0},
      {"groups_at_location", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::groups_at_location_skel, 0},
      {"remove_member_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::remove_member_excep_skel, 0},
      {"get_member_ref_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_member_ref_excep_skel, 0},
      {"",0,0},
      {"_repository_id", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::_repository_id_skel, 0},
      {"",0,0},
      {"groups_at_location_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::groups_at_location_excep_skel, 0},
      {"get_object_group_id_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_id_excep_skel, 0},
      {"get_object_group_ref_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_excep_skel, 0},
      {"get_object_group_id", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_id_skel, 0},
      {"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::_component_skel, 0},
      {"locations_of_members_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::locations_of_members_excep_skel, 0},
      {"",0,0},
      {"_non_existent", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::_non_existent_skel, 0},
      {"get_object_group_ref_from_id_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_from_id_excep_skel, 0},
      {"locations_of_members", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::locations_of_members_skel, 0},
      {"get_object_group_ref_from_id", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_from_id_skel, 0},
      {"",0,0},{"",0,0},
      {"get_member_ref", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_member_ref_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_member", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::create_member_skel, 0},
      {"",0,0},
      {"get_object_group_ref", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_member_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::create_member_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_AMI_ObjectGroupManagerHandler_Perfect_Hash_OpTable tao_PortableGroup_AMI_ObjectGroupManagerHandler_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::AMI_ObjectGroupManagerHandler::AMI_ObjectGroupManagerHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_AMI_ObjectGroupManagerHandler_optable;
}

POA_PortableGroup::AMI_ObjectGroupManagerHandler::AMI_ObjectGroupManagerHandler (const AMI_ObjectGroupManagerHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_PortableGroup::AMI_ObjectGroupManagerHandler::~AMI_ObjectGroupManagerHandler (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_member_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline create_member_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->create_member (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::create_member_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_NoFactory,
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 6;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  create_member_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_member_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline create_member_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_create_member_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/MemberAlreadyPresent:1.0",
            PortableGroup::MemberAlreadyPresent::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_MemberAlreadyPresent
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/NoFactory:1.0",
            PortableGroup::NoFactory::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_NoFactory
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
            PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
            PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
            PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_create_member_excep_exceptiondata, 6);
        }
      
      this->servant_->create_member_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::create_member_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_NoFactory,
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 6;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  create_member_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_member_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline add_member_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->add_member (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::add_member_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_ObjectNotAdded
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  add_member_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_member_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline add_member_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_add_member_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/MemberAlreadyPresent:1.0",
            PortableGroup::MemberAlreadyPresent::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_MemberAlreadyPresent
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/ObjectNotAdded:1.0",
            PortableGroup::ObjectNotAdded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectNotAdded
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_add_member_excep_exceptiondata, 3);
        }
      
      this->servant_->add_member_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::add_member_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_ObjectNotAdded
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  add_member_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_member_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_member_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->remove_member (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::remove_member_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  remove_member_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_member_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline remove_member_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_remove_member_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/MemberNotFound:1.0",
            PortableGroup::MemberNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_MemberNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_remove_member_excep_exceptiondata, 2);
        }
      
      this->servant_->remove_member_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::remove_member_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  remove_member_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class locations_of_members_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline locations_of_members_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Locations>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Locations> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->locations_of_members (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::locations_of_members_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Locations>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  locations_of_members_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class locations_of_members_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline locations_of_members_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_locations_of_members_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_locations_of_members_excep_exceptiondata, 1);
        }
      
      this->servant_->locations_of_members_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::locations_of_members_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  locations_of_members_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class groups_at_location_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline groups_at_location_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::ObjectGroups>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::ObjectGroups> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->groups_at_location (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::groups_at_location_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::ObjectGroups>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  groups_at_location_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class groups_at_location_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline groups_at_location_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->groups_at_location_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::groups_at_location_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  groups_at_location_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_id_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_id_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_object_group_id (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_object_group_id_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_id_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_id_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_object_group_id_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_object_group_id_excep_exceptiondata, 1);
        }
      
      this->servant_->get_object_group_id_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_id_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_object_group_id_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_ref_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_object_group_ref (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_object_group_ref_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_ref_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_object_group_ref_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_object_group_ref_excep_exceptiondata, 1);
        }
      
      this->servant_->get_object_group_ref_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_object_group_ref_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_member_ref_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_member_ref_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_member_ref (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_member_ref_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_member_ref_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_member_ref_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_member_ref_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_member_ref_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/MemberNotFound:1.0",
            PortableGroup::MemberNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_MemberNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_member_ref_excep_exceptiondata, 2);
        }
      
      this->servant_->get_member_ref_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_member_ref_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound,
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_member_ref_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_ref_from_id_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_from_id_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_object_group_ref_from_id (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_from_id_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_object_group_ref_from_id_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_object_group_ref_from_id_excep_AMI_ObjectGroupManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_from_id_excep_AMI_ObjectGroupManagerHandler (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_object_group_ref_from_id_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_ObjectGroupManagerHandler_get_object_group_ref_from_id_excep_exceptiondata, 1);
        }
      
      this->servant_->get_object_group_ref_from_id_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_from_id_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);

  get_object_group_ref_from_id_excep_AMI_ObjectGroupManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_AMI_ObjectGroupManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_AMI_ObjectGroupManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);
  
  _is_a_AMI_ObjectGroupManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_AMI_ObjectGroupManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_AMI_ObjectGroupManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);
  
  _non_existent_AMI_ObjectGroupManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_AMI_ObjectGroupManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_AMI_ObjectGroupManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);
  
  _repository_id_AMI_ObjectGroupManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_AMI_ObjectGroupManagerHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_AMI_ObjectGroupManagerHandler_Upcall_Command (
      POA_PortableGroup::AMI_ObjectGroupManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::AMI_ObjectGroupManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_ObjectGroupManagerHandler * const impl =
    static_cast<POA_PortableGroup::AMI_ObjectGroupManagerHandler *> (servant);
  
  _get_component_AMI_ObjectGroupManagerHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::AMI_ObjectGroupManagerHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_ObjectGroupManagerHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::AMI_ObjectGroupManagerHandler::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/AMI_ObjectGroupManagerHandler:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::AMI_ObjectGroupManagerHandler::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::AMI_ObjectGroupManagerHandler *
POA_PortableGroup::AMI_ObjectGroupManagerHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::AMI_ObjectGroupManagerHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_GenericFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_GenericFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_GenericFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21,  0, 21,  0, 21,  7,
      5,  5, 21, 21, 21, 21, 21, 21, 21, 21,
     21, 21, 21, 21, 21, 21,  0, 21, 21, 21,
     21, 21, 21, 21, 21, 21, 21, 21,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_GenericFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 20,
      HASH_VALUE_RANGE = 16,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::GenericFactory::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::GenericFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::GenericFactory::_non_existent_skel, 0},
      {"",0,0},
      {"_interface", &POA_PortableGroup::GenericFactory::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"delete_object", &POA_PortableGroup::GenericFactory::delete_object_skel, 0},
      {"_repository_id", &POA_PortableGroup::GenericFactory::_repository_id_skel, 0},
      {"create_object", &POA_PortableGroup::GenericFactory::create_object_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_GenericFactory_Perfect_Hash_OpTable tao_PortableGroup_GenericFactory_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_GenericFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::GenericFactory::GenericFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_GenericFactory_optable;
}

POA_PortableGroup::GenericFactory::GenericFactory (const GenericFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_PortableGroup::GenericFactory::~GenericFactory (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_object_GenericFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_object_GenericFactory (
      POA_PortableGroup::GenericFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Criteria>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Criteria> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create_object (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_PortableGroup::GenericFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::GenericFactory::create_object_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_NoFactory,
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 5;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;
  TAO::SArg_Traits< ::PortableGroup::Criteria>::in_arg_val _tao_the_criteria;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_factory_creation_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_type_id,
      &_tao_the_criteria,
      &_tao_factory_creation_id
    };
  
  static size_t const nargs = 4;

  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);

  create_object_GenericFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_object_GenericFactory
    : public TAO::Upcall_Command
  {
  public:
    inline delete_object_GenericFactory (
      POA_PortableGroup::GenericFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->delete_object (
        arg_1);
    }
  
  private:
    POA_PortableGroup::GenericFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::GenericFactory::delete_object_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_factory_creation_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_factory_creation_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);

  delete_object_GenericFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_GenericFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_GenericFactory_Upcall_Command (
      POA_PortableGroup::GenericFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::GenericFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::GenericFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);
  
  _is_a_GenericFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_GenericFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_GenericFactory_Upcall_Command (
      POA_PortableGroup::GenericFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::GenericFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::GenericFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);
  
  _non_existent_GenericFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_GenericFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_GenericFactory_Upcall_Command (
      POA_PortableGroup::GenericFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::GenericFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::GenericFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);
  
  _repository_id_GenericFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::GenericFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_GenericFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_GenericFactory_Upcall_Command (
      POA_PortableGroup::GenericFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::GenericFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::GenericFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::GenericFactory * const impl =
    static_cast<POA_PortableGroup::GenericFactory *> (servant);
  
  _get_component_GenericFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::GenericFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/GenericFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::GenericFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/GenericFactory:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::GenericFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::GenericFactory *
POA_PortableGroup::GenericFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::GenericFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_AMI_GenericFactoryHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_AMI_GenericFactoryHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_AMI_GenericFactoryHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0, 30,  0, 30, 10,
      5,  5, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30,  0, 30, 30, 30,  0, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_AMI_GenericFactoryHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 19,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 25,
      DUPLICATES = 0,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::AMI_GenericFactoryHandler::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::AMI_GenericFactoryHandler::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::AMI_GenericFactoryHandler::_non_existent_skel, 0},
      {"",0,0},
      {"_interface", &POA_PortableGroup::AMI_GenericFactoryHandler::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"delete_object", &POA_PortableGroup::AMI_GenericFactoryHandler::delete_object_skel, 0},
      {"_repository_id", &POA_PortableGroup::AMI_GenericFactoryHandler::_repository_id_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"create_object", &POA_PortableGroup::AMI_GenericFactoryHandler::create_object_skel, 0},
      {"delete_object_excep", &POA_PortableGroup::AMI_GenericFactoryHandler::delete_object_excep_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"create_object_excep", &POA_PortableGroup::AMI_GenericFactoryHandler::create_object_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_AMI_GenericFactoryHandler_Perfect_Hash_OpTable tao_PortableGroup_AMI_GenericFactoryHandler_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::AMI_GenericFactoryHandler::AMI_GenericFactoryHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_AMI_GenericFactoryHandler_optable;
}

POA_PortableGroup::AMI_GenericFactoryHandler::AMI_GenericFactoryHandler (const AMI_GenericFactoryHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_PortableGroup::AMI_GenericFactoryHandler::~AMI_GenericFactoryHandler (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_object_AMI_GenericFactoryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline create_object_AMI_GenericFactoryHandler (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->create_object (
        arg_1
        , arg_2);
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_GenericFactoryHandler::create_object_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_NoFactory,
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 5;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_factory_creation_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val,
      &_tao_factory_creation_id
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);

  create_object_AMI_GenericFactoryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_object_excep_AMI_GenericFactoryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline create_object_excep_AMI_GenericFactoryHandler (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_GenericFactoryHandler_create_object_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/NoFactory:1.0",
            PortableGroup::NoFactory::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_NoFactory
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
            PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
            PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
            PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_GenericFactoryHandler_create_object_excep_exceptiondata, 5);
        }
      
      this->servant_->create_object_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_GenericFactoryHandler::create_object_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_NoFactory,
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 5;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);

  create_object_excep_AMI_GenericFactoryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_object_AMI_GenericFactoryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline delete_object_AMI_GenericFactoryHandler (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->delete_object ();
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_GenericFactoryHandler::delete_object_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);

  delete_object_AMI_GenericFactoryHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class delete_object_excep_AMI_GenericFactoryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline delete_object_excep_AMI_GenericFactoryHandler (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_GenericFactoryHandler_delete_object_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectNotFound:1.0",
            PortableGroup::ObjectNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_GenericFactoryHandler_delete_object_excep_exceptiondata, 1);
        }
      
      this->servant_->delete_object_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_GenericFactoryHandler::delete_object_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);

  delete_object_excep_AMI_GenericFactoryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_AMI_GenericFactoryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_AMI_GenericFactoryHandler_Upcall_Command (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_GenericFactoryHandler::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);
  
  _is_a_AMI_GenericFactoryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_AMI_GenericFactoryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_AMI_GenericFactoryHandler_Upcall_Command (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_GenericFactoryHandler::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);
  
  _non_existent_AMI_GenericFactoryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_AMI_GenericFactoryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_AMI_GenericFactoryHandler_Upcall_Command (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_GenericFactoryHandler::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);
  
  _repository_id_AMI_GenericFactoryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::AMI_GenericFactoryHandler::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_AMI_GenericFactoryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_AMI_GenericFactoryHandler_Upcall_Command (
      POA_PortableGroup::AMI_GenericFactoryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::AMI_GenericFactoryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_GenericFactoryHandler::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_GenericFactoryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_GenericFactoryHandler *> (servant);
  
  _get_component_AMI_GenericFactoryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::AMI_GenericFactoryHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_GenericFactoryHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::AMI_GenericFactoryHandler::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/AMI_GenericFactoryHandler:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::AMI_GenericFactoryHandler::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::AMI_GenericFactoryHandler *
POA_PortableGroup::AMI_GenericFactoryHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::AMI_GenericFactoryHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_FactoryRegistry_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_FactoryRegistry_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_FactoryRegistry_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, 32, 32, 32, 32,  0, 32,  0, 32, 32,
      0,  0, 32, 32, 32, 32, 32, 32,  5, 32,
      0, 32, 32, 32,  0, 32, 10,  0, 32, 32,
     32,  0, 32, 32, 32, 32, 32, 32,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_FactoryRegistry_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 11,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 30,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 31,
      HASH_VALUE_RANGE = 27,
      DUPLICATES = 0,
      WORDLIST_SIZE = 16
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::FactoryRegistry::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_interface", &POA_PortableGroup::FactoryRegistry::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"_repository_id", &POA_PortableGroup::FactoryRegistry::_repository_id_skel, 0},
      {"",0,0},
      {"register_factory", &POA_PortableGroup::FactoryRegistry::register_factory_skel, 0},
      {"",0,0},
      {"unregister_factory", &POA_PortableGroup::FactoryRegistry::unregister_factory_skel, 0},
      {"",0,0},
      {"_component", &POA_PortableGroup::FactoryRegistry::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::FactoryRegistry::_non_existent_skel, 0},
      {"",0,0},{"",0,0},
      {"unregister_factory_by_role", &POA_PortableGroup::FactoryRegistry::unregister_factory_by_role_skel, 0},
      {"list_factories_by_role", &POA_PortableGroup::FactoryRegistry::list_factories_by_role_skel, 0},
      {"",0,0},{"",0,0},
      {"unregister_factory_by_location", &POA_PortableGroup::FactoryRegistry::unregister_factory_by_location_skel, 0},
      {"list_factories_by_location", &POA_PortableGroup::FactoryRegistry::list_factories_by_location_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_FactoryRegistry_Perfect_Hash_OpTable tao_PortableGroup_FactoryRegistry_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::FactoryRegistry::FactoryRegistry (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_FactoryRegistry_optable;
}

POA_PortableGroup::FactoryRegistry::FactoryRegistry (const FactoryRegistry& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_PortableGroup::FactoryRegistry::~FactoryRegistry (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class register_factory_FactoryRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline register_factory_FactoryRegistry (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::PortableGroup::FactoryInfo>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::FactoryInfo> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->register_factory (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::FactoryRegistry::register_factory_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_TypeConflict
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_role;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;
  TAO::SArg_Traits< ::PortableGroup::FactoryInfo>::in_arg_val _tao_factory_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_role,
      &_tao_type_id,
      &_tao_factory_info
    };
  
  static size_t const nargs = 4;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);

  register_factory_FactoryRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_FactoryRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_FactoryRegistry (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->unregister_factory (
        arg_1
        , arg_2);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::FactoryRegistry::unregister_factory_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_role;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_role,
      &_tao_the_location
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);

  unregister_factory_FactoryRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_by_role_FactoryRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_by_role_FactoryRegistry (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_factory_by_role (
        arg_1);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::FactoryRegistry::unregister_factory_by_role_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_role;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_role
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);

  unregister_factory_by_role_FactoryRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_by_location_FactoryRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_by_location_FactoryRegistry (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_factory_by_location (
        arg_1);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::FactoryRegistry::unregister_factory_by_location_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_the_location
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);

  unregister_factory_by_location_FactoryRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_factories_by_role_FactoryRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline list_factories_by_role_FactoryRegistry (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::FactoryInfos> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->list_factories_by_role (
          arg_1
          , arg_2);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::FactoryRegistry::list_factories_by_role_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_role;
  TAO::SArg_Traits< char *>::out_arg_val _tao_type_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_role,
      &_tao_type_id
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);

  list_factories_by_role_FactoryRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_factories_by_location_FactoryRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline list_factories_by_location_FactoryRegistry (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::PortableGroup::FactoryInfos> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Location> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->list_factories_by_location (
          arg_1);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::FactoryRegistry::list_factories_by_location_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::Location>::in_arg_val _tao_the_location;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_the_location
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);

  list_factories_by_location_FactoryRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_FactoryRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_FactoryRegistry_Upcall_Command (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::FactoryRegistry::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);
  
  _is_a_FactoryRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_FactoryRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_FactoryRegistry_Upcall_Command (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::FactoryRegistry::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);
  
  _non_existent_FactoryRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_FactoryRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_FactoryRegistry_Upcall_Command (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::FactoryRegistry::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);
  
  _repository_id_FactoryRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::FactoryRegistry::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_FactoryRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_FactoryRegistry_Upcall_Command (
      POA_PortableGroup::FactoryRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::FactoryRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::FactoryRegistry::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::FactoryRegistry * const impl =
    static_cast<POA_PortableGroup::FactoryRegistry *> (servant);
  
  _get_component_FactoryRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::FactoryRegistry::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/FactoryRegistry:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::FactoryRegistry::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/FactoryRegistry:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::FactoryRegistry::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::FactoryRegistry *
POA_PortableGroup::FactoryRegistry::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::FactoryRegistry STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_AMI_FactoryRegistryHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_AMI_FactoryRegistryHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_AMI_FactoryRegistryHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
     38, 38, 38, 38, 38,  0, 38,  0, 38, 38,
      0,  0, 38, 38, 38, 38, 38, 38,  5, 38,
      0, 38,  0, 38,  0, 38, 10,  0, 38, 38,
     38,  0, 38, 38, 38, 38, 38, 38,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_AMI_FactoryRegistryHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 17,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 36,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 37,
      HASH_VALUE_RANGE = 33,
      DUPLICATES = 0,
      WORDLIST_SIZE = 22
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::AMI_FactoryRegistryHandler::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_interface", &POA_PortableGroup::AMI_FactoryRegistryHandler::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"_repository_id", &POA_PortableGroup::AMI_FactoryRegistryHandler::_repository_id_skel, 0},
      {"",0,0},
      {"register_factory", &POA_PortableGroup::AMI_FactoryRegistryHandler::register_factory_skel, 0},
      {"",0,0},
      {"unregister_factory", &POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_skel, 0},
      {"",0,0},
      {"_component", &POA_PortableGroup::AMI_FactoryRegistryHandler::_component_skel, 0},
      {"",0,0},
      {"register_factory_excep", &POA_PortableGroup::AMI_FactoryRegistryHandler::register_factory_excep_skel, 0},
      {"_non_existent", &POA_PortableGroup::AMI_FactoryRegistryHandler::_non_existent_skel, 0},
      {"unregister_factory_excep", &POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_excep_skel, 0},
      {"",0,0},
      {"unregister_factory_by_role", &POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_role_skel, 0},
      {"list_factories_by_role", &POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_role_skel, 0},
      {"",0,0},{"",0,0},
      {"unregister_factory_by_location", &POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_location_skel, 0},
      {"list_factories_by_location", &POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_location_skel, 0},
      {"unregister_factory_by_role_excep", &POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_role_excep_skel, 0},
      {"list_factories_by_role_excep", &POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_role_excep_skel, 0},
      {"",0,0},{"",0,0},
      {"unregister_factory_by_location_excep", &POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_location_excep_skel, 0},
      {"list_factories_by_location_excep", &POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_location_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_AMI_FactoryRegistryHandler_Perfect_Hash_OpTable tao_PortableGroup_AMI_FactoryRegistryHandler_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::AMI_FactoryRegistryHandler::AMI_FactoryRegistryHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_AMI_FactoryRegistryHandler_optable;
}

POA_PortableGroup::AMI_FactoryRegistryHandler::AMI_FactoryRegistryHandler (const AMI_FactoryRegistryHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_PortableGroup::AMI_FactoryRegistryHandler::~AMI_FactoryRegistryHandler (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class register_factory_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline register_factory_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->register_factory ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::register_factory_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_TypeConflict
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  register_factory_AMI_FactoryRegistryHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class register_factory_excep_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline register_factory_excep_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_FactoryRegistryHandler_register_factory_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/MemberAlreadyPresent:1.0",
            PortableGroup::MemberAlreadyPresent::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_MemberAlreadyPresent
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/TypeConflict:1.0",
            PortableGroup::TypeConflict::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_TypeConflict
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_FactoryRegistryHandler_register_factory_excep_exceptiondata, 2);
        }
      
      this->servant_->register_factory_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::register_factory_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_MemberAlreadyPresent,
      PortableGroup::_tc_TypeConflict
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  register_factory_excep_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->unregister_factory ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  unregister_factory_AMI_FactoryRegistryHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_excep_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_excep_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_PortableGroup_AMI_FactoryRegistryHandler_unregister_factory_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/MemberNotFound:1.0",
            PortableGroup::MemberNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_MemberNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_PortableGroup_AMI_FactoryRegistryHandler_unregister_factory_excep_exceptiondata, 1);
        }
      
      this->servant_->unregister_factory_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_MemberNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  unregister_factory_excep_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_by_role_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_by_role_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->unregister_factory_by_role ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_role_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  unregister_factory_by_role_AMI_FactoryRegistryHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_by_role_excep_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_by_role_excep_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_factory_by_role_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_role_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  unregister_factory_by_role_excep_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_by_location_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_by_location_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->unregister_factory_by_location ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_location_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  unregister_factory_by_location_AMI_FactoryRegistryHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_factory_by_location_excep_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_factory_by_location_excep_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_factory_by_location_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::unregister_factory_by_location_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  unregister_factory_by_location_excep_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_factories_by_role_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline list_factories_by_role_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::FactoryInfos> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->list_factories_by_role (
        arg_1
        , arg_2);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_role_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::in_arg_val _tao_ami_return_val;
  TAO::SArg_Traits< char *>::in_arg_val _tao_type_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val,
      &_tao_type_id
    };
  
  static size_t const nargs = 3;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  list_factories_by_role_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_factories_by_role_excep_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline list_factories_by_role_excep_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->list_factories_by_role_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_role_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  list_factories_by_role_excep_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_factories_by_location_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline list_factories_by_location_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::FactoryInfos> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->list_factories_by_location (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_location_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::PortableGroup::FactoryInfos>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  list_factories_by_location_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class list_factories_by_location_excep_AMI_FactoryRegistryHandler
    : public TAO::Upcall_Command
  {
  public:
    inline list_factories_by_location_excep_AMI_FactoryRegistryHandler (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->list_factories_by_location_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_FactoryRegistryHandler::list_factories_by_location_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);

  list_factories_by_location_excep_AMI_FactoryRegistryHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_AMI_FactoryRegistryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_AMI_FactoryRegistryHandler_Upcall_Command (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_FactoryRegistryHandler::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);
  
  _is_a_AMI_FactoryRegistryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_AMI_FactoryRegistryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_AMI_FactoryRegistryHandler_Upcall_Command (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_FactoryRegistryHandler::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);
  
  _non_existent_AMI_FactoryRegistryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_AMI_FactoryRegistryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_AMI_FactoryRegistryHandler_Upcall_Command (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_FactoryRegistryHandler::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);
  
  _repository_id_AMI_FactoryRegistryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::AMI_FactoryRegistryHandler::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_AMI_FactoryRegistryHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_AMI_FactoryRegistryHandler_Upcall_Command (
      POA_PortableGroup::AMI_FactoryRegistryHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::AMI_FactoryRegistryHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_FactoryRegistryHandler::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_FactoryRegistryHandler * const impl =
    static_cast<POA_PortableGroup::AMI_FactoryRegistryHandler *> (servant);
  
  _get_component_AMI_FactoryRegistryHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::AMI_FactoryRegistryHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_FactoryRegistryHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::AMI_FactoryRegistryHandler::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/AMI_FactoryRegistryHandler:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::AMI_FactoryRegistryHandler::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::AMI_FactoryRegistryHandler *
POA_PortableGroup::AMI_FactoryRegistryHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::AMI_FactoryRegistryHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_TAO_UpdateObjectGroup_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_TAO_UpdateObjectGroup_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_TAO_UpdateObjectGroup_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24,  0, 24,  0, 24, 24,
      0,  5, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24,  0, 24, 24, 24,  0, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_TAO_UpdateObjectGroup_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 6,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 23,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 23,
      HASH_VALUE_RANGE = 19,
      DUPLICATES = 0,
      WORDLIST_SIZE = 11
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::TAO_UpdateObjectGroup::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::TAO_UpdateObjectGroup::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::TAO_UpdateObjectGroup::_non_existent_skel, 0},
      {"_repository_id", &POA_PortableGroup::TAO_UpdateObjectGroup::_repository_id_skel, 0},
      {"_interface", &POA_PortableGroup::TAO_UpdateObjectGroup::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"tao_update_object_group", &POA_PortableGroup::TAO_UpdateObjectGroup::tao_update_object_group_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_TAO_UpdateObjectGroup_Perfect_Hash_OpTable tao_PortableGroup_TAO_UpdateObjectGroup_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::TAO_UpdateObjectGroup::TAO_UpdateObjectGroup (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_TAO_UpdateObjectGroup_optable;
}

POA_PortableGroup::TAO_UpdateObjectGroup::TAO_UpdateObjectGroup (const TAO_UpdateObjectGroup& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_PortableGroup::TAO_UpdateObjectGroup::~TAO_UpdateObjectGroup (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class tao_update_object_group_TAO_UpdateObjectGroup
    : public TAO::Upcall_Command
  {
  public:
    inline tao_update_object_group_TAO_UpdateObjectGroup (
      POA_PortableGroup::TAO_UpdateObjectGroup * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->tao_update_object_group (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_PortableGroup::TAO_UpdateObjectGroup * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::TAO_UpdateObjectGroup::tao_update_object_group_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_iogr;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_version;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_is_primary;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_iogr,
      &_tao_version,
      &_tao_is_primary
    };
  
  static size_t const nargs = 4;

  POA_PortableGroup::TAO_UpdateObjectGroup * const impl =
    static_cast<POA_PortableGroup::TAO_UpdateObjectGroup *> (servant);

  tao_update_object_group_TAO_UpdateObjectGroup command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_TAO_UpdateObjectGroup_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_TAO_UpdateObjectGroup_Upcall_Command (
      POA_PortableGroup::TAO_UpdateObjectGroup * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::TAO_UpdateObjectGroup * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::TAO_UpdateObjectGroup::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::TAO_UpdateObjectGroup * const impl =
    static_cast<POA_PortableGroup::TAO_UpdateObjectGroup *> (servant);
  
  _is_a_TAO_UpdateObjectGroup_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_TAO_UpdateObjectGroup_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_TAO_UpdateObjectGroup_Upcall_Command (
      POA_PortableGroup::TAO_UpdateObjectGroup * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::TAO_UpdateObjectGroup * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::TAO_UpdateObjectGroup::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::TAO_UpdateObjectGroup * const impl =
    static_cast<POA_PortableGroup::TAO_UpdateObjectGroup *> (servant);
  
  _non_existent_TAO_UpdateObjectGroup_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_TAO_UpdateObjectGroup_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_TAO_UpdateObjectGroup_Upcall_Command (
      POA_PortableGroup::TAO_UpdateObjectGroup * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::TAO_UpdateObjectGroup * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::TAO_UpdateObjectGroup::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::TAO_UpdateObjectGroup * const impl =
    static_cast<POA_PortableGroup::TAO_UpdateObjectGroup *> (servant);
  
  _repository_id_TAO_UpdateObjectGroup_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::TAO_UpdateObjectGroup::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::TAO_UpdateObjectGroup * const impl =
    static_cast<POA_PortableGroup::TAO_UpdateObjectGroup *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_TAO_UpdateObjectGroup_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_TAO_UpdateObjectGroup_Upcall_Command (
      POA_PortableGroup::TAO_UpdateObjectGroup * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::TAO_UpdateObjectGroup * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::TAO_UpdateObjectGroup::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::TAO_UpdateObjectGroup * const impl =
    static_cast<POA_PortableGroup::TAO_UpdateObjectGroup *> (servant);
  
  _get_component_TAO_UpdateObjectGroup_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::TAO_UpdateObjectGroup::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/TAO_UpdateObjectGroup:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::TAO_UpdateObjectGroup::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/TAO_UpdateObjectGroup:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::TAO_UpdateObjectGroup::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::TAO_UpdateObjectGroup *
POA_PortableGroup::TAO_UpdateObjectGroup::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::TAO_UpdateObjectGroup STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0, 30,  0, 30, 30,
      0,  5, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30,  0, 30, 30, 30,  0, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 29,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 25,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_non_existent_skel, 0},
      {"_repository_id", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_repository_id_skel, 0},
      {"_interface", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"tao_update_object_group", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::tao_update_object_group_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"tao_update_object_group_excep", &POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::tao_update_object_group_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_Perfect_Hash_OpTable tao_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_Initializer (size_t)
{
  PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_function_pointer = 
    PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::AMI_TAO_UpdateObjectGroupHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_PortableGroup_AMI_TAO_UpdateObjectGroupHandler_optable;
}

POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::AMI_TAO_UpdateObjectGroupHandler (const AMI_TAO_UpdateObjectGroupHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::~AMI_TAO_UpdateObjectGroupHandler (void)
{
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class tao_update_object_group_AMI_TAO_UpdateObjectGroupHandler
    : public TAO::Upcall_Command
  {
  public:
    inline tao_update_object_group_AMI_TAO_UpdateObjectGroupHandler (
      POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->tao_update_object_group ();
    }
  
  private:
    POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const servant_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::tao_update_object_group_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);

  tao_update_object_group_AMI_TAO_UpdateObjectGroupHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class tao_update_object_group_excep_AMI_TAO_UpdateObjectGroupHandler
    : public TAO::Upcall_Command
  {
  public:
    inline tao_update_object_group_excep_AMI_TAO_UpdateObjectGroupHandler (
      POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->tao_update_object_group_excep (
        arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::tao_update_object_group_excep_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);

  tao_update_object_group_excep_AMI_TAO_UpdateObjectGroupHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command (
      POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);
  
  _is_a_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command (
      POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);
  
  _non_existent_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command (
      POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);
  
  _repository_id_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_PortableGroup
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command (
      POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler * const impl =
    static_cast<POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler *> (servant);
  
  _get_component_AMI_TAO_UpdateObjectGroupHandler_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_TAO_UpdateObjectGroupHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableGroup/AMI_TAO_UpdateObjectGroupHandler:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

PortableGroup::AMI_TAO_UpdateObjectGroupHandler *
POA_PortableGroup::AMI_TAO_UpdateObjectGroupHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

