// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_COSTRADINGC_5PH1WP_H_
#define _TAO_IDL_COSTRADINGC_5PH1WP_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Trader/trading_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/StringSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Trading_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace CosTrading
{

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_LOOKUP__VAR_OUT_CH_)
#define _COSTRADING_LOOKUP__VAR_OUT_CH_

  class Lookup;
  typedef Lookup *Lookup_ptr;

  typedef
    TAO_Objref_Var_T<
        Lookup
      >
    Lookup_var;
  
  typedef
    TAO_Objref_Out_T<
        Lookup
      >
    Lookup_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_REGISTER__VAR_OUT_CH_)
#define _COSTRADING_REGISTER__VAR_OUT_CH_

  class Register;
  typedef Register *Register_ptr;

  typedef
    TAO_Objref_Var_T<
        Register
      >
    Register_var;
  
  typedef
    TAO_Objref_Out_T<
        Register
      >
    Register_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_LINK__VAR_OUT_CH_)
#define _COSTRADING_LINK__VAR_OUT_CH_

  class Link;
  typedef Link *Link_ptr;

  typedef
    TAO_Objref_Var_T<
        Link
      >
    Link_var;
  
  typedef
    TAO_Objref_Out_T<
        Link
      >
    Link_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_PROXY__VAR_OUT_CH_)
#define _COSTRADING_PROXY__VAR_OUT_CH_

  class Proxy;
  typedef Proxy *Proxy_ptr;

  typedef
    TAO_Objref_Var_T<
        Proxy
      >
    Proxy_var;
  
  typedef
    TAO_Objref_Out_T<
        Proxy
      >
    Proxy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_ADMIN__VAR_OUT_CH_)
#define _COSTRADING_ADMIN__VAR_OUT_CH_

  class Admin;
  typedef Admin *Admin_ptr;

  typedef
    TAO_Objref_Var_T<
        Admin
      >
    Admin_var;
  
  typedef
    TAO_Objref_Out_T<
        Admin
      >
    Admin_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_OFFERITERATOR__VAR_OUT_CH_)
#define _COSTRADING_OFFERITERATOR__VAR_OUT_CH_

  class OfferIterator;
  typedef OfferIterator *OfferIterator_ptr;

  typedef
    TAO_Objref_Var_T<
        OfferIterator
      >
    OfferIterator_var;
  
  typedef
    TAO_Objref_Out_T<
        OfferIterator
      >
    OfferIterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_OFFERIDITERATOR__VAR_OUT_CH_)
#define _COSTRADING_OFFERIDITERATOR__VAR_OUT_CH_

  class OfferIdIterator;
  typedef OfferIdIterator *OfferIdIterator_ptr;

  typedef
    TAO_Objref_Var_T<
        OfferIdIterator
      >
    OfferIdIterator_var;
  
  typedef
    TAO_Objref_Out_T<
        OfferIdIterator
      >
    OfferIdIterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * Istring;
  typedef ::CORBA::String_var Istring_var;
  typedef ::CORBA::String_out Istring_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Istring;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Object TypeRepository;
  typedef ::CORBA::Object_ptr TypeRepository_ptr;
  typedef ::CORBA::Object_var TypeRepository_var;
  typedef ::CORBA::Object_out TypeRepository_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_TypeRepository;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * PropertyName;
  typedef ::CORBA::String_var PropertyName_var;
  typedef ::CORBA::String_out PropertyName_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PropertyName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_PROPERTYNAMESEQ_CH_)
#define _COSTRADING_PROPERTYNAMESEQ_CH_

  class PropertyNameSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertyNameSeq
      >
    PropertyNameSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertyNameSeq
      >
    PropertyNameSeq_out;

  class TAO_Trading_Export PropertyNameSeq
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    PropertyNameSeq (void);
    PropertyNameSeq ( ::CORBA::ULong max);
    PropertyNameSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer, 
      ::CORBA::Boolean release = false);
    PropertyNameSeq (const PropertyNameSeq &);
    virtual ~PropertyNameSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyNameSeq_var _var_type;
    typedef PropertyNameSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PropertyNameSeq;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Any PropertyValue;
  typedef ::CORBA::Any_ptr PropertyValue_ptr;
  typedef ::CORBA::Any_var PropertyValue_var;
  typedef ::CORBA::Any_out PropertyValue_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PropertyValue;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Property;

  typedef
    ::TAO_Var_Var_T<
        Property
      >
    Property_var;
  
  typedef
    ::TAO_Out_T<
        Property
      >
    Property_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Trading_Export Property
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Property_var _var_type;
    typedef Property_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager name;
    CosTrading::PropertyValue value;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Property;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_PROPERTYSEQ_CH_)
#define _COSTRADING_PROPERTYSEQ_CH_

  class PropertySeq;

  typedef
    ::TAO_VarSeq_Var_T<
        PropertySeq
      >
    PropertySeq_var;

  typedef
    ::TAO_Seq_Out_T<
        PropertySeq
      >
    PropertySeq_out;

  class TAO_Trading_Export PropertySeq
    : public
        ::TAO::unbounded_value_sequence<
            Property
          >
  {
  public:
    PropertySeq (void);
    PropertySeq ( ::CORBA::ULong max);
    PropertySeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Property* buffer, 
      ::CORBA::Boolean release = false);
    PropertySeq (const PropertySeq &);
    virtual ~PropertySeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertySeq_var _var_type;
    typedef PropertySeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PropertySeq;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Offer;

  typedef
    ::TAO_Var_Var_T<
        Offer
      >
    Offer_var;
  
  typedef
    ::TAO_Out_T<
        Offer
      >
    Offer_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Trading_Export Offer
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Offer_var _var_type;
    typedef Offer_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Object_var reference;
    CosTrading::PropertySeq properties;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Offer;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_OFFERSEQ_CH_)
#define _COSTRADING_OFFERSEQ_CH_

  class OfferSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        OfferSeq
      >
    OfferSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        OfferSeq
      >
    OfferSeq_out;

  class TAO_Trading_Export OfferSeq
    : public
        ::TAO::unbounded_value_sequence<
            Offer
          >
  {
  public:
    OfferSeq (void);
    OfferSeq ( ::CORBA::ULong max);
    OfferSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Offer* buffer, 
      ::CORBA::Boolean release = false);
    OfferSeq (const OfferSeq &);
    virtual ~OfferSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef OfferSeq_var _var_type;
    typedef OfferSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_OfferSeq;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * OfferId;
  typedef ::CORBA::String_var OfferId_var;
  typedef ::CORBA::String_out OfferId_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_OfferId;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_OFFERIDSEQ_CH_)
#define _COSTRADING_OFFERIDSEQ_CH_

  class OfferIdSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        OfferIdSeq
      >
    OfferIdSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        OfferIdSeq
      >
    OfferIdSeq_out;

  class TAO_Trading_Export OfferIdSeq
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    OfferIdSeq (void);
    OfferIdSeq ( ::CORBA::ULong max);
    OfferIdSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer, 
      ::CORBA::Boolean release = false);
    OfferIdSeq (const OfferIdSeq &);
    virtual ~OfferIdSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef OfferIdSeq_var _var_type;
    typedef OfferIdSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_OfferIdSeq;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * ServiceTypeName;
  typedef ::CORBA::String_var ServiceTypeName_var;
  typedef ::CORBA::String_out ServiceTypeName_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_ServiceTypeName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * Constraint;
  typedef ::CORBA::String_var Constraint_var;
  typedef ::CORBA::String_out Constraint_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Constraint;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum FollowOption
  {
    local_only,
    if_no_local,
    always
  };

  typedef FollowOption &FollowOption_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_FollowOption;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * LinkName;
  typedef ::CORBA::String_var LinkName_var;
  typedef ::CORBA::String_out LinkName_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_LinkName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_LINKNAMESEQ_CH_)
#define _COSTRADING_LINKNAMESEQ_CH_

  class LinkNameSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        LinkNameSeq
      >
    LinkNameSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        LinkNameSeq
      >
    LinkNameSeq_out;

  class TAO_Trading_Export LinkNameSeq
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    LinkNameSeq (void);
    LinkNameSeq ( ::CORBA::ULong max);
    LinkNameSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer, 
      ::CORBA::Boolean release = false);
    LinkNameSeq (const LinkNameSeq &);
    virtual ~LinkNameSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LinkNameSeq_var _var_type;
    typedef LinkNameSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_LinkNameSeq;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

  typedef LinkNameSeq TraderName;
  typedef LinkNameSeq_var TraderName_var;
  typedef LinkNameSeq_out TraderName_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_TraderName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * PolicyName;
  typedef ::CORBA::String_var PolicyName_var;
  typedef ::CORBA::String_out PolicyName_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PolicyName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_POLICYNAMESEQ_CH_)
#define _COSTRADING_POLICYNAMESEQ_CH_

  class PolicyNameSeq;

  typedef
    ::TAO_VarSeq_Var_T<
        PolicyNameSeq
      >
    PolicyNameSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        PolicyNameSeq
      >
    PolicyNameSeq_out;

  class TAO_Trading_Export PolicyNameSeq
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    PolicyNameSeq (void);
    PolicyNameSeq ( ::CORBA::ULong max);
    PolicyNameSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer, 
      ::CORBA::Boolean release = false);
    PolicyNameSeq (const PolicyNameSeq &);
    virtual ~PolicyNameSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PolicyNameSeq_var _var_type;
    typedef PolicyNameSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PolicyNameSeq;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Any PolicyValue;
  typedef ::CORBA::Any_ptr PolicyValue_ptr;
  typedef ::CORBA::Any_var PolicyValue_var;
  typedef ::CORBA::Any_out PolicyValue_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PolicyValue;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Policy;

  typedef
    ::TAO_Var_Var_T<
        Policy
      >
    Policy_var;
  
  typedef
    ::TAO_Out_T<
        Policy
      >
    Policy_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Trading_Export Policy
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Policy_var _var_type;
    typedef Policy_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager name;
    CosTrading::PolicyValue value;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Policy;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_POLICYSEQ_CH_)
#define _COSTRADING_POLICYSEQ_CH_

  class PolicySeq;

  typedef
    ::TAO_VarSeq_Var_T<
        PolicySeq
      >
    PolicySeq_var;

  typedef
    ::TAO_Seq_Out_T<
        PolicySeq
      >
    PolicySeq_out;

  class TAO_Trading_Export PolicySeq
    : public
        ::TAO::unbounded_value_sequence<
            Policy
          >
  {
  public:
    PolicySeq (void);
    PolicySeq ( ::CORBA::ULong max);
    PolicySeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Policy* buffer, 
      ::CORBA::Boolean release = false);
    PolicySeq (const PolicySeq &);
    virtual ~PolicySeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PolicySeq_var _var_type;
    typedef PolicySeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PolicySeq;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export UnknownMaxLeft : public ::CORBA::UserException
  {
  public:
    
    UnknownMaxLeft (void);
    UnknownMaxLeft (const UnknownMaxLeft &);
    ~UnknownMaxLeft (void);

    UnknownMaxLeft &operator= (const UnknownMaxLeft &);

    static void _tao_any_destructor (void *);

    static UnknownMaxLeft *_downcast ( ::CORBA::Exception *);
    static const UnknownMaxLeft *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_UnknownMaxLeft;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export NotImplemented : public ::CORBA::UserException
  {
  public:
    
    NotImplemented (void);
    NotImplemented (const NotImplemented &);
    ~NotImplemented (void);

    NotImplemented &operator= (const NotImplemented &);

    static void _tao_any_destructor (void *);

    static NotImplemented *_downcast ( ::CORBA::Exception *);
    static const NotImplemented *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_NotImplemented;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export IllegalServiceType : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager type;
    IllegalServiceType (void);
    IllegalServiceType (const IllegalServiceType &);
    ~IllegalServiceType (void);

    IllegalServiceType &operator= (const IllegalServiceType &);

    static void _tao_any_destructor (void *);

    static IllegalServiceType *_downcast ( ::CORBA::Exception *);
    static const IllegalServiceType *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    IllegalServiceType (
        const char * _tao_type);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_IllegalServiceType;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export UnknownServiceType : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager type;
    UnknownServiceType (void);
    UnknownServiceType (const UnknownServiceType &);
    ~UnknownServiceType (void);

    UnknownServiceType &operator= (const UnknownServiceType &);

    static void _tao_any_destructor (void *);

    static UnknownServiceType *_downcast ( ::CORBA::Exception *);
    static const UnknownServiceType *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    UnknownServiceType (
        const char * _tao_type);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_UnknownServiceType;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export IllegalPropertyName : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager name;
    IllegalPropertyName (void);
    IllegalPropertyName (const IllegalPropertyName &);
    ~IllegalPropertyName (void);

    IllegalPropertyName &operator= (const IllegalPropertyName &);

    static void _tao_any_destructor (void *);

    static IllegalPropertyName *_downcast ( ::CORBA::Exception *);
    static const IllegalPropertyName *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    IllegalPropertyName (
        const char * _tao_name);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_IllegalPropertyName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export DuplicatePropertyName : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager name;
    DuplicatePropertyName (void);
    DuplicatePropertyName (const DuplicatePropertyName &);
    ~DuplicatePropertyName (void);

    DuplicatePropertyName &operator= (const DuplicatePropertyName &);

    static void _tao_any_destructor (void *);

    static DuplicatePropertyName *_downcast ( ::CORBA::Exception *);
    static const DuplicatePropertyName *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    DuplicatePropertyName (
        const char * _tao_name);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_DuplicatePropertyName;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export PropertyTypeMismatch : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager type;
    CosTrading::Property prop;
    PropertyTypeMismatch (void);
    PropertyTypeMismatch (const PropertyTypeMismatch &);
    ~PropertyTypeMismatch (void);

    PropertyTypeMismatch &operator= (const PropertyTypeMismatch &);

    static void _tao_any_destructor (void *);

    static PropertyTypeMismatch *_downcast ( ::CORBA::Exception *);
    static const PropertyTypeMismatch *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    PropertyTypeMismatch (
        const char * _tao_type,
        const CosTrading::Property & _tao_prop);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_PropertyTypeMismatch;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export MissingMandatoryProperty : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager type;
    ::TAO::String_Manager name;
    MissingMandatoryProperty (void);
    MissingMandatoryProperty (const MissingMandatoryProperty &);
    ~MissingMandatoryProperty (void);

    MissingMandatoryProperty &operator= (const MissingMandatoryProperty &);

    static void _tao_any_destructor (void *);

    static MissingMandatoryProperty *_downcast ( ::CORBA::Exception *);
    static const MissingMandatoryProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    MissingMandatoryProperty (
        const char * _tao_type,
        const char * _tao_name);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_MissingMandatoryProperty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export ReadonlyDynamicProperty : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager type;
    ::TAO::String_Manager name;
    ReadonlyDynamicProperty (void);
    ReadonlyDynamicProperty (const ReadonlyDynamicProperty &);
    ~ReadonlyDynamicProperty (void);

    ReadonlyDynamicProperty &operator= (const ReadonlyDynamicProperty &);

    static void _tao_any_destructor (void *);

    static ReadonlyDynamicProperty *_downcast ( ::CORBA::Exception *);
    static const ReadonlyDynamicProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    ReadonlyDynamicProperty (
        const char * _tao_type,
        const char * _tao_name);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_ReadonlyDynamicProperty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export IllegalConstraint : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager constr;
    IllegalConstraint (void);
    IllegalConstraint (const IllegalConstraint &);
    ~IllegalConstraint (void);

    IllegalConstraint &operator= (const IllegalConstraint &);

    static void _tao_any_destructor (void *);

    static IllegalConstraint *_downcast ( ::CORBA::Exception *);
    static const IllegalConstraint *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    IllegalConstraint (
        const char * _tao_constr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_IllegalConstraint;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export InvalidLookupRef : public ::CORBA::UserException
  {
  public:
    
    CosTrading::Lookup_var target;
    InvalidLookupRef (void);
    InvalidLookupRef (const InvalidLookupRef &);
    ~InvalidLookupRef (void);

    InvalidLookupRef &operator= (const InvalidLookupRef &);

    static void _tao_any_destructor (void *);

    static InvalidLookupRef *_downcast ( ::CORBA::Exception *);
    static const InvalidLookupRef *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    InvalidLookupRef (
        const CosTrading::Lookup_ptr _tao_target);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_InvalidLookupRef;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export IllegalOfferId : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager id;
    IllegalOfferId (void);
    IllegalOfferId (const IllegalOfferId &);
    ~IllegalOfferId (void);

    IllegalOfferId &operator= (const IllegalOfferId &);

    static void _tao_any_destructor (void *);

    static IllegalOfferId *_downcast ( ::CORBA::Exception *);
    static const IllegalOfferId *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    IllegalOfferId (
        const char * _tao_id);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_IllegalOfferId;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export UnknownOfferId : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager id;
    UnknownOfferId (void);
    UnknownOfferId (const UnknownOfferId &);
    ~UnknownOfferId (void);

    UnknownOfferId &operator= (const UnknownOfferId &);

    static void _tao_any_destructor (void *);

    static UnknownOfferId *_downcast ( ::CORBA::Exception *);
    static const UnknownOfferId *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    UnknownOfferId (
        const char * _tao_id);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_UnknownOfferId;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Trading_Export DuplicatePolicyName : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager name;
    DuplicatePolicyName (void);
    DuplicatePolicyName (const DuplicatePolicyName &);
    ~DuplicatePolicyName (void);

    DuplicatePolicyName &operator= (const DuplicatePolicyName &);

    static void _tao_any_destructor (void *);

    static DuplicatePolicyName *_downcast ( ::CORBA::Exception *);
    static const DuplicatePolicyName *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    DuplicatePolicyName (
        const char * _tao_name);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_DuplicatePolicyName;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_TRADERCOMPONENTS__VAR_OUT_CH_)
#define _COSTRADING_TRADERCOMPONENTS__VAR_OUT_CH_

  class TraderComponents;
  typedef TraderComponents *TraderComponents_ptr;

  typedef
    TAO_Objref_Var_T<
        TraderComponents
      >
    TraderComponents_var;
  
  typedef
    TAO_Objref_Out_T<
        TraderComponents
      >
    TraderComponents_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export TraderComponents
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<TraderComponents>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef TraderComponents_ptr _ptr_type;
    typedef TraderComponents_var _var_type;
    typedef TraderComponents_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static TraderComponents_ptr _duplicate (TraderComponents_ptr obj);

    static void _tao_release (TraderComponents_ptr obj);

    static TraderComponents_ptr _narrow (::CORBA::Object_ptr obj);
    static TraderComponents_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TraderComponents_ptr _nil (void);

    virtual ::CosTrading::Lookup_ptr lookup_if (
      void);

    virtual ::CosTrading::Register_ptr register_if (
      void);

    virtual ::CosTrading::Link_ptr link_if (
      void);

    virtual ::CosTrading::Proxy_ptr proxy_if (
      void);

    virtual ::CosTrading::Admin_ptr admin_if (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_TraderComponents_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    TraderComponents (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_TraderComponents_setup_collocation (void);

    // Concrete non-local interface only.
    TraderComponents (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    TraderComponents (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~TraderComponents (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TraderComponents (const TraderComponents &);

    void operator= (const TraderComponents &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_TraderComponents;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_SUPPORTATTRIBUTES__VAR_OUT_CH_)
#define _COSTRADING_SUPPORTATTRIBUTES__VAR_OUT_CH_

  class SupportAttributes;
  typedef SupportAttributes *SupportAttributes_ptr;

  typedef
    TAO_Objref_Var_T<
        SupportAttributes
      >
    SupportAttributes_var;
  
  typedef
    TAO_Objref_Out_T<
        SupportAttributes
      >
    SupportAttributes_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export SupportAttributes
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<SupportAttributes>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef SupportAttributes_ptr _ptr_type;
    typedef SupportAttributes_var _var_type;
    typedef SupportAttributes_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static SupportAttributes_ptr _duplicate (SupportAttributes_ptr obj);

    static void _tao_release (SupportAttributes_ptr obj);

    static SupportAttributes_ptr _narrow (::CORBA::Object_ptr obj);
    static SupportAttributes_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SupportAttributes_ptr _nil (void);

    virtual ::CORBA::Boolean supports_modifiable_properties (
      void);

    virtual ::CORBA::Boolean supports_dynamic_properties (
      void);

    virtual ::CORBA::Boolean supports_proxy_offers (
      void);

    virtual ::CosTrading::TypeRepository_ptr type_repos (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_SupportAttributes_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    SupportAttributes (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_SupportAttributes_setup_collocation (void);

    // Concrete non-local interface only.
    SupportAttributes (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    SupportAttributes (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~SupportAttributes (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    SupportAttributes (const SupportAttributes &);

    void operator= (const SupportAttributes &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_SupportAttributes;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_IMPORTATTRIBUTES__VAR_OUT_CH_)
#define _COSTRADING_IMPORTATTRIBUTES__VAR_OUT_CH_

  class ImportAttributes;
  typedef ImportAttributes *ImportAttributes_ptr;

  typedef
    TAO_Objref_Var_T<
        ImportAttributes
      >
    ImportAttributes_var;
  
  typedef
    TAO_Objref_Out_T<
        ImportAttributes
      >
    ImportAttributes_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export ImportAttributes
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ImportAttributes>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ImportAttributes_ptr _ptr_type;
    typedef ImportAttributes_var _var_type;
    typedef ImportAttributes_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ImportAttributes_ptr _duplicate (ImportAttributes_ptr obj);

    static void _tao_release (ImportAttributes_ptr obj);

    static ImportAttributes_ptr _narrow (::CORBA::Object_ptr obj);
    static ImportAttributes_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ImportAttributes_ptr _nil (void);

    virtual ::CORBA::ULong def_search_card (
      void);

    virtual ::CORBA::ULong max_search_card (
      void);

    virtual ::CORBA::ULong def_match_card (
      void);

    virtual ::CORBA::ULong max_match_card (
      void);

    virtual ::CORBA::ULong def_return_card (
      void);

    virtual ::CORBA::ULong max_return_card (
      void);

    virtual ::CORBA::ULong max_list (
      void);

    virtual ::CORBA::ULong def_hop_count (
      void);

    virtual ::CORBA::ULong max_hop_count (
      void);

    virtual ::CosTrading::FollowOption def_follow_policy (
      void);

    virtual ::CosTrading::FollowOption max_follow_policy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ImportAttributes_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    ImportAttributes (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_ImportAttributes_setup_collocation (void);

    // Concrete non-local interface only.
    ImportAttributes (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ImportAttributes (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~ImportAttributes (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ImportAttributes (const ImportAttributes &);

    void operator= (const ImportAttributes &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_ImportAttributes;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSTRADING_LINKATTRIBUTES__VAR_OUT_CH_)
#define _COSTRADING_LINKATTRIBUTES__VAR_OUT_CH_

  class LinkAttributes;
  typedef LinkAttributes *LinkAttributes_ptr;

  typedef
    TAO_Objref_Var_T<
        LinkAttributes
      >
    LinkAttributes_var;
  
  typedef
    TAO_Objref_Out_T<
        LinkAttributes
      >
    LinkAttributes_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export LinkAttributes
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<LinkAttributes>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LinkAttributes_ptr _ptr_type;
    typedef LinkAttributes_var _var_type;
    typedef LinkAttributes_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static LinkAttributes_ptr _duplicate (LinkAttributes_ptr obj);

    static void _tao_release (LinkAttributes_ptr obj);

    static LinkAttributes_ptr _narrow (::CORBA::Object_ptr obj);
    static LinkAttributes_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LinkAttributes_ptr _nil (void);

    virtual ::CosTrading::FollowOption max_link_follow_policy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_LinkAttributes_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    LinkAttributes (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_LinkAttributes_setup_collocation (void);

    // Concrete non-local interface only.
    LinkAttributes (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    LinkAttributes (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~LinkAttributes (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    LinkAttributes (const LinkAttributes &);

    void operator= (const LinkAttributes &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_LinkAttributes;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export Lookup
    : public virtual ::CosTrading::TraderComponents,
      public virtual ::CosTrading::SupportAttributes,
      public virtual ::CosTrading::ImportAttributes
  
  {
  public:
    friend class TAO::Narrow_Utils<Lookup>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Lookup_ptr _ptr_type;
    typedef Lookup_var _var_type;
    typedef Lookup_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Lookup_ptr _duplicate (Lookup_ptr obj);

    static void _tao_release (Lookup_ptr obj);

    static Lookup_ptr _narrow (::CORBA::Object_ptr obj);
    static Lookup_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Lookup_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

    typedef char * Preference;
    typedef ::CORBA::String_var Preference_var;
    typedef ::CORBA::String_out Preference_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_Preference;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

    enum HowManyProps
    {
      none,
      some,
      all
    };

    typedef HowManyProps &HowManyProps_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_HowManyProps;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:261

    class SpecifiedProps;

    typedef
      ::TAO_Var_Var_T<
          SpecifiedProps
        >
      SpecifiedProps_var;
    
    typedef
      ::TAO_Out_T<
          SpecifiedProps
        >
      SpecifiedProps_out;

    class TAO_Trading_Export SpecifiedProps
    {
    public:
      SpecifiedProps (void);
      SpecifiedProps (const SpecifiedProps &);
      ~SpecifiedProps (void);

      SpecifiedProps &operator= (const SpecifiedProps &);

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/discriminant_ch.cpp:74

      void _d (CosTrading::Lookup::HowManyProps);
      CosTrading::Lookup::HowManyProps _d (void) const;

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef SpecifiedProps_var _var_type;
      typedef SpecifiedProps_out _out_type;

      static void _tao_any_destructor (void *);

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:549

      void prop_names (const CosTrading::PropertyNameSeq &);
      const CosTrading::PropertyNameSeq &prop_names (void) const;
      CosTrading::PropertyNameSeq &prop_names (void);

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_ch.cpp:127

      void _default (void);
    private:
      CosTrading::Lookup::HowManyProps disc_;

      union
      {
        // TAO_IDL - Generated from
        // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:445
        CosTrading::PropertyNameSeq *prop_names_;
      } u_;

      /// TAO extension - frees any allocated storage.
      void _reset (void);
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_SpecifiedProps;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export IllegalPreference : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager pref;
      IllegalPreference (void);
      IllegalPreference (const IllegalPreference &);
      ~IllegalPreference (void);

      IllegalPreference &operator= (const IllegalPreference &);

      static void _tao_any_destructor (void *);

      static IllegalPreference *_downcast ( ::CORBA::Exception *);
      static const IllegalPreference *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      IllegalPreference (
          const char * _tao_pref);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_IllegalPreference;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export IllegalPolicyName : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager name;
      IllegalPolicyName (void);
      IllegalPolicyName (const IllegalPolicyName &);
      ~IllegalPolicyName (void);

      IllegalPolicyName &operator= (const IllegalPolicyName &);

      static void _tao_any_destructor (void *);

      static IllegalPolicyName *_downcast ( ::CORBA::Exception *);
      static const IllegalPolicyName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      IllegalPolicyName (
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_IllegalPolicyName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export PolicyTypeMismatch : public ::CORBA::UserException
    {
    public:
      
      CosTrading::Policy the_policy;
      PolicyTypeMismatch (void);
      PolicyTypeMismatch (const PolicyTypeMismatch &);
      ~PolicyTypeMismatch (void);

      PolicyTypeMismatch &operator= (const PolicyTypeMismatch &);

      static void _tao_any_destructor (void *);

      static PolicyTypeMismatch *_downcast ( ::CORBA::Exception *);
      static const PolicyTypeMismatch *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      PolicyTypeMismatch (
          const CosTrading::Policy & _tao_the_policy);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_PolicyTypeMismatch;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export InvalidPolicyValue : public ::CORBA::UserException
    {
    public:
      
      CosTrading::Policy the_policy;
      InvalidPolicyValue (void);
      InvalidPolicyValue (const InvalidPolicyValue &);
      ~InvalidPolicyValue (void);

      InvalidPolicyValue &operator= (const InvalidPolicyValue &);

      static void _tao_any_destructor (void *);

      static InvalidPolicyValue *_downcast ( ::CORBA::Exception *);
      static const InvalidPolicyValue *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      InvalidPolicyValue (
          const CosTrading::Policy & _tao_the_policy);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_InvalidPolicyValue;

    virtual void query (
      const char * type,
      const char * constr,
      const char * pref,
      const ::CosTrading::PolicySeq & policies,
      const ::CosTrading::Lookup::SpecifiedProps & desired_props,
      ::CORBA::ULong how_many,
      ::CosTrading::OfferSeq_out offers,
      ::CosTrading::OfferIterator_out offer_itr,
      ::CosTrading::PolicyNameSeq_out limits_applied);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Lookup_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Lookup (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_Lookup_setup_collocation (void);

    // Concrete non-local interface only.
    Lookup (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Lookup (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Lookup (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Lookup (const Lookup &);

    void operator= (const Lookup &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Lookup;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export Register
    : public virtual ::CosTrading::TraderComponents,
      public virtual ::CosTrading::SupportAttributes
  
  {
  public:
    friend class TAO::Narrow_Utils<Register>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Register_ptr _ptr_type;
    typedef Register_var _var_type;
    typedef Register_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Register_ptr _duplicate (Register_ptr obj);

    static void _tao_release (Register_ptr obj);

    static Register_ptr _narrow (::CORBA::Object_ptr obj);
    static Register_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Register_ptr _nil (void);

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:261

    struct OfferInfo;

    typedef
      ::TAO_Var_Var_T<
          OfferInfo
        >
      OfferInfo_var;
    
    typedef
      ::TAO_Out_T<
          OfferInfo
        >
      OfferInfo_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

    struct TAO_Trading_Export OfferInfo
    {

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef OfferInfo_var _var_type;
      typedef OfferInfo_out _out_type;

      static void _tao_any_destructor (void *);
      
      ::CORBA::Object_var reference;
      ::TAO::String_Manager type;
      CosTrading::PropertySeq properties;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_OfferInfo;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export InvalidObjectRef : public ::CORBA::UserException
    {
    public:
      
      ::CORBA::Object_var ref;
      InvalidObjectRef (void);
      InvalidObjectRef (const InvalidObjectRef &);
      ~InvalidObjectRef (void);

      InvalidObjectRef &operator= (const InvalidObjectRef &);

      static void _tao_any_destructor (void *);

      static InvalidObjectRef *_downcast ( ::CORBA::Exception *);
      static const InvalidObjectRef *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      InvalidObjectRef (
          const ::CORBA::Object_ptr  _tao_ref);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_InvalidObjectRef;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export UnknownPropertyName : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager name;
      UnknownPropertyName (void);
      UnknownPropertyName (const UnknownPropertyName &);
      ~UnknownPropertyName (void);

      UnknownPropertyName &operator= (const UnknownPropertyName &);

      static void _tao_any_destructor (void *);

      static UnknownPropertyName *_downcast ( ::CORBA::Exception *);
      static const UnknownPropertyName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      UnknownPropertyName (
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_UnknownPropertyName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export InterfaceTypeMismatch : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager type;
      ::CORBA::Object_var reference;
      InterfaceTypeMismatch (void);
      InterfaceTypeMismatch (const InterfaceTypeMismatch &);
      ~InterfaceTypeMismatch (void);

      InterfaceTypeMismatch &operator= (const InterfaceTypeMismatch &);

      static void _tao_any_destructor (void *);

      static InterfaceTypeMismatch *_downcast ( ::CORBA::Exception *);
      static const InterfaceTypeMismatch *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      InterfaceTypeMismatch (
          const char * _tao_type,
          const ::CORBA::Object_ptr  _tao_reference);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_InterfaceTypeMismatch;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export ProxyOfferId : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager id;
      ProxyOfferId (void);
      ProxyOfferId (const ProxyOfferId &);
      ~ProxyOfferId (void);

      ProxyOfferId &operator= (const ProxyOfferId &);

      static void _tao_any_destructor (void *);

      static ProxyOfferId *_downcast ( ::CORBA::Exception *);
      static const ProxyOfferId *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      ProxyOfferId (
          const char * _tao_id);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_ProxyOfferId;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export MandatoryProperty : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager type;
      ::TAO::String_Manager name;
      MandatoryProperty (void);
      MandatoryProperty (const MandatoryProperty &);
      ~MandatoryProperty (void);

      MandatoryProperty &operator= (const MandatoryProperty &);

      static void _tao_any_destructor (void *);

      static MandatoryProperty *_downcast ( ::CORBA::Exception *);
      static const MandatoryProperty *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      MandatoryProperty (
          const char * _tao_type,
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_MandatoryProperty;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export ReadonlyProperty : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager type;
      ::TAO::String_Manager name;
      ReadonlyProperty (void);
      ReadonlyProperty (const ReadonlyProperty &);
      ~ReadonlyProperty (void);

      ReadonlyProperty &operator= (const ReadonlyProperty &);

      static void _tao_any_destructor (void *);

      static ReadonlyProperty *_downcast ( ::CORBA::Exception *);
      static const ReadonlyProperty *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      ReadonlyProperty (
          const char * _tao_type,
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_ReadonlyProperty;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export NoMatchingOffers : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager constr;
      NoMatchingOffers (void);
      NoMatchingOffers (const NoMatchingOffers &);
      ~NoMatchingOffers (void);

      NoMatchingOffers &operator= (const NoMatchingOffers &);

      static void _tao_any_destructor (void *);

      static NoMatchingOffers *_downcast ( ::CORBA::Exception *);
      static const NoMatchingOffers *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      NoMatchingOffers (
          const char * _tao_constr);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_NoMatchingOffers;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export IllegalTraderName : public ::CORBA::UserException
    {
    public:
      
      CosTrading::TraderName name;
      IllegalTraderName (void);
      IllegalTraderName (const IllegalTraderName &);
      ~IllegalTraderName (void);

      IllegalTraderName &operator= (const IllegalTraderName &);

      static void _tao_any_destructor (void *);

      static IllegalTraderName *_downcast ( ::CORBA::Exception *);
      static const IllegalTraderName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      IllegalTraderName (
          const CosTrading::TraderName & _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_IllegalTraderName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export UnknownTraderName : public ::CORBA::UserException
    {
    public:
      
      CosTrading::TraderName name;
      UnknownTraderName (void);
      UnknownTraderName (const UnknownTraderName &);
      ~UnknownTraderName (void);

      UnknownTraderName &operator= (const UnknownTraderName &);

      static void _tao_any_destructor (void *);

      static UnknownTraderName *_downcast ( ::CORBA::Exception *);
      static const UnknownTraderName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      UnknownTraderName (
          const CosTrading::TraderName & _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_UnknownTraderName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export RegisterNotSupported : public ::CORBA::UserException
    {
    public:
      
      CosTrading::TraderName name;
      RegisterNotSupported (void);
      RegisterNotSupported (const RegisterNotSupported &);
      ~RegisterNotSupported (void);

      RegisterNotSupported &operator= (const RegisterNotSupported &);

      static void _tao_any_destructor (void *);

      static RegisterNotSupported *_downcast ( ::CORBA::Exception *);
      static const RegisterNotSupported *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      RegisterNotSupported (
          const CosTrading::TraderName & _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_RegisterNotSupported;

    virtual char * _cxx_export (
      ::CORBA::Object_ptr reference,
      const char * type,
      const ::CosTrading::PropertySeq & properties);

    virtual void withdraw (
      const char * id);

    virtual ::CosTrading::Register::OfferInfo * describe (
      const char * id);

    virtual void modify (
      const char * id,
      const ::CosTrading::PropertyNameSeq & del_list,
      const ::CosTrading::PropertySeq & modify_list);

    virtual void withdraw_using_constraint (
      const char * type,
      const char * constr);

    virtual ::CosTrading::Register_ptr resolve (
      const ::CosTrading::TraderName & name);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Register_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Register (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_Register_setup_collocation (void);

    // Concrete non-local interface only.
    Register (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Register (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Register (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Register (const Register &);

    void operator= (const Register &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Register;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export Link
    : public virtual ::CosTrading::TraderComponents,
      public virtual ::CosTrading::SupportAttributes,
      public virtual ::CosTrading::LinkAttributes
  
  {
  public:
    friend class TAO::Narrow_Utils<Link>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Link_ptr _ptr_type;
    typedef Link_var _var_type;
    typedef Link_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Link_ptr _duplicate (Link_ptr obj);

    static void _tao_release (Link_ptr obj);

    static Link_ptr _narrow (::CORBA::Object_ptr obj);
    static Link_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Link_ptr _nil (void);

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:261

    struct LinkInfo;

    typedef
      ::TAO_Var_Var_T<
          LinkInfo
        >
      LinkInfo_var;
    
    typedef
      ::TAO_Out_T<
          LinkInfo
        >
      LinkInfo_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

    struct TAO_Trading_Export LinkInfo
    {

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef LinkInfo_var _var_type;
      typedef LinkInfo_out _out_type;

      static void _tao_any_destructor (void *);
      
      CosTrading::Lookup_var target;
      CosTrading::Register_var target_reg;
      CosTrading::FollowOption def_pass_on_follow_rule;
      CosTrading::FollowOption limiting_follow_rule;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_LinkInfo;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export IllegalLinkName : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager name;
      IllegalLinkName (void);
      IllegalLinkName (const IllegalLinkName &);
      ~IllegalLinkName (void);

      IllegalLinkName &operator= (const IllegalLinkName &);

      static void _tao_any_destructor (void *);

      static IllegalLinkName *_downcast ( ::CORBA::Exception *);
      static const IllegalLinkName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      IllegalLinkName (
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_IllegalLinkName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export UnknownLinkName : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager name;
      UnknownLinkName (void);
      UnknownLinkName (const UnknownLinkName &);
      ~UnknownLinkName (void);

      UnknownLinkName &operator= (const UnknownLinkName &);

      static void _tao_any_destructor (void *);

      static UnknownLinkName *_downcast ( ::CORBA::Exception *);
      static const UnknownLinkName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      UnknownLinkName (
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_UnknownLinkName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export DuplicateLinkName : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager name;
      DuplicateLinkName (void);
      DuplicateLinkName (const DuplicateLinkName &);
      ~DuplicateLinkName (void);

      DuplicateLinkName &operator= (const DuplicateLinkName &);

      static void _tao_any_destructor (void *);

      static DuplicateLinkName *_downcast ( ::CORBA::Exception *);
      static const DuplicateLinkName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      DuplicateLinkName (
          const char * _tao_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_DuplicateLinkName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export DefaultFollowTooPermissive : public ::CORBA::UserException
    {
    public:
      
      CosTrading::FollowOption def_pass_on_follow_rule;
      CosTrading::FollowOption limiting_follow_rule;
      DefaultFollowTooPermissive (void);
      DefaultFollowTooPermissive (const DefaultFollowTooPermissive &);
      ~DefaultFollowTooPermissive (void);

      DefaultFollowTooPermissive &operator= (const DefaultFollowTooPermissive &);

      static void _tao_any_destructor (void *);

      static DefaultFollowTooPermissive *_downcast ( ::CORBA::Exception *);
      static const DefaultFollowTooPermissive *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      DefaultFollowTooPermissive (
          CosTrading::FollowOption _tao_def_pass_on_follow_rule,
          CosTrading::FollowOption _tao_limiting_follow_rule);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_DefaultFollowTooPermissive;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export LimitingFollowTooPermissive : public ::CORBA::UserException
    {
    public:
      
      CosTrading::FollowOption limiting_follow_rule;
      CosTrading::FollowOption max_link_follow_policy;
      LimitingFollowTooPermissive (void);
      LimitingFollowTooPermissive (const LimitingFollowTooPermissive &);
      ~LimitingFollowTooPermissive (void);

      LimitingFollowTooPermissive &operator= (const LimitingFollowTooPermissive &);

      static void _tao_any_destructor (void *);

      static LimitingFollowTooPermissive *_downcast ( ::CORBA::Exception *);
      static const LimitingFollowTooPermissive *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      LimitingFollowTooPermissive (
          CosTrading::FollowOption _tao_limiting_follow_rule,
          CosTrading::FollowOption _tao_max_link_follow_policy);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_LimitingFollowTooPermissive;

    virtual void add_link (
      const char * name,
      ::CosTrading::Lookup_ptr target,
      ::CosTrading::FollowOption def_pass_on_follow_rule,
      ::CosTrading::FollowOption limiting_follow_rule);

    virtual void remove_link (
      const char * name);

    virtual ::CosTrading::Link::LinkInfo * describe_link (
      const char * name);

    virtual ::CosTrading::LinkNameSeq * list_links (
      void);

    virtual void modify_link (
      const char * name,
      ::CosTrading::FollowOption def_pass_on_follow_rule,
      ::CosTrading::FollowOption limiting_follow_rule);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Link_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Link (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_Link_setup_collocation (void);

    // Concrete non-local interface only.
    Link (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Link (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Link (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Link (const Link &);

    void operator= (const Link &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Link;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export Proxy
    : public virtual ::CosTrading::TraderComponents,
      public virtual ::CosTrading::SupportAttributes
  
  {
  public:
    friend class TAO::Narrow_Utils<Proxy>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Proxy_ptr _ptr_type;
    typedef Proxy_var _var_type;
    typedef Proxy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Proxy_ptr _duplicate (Proxy_ptr obj);

    static void _tao_release (Proxy_ptr obj);

    static Proxy_ptr _narrow (::CORBA::Object_ptr obj);
    static Proxy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Proxy_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

    typedef char * ConstraintRecipe;
    typedef ::CORBA::String_var ConstraintRecipe_var;
    typedef ::CORBA::String_out ConstraintRecipe_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_ConstraintRecipe;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:261

    struct ProxyInfo;

    typedef
      ::TAO_Var_Var_T<
          ProxyInfo
        >
      ProxyInfo_var;
    
    typedef
      ::TAO_Out_T<
          ProxyInfo
        >
      ProxyInfo_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

    struct TAO_Trading_Export ProxyInfo
    {

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef ProxyInfo_var _var_type;
      typedef ProxyInfo_out _out_type;

      static void _tao_any_destructor (void *);
      
      ::TAO::String_Manager type;
      CosTrading::Lookup_var target;
      CosTrading::PropertySeq properties;
      ::CORBA::Boolean if_match_all;
      ::TAO::String_Manager recipe;
      CosTrading::PolicySeq policies_to_pass_on;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_ProxyInfo;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export IllegalRecipe : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager recipe;
      IllegalRecipe (void);
      IllegalRecipe (const IllegalRecipe &);
      ~IllegalRecipe (void);

      IllegalRecipe &operator= (const IllegalRecipe &);

      static void _tao_any_destructor (void *);

      static IllegalRecipe *_downcast ( ::CORBA::Exception *);
      static const IllegalRecipe *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      IllegalRecipe (
          const char * _tao_recipe);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_IllegalRecipe;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Trading_Export NotProxyOfferId : public ::CORBA::UserException
    {
    public:
      
      ::TAO::String_Manager id;
      NotProxyOfferId (void);
      NotProxyOfferId (const NotProxyOfferId &);
      ~NotProxyOfferId (void);

      NotProxyOfferId &operator= (const NotProxyOfferId &);

      static void _tao_any_destructor (void *);

      static NotProxyOfferId *_downcast ( ::CORBA::Exception *);
      static const NotProxyOfferId *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      NotProxyOfferId (
          const char * _tao_id);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_NotProxyOfferId;

    virtual char * export_proxy (
      ::CosTrading::Lookup_ptr target,
      const char * type,
      const ::CosTrading::PropertySeq & properties,
      ::CORBA::Boolean if_match_all,
      const char * recipe,
      const ::CosTrading::PolicySeq & policies_to_pass_on);

    virtual void withdraw_proxy (
      const char * id);

    virtual ::CosTrading::Proxy::ProxyInfo * describe_proxy (
      const char * id);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Proxy_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Proxy (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_Proxy_setup_collocation (void);

    // Concrete non-local interface only.
    Proxy (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Proxy (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Proxy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Proxy (const Proxy &);

    void operator= (const Proxy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Proxy;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export Admin
    : public virtual ::CosTrading::TraderComponents,
      public virtual ::CosTrading::SupportAttributes,
      public virtual ::CosTrading::ImportAttributes,
      public virtual ::CosTrading::LinkAttributes
  
  {
  public:
    friend class TAO::Narrow_Utils<Admin>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Admin_ptr _ptr_type;
    typedef Admin_var _var_type;
    typedef Admin_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Admin_ptr _duplicate (Admin_ptr obj);

    static void _tao_release (Admin_ptr obj);

    static Admin_ptr _narrow (::CORBA::Object_ptr obj);
    static Admin_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Admin_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSTRADING_ADMIN_OCTETSEQ_CH_)
#define _COSTRADING_ADMIN_OCTETSEQ_CH_

    class OctetSeq;

    typedef
      ::TAO_FixedSeq_Var_T<
          OctetSeq
        >
      OctetSeq_var;

    typedef
      ::TAO_Seq_Out_T<
          OctetSeq
        >
      OctetSeq_out;

    class TAO_Trading_Export OctetSeq
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Octet
            >
    {
    public:
      OctetSeq (void);
      OctetSeq ( ::CORBA::ULong max);
      OctetSeq (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Octet* buffer, 
        ::CORBA::Boolean release = false);
      OctetSeq (const OctetSeq &);
      virtual ~OctetSeq (void);
      

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef OctetSeq_var _var_type;
      typedef OctetSeq_out _out_type;

      static void _tao_any_destructor (void *);

      

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      OctetSeq (
          ::CORBA::ULong length,
          const ACE_Message_Block* mb
        )
        : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_OctetSeq;

    virtual ::CosTrading::Admin::OctetSeq * request_id_stem (
      void);

    virtual ::CORBA::ULong set_def_search_card (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_max_search_card (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_def_match_card (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_max_match_card (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_def_return_card (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_max_return_card (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_max_list (
      ::CORBA::ULong value);

    virtual ::CORBA::Boolean set_supports_modifiable_properties (
      ::CORBA::Boolean value);

    virtual ::CORBA::Boolean set_supports_dynamic_properties (
      ::CORBA::Boolean value);

    virtual ::CORBA::Boolean set_supports_proxy_offers (
      ::CORBA::Boolean value);

    virtual ::CORBA::ULong set_def_hop_count (
      ::CORBA::ULong value);

    virtual ::CORBA::ULong set_max_hop_count (
      ::CORBA::ULong value);

    virtual ::CosTrading::FollowOption set_def_follow_policy (
      ::CosTrading::FollowOption policy);

    virtual ::CosTrading::FollowOption set_max_follow_policy (
      ::CosTrading::FollowOption policy);

    virtual ::CosTrading::FollowOption set_max_link_follow_policy (
      ::CosTrading::FollowOption policy);

    virtual ::CosTrading::TypeRepository_ptr set_type_repos (
      ::CosTrading::TypeRepository_ptr repository);

    virtual ::CosTrading::Admin::OctetSeq * set_request_id_stem (
      const ::CosTrading::Admin::OctetSeq & stem);

    virtual void list_offers (
      ::CORBA::ULong how_many,
      ::CosTrading::OfferIdSeq_out ids,
      ::CosTrading::OfferIdIterator_out id_itr);

    virtual void list_proxies (
      ::CORBA::ULong how_many,
      ::CosTrading::OfferIdSeq_out ids,
      ::CosTrading::OfferIdIterator_out id_itr);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Admin_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Admin (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_Admin_setup_collocation (void);

    // Concrete non-local interface only.
    Admin (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Admin (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Admin (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Admin (const Admin &);

    void operator= (const Admin &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_Admin;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export OfferIterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<OfferIterator>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef OfferIterator_ptr _ptr_type;
    typedef OfferIterator_var _var_type;
    typedef OfferIterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static OfferIterator_ptr _duplicate (OfferIterator_ptr obj);

    static void _tao_release (OfferIterator_ptr obj);

    static OfferIterator_ptr _narrow (::CORBA::Object_ptr obj);
    static OfferIterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static OfferIterator_ptr _nil (void);

    virtual ::CORBA::ULong max_left (
      void);

    virtual ::CORBA::Boolean next_n (
      ::CORBA::ULong n,
      ::CosTrading::OfferSeq_out offers);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_OfferIterator_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    OfferIterator (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_OfferIterator_setup_collocation (void);

    // Concrete non-local interface only.
    OfferIterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    OfferIterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~OfferIterator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    OfferIterator (const OfferIterator &);

    void operator= (const OfferIterator &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_OfferIterator;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Trading_Export OfferIdIterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<OfferIdIterator>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef OfferIdIterator_ptr _ptr_type;
    typedef OfferIdIterator_var _var_type;
    typedef OfferIdIterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static OfferIdIterator_ptr _duplicate (OfferIdIterator_ptr obj);

    static void _tao_release (OfferIdIterator_ptr obj);

    static OfferIdIterator_ptr _narrow (::CORBA::Object_ptr obj);
    static OfferIdIterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static OfferIdIterator_ptr _nil (void);

    virtual ::CORBA::ULong max_left (
      void);

    virtual ::CORBA::Boolean next_n (
      ::CORBA::ULong n,
      ::CosTrading::OfferIdSeq_out ids);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_OfferIdIterator_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    OfferIdIterator (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosTrading_OfferIdIterator_setup_collocation (void);

    // Concrete non-local interface only.
    OfferIdIterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    OfferIdIterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~OfferIdIterator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    OfferIdIterator (const OfferIdIterator &);

    void operator= (const OfferIdIterator &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Trading_Export ::CORBA::TypeCode_ptr const _tc_OfferIdIterator;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module CosTrading

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_LOOKUP__ARG_TRAITS_)
#define _COSTRADING_LOOKUP__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::Lookup>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::Lookup_ptr,
            ::CosTrading::Lookup_var,
            ::CosTrading::Lookup_out,
            TAO::Objref_Traits<CosTrading::Lookup>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::CosTrading::Lookup::HowManyProps>
    : public
        Basic_Arg_Traits_T<
            ::CosTrading::Lookup::HowManyProps,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:1052

  template<>
  class Arg_Traits< ::CosTrading::Lookup::SpecifiedProps>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Lookup::SpecifiedProps,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::PropertyNameSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::PropertyNameSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_REGISTER__ARG_TRAITS_)
#define _COSTRADING_REGISTER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::Register>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::Register_ptr,
            ::CosTrading::Register_var,
            ::CosTrading::Register_out,
            TAO::Objref_Traits<CosTrading::Register>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosTrading::Register::OfferInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Register::OfferInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::PropertySeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::PropertySeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_LINK__ARG_TRAITS_)
#define _COSTRADING_LINK__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::Link>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::Link_ptr,
            ::CosTrading::Link_var,
            ::CosTrading::Link_out,
            TAO::Objref_Traits<CosTrading::Link>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosTrading::Link::LinkInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Link::LinkInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::CosTrading::FollowOption>
    : public
        Basic_Arg_Traits_T<
            ::CosTrading::FollowOption,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_PROXY__ARG_TRAITS_)
#define _COSTRADING_PROXY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::Proxy>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::Proxy_ptr,
            ::CosTrading::Proxy_var,
            ::CosTrading::Proxy_out,
            TAO::Objref_Traits<CosTrading::Proxy>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosTrading::Proxy::ProxyInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Proxy::ProxyInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::PolicySeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::PolicySeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_ADMIN__ARG_TRAITS_)
#define _COSTRADING_ADMIN__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::Admin>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::Admin_ptr,
            ::CosTrading::Admin_var,
            ::CosTrading::Admin_out,
            TAO::Objref_Traits<CosTrading::Admin>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::Admin::OctetSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Admin::OctetSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_OFFERITERATOR__ARG_TRAITS_)
#define _COSTRADING_OFFERITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::OfferIterator>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::OfferIterator_ptr,
            ::CosTrading::OfferIterator_var,
            ::CosTrading::OfferIterator_out,
            TAO::Objref_Traits<CosTrading::OfferIterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_OFFERIDITERATOR__ARG_TRAITS_)
#define _COSTRADING_OFFERIDITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::OfferIdIterator>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::OfferIdIterator_ptr,
            ::CosTrading::OfferIdIterator_var,
            ::CosTrading::OfferIdIterator_out,
            TAO::Objref_Traits<CosTrading::OfferIdIterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosTrading::Property>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Property,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosTrading::Offer>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Offer,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::OfferSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::OfferSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::OfferIdSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::OfferIdSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::LinkNameSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::LinkNameSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosTrading::PolicyNameSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::PolicyNameSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosTrading::Policy>
    : public
        Var_Size_Arg_Traits_T<
            ::CosTrading::Policy,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_TRADERCOMPONENTS__ARG_TRAITS_)
#define _COSTRADING_TRADERCOMPONENTS__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::TraderComponents>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::TraderComponents_ptr,
            ::CosTrading::TraderComponents_var,
            ::CosTrading::TraderComponents_out,
            TAO::Objref_Traits<CosTrading::TraderComponents>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_SUPPORTATTRIBUTES__ARG_TRAITS_)
#define _COSTRADING_SUPPORTATTRIBUTES__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::SupportAttributes>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::SupportAttributes_ptr,
            ::CosTrading::SupportAttributes_var,
            ::CosTrading::SupportAttributes_out,
            TAO::Objref_Traits<CosTrading::SupportAttributes>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_IMPORTATTRIBUTES__ARG_TRAITS_)
#define _COSTRADING_IMPORTATTRIBUTES__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::ImportAttributes>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::ImportAttributes_ptr,
            ::CosTrading::ImportAttributes_var,
            ::CosTrading::ImportAttributes_out,
            TAO::Objref_Traits<CosTrading::ImportAttributes>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSTRADING_LINKATTRIBUTES__ARG_TRAITS_)
#define _COSTRADING_LINKATTRIBUTES__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosTrading::LinkAttributes>
    : public
        Object_Arg_Traits_T<
            ::CosTrading::LinkAttributes_ptr,
            ::CosTrading::LinkAttributes_var,
            ::CosTrading::LinkAttributes_out,
            TAO::Objref_Traits<CosTrading::LinkAttributes>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_TraderComponents_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_SupportAttributes_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_ImportAttributes_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_LinkAttributes_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_Lookup_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_Register_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_Link_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_Proxy_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_Admin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_OfferIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Trading_Export
TAO::Collocation_Proxy_Broker *
(*CosTrading__TAO_OfferIdIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COSTRADING_LOOKUP__TRAITS_)
#define _COSTRADING_LOOKUP__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::Lookup>
  {
    static ::CosTrading::Lookup_ptr duplicate (
        ::CosTrading::Lookup_ptr p);
    static void release (
        ::CosTrading::Lookup_ptr p);
    static ::CosTrading::Lookup_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::Lookup_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_TRADERCOMPONENTS__TRAITS_)
#define _COSTRADING_TRADERCOMPONENTS__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::TraderComponents>
  {
    static ::CosTrading::TraderComponents_ptr duplicate (
        ::CosTrading::TraderComponents_ptr p);
    static void release (
        ::CosTrading::TraderComponents_ptr p);
    static ::CosTrading::TraderComponents_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::TraderComponents_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_SUPPORTATTRIBUTES__TRAITS_)
#define _COSTRADING_SUPPORTATTRIBUTES__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::SupportAttributes>
  {
    static ::CosTrading::SupportAttributes_ptr duplicate (
        ::CosTrading::SupportAttributes_ptr p);
    static void release (
        ::CosTrading::SupportAttributes_ptr p);
    static ::CosTrading::SupportAttributes_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::SupportAttributes_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_IMPORTATTRIBUTES__TRAITS_)
#define _COSTRADING_IMPORTATTRIBUTES__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::ImportAttributes>
  {
    static ::CosTrading::ImportAttributes_ptr duplicate (
        ::CosTrading::ImportAttributes_ptr p);
    static void release (
        ::CosTrading::ImportAttributes_ptr p);
    static ::CosTrading::ImportAttributes_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::ImportAttributes_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_LINKATTRIBUTES__TRAITS_)
#define _COSTRADING_LINKATTRIBUTES__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::LinkAttributes>
  {
    static ::CosTrading::LinkAttributes_ptr duplicate (
        ::CosTrading::LinkAttributes_ptr p);
    static void release (
        ::CosTrading::LinkAttributes_ptr p);
    static ::CosTrading::LinkAttributes_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::LinkAttributes_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_REGISTER__TRAITS_)
#define _COSTRADING_REGISTER__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::Register>
  {
    static ::CosTrading::Register_ptr duplicate (
        ::CosTrading::Register_ptr p);
    static void release (
        ::CosTrading::Register_ptr p);
    static ::CosTrading::Register_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::Register_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_LINK__TRAITS_)
#define _COSTRADING_LINK__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::Link>
  {
    static ::CosTrading::Link_ptr duplicate (
        ::CosTrading::Link_ptr p);
    static void release (
        ::CosTrading::Link_ptr p);
    static ::CosTrading::Link_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::Link_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_PROXY__TRAITS_)
#define _COSTRADING_PROXY__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::Proxy>
  {
    static ::CosTrading::Proxy_ptr duplicate (
        ::CosTrading::Proxy_ptr p);
    static void release (
        ::CosTrading::Proxy_ptr p);
    static ::CosTrading::Proxy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::Proxy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_ADMIN__TRAITS_)
#define _COSTRADING_ADMIN__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::Admin>
  {
    static ::CosTrading::Admin_ptr duplicate (
        ::CosTrading::Admin_ptr p);
    static void release (
        ::CosTrading::Admin_ptr p);
    static ::CosTrading::Admin_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::Admin_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_OFFERITERATOR__TRAITS_)
#define _COSTRADING_OFFERITERATOR__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::OfferIterator>
  {
    static ::CosTrading::OfferIterator_ptr duplicate (
        ::CosTrading::OfferIterator_ptr p);
    static void release (
        ::CosTrading::OfferIterator_ptr p);
    static ::CosTrading::OfferIterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::OfferIterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSTRADING_OFFERIDITERATOR__TRAITS_)
#define _COSTRADING_OFFERIDITERATOR__TRAITS_

  template<>
  struct TAO_Trading_Export Objref_Traits< ::CosTrading::OfferIdIterator>
  {
    static ::CosTrading::OfferIdIterator_ptr duplicate (
        ::CosTrading::OfferIdIterator_ptr p);
    static void release (
        ::CosTrading::OfferIdIterator_ptr p);
    static ::CosTrading::OfferIdIterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosTrading::OfferIdIterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::PropertyNameSeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::PropertyNameSeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::PropertyNameSeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::PropertyNameSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::PropertyNameSeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::PropertyNameSeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::PropertyNameSeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::PropertyNameSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Property &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Property*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Property *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Property *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Property &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Property*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Property *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Property *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::PropertySeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::PropertySeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::PropertySeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::PropertySeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::PropertySeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::PropertySeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::PropertySeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::PropertySeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Offer &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Offer*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Offer *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Offer *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Offer &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Offer*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Offer *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Offer *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::OfferSeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::OfferSeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::OfferSeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::OfferSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::OfferSeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::OfferSeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::OfferSeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::OfferSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::OfferIdSeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::OfferIdSeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::OfferIdSeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::OfferIdSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::OfferIdSeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::OfferIdSeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::OfferIdSeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::OfferIdSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::FollowOption);
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::FollowOption &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::FollowOption);
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::FollowOption &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::LinkNameSeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::LinkNameSeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::LinkNameSeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::LinkNameSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::LinkNameSeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::LinkNameSeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::LinkNameSeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::LinkNameSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::PolicyNameSeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::PolicyNameSeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::PolicyNameSeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::PolicyNameSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::PolicyNameSeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::PolicyNameSeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::PolicyNameSeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::PolicyNameSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Policy &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Policy*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Policy *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Policy *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Policy &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Policy*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Policy *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Policy *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::PolicySeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::PolicySeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::PolicySeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::PolicySeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::PolicySeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::PolicySeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::PolicySeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::PolicySeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::UnknownMaxLeft &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::UnknownMaxLeft*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::UnknownMaxLeft *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::UnknownMaxLeft *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::UnknownMaxLeft &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::UnknownMaxLeft*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::UnknownMaxLeft *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::UnknownMaxLeft *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::NotImplemented &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::NotImplemented*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::NotImplemented *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::NotImplemented *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::NotImplemented &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::NotImplemented*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::NotImplemented *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::NotImplemented *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::IllegalServiceType &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::IllegalServiceType*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::IllegalServiceType *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::IllegalServiceType *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::IllegalServiceType &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::IllegalServiceType*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::IllegalServiceType *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::IllegalServiceType *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::UnknownServiceType &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::UnknownServiceType*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::UnknownServiceType *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::UnknownServiceType *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::UnknownServiceType &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::UnknownServiceType*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::UnknownServiceType *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::UnknownServiceType *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::IllegalPropertyName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::IllegalPropertyName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::IllegalPropertyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::IllegalPropertyName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::IllegalPropertyName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::IllegalPropertyName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::IllegalPropertyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::IllegalPropertyName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::DuplicatePropertyName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::DuplicatePropertyName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::DuplicatePropertyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::DuplicatePropertyName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::DuplicatePropertyName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::DuplicatePropertyName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::DuplicatePropertyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::DuplicatePropertyName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::PropertyTypeMismatch &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::PropertyTypeMismatch*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::PropertyTypeMismatch *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::PropertyTypeMismatch *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::PropertyTypeMismatch &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::PropertyTypeMismatch*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::PropertyTypeMismatch *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::PropertyTypeMismatch *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::MissingMandatoryProperty &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::MissingMandatoryProperty*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::MissingMandatoryProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::MissingMandatoryProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::MissingMandatoryProperty &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::MissingMandatoryProperty*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::MissingMandatoryProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::MissingMandatoryProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::ReadonlyDynamicProperty &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::ReadonlyDynamicProperty*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::ReadonlyDynamicProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::ReadonlyDynamicProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::ReadonlyDynamicProperty &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::ReadonlyDynamicProperty*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::ReadonlyDynamicProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::ReadonlyDynamicProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::IllegalConstraint &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::IllegalConstraint*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::IllegalConstraint *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::IllegalConstraint *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::IllegalConstraint &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::IllegalConstraint*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::IllegalConstraint *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::IllegalConstraint *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::InvalidLookupRef &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::InvalidLookupRef*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::InvalidLookupRef *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::InvalidLookupRef *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::InvalidLookupRef &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::InvalidLookupRef*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::InvalidLookupRef *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::InvalidLookupRef *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::IllegalOfferId &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::IllegalOfferId*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::IllegalOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::IllegalOfferId *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::IllegalOfferId &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::IllegalOfferId*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::IllegalOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::IllegalOfferId *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::UnknownOfferId &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::UnknownOfferId*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::UnknownOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::UnknownOfferId *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::UnknownOfferId &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::UnknownOfferId*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::UnknownOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::UnknownOfferId *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::DuplicatePolicyName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::DuplicatePolicyName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::DuplicatePolicyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::DuplicatePolicyName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::DuplicatePolicyName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::DuplicatePolicyName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::DuplicatePolicyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::DuplicatePolicyName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, TraderComponents_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, TraderComponents_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TraderComponents_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::TraderComponents_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::TraderComponents_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::TraderComponents_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, SupportAttributes_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, SupportAttributes_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SupportAttributes_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::SupportAttributes_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::SupportAttributes_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::SupportAttributes_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ImportAttributes_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ImportAttributes_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImportAttributes_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::ImportAttributes_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::ImportAttributes_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::ImportAttributes_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, LinkAttributes_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, LinkAttributes_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, LinkAttributes_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::LinkAttributes_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::LinkAttributes_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::LinkAttributes_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Lookup_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Lookup_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Lookup_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Lookup::HowManyProps);
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Lookup::HowManyProps &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup::HowManyProps);
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup::HowManyProps &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Lookup::SpecifiedProps &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Lookup::SpecifiedProps*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Lookup::SpecifiedProps *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Lookup::SpecifiedProps *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Lookup::SpecifiedProps &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup::SpecifiedProps*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup::SpecifiedProps *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Lookup::SpecifiedProps *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Lookup::IllegalPreference &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Lookup::IllegalPreference*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Lookup::IllegalPreference *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Lookup::IllegalPreference *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Lookup::IllegalPreference &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup::IllegalPreference*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup::IllegalPreference *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Lookup::IllegalPreference *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Lookup::IllegalPolicyName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Lookup::IllegalPolicyName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Lookup::IllegalPolicyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Lookup::IllegalPolicyName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Lookup::IllegalPolicyName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup::IllegalPolicyName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup::IllegalPolicyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Lookup::IllegalPolicyName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Lookup::PolicyTypeMismatch &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Lookup::PolicyTypeMismatch*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Lookup::PolicyTypeMismatch *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Lookup::PolicyTypeMismatch *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Lookup::PolicyTypeMismatch &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup::PolicyTypeMismatch*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup::PolicyTypeMismatch *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Lookup::PolicyTypeMismatch *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Lookup::InvalidPolicyValue &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Lookup::InvalidPolicyValue*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Lookup::InvalidPolicyValue *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Lookup::InvalidPolicyValue *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Lookup::InvalidPolicyValue &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Lookup::InvalidPolicyValue*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Lookup::InvalidPolicyValue *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Lookup::InvalidPolicyValue *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Register_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Register_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Register_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::OfferInfo &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::OfferInfo*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::OfferInfo *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::OfferInfo *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::OfferInfo &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::OfferInfo*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::OfferInfo *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::OfferInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::InvalidObjectRef &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::InvalidObjectRef*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::InvalidObjectRef *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::InvalidObjectRef *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::InvalidObjectRef &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::InvalidObjectRef*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::InvalidObjectRef *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::InvalidObjectRef *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::UnknownPropertyName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::UnknownPropertyName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::UnknownPropertyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::UnknownPropertyName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::UnknownPropertyName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::UnknownPropertyName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::UnknownPropertyName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::UnknownPropertyName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::InterfaceTypeMismatch &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::InterfaceTypeMismatch*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::InterfaceTypeMismatch *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::InterfaceTypeMismatch *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::InterfaceTypeMismatch &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::InterfaceTypeMismatch*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::InterfaceTypeMismatch *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::InterfaceTypeMismatch *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::ProxyOfferId &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::ProxyOfferId*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::ProxyOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::ProxyOfferId *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::ProxyOfferId &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::ProxyOfferId*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::ProxyOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::ProxyOfferId *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::MandatoryProperty &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::MandatoryProperty*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::MandatoryProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::MandatoryProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::MandatoryProperty &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::MandatoryProperty*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::MandatoryProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::MandatoryProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::ReadonlyProperty &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::ReadonlyProperty*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::ReadonlyProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::ReadonlyProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::ReadonlyProperty &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::ReadonlyProperty*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::ReadonlyProperty *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::ReadonlyProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::NoMatchingOffers &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::NoMatchingOffers*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::NoMatchingOffers *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::NoMatchingOffers *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::NoMatchingOffers &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::NoMatchingOffers*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::NoMatchingOffers *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::NoMatchingOffers *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::IllegalTraderName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::IllegalTraderName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::IllegalTraderName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::IllegalTraderName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::IllegalTraderName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::IllegalTraderName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::IllegalTraderName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::IllegalTraderName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::UnknownTraderName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::UnknownTraderName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::UnknownTraderName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::UnknownTraderName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::UnknownTraderName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::UnknownTraderName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::UnknownTraderName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::UnknownTraderName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Register::RegisterNotSupported &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Register::RegisterNotSupported*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Register::RegisterNotSupported *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Register::RegisterNotSupported *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Register::RegisterNotSupported &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Register::RegisterNotSupported*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Register::RegisterNotSupported *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Register::RegisterNotSupported *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Link_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Link_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Link_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Link::LinkInfo &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Link::LinkInfo*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Link::LinkInfo *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Link::LinkInfo *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Link::LinkInfo &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link::LinkInfo*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link::LinkInfo *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Link::LinkInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Link::IllegalLinkName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Link::IllegalLinkName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Link::IllegalLinkName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Link::IllegalLinkName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Link::IllegalLinkName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link::IllegalLinkName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link::IllegalLinkName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Link::IllegalLinkName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Link::UnknownLinkName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Link::UnknownLinkName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Link::UnknownLinkName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Link::UnknownLinkName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Link::UnknownLinkName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link::UnknownLinkName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link::UnknownLinkName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Link::UnknownLinkName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Link::DuplicateLinkName &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Link::DuplicateLinkName*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Link::DuplicateLinkName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Link::DuplicateLinkName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Link::DuplicateLinkName &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link::DuplicateLinkName*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link::DuplicateLinkName *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Link::DuplicateLinkName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Link::DefaultFollowTooPermissive &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Link::DefaultFollowTooPermissive*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Link::DefaultFollowTooPermissive *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Link::DefaultFollowTooPermissive *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Link::DefaultFollowTooPermissive &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link::DefaultFollowTooPermissive*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link::DefaultFollowTooPermissive *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Link::DefaultFollowTooPermissive *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Link::LimitingFollowTooPermissive &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Link::LimitingFollowTooPermissive*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Link::LimitingFollowTooPermissive *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Link::LimitingFollowTooPermissive *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Link::LimitingFollowTooPermissive &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Link::LimitingFollowTooPermissive*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Link::LimitingFollowTooPermissive *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Link::LimitingFollowTooPermissive *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Proxy_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Proxy_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Proxy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Proxy_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Proxy_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Proxy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Proxy::ProxyInfo &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Proxy::ProxyInfo*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Proxy::ProxyInfo *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Proxy::ProxyInfo *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Proxy::ProxyInfo &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Proxy::ProxyInfo*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Proxy::ProxyInfo *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Proxy::ProxyInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Proxy::IllegalRecipe &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Proxy::IllegalRecipe*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Proxy::IllegalRecipe *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Proxy::IllegalRecipe *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Proxy::IllegalRecipe &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Proxy::IllegalRecipe*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Proxy::IllegalRecipe *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Proxy::IllegalRecipe *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  

  TAO_Trading_Export void operator<<= (::CORBA::Any &, const ::CosTrading::Proxy::NotProxyOfferId &); // copying version
  TAO_Trading_Export void operator<<= (::CORBA::Any &, ::CosTrading::Proxy::NotProxyOfferId*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Proxy::NotProxyOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Proxy::NotProxyOfferId *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export void operator<<= (::CORBA::Any &, const CosTrading::Proxy::NotProxyOfferId &); // copying version
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Proxy::NotProxyOfferId*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Proxy::NotProxyOfferId *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Proxy::NotProxyOfferId *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Admin_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, Admin_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Admin_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Admin_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::Admin_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Admin_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const ::CosTrading::Admin::OctetSeq &); // copying version
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, ::CosTrading::Admin::OctetSeq*); // noncopying version
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosTrading::Admin::OctetSeq *&); // deprecated
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosTrading::Admin::OctetSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= ( ::CORBA::Any &, const CosTrading::Admin::OctetSeq &); // copying version
TAO_Trading_Export void operator<<= ( ::CORBA::Any &, CosTrading::Admin::OctetSeq*); // noncopying version
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::Admin::OctetSeq *&); // deprecated
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosTrading::Admin::OctetSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, OfferIterator_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, OfferIterator_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OfferIterator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::OfferIterator_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::OfferIterator_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::OfferIterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTrading
{
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, OfferIdIterator_ptr); // copying
  TAO_Trading_Export void operator<<= ( ::CORBA::Any &, OfferIdIterator_ptr *); // non-copying
  TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OfferIdIterator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::OfferIdIterator_ptr); // copying
TAO_Trading_Export void operator<<= (::CORBA::Any &, CosTrading::OfferIdIterator_ptr *); // non-copying
TAO_Trading_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosTrading::OfferIdIterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_PropertyNameSeq_H_
#define _TAO_CDR_OP_CosTrading_PropertyNameSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::PropertyNameSeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::PropertyNameSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_PropertyNameSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Property &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Property &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_PropertySeq_H_
#define _TAO_CDR_OP_CosTrading_PropertySeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::PropertySeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::PropertySeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_PropertySeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Offer &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Offer &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_OfferSeq_H_
#define _TAO_CDR_OP_CosTrading_OfferSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::OfferSeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::OfferSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_OfferSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_OfferIdSeq_H_
#define _TAO_CDR_OP_CosTrading_OfferIdSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::OfferIdSeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::OfferIdSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_OfferIdSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosTrading::FollowOption _tao_enumerator);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosTrading::FollowOption &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_LinkNameSeq_H_
#define _TAO_CDR_OP_CosTrading_LinkNameSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::LinkNameSeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::LinkNameSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_LinkNameSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_PolicyNameSeq_H_
#define _TAO_CDR_OP_CosTrading_PolicyNameSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::PolicyNameSeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::PolicyNameSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_PolicyNameSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Policy &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Policy &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_PolicySeq_H_
#define _TAO_CDR_OP_CosTrading_PolicySeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::PolicySeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::PolicySeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_PolicySeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::UnknownMaxLeft &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::UnknownMaxLeft &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::NotImplemented &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::NotImplemented &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::IllegalServiceType &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::IllegalServiceType &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::UnknownServiceType &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::UnknownServiceType &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::IllegalPropertyName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::IllegalPropertyName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::DuplicatePropertyName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::DuplicatePropertyName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::PropertyTypeMismatch &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::PropertyTypeMismatch &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::MissingMandatoryProperty &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::MissingMandatoryProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::ReadonlyDynamicProperty &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::ReadonlyDynamicProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::IllegalConstraint &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::IllegalConstraint &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::InvalidLookupRef &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::InvalidLookupRef &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::IllegalOfferId &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::IllegalOfferId &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::UnknownOfferId &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::UnknownOfferId &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::DuplicatePolicyName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::DuplicatePolicyName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::TraderComponents_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::TraderComponents_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::SupportAttributes_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::SupportAttributes_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::ImportAttributes_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::ImportAttributes_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::LinkAttributes_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::LinkAttributes_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Lookup_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Lookup_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosTrading::Lookup::HowManyProps _tao_enumerator);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosTrading::Lookup::HowManyProps &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Lookup::SpecifiedProps &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Lookup::SpecifiedProps &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Lookup::IllegalPreference &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Lookup::IllegalPreference &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Lookup::IllegalPolicyName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Lookup::IllegalPolicyName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Lookup::PolicyTypeMismatch &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Lookup::PolicyTypeMismatch &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Lookup::InvalidPolicyValue &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Lookup::InvalidPolicyValue &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::OfferInfo &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::OfferInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::InvalidObjectRef &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::InvalidObjectRef &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::UnknownPropertyName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::UnknownPropertyName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::InterfaceTypeMismatch &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::InterfaceTypeMismatch &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::ProxyOfferId &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::ProxyOfferId &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::MandatoryProperty &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::MandatoryProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::ReadonlyProperty &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::ReadonlyProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::NoMatchingOffers &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::NoMatchingOffers &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::IllegalTraderName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::IllegalTraderName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::UnknownTraderName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::UnknownTraderName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Register::RegisterNotSupported &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Register::RegisterNotSupported &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link::LinkInfo &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link::LinkInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link::IllegalLinkName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link::IllegalLinkName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link::UnknownLinkName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link::UnknownLinkName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link::DuplicateLinkName &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link::DuplicateLinkName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link::DefaultFollowTooPermissive &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link::DefaultFollowTooPermissive &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Link::LimitingFollowTooPermissive &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Link::LimitingFollowTooPermissive &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Proxy_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Proxy_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Proxy::ProxyInfo &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Proxy::ProxyInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Proxy::IllegalRecipe &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Proxy::IllegalRecipe &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Proxy::NotProxyOfferId &);
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Proxy::NotProxyOfferId &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::Admin_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::Admin_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosTrading_Admin_OctetSeq_H_
#define _TAO_CDR_OP_CosTrading_Admin_OctetSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Trading_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTrading::Admin::OctetSeq &_tao_sequence);
TAO_Trading_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTrading::Admin::OctetSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosTrading_Admin_OctetSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::OfferIterator_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::OfferIterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Trading_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosTrading::OfferIdIterator_ptr );
TAO_Trading_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosTrading::OfferIdIterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "CosTradingC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

