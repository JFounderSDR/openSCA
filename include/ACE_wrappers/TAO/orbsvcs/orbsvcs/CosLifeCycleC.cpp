// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosLifeCycleC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosLifeCycleC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_Key (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosLifeCycle/Key:1.0",
    "Key",
    &CosNaming::_tc_Name);
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_Key =
    &_tao_tc_CosLifeCycle_Key;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_Factory (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosLifeCycle/Factory:1.0",
    "Factory",
    &CORBA::_tc_Object);
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_Factory =
    &_tao_tc_CosLifeCycle_Factory;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSLIFECYCLE_FACTORIES_CS_)
#define _COSLIFECYCLE_FACTORIES_CS_

CosLifeCycle::Factories::Factories (void)
{}

CosLifeCycle::Factories::Factories (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        Factory,
        Factory_var
      > (max)
{}

CosLifeCycle::Factories::Factories (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Object_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        Factory,
        Factory_var
      >
    (max, length, buffer, release)
{}

CosLifeCycle::Factories::Factories (
    const Factories &seq)
  : ::TAO::unbounded_object_reference_sequence<
        Factory,
        Factory_var
      > (seq)
{}

CosLifeCycle::Factories::~Factories (void)
{}

void CosLifeCycle::Factories::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Factories * _tao_tmp_pointer =
    static_cast<Factories *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosLifeCycle_Factories_GUARD
#define _TAO_TYPECODE_CosLifeCycle_Factories_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosLifeCycle_Factories_0 (
          ::CORBA::tk_sequence,
          &CosLifeCycle::_tc_Factory,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosLifeCycle_Factories_0 =
        &CosLifeCycle_Factories_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosLifeCycle_Factories_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_Factories (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosLifeCycle/Factories:1.0",
    "Factories",
    &TAO::TypeCode::tc_CosLifeCycle_Factories_0);
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_Factories =
    &_tao_tc_CosLifeCycle_Factories;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_NameValuePair[] =
      {
        { "name", &CosNaming::_tc_Istring },
        { "value", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_NameValuePair (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosLifeCycle/NameValuePair:1.0",
  "NameValuePair",
  _tao_fields_CosLifeCycle_NameValuePair,
  2);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_NameValuePair =
    &_tao_tc_CosLifeCycle_NameValuePair;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosLifeCycle::NameValuePair::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NameValuePair *_tao_tmp_pointer =
    static_cast<NameValuePair *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSLIFECYCLE_CRITERIA_CS_)
#define _COSLIFECYCLE_CRITERIA_CS_

CosLifeCycle::Criteria::Criteria (void)
{}

CosLifeCycle::Criteria::Criteria (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NameValuePair
      > (max)
{}

CosLifeCycle::Criteria::Criteria (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosLifeCycle::NameValuePair * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NameValuePair
      >
    (max, length, buffer, release)
{}

CosLifeCycle::Criteria::Criteria (
    const Criteria &seq)
  : ::TAO::unbounded_value_sequence<
        NameValuePair
      > (seq)
{}

CosLifeCycle::Criteria::~Criteria (void)
{}

void CosLifeCycle::Criteria::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Criteria * _tao_tmp_pointer =
    static_cast<Criteria *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosLifeCycle_Criteria_GUARD
#define _TAO_TYPECODE_CosLifeCycle_Criteria_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosLifeCycle_Criteria_0 (
          ::CORBA::tk_sequence,
          &CosLifeCycle::_tc_NameValuePair,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosLifeCycle_Criteria_0 =
        &CosLifeCycle_Criteria_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosLifeCycle_Criteria_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_Criteria (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosLifeCycle/Criteria:1.0",
    "Criteria",
    &TAO::TypeCode::tc_CosLifeCycle_Criteria_0);
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_Criteria =
    &_tao_tc_CosLifeCycle_Criteria;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosLifeCycle::NoFactory::NoFactory (
    const CosLifeCycle::Key & _tao_search_key)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
        "NoFactory"
      )
{
  this->search_key = _tao_search_key;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosLifeCycle::NoFactory::NoFactory (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
        "NoFactory"
      )
{
}

CosLifeCycle::NoFactory::~NoFactory (void)
{
}

CosLifeCycle::NoFactory::NoFactory (const ::CosLifeCycle::NoFactory &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->search_key = _tao_excp.search_key;
}

CosLifeCycle::NoFactory&
CosLifeCycle::NoFactory::operator= (const ::CosLifeCycle::NoFactory &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->search_key = _tao_excp.search_key;
  return *this;
}

void CosLifeCycle::NoFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  NoFactory *_tao_tmp_pointer =
    static_cast<NoFactory *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosLifeCycle::NoFactory *
CosLifeCycle::NoFactory::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoFactory *> (_tao_excp);
}

const CosLifeCycle::NoFactory *
CosLifeCycle::NoFactory::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoFactory *> (_tao_excp);
}

::CORBA::Exception *CosLifeCycle::NoFactory::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosLifeCycle::NoFactory, 0);
  return retval;
}

::CORBA::Exception *
CosLifeCycle::NoFactory::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosLifeCycle::NoFactory (*this),
      0
    );
  return result;
}

void CosLifeCycle::NoFactory::_raise (void) const
{
  throw *this;
}

void CosLifeCycle::NoFactory::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosLifeCycle::NoFactory::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosLifeCycle::NoFactory::_tao_type (void) const
{
  return ::CosLifeCycle::_tc_NoFactory;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_NoFactory[] =
      {
        { "search_key", &CosLifeCycle::_tc_Key }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_NoFactory (
  ::CORBA::tk_except,
  "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
  "NoFactory",
  _tao_fields_CosLifeCycle_NoFactory,
  1);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_NoFactory =
    &_tao_tc_CosLifeCycle_NoFactory;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosLifeCycle::NotCopyable::NotCopyable (
    const char * _tao_reason)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NotCopyable:1.0",
        "NotCopyable"
      )
{
  this->reason = ::CORBA::string_dup (_tao_reason);
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosLifeCycle::NotCopyable::NotCopyable (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NotCopyable:1.0",
        "NotCopyable"
      )
{
}

CosLifeCycle::NotCopyable::~NotCopyable (void)
{
}

CosLifeCycle::NotCopyable::NotCopyable (const ::CosLifeCycle::NotCopyable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
}

CosLifeCycle::NotCopyable&
CosLifeCycle::NotCopyable::operator= (const ::CosLifeCycle::NotCopyable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
  return *this;
}

void CosLifeCycle::NotCopyable::_tao_any_destructor (void *_tao_void_pointer)
{
  NotCopyable *_tao_tmp_pointer =
    static_cast<NotCopyable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosLifeCycle::NotCopyable *
CosLifeCycle::NotCopyable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotCopyable *> (_tao_excp);
}

const CosLifeCycle::NotCopyable *
CosLifeCycle::NotCopyable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotCopyable *> (_tao_excp);
}

::CORBA::Exception *CosLifeCycle::NotCopyable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosLifeCycle::NotCopyable, 0);
  return retval;
}

::CORBA::Exception *
CosLifeCycle::NotCopyable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosLifeCycle::NotCopyable (*this),
      0
    );
  return result;
}

void CosLifeCycle::NotCopyable::_raise (void) const
{
  throw *this;
}

void CosLifeCycle::NotCopyable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosLifeCycle::NotCopyable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosLifeCycle::NotCopyable::_tao_type (void) const
{
  return ::CosLifeCycle::_tc_NotCopyable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_NotCopyable[] =
      {
        { "reason", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_NotCopyable (
  ::CORBA::tk_except,
  "IDL:omg.org/CosLifeCycle/NotCopyable:1.0",
  "NotCopyable",
  _tao_fields_CosLifeCycle_NotCopyable,
  1);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_NotCopyable =
    &_tao_tc_CosLifeCycle_NotCopyable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosLifeCycle::NotMovable::NotMovable (
    const char * _tao_reason)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NotMovable:1.0",
        "NotMovable"
      )
{
  this->reason = ::CORBA::string_dup (_tao_reason);
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosLifeCycle::NotMovable::NotMovable (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NotMovable:1.0",
        "NotMovable"
      )
{
}

CosLifeCycle::NotMovable::~NotMovable (void)
{
}

CosLifeCycle::NotMovable::NotMovable (const ::CosLifeCycle::NotMovable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
}

CosLifeCycle::NotMovable&
CosLifeCycle::NotMovable::operator= (const ::CosLifeCycle::NotMovable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
  return *this;
}

void CosLifeCycle::NotMovable::_tao_any_destructor (void *_tao_void_pointer)
{
  NotMovable *_tao_tmp_pointer =
    static_cast<NotMovable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosLifeCycle::NotMovable *
CosLifeCycle::NotMovable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotMovable *> (_tao_excp);
}

const CosLifeCycle::NotMovable *
CosLifeCycle::NotMovable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotMovable *> (_tao_excp);
}

::CORBA::Exception *CosLifeCycle::NotMovable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosLifeCycle::NotMovable, 0);
  return retval;
}

::CORBA::Exception *
CosLifeCycle::NotMovable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosLifeCycle::NotMovable (*this),
      0
    );
  return result;
}

void CosLifeCycle::NotMovable::_raise (void) const
{
  throw *this;
}

void CosLifeCycle::NotMovable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosLifeCycle::NotMovable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosLifeCycle::NotMovable::_tao_type (void) const
{
  return ::CosLifeCycle::_tc_NotMovable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_NotMovable[] =
      {
        { "reason", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_NotMovable (
  ::CORBA::tk_except,
  "IDL:omg.org/CosLifeCycle/NotMovable:1.0",
  "NotMovable",
  _tao_fields_CosLifeCycle_NotMovable,
  1);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_NotMovable =
    &_tao_tc_CosLifeCycle_NotMovable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosLifeCycle::NotRemovable::NotRemovable (
    const char * _tao_reason)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NotRemovable:1.0",
        "NotRemovable"
      )
{
  this->reason = ::CORBA::string_dup (_tao_reason);
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosLifeCycle::NotRemovable::NotRemovable (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/NotRemovable:1.0",
        "NotRemovable"
      )
{
}

CosLifeCycle::NotRemovable::~NotRemovable (void)
{
}

CosLifeCycle::NotRemovable::NotRemovable (const ::CosLifeCycle::NotRemovable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
}

CosLifeCycle::NotRemovable&
CosLifeCycle::NotRemovable::operator= (const ::CosLifeCycle::NotRemovable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
  return *this;
}

void CosLifeCycle::NotRemovable::_tao_any_destructor (void *_tao_void_pointer)
{
  NotRemovable *_tao_tmp_pointer =
    static_cast<NotRemovable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosLifeCycle::NotRemovable *
CosLifeCycle::NotRemovable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotRemovable *> (_tao_excp);
}

const CosLifeCycle::NotRemovable *
CosLifeCycle::NotRemovable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotRemovable *> (_tao_excp);
}

::CORBA::Exception *CosLifeCycle::NotRemovable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosLifeCycle::NotRemovable, 0);
  return retval;
}

::CORBA::Exception *
CosLifeCycle::NotRemovable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosLifeCycle::NotRemovable (*this),
      0
    );
  return result;
}

void CosLifeCycle::NotRemovable::_raise (void) const
{
  throw *this;
}

void CosLifeCycle::NotRemovable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosLifeCycle::NotRemovable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosLifeCycle::NotRemovable::_tao_type (void) const
{
  return ::CosLifeCycle::_tc_NotRemovable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_NotRemovable[] =
      {
        { "reason", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_NotRemovable (
  ::CORBA::tk_except,
  "IDL:omg.org/CosLifeCycle/NotRemovable:1.0",
  "NotRemovable",
  _tao_fields_CosLifeCycle_NotRemovable,
  1);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_NotRemovable =
    &_tao_tc_CosLifeCycle_NotRemovable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosLifeCycle::InvalidCriteria::InvalidCriteria (
    const CosLifeCycle::Criteria & _tao_invalid_criteria)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/InvalidCriteria:1.0",
        "InvalidCriteria"
      )
{
  this->invalid_criteria = _tao_invalid_criteria;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosLifeCycle::InvalidCriteria::InvalidCriteria (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/InvalidCriteria:1.0",
        "InvalidCriteria"
      )
{
}

CosLifeCycle::InvalidCriteria::~InvalidCriteria (void)
{
}

CosLifeCycle::InvalidCriteria::InvalidCriteria (const ::CosLifeCycle::InvalidCriteria &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->invalid_criteria = _tao_excp.invalid_criteria;
}

CosLifeCycle::InvalidCriteria&
CosLifeCycle::InvalidCriteria::operator= (const ::CosLifeCycle::InvalidCriteria &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->invalid_criteria = _tao_excp.invalid_criteria;
  return *this;
}

void CosLifeCycle::InvalidCriteria::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidCriteria *_tao_tmp_pointer =
    static_cast<InvalidCriteria *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosLifeCycle::InvalidCriteria *
CosLifeCycle::InvalidCriteria::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidCriteria *> (_tao_excp);
}

const CosLifeCycle::InvalidCriteria *
CosLifeCycle::InvalidCriteria::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidCriteria *> (_tao_excp);
}

::CORBA::Exception *CosLifeCycle::InvalidCriteria::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosLifeCycle::InvalidCriteria, 0);
  return retval;
}

::CORBA::Exception *
CosLifeCycle::InvalidCriteria::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosLifeCycle::InvalidCriteria (*this),
      0
    );
  return result;
}

void CosLifeCycle::InvalidCriteria::_raise (void) const
{
  throw *this;
}

void CosLifeCycle::InvalidCriteria::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosLifeCycle::InvalidCriteria::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosLifeCycle::InvalidCriteria::_tao_type (void) const
{
  return ::CosLifeCycle::_tc_InvalidCriteria;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_InvalidCriteria[] =
      {
        { "invalid_criteria", &CosLifeCycle::_tc_Criteria }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_InvalidCriteria (
  ::CORBA::tk_except,
  "IDL:omg.org/CosLifeCycle/InvalidCriteria:1.0",
  "InvalidCriteria",
  _tao_fields_CosLifeCycle_InvalidCriteria,
  1);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_InvalidCriteria =
    &_tao_tc_CosLifeCycle_InvalidCriteria;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosLifeCycle::CannotMeetCriteria::CannotMeetCriteria (
    const CosLifeCycle::Criteria & _tao_unmet_criteria)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/CannotMeetCriteria:1.0",
        "CannotMeetCriteria"
      )
{
  this->unmet_criteria = _tao_unmet_criteria;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosLifeCycle::CannotMeetCriteria::CannotMeetCriteria (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosLifeCycle/CannotMeetCriteria:1.0",
        "CannotMeetCriteria"
      )
{
}

CosLifeCycle::CannotMeetCriteria::~CannotMeetCriteria (void)
{
}

CosLifeCycle::CannotMeetCriteria::CannotMeetCriteria (const ::CosLifeCycle::CannotMeetCriteria &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->unmet_criteria = _tao_excp.unmet_criteria;
}

CosLifeCycle::CannotMeetCriteria&
CosLifeCycle::CannotMeetCriteria::operator= (const ::CosLifeCycle::CannotMeetCriteria &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->unmet_criteria = _tao_excp.unmet_criteria;
  return *this;
}

void CosLifeCycle::CannotMeetCriteria::_tao_any_destructor (void *_tao_void_pointer)
{
  CannotMeetCriteria *_tao_tmp_pointer =
    static_cast<CannotMeetCriteria *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosLifeCycle::CannotMeetCriteria *
CosLifeCycle::CannotMeetCriteria::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CannotMeetCriteria *> (_tao_excp);
}

const CosLifeCycle::CannotMeetCriteria *
CosLifeCycle::CannotMeetCriteria::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CannotMeetCriteria *> (_tao_excp);
}

::CORBA::Exception *CosLifeCycle::CannotMeetCriteria::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosLifeCycle::CannotMeetCriteria, 0);
  return retval;
}

::CORBA::Exception *
CosLifeCycle::CannotMeetCriteria::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosLifeCycle::CannotMeetCriteria (*this),
      0
    );
  return result;
}

void CosLifeCycle::CannotMeetCriteria::_raise (void) const
{
  throw *this;
}

void CosLifeCycle::CannotMeetCriteria::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosLifeCycle::CannotMeetCriteria::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosLifeCycle::CannotMeetCriteria::_tao_type (void) const
{
  return ::CosLifeCycle::_tc_CannotMeetCriteria;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosLifeCycle_CannotMeetCriteria[] =
      {
        { "unmet_criteria", &CosLifeCycle::_tc_Criteria }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosLifeCycle_CannotMeetCriteria (
  ::CORBA::tk_except,
  "IDL:omg.org/CosLifeCycle/CannotMeetCriteria:1.0",
  "CannotMeetCriteria",
  _tao_fields_CosLifeCycle_CannotMeetCriteria,
  1);


namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_CannotMeetCriteria =
    &_tao_tc_CosLifeCycle_CannotMeetCriteria;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosLifeCycle::FactoryFinder.

CosLifeCycle::FactoryFinder_ptr
TAO::Objref_Traits<CosLifeCycle::FactoryFinder>::duplicate (
    CosLifeCycle::FactoryFinder_ptr p)
{
  return CosLifeCycle::FactoryFinder::_duplicate (p);
}

void
TAO::Objref_Traits<CosLifeCycle::FactoryFinder>::release (
    CosLifeCycle::FactoryFinder_ptr p)
{
  ::CORBA::release (p);
}

CosLifeCycle::FactoryFinder_ptr
TAO::Objref_Traits<CosLifeCycle::FactoryFinder>::nil (void)
{
  return CosLifeCycle::FactoryFinder::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosLifeCycle::FactoryFinder>::marshal (
    const CosLifeCycle::FactoryFinder_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosLifeCycle__TAO_FactoryFinder_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosLifeCycle::Factories *
CosLifeCycle::FactoryFinder::find_factories (
  const ::CosLifeCycle::Key & factory_key)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_FactoryFinder_Proxy_Broker_ == 0)
    {
      CosLifeCycle_FactoryFinder_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosLifeCycle::Factories>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosLifeCycle::Key>::in_arg_val _tao_factory_key (factory_key);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_factory_key
    };

  static TAO::Exception_Data
  _tao_CosLifeCycle_FactoryFinder_find_factories_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
        CosLifeCycle::NoFactory::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NoFactory
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "find_factories",
      14,
      this->the_TAO_FactoryFinder_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosLifeCycle_FactoryFinder_find_factories_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosLifeCycle::FactoryFinder::FactoryFinder (void)
 : the_TAO_FactoryFinder_Proxy_Broker_ (0)
{
  this->CosLifeCycle_FactoryFinder_setup_collocation ();
}

void
CosLifeCycle::FactoryFinder::CosLifeCycle_FactoryFinder_setup_collocation ()
{
  if (::CosLifeCycle__TAO_FactoryFinder_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_FactoryFinder_Proxy_Broker_ =
        ::CosLifeCycle__TAO_FactoryFinder_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosLifeCycle::FactoryFinder::~FactoryFinder (void)
{}

void 
CosLifeCycle::FactoryFinder::_tao_any_destructor (void *_tao_void_pointer)
{
  FactoryFinder *_tao_tmp_pointer =
    static_cast<FactoryFinder *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosLifeCycle::FactoryFinder_ptr
CosLifeCycle::FactoryFinder::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<FactoryFinder>::narrow (
        _tao_objref,
        "IDL:omg.org/CosLifeCycle/FactoryFinder:1.0",
        CosLifeCycle__TAO_FactoryFinder_Proxy_Broker_Factory_function_pointer
      );
}

CosLifeCycle::FactoryFinder_ptr
CosLifeCycle::FactoryFinder::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<FactoryFinder>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosLifeCycle/FactoryFinder:1.0",
        CosLifeCycle__TAO_FactoryFinder_Proxy_Broker_Factory_function_pointer
      );
}

CosLifeCycle::FactoryFinder_ptr
CosLifeCycle::FactoryFinder::_nil (void)
{
  return 0;
}

CosLifeCycle::FactoryFinder_ptr
CosLifeCycle::FactoryFinder::_duplicate (FactoryFinder_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosLifeCycle::FactoryFinder::_tao_release (FactoryFinder_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosLifeCycle::FactoryFinder::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosLifeCycle/FactoryFinder:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosLifeCycle::FactoryFinder::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosLifeCycle/FactoryFinder:1.0";
}

::CORBA::Boolean
CosLifeCycle::FactoryFinder::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_FactoryFinder (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosLifeCycle/FactoryFinder:1.0",
    "FactoryFinder");
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_FactoryFinder =
    &_tao_tc_CosLifeCycle_FactoryFinder;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosLifeCycle::LifeCycleObject.

CosLifeCycle::LifeCycleObject_ptr
TAO::Objref_Traits<CosLifeCycle::LifeCycleObject>::duplicate (
    CosLifeCycle::LifeCycleObject_ptr p)
{
  return CosLifeCycle::LifeCycleObject::_duplicate (p);
}

void
TAO::Objref_Traits<CosLifeCycle::LifeCycleObject>::release (
    CosLifeCycle::LifeCycleObject_ptr p)
{
  ::CORBA::release (p);
}

CosLifeCycle::LifeCycleObject_ptr
TAO::Objref_Traits<CosLifeCycle::LifeCycleObject>::nil (void)
{
  return CosLifeCycle::LifeCycleObject::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosLifeCycle::LifeCycleObject>::marshal (
    const CosLifeCycle::LifeCycleObject_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosLifeCycle__TAO_LifeCycleObject_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosLifeCycle::LifeCycleObject_ptr
CosLifeCycle::LifeCycleObject::copy (
  ::CosLifeCycle::FactoryFinder_ptr there,
  const ::CosLifeCycle::Criteria & the_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_LifeCycleObject_Proxy_Broker_ == 0)
    {
      CosLifeCycle_LifeCycleObject_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosLifeCycle::LifeCycleObject>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosLifeCycle::FactoryFinder>::in_arg_val _tao_there (there);
  TAO::Arg_Traits< ::CosLifeCycle::Criteria>::in_arg_val _tao_the_criteria (the_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_there,
      &_tao_the_criteria
    };

  static TAO::Exception_Data
  _tao_CosLifeCycle_LifeCycleObject_copy_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
        CosLifeCycle::NoFactory::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NoFactory
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/NotCopyable:1.0",
        CosLifeCycle::NotCopyable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NotCopyable
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/InvalidCriteria:1.0",
        CosLifeCycle::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/CannotMeetCriteria:1.0",
        CosLifeCycle::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "copy",
      4,
      this->the_TAO_LifeCycleObject_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosLifeCycle_LifeCycleObject_copy_exceptiondata,
      4
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosLifeCycle::LifeCycleObject::move (
  ::CosLifeCycle::FactoryFinder_ptr there,
  const ::CosLifeCycle::Criteria & the_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_LifeCycleObject_Proxy_Broker_ == 0)
    {
      CosLifeCycle_LifeCycleObject_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosLifeCycle::FactoryFinder>::in_arg_val _tao_there (there);
  TAO::Arg_Traits< ::CosLifeCycle::Criteria>::in_arg_val _tao_the_criteria (the_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_there,
      &_tao_the_criteria
    };

  static TAO::Exception_Data
  _tao_CosLifeCycle_LifeCycleObject_move_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
        CosLifeCycle::NoFactory::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NoFactory
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/NotMovable:1.0",
        CosLifeCycle::NotMovable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NotMovable
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/InvalidCriteria:1.0",
        CosLifeCycle::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/CannotMeetCriteria:1.0",
        CosLifeCycle::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "move",
      4,
      this->the_TAO_LifeCycleObject_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosLifeCycle_LifeCycleObject_move_exceptiondata,
      4
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosLifeCycle::LifeCycleObject::remove (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_LifeCycleObject_Proxy_Broker_ == 0)
    {
      CosLifeCycle_LifeCycleObject_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosLifeCycle_LifeCycleObject_remove_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosLifeCycle/NotRemovable:1.0",
        CosLifeCycle::NotRemovable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NotRemovable
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "remove",
      6,
      this->the_TAO_LifeCycleObject_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosLifeCycle_LifeCycleObject_remove_exceptiondata,
      1
    );
}

CosLifeCycle::LifeCycleObject::LifeCycleObject (void)
 : the_TAO_LifeCycleObject_Proxy_Broker_ (0)
{
  this->CosLifeCycle_LifeCycleObject_setup_collocation ();
}

void
CosLifeCycle::LifeCycleObject::CosLifeCycle_LifeCycleObject_setup_collocation ()
{
  if (::CosLifeCycle__TAO_LifeCycleObject_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_LifeCycleObject_Proxy_Broker_ =
        ::CosLifeCycle__TAO_LifeCycleObject_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosLifeCycle::LifeCycleObject::~LifeCycleObject (void)
{}

void 
CosLifeCycle::LifeCycleObject::_tao_any_destructor (void *_tao_void_pointer)
{
  LifeCycleObject *_tao_tmp_pointer =
    static_cast<LifeCycleObject *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosLifeCycle::LifeCycleObject_ptr
CosLifeCycle::LifeCycleObject::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<LifeCycleObject>::narrow (
        _tao_objref,
        "IDL:omg.org/CosLifeCycle/LifeCycleObject:1.0",
        CosLifeCycle__TAO_LifeCycleObject_Proxy_Broker_Factory_function_pointer
      );
}

CosLifeCycle::LifeCycleObject_ptr
CosLifeCycle::LifeCycleObject::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<LifeCycleObject>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosLifeCycle/LifeCycleObject:1.0",
        CosLifeCycle__TAO_LifeCycleObject_Proxy_Broker_Factory_function_pointer
      );
}

CosLifeCycle::LifeCycleObject_ptr
CosLifeCycle::LifeCycleObject::_nil (void)
{
  return 0;
}

CosLifeCycle::LifeCycleObject_ptr
CosLifeCycle::LifeCycleObject::_duplicate (LifeCycleObject_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosLifeCycle::LifeCycleObject::_tao_release (LifeCycleObject_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosLifeCycle::LifeCycleObject::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosLifeCycle/LifeCycleObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosLifeCycle::LifeCycleObject::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosLifeCycle/LifeCycleObject:1.0";
}

::CORBA::Boolean
CosLifeCycle::LifeCycleObject::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_LifeCycleObject (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosLifeCycle/LifeCycleObject:1.0",
    "LifeCycleObject");
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_LifeCycleObject =
    &_tao_tc_CosLifeCycle_LifeCycleObject;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosLifeCycle::GenericFactory.

CosLifeCycle::GenericFactory_ptr
TAO::Objref_Traits<CosLifeCycle::GenericFactory>::duplicate (
    CosLifeCycle::GenericFactory_ptr p)
{
  return CosLifeCycle::GenericFactory::_duplicate (p);
}

void
TAO::Objref_Traits<CosLifeCycle::GenericFactory>::release (
    CosLifeCycle::GenericFactory_ptr p)
{
  ::CORBA::release (p);
}

CosLifeCycle::GenericFactory_ptr
TAO::Objref_Traits<CosLifeCycle::GenericFactory>::nil (void)
{
  return CosLifeCycle::GenericFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosLifeCycle::GenericFactory>::marshal (
    const CosLifeCycle::GenericFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosLifeCycle__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosLifeCycle::GenericFactory::supports (
  const ::CosLifeCycle::Key & k)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_GenericFactory_Proxy_Broker_ == 0)
    {
      CosLifeCycle_GenericFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosLifeCycle::Key>::in_arg_val _tao_k (k);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_k
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "supports",
      8,
      this->the_TAO_GenericFactory_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Object_ptr
CosLifeCycle::GenericFactory::create_object (
  const ::CosLifeCycle::Key & k,
  const ::CosLifeCycle::Criteria & the_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_GenericFactory_Proxy_Broker_ == 0)
    {
      CosLifeCycle_GenericFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosLifeCycle::Key>::in_arg_val _tao_k (k);
  TAO::Arg_Traits< ::CosLifeCycle::Criteria>::in_arg_val _tao_the_criteria (the_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_k,
      &_tao_the_criteria
    };

  static TAO::Exception_Data
  _tao_CosLifeCycle_GenericFactory_create_object_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosLifeCycle/NoFactory:1.0",
        CosLifeCycle::NoFactory::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_NoFactory
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/InvalidCriteria:1.0",
        CosLifeCycle::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosLifeCycle/CannotMeetCriteria:1.0",
        CosLifeCycle::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosLifeCycle::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "create_object",
      13,
      this->the_TAO_GenericFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosLifeCycle_GenericFactory_create_object_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

CosLifeCycle::GenericFactory::GenericFactory (void)
 : the_TAO_GenericFactory_Proxy_Broker_ (0)
{
  this->CosLifeCycle_GenericFactory_setup_collocation ();
}

void
CosLifeCycle::GenericFactory::CosLifeCycle_GenericFactory_setup_collocation ()
{
  if (::CosLifeCycle__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_GenericFactory_Proxy_Broker_ =
        ::CosLifeCycle__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosLifeCycle::GenericFactory::~GenericFactory (void)
{}

void 
CosLifeCycle::GenericFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  GenericFactory *_tao_tmp_pointer =
    static_cast<GenericFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosLifeCycle::GenericFactory_ptr
CosLifeCycle::GenericFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<GenericFactory>::narrow (
        _tao_objref,
        "IDL:omg.org/CosLifeCycle/GenericFactory:1.0",
        CosLifeCycle__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosLifeCycle::GenericFactory_ptr
CosLifeCycle::GenericFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<GenericFactory>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosLifeCycle/GenericFactory:1.0",
        CosLifeCycle__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosLifeCycle::GenericFactory_ptr
CosLifeCycle::GenericFactory::_nil (void)
{
  return 0;
}

CosLifeCycle::GenericFactory_ptr
CosLifeCycle::GenericFactory::_duplicate (GenericFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosLifeCycle::GenericFactory::_tao_release (GenericFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosLifeCycle::GenericFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosLifeCycle/GenericFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosLifeCycle::GenericFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosLifeCycle/GenericFactory:1.0";
}

::CORBA::Boolean
CosLifeCycle::GenericFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosLifeCycle_GenericFactory (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosLifeCycle/GenericFactory:1.0",
    "GenericFactory");
  

namespace CosLifeCycle
{
  ::CORBA::TypeCode_ptr const _tc_GenericFactory =
    &_tao_tc_CosLifeCycle_GenericFactory;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::Factories &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosLifeCycle::Factories *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::Factories>::insert_copy (
          _tao_any,
          ::CosLifeCycle::Factories::_tao_any_destructor,
          ::CosLifeCycle::_tc_Factories,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::Factories *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::Factories>::insert (
        _tao_any,
        ::CosLifeCycle::Factories::_tao_any_destructor,
        ::CosLifeCycle::_tc_Factories,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::Factories *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::Factories *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::Factories *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::Factories>::extract (
          _tao_any,
          ::CosLifeCycle::Factories::_tao_any_destructor,
          ::CosLifeCycle::_tc_Factories,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::Factories &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosLifeCycle::Factories *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosLifeCycle::Factories>::insert_copy (
        _tao_any,
        CosLifeCycle::Factories::_tao_any_destructor,
        CosLifeCycle::_tc_Factories,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::Factories *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::Factories>::insert (
      _tao_any,
      CosLifeCycle::Factories::_tao_any_destructor,
      CosLifeCycle::_tc_Factories,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::Factories *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::Factories *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::Factories *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::Factories>::extract (
        _tao_any,
        CosLifeCycle::Factories::_tao_any_destructor,
        CosLifeCycle::_tc_Factories,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NameValuePair &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosLifeCycle::NameValuePair *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::NameValuePair>::insert_copy (
          _tao_any,
          ::CosLifeCycle::NameValuePair::_tao_any_destructor,
          ::CosLifeCycle::_tc_NameValuePair,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosLifeCycle::NameValuePair *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NameValuePair>::insert (
        _tao_any,
        ::CosLifeCycle::NameValuePair::_tao_any_destructor,
        ::CosLifeCycle::_tc_NameValuePair,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NameValuePair *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::NameValuePair *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NameValuePair *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::NameValuePair>::extract (
          _tao_any,
          ::CosLifeCycle::NameValuePair::_tao_any_destructor,
          ::CosLifeCycle::_tc_NameValuePair,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::NameValuePair &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosLifeCycle::NameValuePair *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosLifeCycle::NameValuePair>::insert_copy (
        _tao_any,
        CosLifeCycle::NameValuePair::_tao_any_destructor,
        CosLifeCycle::_tc_NameValuePair,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::NameValuePair *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NameValuePair>::insert (
      _tao_any,
      CosLifeCycle::NameValuePair::_tao_any_destructor,
      CosLifeCycle::_tc_NameValuePair,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::NameValuePair *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::NameValuePair *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::NameValuePair *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::NameValuePair>::extract (
        _tao_any,
        CosLifeCycle::NameValuePair::_tao_any_destructor,
        CosLifeCycle::_tc_NameValuePair,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::Criteria &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosLifeCycle::Criteria *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::Criteria>::insert_copy (
          _tao_any,
          ::CosLifeCycle::Criteria::_tao_any_destructor,
          ::CosLifeCycle::_tc_Criteria,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::Criteria *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::Criteria>::insert (
        _tao_any,
        ::CosLifeCycle::Criteria::_tao_any_destructor,
        ::CosLifeCycle::_tc_Criteria,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::Criteria *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::Criteria *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::Criteria *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::Criteria>::extract (
          _tao_any,
          ::CosLifeCycle::Criteria::_tao_any_destructor,
          ::CosLifeCycle::_tc_Criteria,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::Criteria &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosLifeCycle::Criteria *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosLifeCycle::Criteria>::insert_copy (
        _tao_any,
        CosLifeCycle::Criteria::_tao_any_destructor,
        CosLifeCycle::_tc_Criteria,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::Criteria *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::Criteria>::insert (
      _tao_any,
      CosLifeCycle::Criteria::_tao_any_destructor,
      CosLifeCycle::_tc_Criteria,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::Criteria *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::Criteria *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::Criteria *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::Criteria>::extract (
        _tao_any,
        CosLifeCycle::Criteria::_tao_any_destructor,
        CosLifeCycle::_tc_Criteria,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosLifeCycle::NoFactory>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NoFactory &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NoFactory>::insert_copy (
        _tao_any,
        ::CosLifeCycle::NoFactory::_tao_any_destructor,
        ::CosLifeCycle::_tc_NoFactory,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NoFactory *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NoFactory>::insert (
        _tao_any,
        ::CosLifeCycle::NoFactory::_tao_any_destructor,
        ::CosLifeCycle::_tc_NoFactory,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NoFactory *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::NoFactory *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NoFactory *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::NoFactory>::extract (
          _tao_any,
          ::CosLifeCycle::NoFactory::_tao_any_destructor,
          ::CosLifeCycle::_tc_NoFactory,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::NoFactory &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NoFactory>::insert_copy (
      _tao_any,
      CosLifeCycle::NoFactory::_tao_any_destructor,
      CosLifeCycle::_tc_NoFactory,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::NoFactory *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NoFactory>::insert (
      _tao_any,
      CosLifeCycle::NoFactory::_tao_any_destructor,
      CosLifeCycle::_tc_NoFactory,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::NoFactory *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::NoFactory *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::NoFactory *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::NoFactory>::extract (
        _tao_any,
        CosLifeCycle::NoFactory::_tao_any_destructor,
        CosLifeCycle::_tc_NoFactory,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosLifeCycle::NotCopyable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NotCopyable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotCopyable>::insert_copy (
        _tao_any,
        ::CosLifeCycle::NotCopyable::_tao_any_destructor,
        ::CosLifeCycle::_tc_NotCopyable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NotCopyable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotCopyable>::insert (
        _tao_any,
        ::CosLifeCycle::NotCopyable::_tao_any_destructor,
        ::CosLifeCycle::_tc_NotCopyable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NotCopyable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::NotCopyable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NotCopyable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotCopyable>::extract (
          _tao_any,
          ::CosLifeCycle::NotCopyable::_tao_any_destructor,
          ::CosLifeCycle::_tc_NotCopyable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::NotCopyable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NotCopyable>::insert_copy (
      _tao_any,
      CosLifeCycle::NotCopyable::_tao_any_destructor,
      CosLifeCycle::_tc_NotCopyable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::NotCopyable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NotCopyable>::insert (
      _tao_any,
      CosLifeCycle::NotCopyable::_tao_any_destructor,
      CosLifeCycle::_tc_NotCopyable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::NotCopyable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::NotCopyable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::NotCopyable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::NotCopyable>::extract (
        _tao_any,
        CosLifeCycle::NotCopyable::_tao_any_destructor,
        CosLifeCycle::_tc_NotCopyable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosLifeCycle::NotMovable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NotMovable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotMovable>::insert_copy (
        _tao_any,
        ::CosLifeCycle::NotMovable::_tao_any_destructor,
        ::CosLifeCycle::_tc_NotMovable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NotMovable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotMovable>::insert (
        _tao_any,
        ::CosLifeCycle::NotMovable::_tao_any_destructor,
        ::CosLifeCycle::_tc_NotMovable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NotMovable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::NotMovable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NotMovable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotMovable>::extract (
          _tao_any,
          ::CosLifeCycle::NotMovable::_tao_any_destructor,
          ::CosLifeCycle::_tc_NotMovable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::NotMovable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NotMovable>::insert_copy (
      _tao_any,
      CosLifeCycle::NotMovable::_tao_any_destructor,
      CosLifeCycle::_tc_NotMovable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::NotMovable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NotMovable>::insert (
      _tao_any,
      CosLifeCycle::NotMovable::_tao_any_destructor,
      CosLifeCycle::_tc_NotMovable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::NotMovable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::NotMovable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::NotMovable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::NotMovable>::extract (
        _tao_any,
        CosLifeCycle::NotMovable::_tao_any_destructor,
        CosLifeCycle::_tc_NotMovable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosLifeCycle::NotRemovable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NotRemovable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotRemovable>::insert_copy (
        _tao_any,
        ::CosLifeCycle::NotRemovable::_tao_any_destructor,
        ::CosLifeCycle::_tc_NotRemovable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NotRemovable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotRemovable>::insert (
        _tao_any,
        ::CosLifeCycle::NotRemovable::_tao_any_destructor,
        ::CosLifeCycle::_tc_NotRemovable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::NotRemovable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::NotRemovable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::NotRemovable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::NotRemovable>::extract (
          _tao_any,
          ::CosLifeCycle::NotRemovable::_tao_any_destructor,
          ::CosLifeCycle::_tc_NotRemovable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::NotRemovable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NotRemovable>::insert_copy (
      _tao_any,
      CosLifeCycle::NotRemovable::_tao_any_destructor,
      CosLifeCycle::_tc_NotRemovable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::NotRemovable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::NotRemovable>::insert (
      _tao_any,
      CosLifeCycle::NotRemovable::_tao_any_destructor,
      CosLifeCycle::_tc_NotRemovable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::NotRemovable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::NotRemovable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::NotRemovable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::NotRemovable>::extract (
        _tao_any,
        CosLifeCycle::NotRemovable::_tao_any_destructor,
        CosLifeCycle::_tc_NotRemovable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosLifeCycle::InvalidCriteria>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::InvalidCriteria &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::InvalidCriteria>::insert_copy (
        _tao_any,
        ::CosLifeCycle::InvalidCriteria::_tao_any_destructor,
        ::CosLifeCycle::_tc_InvalidCriteria,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::InvalidCriteria *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::InvalidCriteria>::insert (
        _tao_any,
        ::CosLifeCycle::InvalidCriteria::_tao_any_destructor,
        ::CosLifeCycle::_tc_InvalidCriteria,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::InvalidCriteria *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::InvalidCriteria *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::InvalidCriteria *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::InvalidCriteria>::extract (
          _tao_any,
          ::CosLifeCycle::InvalidCriteria::_tao_any_destructor,
          ::CosLifeCycle::_tc_InvalidCriteria,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::InvalidCriteria &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::InvalidCriteria>::insert_copy (
      _tao_any,
      CosLifeCycle::InvalidCriteria::_tao_any_destructor,
      CosLifeCycle::_tc_InvalidCriteria,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::InvalidCriteria *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::InvalidCriteria>::insert (
      _tao_any,
      CosLifeCycle::InvalidCriteria::_tao_any_destructor,
      CosLifeCycle::_tc_InvalidCriteria,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::InvalidCriteria *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::InvalidCriteria *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::InvalidCriteria *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::InvalidCriteria>::extract (
        _tao_any,
        CosLifeCycle::InvalidCriteria::_tao_any_destructor,
        CosLifeCycle::_tc_InvalidCriteria,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosLifeCycle::CannotMeetCriteria>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::CannotMeetCriteria &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::CannotMeetCriteria>::insert_copy (
        _tao_any,
        ::CosLifeCycle::CannotMeetCriteria::_tao_any_destructor,
        ::CosLifeCycle::_tc_CannotMeetCriteria,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosLifeCycle::CannotMeetCriteria *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosLifeCycle::CannotMeetCriteria>::insert (
        _tao_any,
        ::CosLifeCycle::CannotMeetCriteria::_tao_any_destructor,
        ::CosLifeCycle::_tc_CannotMeetCriteria,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosLifeCycle::CannotMeetCriteria *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosLifeCycle::CannotMeetCriteria *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosLifeCycle::CannotMeetCriteria *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosLifeCycle::CannotMeetCriteria>::extract (
          _tao_any,
          ::CosLifeCycle::CannotMeetCriteria::_tao_any_destructor,
          ::CosLifeCycle::_tc_CannotMeetCriteria,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosLifeCycle::CannotMeetCriteria &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::CannotMeetCriteria>::insert_copy (
      _tao_any,
      CosLifeCycle::CannotMeetCriteria::_tao_any_destructor,
      CosLifeCycle::_tc_CannotMeetCriteria,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::CannotMeetCriteria *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosLifeCycle::CannotMeetCriteria>::insert (
      _tao_any,
      CosLifeCycle::CannotMeetCriteria::_tao_any_destructor,
      CosLifeCycle::_tc_CannotMeetCriteria,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::CannotMeetCriteria *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosLifeCycle::CannotMeetCriteria *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosLifeCycle::CannotMeetCriteria *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosLifeCycle::CannotMeetCriteria>::extract (
        _tao_any,
        CosLifeCycle::CannotMeetCriteria::_tao_any_destructor,
        CosLifeCycle::_tc_CannotMeetCriteria,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosLifeCycle::FactoryFinder>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      FactoryFinder_ptr _tao_elem)
  {
    FactoryFinder_ptr _tao_objptr =
      FactoryFinder::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      FactoryFinder_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<FactoryFinder>::insert (
        _tao_any,
        FactoryFinder::_tao_any_destructor,
        _tc_FactoryFinder,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      FactoryFinder_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<FactoryFinder>::extract (
          _tao_any,
          FactoryFinder::_tao_any_destructor,
          _tc_FactoryFinder,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::FactoryFinder_ptr _tao_elem)
{
  CosLifeCycle::FactoryFinder_ptr _tao_objptr =
    CosLifeCycle::FactoryFinder::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::FactoryFinder_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosLifeCycle::FactoryFinder>::insert (
      _tao_any,
      CosLifeCycle::FactoryFinder::_tao_any_destructor,
      CosLifeCycle::_tc_FactoryFinder,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::FactoryFinder_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosLifeCycle::FactoryFinder>::extract (
        _tao_any,
        CosLifeCycle::FactoryFinder::_tao_any_destructor,
        CosLifeCycle::_tc_FactoryFinder,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosLifeCycle::LifeCycleObject>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      LifeCycleObject_ptr _tao_elem)
  {
    LifeCycleObject_ptr _tao_objptr =
      LifeCycleObject::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      LifeCycleObject_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<LifeCycleObject>::insert (
        _tao_any,
        LifeCycleObject::_tao_any_destructor,
        _tc_LifeCycleObject,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      LifeCycleObject_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<LifeCycleObject>::extract (
          _tao_any,
          LifeCycleObject::_tao_any_destructor,
          _tc_LifeCycleObject,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::LifeCycleObject_ptr _tao_elem)
{
  CosLifeCycle::LifeCycleObject_ptr _tao_objptr =
    CosLifeCycle::LifeCycleObject::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::LifeCycleObject_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosLifeCycle::LifeCycleObject>::insert (
      _tao_any,
      CosLifeCycle::LifeCycleObject::_tao_any_destructor,
      CosLifeCycle::_tc_LifeCycleObject,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::LifeCycleObject_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosLifeCycle::LifeCycleObject>::extract (
        _tao_any,
        CosLifeCycle::LifeCycleObject::_tao_any_destructor,
        CosLifeCycle::_tc_LifeCycleObject,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosLifeCycle::GenericFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosLifeCycle
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      GenericFactory_ptr _tao_elem)
  {
    GenericFactory_ptr _tao_objptr =
      GenericFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      GenericFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<GenericFactory>::insert (
        _tao_any,
        GenericFactory::_tao_any_destructor,
        _tc_GenericFactory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      GenericFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<GenericFactory>::extract (
          _tao_any,
          GenericFactory::_tao_any_destructor,
          _tc_GenericFactory,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::GenericFactory_ptr _tao_elem)
{
  CosLifeCycle::GenericFactory_ptr _tao_objptr =
    CosLifeCycle::GenericFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosLifeCycle::GenericFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosLifeCycle::GenericFactory>::insert (
      _tao_any,
      CosLifeCycle::GenericFactory::_tao_any_destructor,
      CosLifeCycle::_tc_GenericFactory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosLifeCycle::GenericFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosLifeCycle::GenericFactory>::extract (
        _tao_any,
        CosLifeCycle::GenericFactory::_tao_any_destructor,
        CosLifeCycle::_tc_GenericFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosLifeCycle_Factories_CPP_
#define _TAO_CDR_OP_CosLifeCycle_Factories_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::Factories &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::Factories &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosLifeCycle_Factories_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::NameValuePair &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::NameValuePair &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosLifeCycle_Criteria_CPP_
#define _TAO_CDR_OP_CosLifeCycle_Criteria_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::Criteria &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::Criteria &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosLifeCycle_Criteria_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::NoFactory &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.search_key)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::NoFactory &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.search_key)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::NotCopyable &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::NotCopyable &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::NotMovable &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::NotMovable &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::NotRemovable &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::NotRemovable &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::InvalidCriteria &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.invalid_criteria)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::InvalidCriteria &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.invalid_criteria)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::CannotMeetCriteria &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.unmet_criteria)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::CannotMeetCriteria &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.unmet_criteria)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::FactoryFinder_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::FactoryFinder_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosLifeCycle::FactoryFinder RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosLifeCycle__TAO_FactoryFinder_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::LifeCycleObject_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::LifeCycleObject_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosLifeCycle::LifeCycleObject RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosLifeCycle__TAO_LifeCycleObject_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosLifeCycle::GenericFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosLifeCycle::GenericFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosLifeCycle::GenericFactory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosLifeCycle__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


