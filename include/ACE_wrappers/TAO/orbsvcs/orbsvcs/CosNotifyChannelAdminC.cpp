// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosNotifyChannelAdminC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosNotifyChannelAdminC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::ConnectionAlreadyActive::ConnectionAlreadyActive (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0",
        "ConnectionAlreadyActive"
      )
{
}

CosNotifyChannelAdmin::ConnectionAlreadyActive::~ConnectionAlreadyActive (void)
{
}

CosNotifyChannelAdmin::ConnectionAlreadyActive::ConnectionAlreadyActive (const ::CosNotifyChannelAdmin::ConnectionAlreadyActive &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNotifyChannelAdmin::ConnectionAlreadyActive&
CosNotifyChannelAdmin::ConnectionAlreadyActive::operator= (const ::CosNotifyChannelAdmin::ConnectionAlreadyActive &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor (void *_tao_void_pointer)
{
  ConnectionAlreadyActive *_tao_tmp_pointer =
    static_cast<ConnectionAlreadyActive *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::ConnectionAlreadyActive *
CosNotifyChannelAdmin::ConnectionAlreadyActive::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ConnectionAlreadyActive *> (_tao_excp);
}

const CosNotifyChannelAdmin::ConnectionAlreadyActive *
CosNotifyChannelAdmin::ConnectionAlreadyActive::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ConnectionAlreadyActive *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::ConnectionAlreadyActive::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::ConnectionAlreadyActive, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::ConnectionAlreadyActive (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::ConnectionAlreadyActive::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNotifyChannelAdmin_ConnectionAlreadyActive = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_ConnectionAlreadyActive (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0",
  "ConnectionAlreadyActive",
  _tao_fields_CosNotifyChannelAdmin_ConnectionAlreadyActive,
  0);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConnectionAlreadyActive =
    &_tao_tc_CosNotifyChannelAdmin_ConnectionAlreadyActive;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::ConnectionAlreadyInactive::ConnectionAlreadyInactive (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0",
        "ConnectionAlreadyInactive"
      )
{
}

CosNotifyChannelAdmin::ConnectionAlreadyInactive::~ConnectionAlreadyInactive (void)
{
}

CosNotifyChannelAdmin::ConnectionAlreadyInactive::ConnectionAlreadyInactive (const ::CosNotifyChannelAdmin::ConnectionAlreadyInactive &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNotifyChannelAdmin::ConnectionAlreadyInactive&
CosNotifyChannelAdmin::ConnectionAlreadyInactive::operator= (const ::CosNotifyChannelAdmin::ConnectionAlreadyInactive &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor (void *_tao_void_pointer)
{
  ConnectionAlreadyInactive *_tao_tmp_pointer =
    static_cast<ConnectionAlreadyInactive *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::ConnectionAlreadyInactive *
CosNotifyChannelAdmin::ConnectionAlreadyInactive::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ConnectionAlreadyInactive *> (_tao_excp);
}

const CosNotifyChannelAdmin::ConnectionAlreadyInactive *
CosNotifyChannelAdmin::ConnectionAlreadyInactive::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ConnectionAlreadyInactive *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::ConnectionAlreadyInactive::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::ConnectionAlreadyInactive, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::ConnectionAlreadyInactive (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::ConnectionAlreadyInactive::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNotifyChannelAdmin_ConnectionAlreadyInactive = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_ConnectionAlreadyInactive (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0",
  "ConnectionAlreadyInactive",
  _tao_fields_CosNotifyChannelAdmin_ConnectionAlreadyInactive,
  0);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConnectionAlreadyInactive =
    &_tao_tc_CosNotifyChannelAdmin_ConnectionAlreadyInactive;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::NotConnected::NotConnected (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        "NotConnected"
      )
{
}

CosNotifyChannelAdmin::NotConnected::~NotConnected (void)
{
}

CosNotifyChannelAdmin::NotConnected::NotConnected (const ::CosNotifyChannelAdmin::NotConnected &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNotifyChannelAdmin::NotConnected&
CosNotifyChannelAdmin::NotConnected::operator= (const ::CosNotifyChannelAdmin::NotConnected &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNotifyChannelAdmin::NotConnected::_tao_any_destructor (void *_tao_void_pointer)
{
  NotConnected *_tao_tmp_pointer =
    static_cast<NotConnected *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::NotConnected *
CosNotifyChannelAdmin::NotConnected::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotConnected *> (_tao_excp);
}

const CosNotifyChannelAdmin::NotConnected *
CosNotifyChannelAdmin::NotConnected::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotConnected *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::NotConnected::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::NotConnected, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::NotConnected::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::NotConnected (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::NotConnected::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::NotConnected::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::NotConnected::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::NotConnected::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_NotConnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNotifyChannelAdmin_NotConnected = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_NotConnected (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
  "NotConnected",
  _tao_fields_CosNotifyChannelAdmin_NotConnected,
  0);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_NotConnected =
    &_tao_tc_CosNotifyChannelAdmin_NotConnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNotifyChannelAdmin_ProxyType[] =
  {
    "PUSH_ANY",
    "PULL_ANY",
    "PUSH_STRUCTURED",
    "PULL_STRUCTURED",
    "PUSH_SEQUENCE",
    "PULL_SEQUENCE",
    "PUSH_TYPED",
    "PULL_TYPED"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxyType (
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyType:1.0",
    "ProxyType",
    _tao_enumerators_CosNotifyChannelAdmin_ProxyType,
    8);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyType =
    &_tao_tc_CosNotifyChannelAdmin_ProxyType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNotifyChannelAdmin_ObtainInfoMode[] =
  {
    "ALL_NOW_UPDATES_OFF",
    "ALL_NOW_UPDATES_ON",
    "NONE_NOW_UPDATES_OFF",
    "NONE_NOW_UPDATES_ON"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ObtainInfoMode (
    "IDL:omg.org/CosNotifyChannelAdmin/ObtainInfoMode:1.0",
    "ObtainInfoMode",
    _tao_enumerators_CosNotifyChannelAdmin_ObtainInfoMode,
    4);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ObtainInfoMode =
    &_tao_tc_CosNotifyChannelAdmin_ObtainInfoMode;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::ProxyConsumer.

CosNotifyChannelAdmin::ProxyConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyConsumer>::duplicate (
    CosNotifyChannelAdmin::ProxyConsumer_ptr p)
{
  return CosNotifyChannelAdmin::ProxyConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyConsumer>::release (
    CosNotifyChannelAdmin::ProxyConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::ProxyConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyConsumer>::nil (void)
{
  return CosNotifyChannelAdmin::ProxyConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyConsumer>::marshal (
    const CosNotifyChannelAdmin::ProxyConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_ProxyConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyType
CosNotifyChannelAdmin::ProxyConsumer::MyType (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyType>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyType",
      11,
      this->the_TAO_ProxyConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::ProxyConsumer::MyAdmin (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyAdmin",
      12,
      this->the_TAO_ProxyConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotification::EventTypeSeq *
CosNotifyChannelAdmin::ProxyConsumer::obtain_subscription_types (
  ::CosNotifyChannelAdmin::ObtainInfoMode mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotification::EventTypeSeq>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ObtainInfoMode>::in_arg_val _tao_mode (mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_mode
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "obtain_subscription_types",
      25,
      this->the_TAO_ProxyConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxyConsumer::validate_event_qos (
  const ::CosNotification::QoSProperties & required_qos,
  ::CosNotification::NamedPropertyRangeSeq_out available_qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_required_qos (required_qos);
  TAO::Arg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_val _tao_available_qos (available_qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_required_qos,
      &_tao_available_qos
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ProxyConsumer_validate_event_qos_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "validate_event_qos",
      18,
      this->the_TAO_ProxyConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ProxyConsumer_validate_event_qos_exceptiondata,
      1
    );
}

CosNotifyChannelAdmin::ProxyConsumer::ProxyConsumer (void)
 : the_TAO_ProxyConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
}

void
CosNotifyChannelAdmin::ProxyConsumer::CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_ProxyConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyConsumer_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_ProxyConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotification_QoSAdmin_setup_collocation ();
  this->CosNotifyFilter_FilterAdmin_setup_collocation ();
}

CosNotifyChannelAdmin::ProxyConsumer::~ProxyConsumer (void)
{}

void 
CosNotifyChannelAdmin::ProxyConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyConsumer *_tao_tmp_pointer =
    static_cast<ProxyConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::ProxyConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0",
        CosNotifyChannelAdmin__TAO_ProxyConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::ProxyConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0",
        CosNotifyChannelAdmin__TAO_ProxyConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::ProxyConsumer::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::ProxyConsumer::_duplicate (ProxyConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::ProxyConsumer::_tao_release (ProxyConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxyConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::ProxyConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxyConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxyConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0",
    "ProxyConsumer");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyConsumer =
    &_tao_tc_CosNotifyChannelAdmin_ProxyConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::ProxySupplier.

CosNotifyChannelAdmin::ProxySupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxySupplier>::duplicate (
    CosNotifyChannelAdmin::ProxySupplier_ptr p)
{
  return CosNotifyChannelAdmin::ProxySupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxySupplier>::release (
    CosNotifyChannelAdmin::ProxySupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::ProxySupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxySupplier>::nil (void)
{
  return CosNotifyChannelAdmin::ProxySupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxySupplier>::marshal (
    const CosNotifyChannelAdmin::ProxySupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_ProxySupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyType
CosNotifyChannelAdmin::ProxySupplier::MyType (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyType>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyType",
      11,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::ProxySupplier::MyAdmin (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyAdmin",
      12,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyFilter::MappingFilter_ptr
CosNotifyChannelAdmin::ProxySupplier::priority_filter (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_priority_filter",
      20,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxySupplier::priority_filter (
  ::CosNotifyFilter::MappingFilter_ptr priority_filter)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_priority_filter (priority_filter);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_priority_filter
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_priority_filter",
      20,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyFilter::MappingFilter_ptr
CosNotifyChannelAdmin::ProxySupplier::lifetime_filter (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_lifetime_filter",
      20,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxySupplier::lifetime_filter (
  ::CosNotifyFilter::MappingFilter_ptr lifetime_filter)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_lifetime_filter (lifetime_filter);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_lifetime_filter
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_lifetime_filter",
      20,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotification::EventTypeSeq *
CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types (
  ::CosNotifyChannelAdmin::ObtainInfoMode mode)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotification::EventTypeSeq>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ObtainInfoMode>::in_arg_val _tao_mode (mode);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_mode
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "obtain_offered_types",
      20,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxySupplier::validate_event_qos (
  const ::CosNotification::QoSProperties & required_qos,
  ::CosNotification::NamedPropertyRangeSeq_out available_qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxySupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_required_qos (required_qos);
  TAO::Arg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_val _tao_available_qos (available_qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_required_qos,
      &_tao_available_qos
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ProxySupplier_validate_event_qos_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "validate_event_qos",
      18,
      this->the_TAO_ProxySupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ProxySupplier_validate_event_qos_exceptiondata,
      1
    );
}

CosNotifyChannelAdmin::ProxySupplier::ProxySupplier (void)
 : the_TAO_ProxySupplier_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
}

void
CosNotifyChannelAdmin::ProxySupplier::CosNotifyChannelAdmin_ProxySupplier_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_ProxySupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxySupplier_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_ProxySupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotification_QoSAdmin_setup_collocation ();
  this->CosNotifyFilter_FilterAdmin_setup_collocation ();
}

CosNotifyChannelAdmin::ProxySupplier::~ProxySupplier (void)
{}

void 
CosNotifyChannelAdmin::ProxySupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxySupplier *_tao_tmp_pointer =
    static_cast<ProxySupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ProxySupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxySupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0",
        CosNotifyChannelAdmin__TAO_ProxySupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ProxySupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxySupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0",
        CosNotifyChannelAdmin__TAO_ProxySupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ProxySupplier::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ProxySupplier::_duplicate (ProxySupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::ProxySupplier::_tao_release (ProxySupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxySupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::ProxySupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxySupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxySupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0",
    "ProxySupplier");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxySupplier =
    &_tao_tc_CosNotifyChannelAdmin_ProxySupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::ProxyPushConsumer.

CosNotifyChannelAdmin::ProxyPushConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushConsumer>::duplicate (
    CosNotifyChannelAdmin::ProxyPushConsumer_ptr p)
{
  return CosNotifyChannelAdmin::ProxyPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushConsumer>::release (
    CosNotifyChannelAdmin::ProxyPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::ProxyPushConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushConsumer>::nil (void)
{
  return CosNotifyChannelAdmin::ProxyPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushConsumer>::marshal (
    const CosNotifyChannelAdmin::ProxyPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxyPushConsumer::connect_any_push_supplier (
  ::CosEventComm::PushSupplier_ptr push_supplier)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosEventComm::PushSupplier>::in_arg_val _tao_push_supplier (push_supplier);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_supplier
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ProxyPushConsumer_connect_any_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_any_push_supplier",
      25,
      this->the_TAO_ProxyPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ProxyPushConsumer_connect_any_push_supplier_exceptiondata,
      1
    );
}

CosNotifyChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (void)
 : the_TAO_ProxyPushConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_ProxyPushConsumer_setup_collocation ();
}

void
CosNotifyChannelAdmin::ProxyPushConsumer::CosNotifyChannelAdmin_ProxyPushConsumer_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPushConsumer_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
  this->CosNotifyComm_PushConsumer_setup_collocation ();
}

CosNotifyChannelAdmin::ProxyPushConsumer::~ProxyPushConsumer (void)
{}

void 
CosNotifyChannelAdmin::ProxyPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushConsumer *_tao_tmp_pointer =
    static_cast<ProxyPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::ProxyPushConsumer_ptr
CosNotifyChannelAdmin::ProxyPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0",
        CosNotifyChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxyPushConsumer_ptr
CosNotifyChannelAdmin::ProxyPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0",
        CosNotifyChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxyPushConsumer_ptr
CosNotifyChannelAdmin::ProxyPushConsumer::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::ProxyPushConsumer_ptr
CosNotifyChannelAdmin::ProxyPushConsumer::_duplicate (ProxyPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::ProxyPushConsumer::_tao_release (ProxyPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxyPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::ProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxyPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxyPushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0",
    "ProxyPushConsumer");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushConsumer =
    &_tao_tc_CosNotifyChannelAdmin_ProxyPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::StructuredProxyPushConsumer.

CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::duplicate (
    CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr p)
{
  return CosNotifyChannelAdmin::StructuredProxyPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::release (
    CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::nil (void)
{
  return CosNotifyChannelAdmin::StructuredProxyPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::marshal (
    const CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_StructuredProxyPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::StructuredProxyPushConsumer::connect_structured_push_supplier (
  ::CosNotifyComm::StructuredPushSupplier_ptr push_supplier)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredProxyPushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_StructuredProxyPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyComm::StructuredPushSupplier>::in_arg_val _tao_push_supplier (push_supplier);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_supplier
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_StructuredProxyPushConsumer_connect_structured_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_structured_push_supplier",
      32,
      this->the_TAO_StructuredProxyPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_StructuredProxyPushConsumer_connect_structured_push_supplier_exceptiondata,
      1
    );
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer::StructuredProxyPushConsumer (void)
 : the_TAO_StructuredProxyPushConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_StructuredProxyPushConsumer_setup_collocation ();
}

void
CosNotifyChannelAdmin::StructuredProxyPushConsumer::CosNotifyChannelAdmin_StructuredProxyPushConsumer_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_StructuredProxyPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_StructuredProxyPushConsumer_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_StructuredProxyPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
  this->CosNotifyComm_StructuredPushConsumer_setup_collocation ();
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer::~StructuredProxyPushConsumer (void)
{}

void 
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  StructuredProxyPushConsumer *_tao_tmp_pointer =
    static_cast<StructuredProxyPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredProxyPushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0",
        CosNotifyChannelAdmin__TAO_StructuredProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredProxyPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0",
        CosNotifyChannelAdmin__TAO_StructuredProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_duplicate (StructuredProxyPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_tao_release (StructuredProxyPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::StructuredProxyPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::StructuredProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::StructuredProxyPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_StructuredProxyPushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0",
    "StructuredProxyPushConsumer");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_StructuredProxyPushConsumer =
    &_tao_tc_CosNotifyChannelAdmin_StructuredProxyPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::SequenceProxyPushConsumer.

CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::duplicate (
    CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr p)
{
  return CosNotifyChannelAdmin::SequenceProxyPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::release (
    CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::nil (void)
{
  return CosNotifyChannelAdmin::SequenceProxyPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::marshal (
    const CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_SequenceProxyPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::SequenceProxyPushConsumer::connect_sequence_push_supplier (
  ::CosNotifyComm::SequencePushSupplier_ptr push_supplier)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceProxyPushConsumer_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SequenceProxyPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyComm::SequencePushSupplier>::in_arg_val _tao_push_supplier (push_supplier);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_supplier
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SequenceProxyPushConsumer_connect_sequence_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_sequence_push_supplier",
      30,
      this->the_TAO_SequenceProxyPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SequenceProxyPushConsumer_connect_sequence_push_supplier_exceptiondata,
      1
    );
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer::SequenceProxyPushConsumer (void)
 : the_TAO_SequenceProxyPushConsumer_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_SequenceProxyPushConsumer_setup_collocation ();
}

void
CosNotifyChannelAdmin::SequenceProxyPushConsumer::CosNotifyChannelAdmin_SequenceProxyPushConsumer_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_SequenceProxyPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SequenceProxyPushConsumer_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_SequenceProxyPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ProxyConsumer_setup_collocation ();
  this->CosNotifyComm_SequencePushConsumer_setup_collocation ();
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer::~SequenceProxyPushConsumer (void)
{}

void 
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  SequenceProxyPushConsumer *_tao_tmp_pointer =
    static_cast<SequenceProxyPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequenceProxyPushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0",
        CosNotifyChannelAdmin__TAO_SequenceProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequenceProxyPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0",
        CosNotifyChannelAdmin__TAO_SequenceProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_duplicate (SequenceProxyPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_tao_release (SequenceProxyPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::SequenceProxyPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::SequenceProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::SequenceProxyPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_SequenceProxyPushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0",
    "SequenceProxyPushConsumer");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SequenceProxyPushConsumer =
    &_tao_tc_CosNotifyChannelAdmin_SequenceProxyPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::ProxyPushSupplier.

CosNotifyChannelAdmin::ProxyPushSupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushSupplier>::duplicate (
    CosNotifyChannelAdmin::ProxyPushSupplier_ptr p)
{
  return CosNotifyChannelAdmin::ProxyPushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushSupplier>::release (
    CosNotifyChannelAdmin::ProxyPushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::ProxyPushSupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushSupplier>::nil (void)
{
  return CosNotifyChannelAdmin::ProxyPushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::ProxyPushSupplier>::marshal (
    const CosNotifyChannelAdmin::ProxyPushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxyPushSupplier::connect_any_push_consumer (
  ::CosEventComm::PushConsumer_ptr push_consumer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosEventComm::PushConsumer>::in_arg_val _tao_push_consumer (push_consumer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_consumer
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ProxyPushSupplier_connect_any_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
        CosEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_any_push_consumer",
      25,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ProxyPushSupplier_connect_any_push_consumer_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxyPushSupplier::suspend_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ProxyPushSupplier_suspend_connection_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0",
        CosNotifyChannelAdmin::ConnectionAlreadyInactive::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        CosNotifyChannelAdmin::NotConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_NotConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "suspend_connection",
      18,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ProxyPushSupplier_suspend_connection_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ProxyPushSupplier::resume_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ProxyPushSupplier_resume_connection_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0",
        CosNotifyChannelAdmin::ConnectionAlreadyActive::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        CosNotifyChannelAdmin::NotConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_NotConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "resume_connection",
      17,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ProxyPushSupplier_resume_connection_exceptiondata,
      2
    );
}

CosNotifyChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (void)
 : the_TAO_ProxyPushSupplier_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_ProxyPushSupplier_setup_collocation ();
}

void
CosNotifyChannelAdmin::ProxyPushSupplier::CosNotifyChannelAdmin_ProxyPushSupplier_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
  this->CosNotifyComm_PushSupplier_setup_collocation ();
}

CosNotifyChannelAdmin::ProxyPushSupplier::~ProxyPushSupplier (void)
{}

void 
CosNotifyChannelAdmin::ProxyPushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushSupplier *_tao_tmp_pointer =
    static_cast<ProxyPushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::ProxyPushSupplier_ptr
CosNotifyChannelAdmin::ProxyPushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0",
        CosNotifyChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxyPushSupplier_ptr
CosNotifyChannelAdmin::ProxyPushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0",
        CosNotifyChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ProxyPushSupplier_ptr
CosNotifyChannelAdmin::ProxyPushSupplier::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::ProxyPushSupplier_ptr
CosNotifyChannelAdmin::ProxyPushSupplier::_duplicate (ProxyPushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::ProxyPushSupplier::_tao_release (ProxyPushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxyPushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::ProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::ProxyPushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxyPushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0",
    "ProxyPushSupplier");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushSupplier =
    &_tao_tc_CosNotifyChannelAdmin_ProxyPushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::StructuredProxyPushSupplier.

CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::duplicate (
    CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr p)
{
  return CosNotifyChannelAdmin::StructuredProxyPushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::release (
    CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::nil (void)
{
  return CosNotifyChannelAdmin::StructuredProxyPushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::marshal (
    const CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_StructuredProxyPushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::StructuredProxyPushSupplier::connect_structured_push_consumer (
  ::CosNotifyComm::StructuredPushConsumer_ptr push_consumer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_StructuredProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyComm::StructuredPushConsumer>::in_arg_val _tao_push_consumer (push_consumer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_consumer
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_connect_structured_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
        CosEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_structured_push_consumer",
      32,
      this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_connect_structured_push_consumer_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::StructuredProxyPushSupplier::suspend_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_StructuredProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_suspend_connection_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0",
        CosNotifyChannelAdmin::ConnectionAlreadyInactive::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        CosNotifyChannelAdmin::NotConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_NotConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "suspend_connection",
      18,
      this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_suspend_connection_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::StructuredProxyPushSupplier::resume_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_StructuredProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_resume_connection_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0",
        CosNotifyChannelAdmin::ConnectionAlreadyActive::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        CosNotifyChannelAdmin::NotConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_NotConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "resume_connection",
      17,
      this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_resume_connection_exceptiondata,
      2
    );
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier::StructuredProxyPushSupplier (void)
 : the_TAO_StructuredProxyPushSupplier_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_StructuredProxyPushSupplier_setup_collocation ();
}

void
CosNotifyChannelAdmin::StructuredProxyPushSupplier::CosNotifyChannelAdmin_StructuredProxyPushSupplier_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_StructuredProxyPushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_StructuredProxyPushSupplier_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_StructuredProxyPushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
  this->CosNotifyComm_StructuredPushSupplier_setup_collocation ();
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier::~StructuredProxyPushSupplier (void)
{}

void 
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  StructuredProxyPushSupplier *_tao_tmp_pointer =
    static_cast<StructuredProxyPushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredProxyPushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0",
        CosNotifyChannelAdmin__TAO_StructuredProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<StructuredProxyPushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0",
        CosNotifyChannelAdmin__TAO_StructuredProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_duplicate (StructuredProxyPushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_tao_release (StructuredProxyPushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::StructuredProxyPushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::StructuredProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::StructuredProxyPushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_StructuredProxyPushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0",
    "StructuredProxyPushSupplier");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_StructuredProxyPushSupplier =
    &_tao_tc_CosNotifyChannelAdmin_StructuredProxyPushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::SequenceProxyPushSupplier.

CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::duplicate (
    CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr p)
{
  return CosNotifyChannelAdmin::SequenceProxyPushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::release (
    CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::nil (void)
{
  return CosNotifyChannelAdmin::SequenceProxyPushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::marshal (
    const CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_SequenceProxyPushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::SequenceProxyPushSupplier::connect_sequence_push_consumer (
  ::CosNotifyComm::SequencePushConsumer_ptr push_consumer)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SequenceProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyComm::SequencePushConsumer>::in_arg_val _tao_push_consumer (push_consumer);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_consumer
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_connect_sequence_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventChannelAdmin/AlreadyConnected:1.0",
        CosEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosEventChannelAdmin/TypeError:1.0",
        CosEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect_sequence_push_consumer",
      30,
      this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_connect_sequence_push_consumer_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::SequenceProxyPushSupplier::suspend_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SequenceProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_suspend_connection_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyInactive:1.0",
        CosNotifyChannelAdmin::ConnectionAlreadyInactive::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        CosNotifyChannelAdmin::NotConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_NotConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "suspend_connection",
      18,
      this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_suspend_connection_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::SequenceProxyPushSupplier::resume_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SequenceProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_resume_connection_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ConnectionAlreadyActive:1.0",
        CosNotifyChannelAdmin::ConnectionAlreadyActive::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotifyChannelAdmin/NotConnected:1.0",
        CosNotifyChannelAdmin::NotConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_NotConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "resume_connection",
      17,
      this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_resume_connection_exceptiondata,
      2
    );
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier::SequenceProxyPushSupplier (void)
 : the_TAO_SequenceProxyPushSupplier_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_SequenceProxyPushSupplier_setup_collocation ();
}

void
CosNotifyChannelAdmin::SequenceProxyPushSupplier::CosNotifyChannelAdmin_SequenceProxyPushSupplier_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_SequenceProxyPushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SequenceProxyPushSupplier_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_SequenceProxyPushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ProxySupplier_setup_collocation ();
  this->CosNotifyComm_SequencePushSupplier_setup_collocation ();
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier::~SequenceProxyPushSupplier (void)
{}

void 
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  SequenceProxyPushSupplier *_tao_tmp_pointer =
    static_cast<SequenceProxyPushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequenceProxyPushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0",
        CosNotifyChannelAdmin__TAO_SequenceProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SequenceProxyPushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0",
        CosNotifyChannelAdmin__TAO_SequenceProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_duplicate (SequenceProxyPushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_tao_release (SequenceProxyPushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::SequenceProxyPushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::SequenceProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::SequenceProxyPushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_SequenceProxyPushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0",
    "SequenceProxyPushSupplier");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SequenceProxyPushSupplier =
    &_tao_tc_CosNotifyChannelAdmin_SequenceProxyPushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxyID (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyID:1.0",
    "ProxyID",
    &CORBA::_tc_long);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyID =
    &_tao_tc_CosNotifyChannelAdmin_ProxyID;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFYCHANNELADMIN_PROXYIDSEQ_CS_)
#define _COSNOTIFYCHANNELADMIN_PROXYIDSEQ_CS_

CosNotifyChannelAdmin::ProxyIDSeq::ProxyIDSeq (void)
{}

CosNotifyChannelAdmin::ProxyIDSeq::ProxyIDSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ProxyID
      > (max)
{}

CosNotifyChannelAdmin::ProxyIDSeq::ProxyIDSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ProxyID
      >
    (max, length, buffer, release)
{}

CosNotifyChannelAdmin::ProxyIDSeq::ProxyIDSeq (
    const ProxyIDSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ProxyID
      > (seq)
{}

CosNotifyChannelAdmin::ProxyIDSeq::~ProxyIDSeq (void)
{}

void CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ProxyIDSeq * _tao_tmp_pointer =
    static_cast<ProxyIDSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotifyChannelAdmin_ProxyIDSeq_GUARD
#define _TAO_TYPECODE_CosNotifyChannelAdmin_ProxyIDSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotifyChannelAdmin_ProxyIDSeq_0 (
          ::CORBA::tk_sequence,
          &CosNotifyChannelAdmin::_tc_ProxyID,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotifyChannelAdmin_ProxyIDSeq_0 =
        &CosNotifyChannelAdmin_ProxyIDSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotifyChannelAdmin_ProxyIDSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ProxyIDSeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotifyChannelAdmin/ProxyIDSeq:1.0",
    "ProxyIDSeq",
    &TAO::TypeCode::tc_CosNotifyChannelAdmin_ProxyIDSeq_0);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyIDSeq =
    &_tao_tc_CosNotifyChannelAdmin_ProxyIDSeq;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNotifyChannelAdmin_ClientType[] =
  {
    "ANY_EVENT",
    "STRUCTURED_EVENT",
    "SEQUENCE_EVENT"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ClientType (
    "IDL:omg.org/CosNotifyChannelAdmin/ClientType:1.0",
    "ClientType",
    _tao_enumerators_CosNotifyChannelAdmin_ClientType,
    3);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ClientType =
    &_tao_tc_CosNotifyChannelAdmin_ClientType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNotifyChannelAdmin_InterFilterGroupOperator[] =
  {
    "AND_OP",
    "OR_OP"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_InterFilterGroupOperator (
    "IDL:omg.org/CosNotifyChannelAdmin/InterFilterGroupOperator:1.0",
    "InterFilterGroupOperator",
    _tao_enumerators_CosNotifyChannelAdmin_InterFilterGroupOperator,
    2);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_InterFilterGroupOperator =
    &_tao_tc_CosNotifyChannelAdmin_InterFilterGroupOperator;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_AdminID (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotifyChannelAdmin/AdminID:1.0",
    "AdminID",
    &CORBA::_tc_long);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AdminID =
    &_tao_tc_CosNotifyChannelAdmin_AdminID;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFYCHANNELADMIN_ADMINIDSEQ_CS_)
#define _COSNOTIFYCHANNELADMIN_ADMINIDSEQ_CS_

CosNotifyChannelAdmin::AdminIDSeq::AdminIDSeq (void)
{}

CosNotifyChannelAdmin::AdminIDSeq::AdminIDSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        AdminID
      > (max)
{}

CosNotifyChannelAdmin::AdminIDSeq::AdminIDSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        AdminID
      >
    (max, length, buffer, release)
{}

CosNotifyChannelAdmin::AdminIDSeq::AdminIDSeq (
    const AdminIDSeq &seq)
  : ::TAO::unbounded_value_sequence<
        AdminID
      > (seq)
{}

CosNotifyChannelAdmin::AdminIDSeq::~AdminIDSeq (void)
{}

void CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  AdminIDSeq * _tao_tmp_pointer =
    static_cast<AdminIDSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotifyChannelAdmin_AdminIDSeq_GUARD
#define _TAO_TYPECODE_CosNotifyChannelAdmin_AdminIDSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotifyChannelAdmin_AdminIDSeq_0 (
          ::CORBA::tk_sequence,
          &CosNotifyChannelAdmin::_tc_AdminID,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotifyChannelAdmin_AdminIDSeq_0 =
        &CosNotifyChannelAdmin_AdminIDSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotifyChannelAdmin_AdminIDSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_AdminIDSeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotifyChannelAdmin/AdminIDSeq:1.0",
    "AdminIDSeq",
    &TAO::TypeCode::tc_CosNotifyChannelAdmin_AdminIDSeq_0);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AdminIDSeq =
    &_tao_tc_CosNotifyChannelAdmin_AdminIDSeq;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::AdminNotFound::AdminNotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0",
        "AdminNotFound"
      )
{
}

CosNotifyChannelAdmin::AdminNotFound::~AdminNotFound (void)
{
}

CosNotifyChannelAdmin::AdminNotFound::AdminNotFound (const ::CosNotifyChannelAdmin::AdminNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNotifyChannelAdmin::AdminNotFound&
CosNotifyChannelAdmin::AdminNotFound::operator= (const ::CosNotifyChannelAdmin::AdminNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  AdminNotFound *_tao_tmp_pointer =
    static_cast<AdminNotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::AdminNotFound *
CosNotifyChannelAdmin::AdminNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AdminNotFound *> (_tao_excp);
}

const CosNotifyChannelAdmin::AdminNotFound *
CosNotifyChannelAdmin::AdminNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AdminNotFound *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::AdminNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::AdminNotFound, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::AdminNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::AdminNotFound (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::AdminNotFound::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::AdminNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::AdminNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::AdminNotFound::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_AdminNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNotifyChannelAdmin_AdminNotFound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_AdminNotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0",
  "AdminNotFound",
  _tao_fields_CosNotifyChannelAdmin_AdminNotFound,
  0);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AdminNotFound =
    &_tao_tc_CosNotifyChannelAdmin_AdminNotFound;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::ProxyNotFound::ProxyNotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0",
        "ProxyNotFound"
      )
{
}

CosNotifyChannelAdmin::ProxyNotFound::~ProxyNotFound (void)
{
}

CosNotifyChannelAdmin::ProxyNotFound::ProxyNotFound (const ::CosNotifyChannelAdmin::ProxyNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNotifyChannelAdmin::ProxyNotFound&
CosNotifyChannelAdmin::ProxyNotFound::operator= (const ::CosNotifyChannelAdmin::ProxyNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyNotFound *_tao_tmp_pointer =
    static_cast<ProxyNotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::ProxyNotFound *
CosNotifyChannelAdmin::ProxyNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ProxyNotFound *> (_tao_excp);
}

const CosNotifyChannelAdmin::ProxyNotFound *
CosNotifyChannelAdmin::ProxyNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ProxyNotFound *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::ProxyNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::ProxyNotFound, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::ProxyNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::ProxyNotFound (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::ProxyNotFound::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::ProxyNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::ProxyNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::ProxyNotFound::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_ProxyNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNotifyChannelAdmin_ProxyNotFound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_ProxyNotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0",
  "ProxyNotFound",
  _tao_fields_CosNotifyChannelAdmin_ProxyNotFound,
  0);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyNotFound =
    &_tao_tc_CosNotifyChannelAdmin_ProxyNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotifyChannelAdmin_AdminLimit[] =
      {
        { "name", &CosNotification::_tc_PropertyName },
        { "value", &CosNotification::_tc_PropertyValue }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_AdminLimit (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotifyChannelAdmin/AdminLimit:1.0",
  "AdminLimit",
  _tao_fields_CosNotifyChannelAdmin_AdminLimit,
  2);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AdminLimit =
    &_tao_tc_CosNotifyChannelAdmin_AdminLimit;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor (
    void *_tao_void_pointer)
{
  AdminLimit *_tao_tmp_pointer =
    static_cast<AdminLimit *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosNotifyChannelAdmin::AdminLimitExceeded::AdminLimitExceeded (
    const CosNotifyChannelAdmin::AdminLimit & _tao_admin_property_err)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        "AdminLimitExceeded"
      )
{
  this->admin_property_err = _tao_admin_property_err;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::AdminLimitExceeded::AdminLimitExceeded (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        "AdminLimitExceeded"
      )
{
}

CosNotifyChannelAdmin::AdminLimitExceeded::~AdminLimitExceeded (void)
{
}

CosNotifyChannelAdmin::AdminLimitExceeded::AdminLimitExceeded (const ::CosNotifyChannelAdmin::AdminLimitExceeded &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->admin_property_err = _tao_excp.admin_property_err;
}

CosNotifyChannelAdmin::AdminLimitExceeded&
CosNotifyChannelAdmin::AdminLimitExceeded::operator= (const ::CosNotifyChannelAdmin::AdminLimitExceeded &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->admin_property_err = _tao_excp.admin_property_err;
  return *this;
}

void CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor (void *_tao_void_pointer)
{
  AdminLimitExceeded *_tao_tmp_pointer =
    static_cast<AdminLimitExceeded *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::AdminLimitExceeded *
CosNotifyChannelAdmin::AdminLimitExceeded::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AdminLimitExceeded *> (_tao_excp);
}

const CosNotifyChannelAdmin::AdminLimitExceeded *
CosNotifyChannelAdmin::AdminLimitExceeded::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AdminLimitExceeded *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::AdminLimitExceeded::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::AdminLimitExceeded, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::AdminLimitExceeded::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::AdminLimitExceeded (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::AdminLimitExceeded::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::AdminLimitExceeded::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::AdminLimitExceeded::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::AdminLimitExceeded::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_AdminLimitExceeded;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotifyChannelAdmin_AdminLimitExceeded[] =
      {
        { "admin_property_err", &CosNotifyChannelAdmin::_tc_AdminLimit }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_AdminLimitExceeded (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
  "AdminLimitExceeded",
  _tao_fields_CosNotifyChannelAdmin_AdminLimitExceeded,
  1);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AdminLimitExceeded =
    &_tao_tc_CosNotifyChannelAdmin_AdminLimitExceeded;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::ConsumerAdmin.

CosNotifyChannelAdmin::ConsumerAdmin_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ConsumerAdmin>::duplicate (
    CosNotifyChannelAdmin::ConsumerAdmin_ptr p)
{
  return CosNotifyChannelAdmin::ConsumerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::ConsumerAdmin>::release (
    CosNotifyChannelAdmin::ConsumerAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::ConsumerAdmin_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::ConsumerAdmin>::nil (void)
{
  return CosNotifyChannelAdmin::ConsumerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::ConsumerAdmin>::marshal (
    const CosNotifyChannelAdmin::ConsumerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::AdminID
CosNotifyChannelAdmin::ConsumerAdmin::MyID (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyID",
      9,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::ConsumerAdmin::MyChannel (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyChannel",
      14,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::InterFilterGroupOperator
CosNotifyChannelAdmin::ConsumerAdmin::MyOperator (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyOperator",
      15,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyFilter::MappingFilter_ptr
CosNotifyChannelAdmin::ConsumerAdmin::priority_filter (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_priority_filter",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ConsumerAdmin::priority_filter (
  ::CosNotifyFilter::MappingFilter_ptr priority_filter)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_priority_filter (priority_filter);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_priority_filter
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_priority_filter",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyFilter::MappingFilter_ptr
CosNotifyChannelAdmin::ConsumerAdmin::lifetime_filter (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_lifetime_filter",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ConsumerAdmin::lifetime_filter (
  ::CosNotifyFilter::MappingFilter_ptr lifetime_filter)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_lifetime_filter (lifetime_filter);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_lifetime_filter
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "_set_lifetime_filter",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyIDSeq *
CosNotifyChannelAdmin::ConsumerAdmin::pull_suppliers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_pull_suppliers",
      19,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyIDSeq *
CosNotifyChannelAdmin::ConsumerAdmin::push_suppliers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_push_suppliers",
      19,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ConsumerAdmin::get_proxy_supplier (
  ::CosNotifyChannelAdmin::ProxyID proxy_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_proxy_id (proxy_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_proxy_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ConsumerAdmin_get_proxy_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0",
        CosNotifyChannelAdmin::ProxyNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ProxyNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_proxy_supplier",
      18,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ConsumerAdmin_get_proxy_supplier_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ConsumerAdmin::obtain_notification_pull_supplier (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ConsumerAdmin_obtain_notification_pull_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "obtain_notification_pull_supplier",
      33,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ConsumerAdmin_obtain_notification_pull_supplier_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxySupplier_ptr
CosNotifyChannelAdmin::ConsumerAdmin::obtain_notification_push_supplier (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_ConsumerAdmin_obtain_notification_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "obtain_notification_push_supplier",
      33,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_ConsumerAdmin_obtain_notification_push_supplier_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::ConsumerAdmin::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNotifyChannelAdmin::ConsumerAdmin::ConsumerAdmin (void)
 : the_TAO_ConsumerAdmin_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
}

void
CosNotifyChannelAdmin::ConsumerAdmin::CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ConsumerAdmin_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotification_QoSAdmin_setup_collocation ();
  this->CosNotifyComm_NotifySubscribe_setup_collocation ();
  this->CosNotifyFilter_FilterAdmin_setup_collocation ();
  this->CosEventChannelAdmin_ConsumerAdmin_setup_collocation ();
}

CosNotifyChannelAdmin::ConsumerAdmin::~ConsumerAdmin (void)
{}

void 
CosNotifyChannelAdmin::ConsumerAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  ConsumerAdmin *_tao_tmp_pointer =
    static_cast<ConsumerAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::ConsumerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0",
        CosNotifyChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::ConsumerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0",
        CosNotifyChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::ConsumerAdmin::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::ConsumerAdmin::_duplicate (ConsumerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::ConsumerAdmin::_tao_release (ConsumerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::ConsumerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::ConsumerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ConsumerAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0",
    "ConsumerAdmin");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerAdmin =
    &_tao_tc_CosNotifyChannelAdmin_ConsumerAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::SupplierAdmin.

CosNotifyChannelAdmin::SupplierAdmin_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::SupplierAdmin>::duplicate (
    CosNotifyChannelAdmin::SupplierAdmin_ptr p)
{
  return CosNotifyChannelAdmin::SupplierAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::SupplierAdmin>::release (
    CosNotifyChannelAdmin::SupplierAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::SupplierAdmin_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::SupplierAdmin>::nil (void)
{
  return CosNotifyChannelAdmin::SupplierAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::SupplierAdmin>::marshal (
    const CosNotifyChannelAdmin::SupplierAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::AdminID
CosNotifyChannelAdmin::SupplierAdmin::MyID (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyID",
      9,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::SupplierAdmin::MyChannel (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyChannel",
      14,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::InterFilterGroupOperator
CosNotifyChannelAdmin::SupplierAdmin::MyOperator (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyOperator",
      15,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyIDSeq *
CosNotifyChannelAdmin::SupplierAdmin::pull_consumers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_pull_consumers",
      19,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyIDSeq *
CosNotifyChannelAdmin::SupplierAdmin::push_consumers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_push_consumers",
      19,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::SupplierAdmin::get_proxy_consumer (
  ::CosNotifyChannelAdmin::ProxyID proxy_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_proxy_id (proxy_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_proxy_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SupplierAdmin_get_proxy_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ProxyNotFound:1.0",
        CosNotifyChannelAdmin::ProxyNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ProxyNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_proxy_consumer",
      18,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SupplierAdmin_get_proxy_consumer_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::SupplierAdmin::obtain_notification_pull_consumer (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SupplierAdmin_obtain_notification_pull_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "obtain_notification_pull_consumer",
      33,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SupplierAdmin_obtain_notification_pull_consumer_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyConsumer_ptr
CosNotifyChannelAdmin::SupplierAdmin::obtain_notification_push_consumer (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_SupplierAdmin_obtain_notification_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "obtain_notification_push_consumer",
      33,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_SupplierAdmin_obtain_notification_push_consumer_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotifyChannelAdmin::SupplierAdmin::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNotifyChannelAdmin::SupplierAdmin::SupplierAdmin (void)
 : the_TAO_SupplierAdmin_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
}

void
CosNotifyChannelAdmin::SupplierAdmin::CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SupplierAdmin_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotification_QoSAdmin_setup_collocation ();
  this->CosNotifyComm_NotifyPublish_setup_collocation ();
  this->CosNotifyFilter_FilterAdmin_setup_collocation ();
  this->CosEventChannelAdmin_SupplierAdmin_setup_collocation ();
}

CosNotifyChannelAdmin::SupplierAdmin::~SupplierAdmin (void)
{}

void 
CosNotifyChannelAdmin::SupplierAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  SupplierAdmin *_tao_tmp_pointer =
    static_cast<SupplierAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::SupplierAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0",
        CosNotifyChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::SupplierAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0",
        CosNotifyChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::SupplierAdmin::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::SupplierAdmin::_duplicate (SupplierAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::SupplierAdmin::_tao_release (SupplierAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::SupplierAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::SupplierAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_SupplierAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0",
    "SupplierAdmin");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SupplierAdmin =
    &_tao_tc_CosNotifyChannelAdmin_SupplierAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::EventChannel.

CosNotifyChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannel>::duplicate (
    CosNotifyChannelAdmin::EventChannel_ptr p)
{
  return CosNotifyChannelAdmin::EventChannel::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannel>::release (
    CosNotifyChannelAdmin::EventChannel_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannel>::nil (void)
{
  return CosNotifyChannelAdmin::EventChannel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannel>::marshal (
    const CosNotifyChannelAdmin::EventChannel_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::EventChannelFactory_ptr
CosNotifyChannelAdmin::EventChannel::MyFactory (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::EventChannelFactory>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_MyFactory",
      14,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::EventChannel::default_consumer_admin (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_consumer_admin",
      27,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::EventChannel::default_supplier_admin (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_supplier_admin",
      27,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyFilter::FilterFactory_ptr
CosNotifyChannelAdmin::EventChannel::default_filter_factory (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyFilter::FilterFactory>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_default_filter_factory",
      27,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::EventChannel::new_for_consumers (
  ::CosNotifyChannelAdmin::InterFilterGroupOperator op,
  ::CosNotifyChannelAdmin::AdminID_out id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op (op);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_op,
      &_tao_id
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "new_for_consumers",
      17,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::EventChannel::new_for_suppliers (
  ::CosNotifyChannelAdmin::InterFilterGroupOperator op,
  ::CosNotifyChannelAdmin::AdminID_out id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op (op);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_op,
      &_tao_id
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "new_for_suppliers",
      17,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ConsumerAdmin_ptr
CosNotifyChannelAdmin::EventChannel::get_consumeradmin (
  ::CosNotifyChannelAdmin::AdminID id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_EventChannel_get_consumeradmin_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0",
        CosNotifyChannelAdmin::AdminNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_consumeradmin",
      17,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_EventChannel_get_consumeradmin_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::SupplierAdmin_ptr
CosNotifyChannelAdmin::EventChannel::get_supplieradmin (
  ::CosNotifyChannelAdmin::AdminID id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_EventChannel_get_supplieradmin_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminNotFound:1.0",
        CosNotifyChannelAdmin::AdminNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_supplieradmin",
      17,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_EventChannel_get_supplieradmin_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::AdminIDSeq *
CosNotifyChannelAdmin::EventChannel::get_all_consumeradmins (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::AdminIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_all_consumeradmins",
      22,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::AdminIDSeq *
CosNotifyChannelAdmin::EventChannel::get_all_supplieradmins (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::AdminIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_all_supplieradmins",
      22,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

CosNotifyChannelAdmin::EventChannel::EventChannel (void)
 : the_TAO_EventChannel_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_EventChannel_setup_collocation ();
}

void
CosNotifyChannelAdmin::EventChannel::CosNotifyChannelAdmin_EventChannel_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannel_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotification_QoSAdmin_setup_collocation ();
  this->CosNotification_AdminPropertiesAdmin_setup_collocation ();
  this->CosEventChannelAdmin_EventChannel_setup_collocation ();
}

CosNotifyChannelAdmin::EventChannel::~EventChannel (void)
{}

void 
CosNotifyChannelAdmin::EventChannel::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannel *_tao_tmp_pointer =
    static_cast<EventChannel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::EventChannel::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0",
        CosNotifyChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::EventChannel::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0",
        CosNotifyChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::EventChannel::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::EventChannel::_duplicate (EventChannel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::EventChannel::_tao_release (EventChannel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::EventChannel::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::EventChannel::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::EventChannel::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_EventChannel (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0",
    "EventChannel");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannel =
    &_tao_tc_CosNotifyChannelAdmin_EventChannel;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ChannelID (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotifyChannelAdmin/ChannelID:1.0",
    "ChannelID",
    &CORBA::_tc_long);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ChannelID =
    &_tao_tc_CosNotifyChannelAdmin_ChannelID;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFYCHANNELADMIN_CHANNELIDSEQ_CS_)
#define _COSNOTIFYCHANNELADMIN_CHANNELIDSEQ_CS_

CosNotifyChannelAdmin::ChannelIDSeq::ChannelIDSeq (void)
{}

CosNotifyChannelAdmin::ChannelIDSeq::ChannelIDSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ChannelID
      > (max)
{}

CosNotifyChannelAdmin::ChannelIDSeq::ChannelIDSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ChannelID
      >
    (max, length, buffer, release)
{}

CosNotifyChannelAdmin::ChannelIDSeq::ChannelIDSeq (
    const ChannelIDSeq &seq)
  : ::TAO::unbounded_value_sequence<
        ChannelID
      > (seq)
{}

CosNotifyChannelAdmin::ChannelIDSeq::~ChannelIDSeq (void)
{}

void CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ChannelIDSeq * _tao_tmp_pointer =
    static_cast<ChannelIDSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotifyChannelAdmin_ChannelIDSeq_GUARD
#define _TAO_TYPECODE_CosNotifyChannelAdmin_ChannelIDSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotifyChannelAdmin_ChannelIDSeq_0 (
          ::CORBA::tk_sequence,
          &CosNotifyChannelAdmin::_tc_ChannelID,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotifyChannelAdmin_ChannelIDSeq_0 =
        &CosNotifyChannelAdmin_ChannelIDSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotifyChannelAdmin_ChannelIDSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_ChannelIDSeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotifyChannelAdmin/ChannelIDSeq:1.0",
    "ChannelIDSeq",
    &TAO::TypeCode::tc_CosNotifyChannelAdmin_ChannelIDSeq_0);
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ChannelIDSeq =
    &_tao_tc_CosNotifyChannelAdmin_ChannelIDSeq;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotifyChannelAdmin::ChannelNotFound::ChannelNotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0",
        "ChannelNotFound"
      )
{
}

CosNotifyChannelAdmin::ChannelNotFound::~ChannelNotFound (void)
{
}

CosNotifyChannelAdmin::ChannelNotFound::ChannelNotFound (const ::CosNotifyChannelAdmin::ChannelNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNotifyChannelAdmin::ChannelNotFound&
CosNotifyChannelAdmin::ChannelNotFound::operator= (const ::CosNotifyChannelAdmin::ChannelNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  ChannelNotFound *_tao_tmp_pointer =
    static_cast<ChannelNotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotifyChannelAdmin::ChannelNotFound *
CosNotifyChannelAdmin::ChannelNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ChannelNotFound *> (_tao_excp);
}

const CosNotifyChannelAdmin::ChannelNotFound *
CosNotifyChannelAdmin::ChannelNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ChannelNotFound *> (_tao_excp);
}

::CORBA::Exception *CosNotifyChannelAdmin::ChannelNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotifyChannelAdmin::ChannelNotFound, 0);
  return retval;
}

::CORBA::Exception *
CosNotifyChannelAdmin::ChannelNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotifyChannelAdmin::ChannelNotFound (*this),
      0
    );
  return result;
}

void CosNotifyChannelAdmin::ChannelNotFound::_raise (void) const
{
  throw *this;
}

void CosNotifyChannelAdmin::ChannelNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotifyChannelAdmin::ChannelNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotifyChannelAdmin::ChannelNotFound::_tao_type (void) const
{
  return ::CosNotifyChannelAdmin::_tc_ChannelNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNotifyChannelAdmin_ChannelNotFound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotifyChannelAdmin_ChannelNotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0",
  "ChannelNotFound",
  _tao_fields_CosNotifyChannelAdmin_ChannelNotFound,
  0);


namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ChannelNotFound =
    &_tao_tc_CosNotifyChannelAdmin_ChannelNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotifyChannelAdmin::EventChannelFactory.

CosNotifyChannelAdmin::EventChannelFactory_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannelFactory>::duplicate (
    CosNotifyChannelAdmin::EventChannelFactory_ptr p)
{
  return CosNotifyChannelAdmin::EventChannelFactory::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannelFactory>::release (
    CosNotifyChannelAdmin::EventChannelFactory_ptr p)
{
  ::CORBA::release (p);
}

CosNotifyChannelAdmin::EventChannelFactory_ptr
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannelFactory>::nil (void)
{
  return CosNotifyChannelAdmin::EventChannelFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotifyChannelAdmin::EventChannelFactory>::marshal (
    const CosNotifyChannelAdmin::EventChannelFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotifyChannelAdmin__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::EventChannelFactory::create_channel (
  const ::CosNotification::QoSProperties & initial_qos,
  const ::CosNotification::AdminProperties & initial_admin,
  ::CosNotifyChannelAdmin::ChannelID_out id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFactory_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannelFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos (initial_qos);
  TAO::Arg_Traits< ::CosNotification::AdminProperties>::in_arg_val _tao_initial_admin (initial_admin);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_initial_qos,
      &_tao_initial_admin,
      &_tao_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_EventChannelFactory_create_channel_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotification/UnsupportedAdmin:1.0",
        CosNotification::UnsupportedAdmin::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedAdmin
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_channel",
      14,
      this->the_TAO_EventChannelFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_EventChannelFactory_create_channel_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ChannelIDSeq *
CosNotifyChannelAdmin::EventChannelFactory::get_all_channels (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFactory_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannelFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ChannelIDSeq>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_all_channels",
      16,
      this->the_TAO_EventChannelFactory_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::EventChannel_ptr
CosNotifyChannelAdmin::EventChannelFactory::get_event_channel (
  ::CosNotifyChannelAdmin::ChannelID id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFactory_Proxy_Broker_ == 0)
    {
      CosNotifyChannelAdmin_EventChannelFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };

  static TAO::Exception_Data
  _tao_CosNotifyChannelAdmin_EventChannelFactory_get_event_channel_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/ChannelNotFound:1.0",
        CosNotifyChannelAdmin::ChannelNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_ChannelNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_event_channel",
      17,
      this->the_TAO_EventChannelFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotifyChannelAdmin_EventChannelFactory_get_event_channel_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

CosNotifyChannelAdmin::EventChannelFactory::EventChannelFactory (void)
 : the_TAO_EventChannelFactory_Proxy_Broker_ (0)
{
  this->CosNotifyChannelAdmin_EventChannelFactory_setup_collocation ();
}

void
CosNotifyChannelAdmin::EventChannelFactory::CosNotifyChannelAdmin_EventChannelFactory_setup_collocation ()
{
  if (::CosNotifyChannelAdmin__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannelFactory_Proxy_Broker_ =
        ::CosNotifyChannelAdmin__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNotifyChannelAdmin::EventChannelFactory::~EventChannelFactory (void)
{}

void 
CosNotifyChannelAdmin::EventChannelFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannelFactory *_tao_tmp_pointer =
    static_cast<EventChannelFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotifyChannelAdmin::EventChannelFactory_ptr
CosNotifyChannelAdmin::EventChannelFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFactory>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0",
        CosNotifyChannelAdmin__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::EventChannelFactory_ptr
CosNotifyChannelAdmin::EventChannelFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFactory>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0",
        CosNotifyChannelAdmin__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

CosNotifyChannelAdmin::EventChannelFactory_ptr
CosNotifyChannelAdmin::EventChannelFactory::_nil (void)
{
  return 0;
}

CosNotifyChannelAdmin::EventChannelFactory_ptr
CosNotifyChannelAdmin::EventChannelFactory::_duplicate (EventChannelFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotifyChannelAdmin::EventChannelFactory::_tao_release (EventChannelFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotifyChannelAdmin::EventChannelFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotifyChannelAdmin::EventChannelFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0";
}

::CORBA::Boolean
CosNotifyChannelAdmin::EventChannelFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotifyChannelAdmin_EventChannelFactory (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0",
    "EventChannelFactory");
  

namespace CosNotifyChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannelFactory =
    &_tao_tc_CosNotifyChannelAdmin_EventChannelFactory;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyActive>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ConnectionAlreadyActive &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ConnectionAlreadyActive>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ConnectionAlreadyActive *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ConnectionAlreadyActive>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ConnectionAlreadyActive *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::ConnectionAlreadyActive *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ConnectionAlreadyActive *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ConnectionAlreadyActive>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ConnectionAlreadyActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyActive>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConnectionAlreadyActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyActive>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConnectionAlreadyActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::ConnectionAlreadyActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ConnectionAlreadyActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyActive>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ConnectionAlreadyActive::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyInactive>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ConnectionAlreadyInactive &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ConnectionAlreadyInactive>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ConnectionAlreadyInactive *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ConnectionAlreadyInactive>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ConnectionAlreadyInactive *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::ConnectionAlreadyInactive *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ConnectionAlreadyInactive *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ConnectionAlreadyInactive>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ConnectionAlreadyInactive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyInactive>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConnectionAlreadyInactive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyInactive>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConnectionAlreadyInactive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::ConnectionAlreadyInactive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ConnectionAlreadyInactive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ConnectionAlreadyInactive>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ConnectionAlreadyInactive::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::NotConnected>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::NotConnected &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::NotConnected>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::NotConnected::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_NotConnected,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::NotConnected *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::NotConnected>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::NotConnected::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_NotConnected,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::NotConnected *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::NotConnected *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::NotConnected *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::NotConnected>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::NotConnected::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_NotConnected,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::NotConnected &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::NotConnected>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::NotConnected::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_NotConnected,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::NotConnected *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::NotConnected>::insert (
      _tao_any,
      CosNotifyChannelAdmin::NotConnected::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_NotConnected,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::NotConnected *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::NotConnected *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::NotConnected *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::NotConnected>::extract (
        _tao_any,
        CosNotifyChannelAdmin::NotConnected::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_NotConnected,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ProxyType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::ProxyType>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::_tc_ProxyType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ProxyType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::ProxyType>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::_tc_ProxyType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::ProxyType>::insert (
      _tao_any,
      CosNotifyChannelAdmin::_tc_ProxyType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::ProxyType>::extract (
        _tao_any,
        CosNotifyChannelAdmin::_tc_ProxyType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ObtainInfoMode _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::ObtainInfoMode>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::_tc_ObtainInfoMode,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ObtainInfoMode &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::ObtainInfoMode>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::_tc_ObtainInfoMode,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ObtainInfoMode _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::ObtainInfoMode>::insert (
      _tao_any,
      CosNotifyChannelAdmin::_tc_ObtainInfoMode,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ObtainInfoMode &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::ObtainInfoMode>::extract (
        _tao_any,
        CosNotifyChannelAdmin::_tc_ObtainInfoMode,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::ProxyConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyConsumer_ptr _tao_elem)
  {
    ProxyConsumer_ptr _tao_objptr =
      ProxyConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyConsumer>::insert (
        _tao_any,
        ProxyConsumer::_tao_any_destructor,
        _tc_ProxyConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyConsumer>::extract (
          _tao_any,
          ProxyConsumer::_tao_any_destructor,
          _tc_ProxyConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyConsumer_ptr _tao_elem)
{
  CosNotifyChannelAdmin::ProxyConsumer_ptr _tao_objptr =
    CosNotifyChannelAdmin::ProxyConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxyConsumer>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ProxyConsumer::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxyConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxyConsumer>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ProxyConsumer::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxyConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::ProxySupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxySupplier_ptr _tao_elem)
  {
    ProxySupplier_ptr _tao_objptr =
      ProxySupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxySupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxySupplier>::insert (
        _tao_any,
        ProxySupplier::_tao_any_destructor,
        _tc_ProxySupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxySupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxySupplier>::extract (
          _tao_any,
          ProxySupplier::_tao_any_destructor,
          _tc_ProxySupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxySupplier_ptr _tao_elem)
{
  CosNotifyChannelAdmin::ProxySupplier_ptr _tao_objptr =
    CosNotifyChannelAdmin::ProxySupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxySupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxySupplier>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ProxySupplier::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxySupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxySupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxySupplier>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ProxySupplier::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxySupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::ProxyPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr _tao_elem)
  {
    ProxyPushConsumer_ptr _tao_objptr =
      ProxyPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPushConsumer>::insert (
        _tao_any,
        ProxyPushConsumer::_tao_any_destructor,
        _tc_ProxyPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPushConsumer>::extract (
          _tao_any,
          ProxyPushConsumer::_tao_any_destructor,
          _tc_ProxyPushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyPushConsumer_ptr _tao_elem)
{
  CosNotifyChannelAdmin::ProxyPushConsumer_ptr _tao_objptr =
    CosNotifyChannelAdmin::ProxyPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxyPushConsumer>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ProxyPushConsumer::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxyPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxyPushConsumer>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ProxyPushConsumer::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxyPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredProxyPushConsumer_ptr _tao_elem)
  {
    StructuredProxyPushConsumer_ptr _tao_objptr =
      StructuredProxyPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredProxyPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<StructuredProxyPushConsumer>::insert (
        _tao_any,
        StructuredProxyPushConsumer::_tao_any_destructor,
        _tc_StructuredProxyPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      StructuredProxyPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<StructuredProxyPushConsumer>::extract (
          _tao_any,
          StructuredProxyPushConsumer::_tao_any_destructor,
          _tc_StructuredProxyPushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr _tao_elem)
{
  CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr _tao_objptr =
    CosNotifyChannelAdmin::StructuredProxyPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::insert (
      _tao_any,
      CosNotifyChannelAdmin::StructuredProxyPushConsumer::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_StructuredProxyPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::StructuredProxyPushConsumer>::extract (
        _tao_any,
        CosNotifyChannelAdmin::StructuredProxyPushConsumer::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_StructuredProxyPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequenceProxyPushConsumer_ptr _tao_elem)
  {
    SequenceProxyPushConsumer_ptr _tao_objptr =
      SequenceProxyPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequenceProxyPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SequenceProxyPushConsumer>::insert (
        _tao_any,
        SequenceProxyPushConsumer::_tao_any_destructor,
        _tc_SequenceProxyPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SequenceProxyPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SequenceProxyPushConsumer>::extract (
          _tao_any,
          SequenceProxyPushConsumer::_tao_any_destructor,
          _tc_SequenceProxyPushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr _tao_elem)
{
  CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr _tao_objptr =
    CosNotifyChannelAdmin::SequenceProxyPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::insert (
      _tao_any,
      CosNotifyChannelAdmin::SequenceProxyPushConsumer::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_SequenceProxyPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::SequenceProxyPushConsumer>::extract (
        _tao_any,
        CosNotifyChannelAdmin::SequenceProxyPushConsumer::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_SequenceProxyPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::ProxyPushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr _tao_elem)
  {
    ProxyPushSupplier_ptr _tao_objptr =
      ProxyPushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPushSupplier>::insert (
        _tao_any,
        ProxyPushSupplier::_tao_any_destructor,
        _tc_ProxyPushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPushSupplier>::extract (
          _tao_any,
          ProxyPushSupplier::_tao_any_destructor,
          _tc_ProxyPushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyPushSupplier_ptr _tao_elem)
{
  CosNotifyChannelAdmin::ProxyPushSupplier_ptr _tao_objptr =
    CosNotifyChannelAdmin::ProxyPushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyPushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxyPushSupplier>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ProxyPushSupplier::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxyPushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyPushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::ProxyPushSupplier>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ProxyPushSupplier::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxyPushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredProxyPushSupplier_ptr _tao_elem)
  {
    StructuredProxyPushSupplier_ptr _tao_objptr =
      StructuredProxyPushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StructuredProxyPushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<StructuredProxyPushSupplier>::insert (
        _tao_any,
        StructuredProxyPushSupplier::_tao_any_destructor,
        _tc_StructuredProxyPushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      StructuredProxyPushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<StructuredProxyPushSupplier>::extract (
          _tao_any,
          StructuredProxyPushSupplier::_tao_any_destructor,
          _tc_StructuredProxyPushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr _tao_elem)
{
  CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr _tao_objptr =
    CosNotifyChannelAdmin::StructuredProxyPushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::insert (
      _tao_any,
      CosNotifyChannelAdmin::StructuredProxyPushSupplier::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_StructuredProxyPushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::StructuredProxyPushSupplier>::extract (
        _tao_any,
        CosNotifyChannelAdmin::StructuredProxyPushSupplier::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_StructuredProxyPushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequenceProxyPushSupplier_ptr _tao_elem)
  {
    SequenceProxyPushSupplier_ptr _tao_objptr =
      SequenceProxyPushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SequenceProxyPushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SequenceProxyPushSupplier>::insert (
        _tao_any,
        SequenceProxyPushSupplier::_tao_any_destructor,
        _tc_SequenceProxyPushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SequenceProxyPushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SequenceProxyPushSupplier>::extract (
          _tao_any,
          SequenceProxyPushSupplier::_tao_any_destructor,
          _tc_SequenceProxyPushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr _tao_elem)
{
  CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr _tao_objptr =
    CosNotifyChannelAdmin::SequenceProxyPushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::insert (
      _tao_any,
      CosNotifyChannelAdmin::SequenceProxyPushSupplier::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_SequenceProxyPushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::SequenceProxyPushSupplier>::extract (
        _tao_any,
        CosNotifyChannelAdmin::SequenceProxyPushSupplier::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_SequenceProxyPushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ProxyIDSeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotifyChannelAdmin::ProxyIDSeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ProxyIDSeq>::insert_copy (
          _tao_any,
          ::CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ProxyIDSeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ProxyIDSeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ProxyIDSeq>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ProxyIDSeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ProxyIDSeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::ProxyIDSeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ProxyIDSeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ProxyIDSeq>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ProxyIDSeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ProxyIDSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotifyChannelAdmin::ProxyIDSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyIDSeq>::insert_copy (
        _tao_any,
        CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxyIDSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyIDSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyIDSeq>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxyIDSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyIDSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::ProxyIDSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ProxyIDSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyIDSeq>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ProxyIDSeq::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxyIDSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ClientType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::ClientType>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::_tc_ClientType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ClientType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::ClientType>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::_tc_ClientType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ClientType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::ClientType>::insert (
      _tao_any,
      CosNotifyChannelAdmin::_tc_ClientType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ClientType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::ClientType>::extract (
        _tao_any,
        CosNotifyChannelAdmin::_tc_ClientType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::InterFilterGroupOperator _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::_tc_InterFilterGroupOperator,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::InterFilterGroupOperator &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::_tc_InterFilterGroupOperator,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::InterFilterGroupOperator _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::InterFilterGroupOperator>::insert (
      _tao_any,
      CosNotifyChannelAdmin::_tc_InterFilterGroupOperator,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::InterFilterGroupOperator &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNotifyChannelAdmin::InterFilterGroupOperator>::extract (
        _tao_any,
        CosNotifyChannelAdmin::_tc_InterFilterGroupOperator,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminIDSeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotifyChannelAdmin::AdminIDSeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminIDSeq>::insert_copy (
          _tao_any,
          ::CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_AdminIDSeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminIDSeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminIDSeq>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_AdminIDSeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminIDSeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::AdminIDSeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminIDSeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminIDSeq>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_AdminIDSeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminIDSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotifyChannelAdmin::AdminIDSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminIDSeq>::insert_copy (
        _tao_any,
        CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_AdminIDSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminIDSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminIDSeq>::insert (
      _tao_any,
      CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_AdminIDSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminIDSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::AdminIDSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminIDSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminIDSeq>::extract (
        _tao_any,
        CosNotifyChannelAdmin::AdminIDSeq::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_AdminIDSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminNotFound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminNotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminNotFound>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_AdminNotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminNotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminNotFound>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_AdminNotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminNotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::AdminNotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminNotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminNotFound>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_AdminNotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminNotFound>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_AdminNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminNotFound>::insert (
      _tao_any,
      CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_AdminNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::AdminNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminNotFound>::extract (
        _tao_any,
        CosNotifyChannelAdmin::AdminNotFound::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_AdminNotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyNotFound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ProxyNotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ProxyNotFound>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ProxyNotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ProxyNotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ProxyNotFound>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ProxyNotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ProxyNotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::ProxyNotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ProxyNotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ProxyNotFound>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ProxyNotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ProxyNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyNotFound>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxyNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyNotFound>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ProxyNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ProxyNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::ProxyNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ProxyNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ProxyNotFound>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ProxyNotFound::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ProxyNotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminLimit &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotifyChannelAdmin::AdminLimit *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminLimit>::insert_copy (
          _tao_any,
          ::CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_AdminLimit,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotifyChannelAdmin::AdminLimit *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminLimit>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_AdminLimit,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminLimit *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::AdminLimit *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminLimit *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminLimit>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_AdminLimit,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminLimit &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotifyChannelAdmin::AdminLimit *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimit>::insert_copy (
        _tao_any,
        CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_AdminLimit,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminLimit *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimit>::insert (
      _tao_any,
      CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_AdminLimit,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminLimit *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::AdminLimit *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminLimit *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimit>::extract (
        _tao_any,
        CosNotifyChannelAdmin::AdminLimit::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_AdminLimit,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimitExceeded>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminLimitExceeded &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminLimitExceeded>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminLimitExceeded *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminLimitExceeded>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::AdminLimitExceeded *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::AdminLimitExceeded *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::AdminLimitExceeded *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::AdminLimitExceeded>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminLimitExceeded &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimitExceeded>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminLimitExceeded *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimitExceeded>::insert (
      _tao_any,
      CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::AdminLimitExceeded *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::AdminLimitExceeded *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::AdminLimitExceeded *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::AdminLimitExceeded>::extract (
        _tao_any,
        CosNotifyChannelAdmin::AdminLimitExceeded::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::ConsumerAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr _tao_elem)
  {
    ConsumerAdmin_ptr _tao_objptr =
      ConsumerAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ConsumerAdmin>::insert (
        _tao_any,
        ConsumerAdmin::_tao_any_destructor,
        _tc_ConsumerAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ConsumerAdmin>::extract (
          _tao_any,
          ConsumerAdmin::_tao_any_destructor,
          _tc_ConsumerAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConsumerAdmin_ptr _tao_elem)
{
  CosNotifyChannelAdmin::ConsumerAdmin_ptr _tao_objptr =
    CosNotifyChannelAdmin::ConsumerAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConsumerAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::ConsumerAdmin>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ConsumerAdmin::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ConsumerAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ConsumerAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::ConsumerAdmin>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ConsumerAdmin::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ConsumerAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::SupplierAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr _tao_elem)
  {
    SupplierAdmin_ptr _tao_objptr =
      SupplierAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SupplierAdmin>::insert (
        _tao_any,
        SupplierAdmin::_tao_any_destructor,
        _tc_SupplierAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SupplierAdmin>::extract (
          _tao_any,
          SupplierAdmin::_tao_any_destructor,
          _tc_SupplierAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SupplierAdmin_ptr _tao_elem)
{
  CosNotifyChannelAdmin::SupplierAdmin_ptr _tao_objptr =
    CosNotifyChannelAdmin::SupplierAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SupplierAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::SupplierAdmin>::insert (
      _tao_any,
      CosNotifyChannelAdmin::SupplierAdmin::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_SupplierAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::SupplierAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::SupplierAdmin>::extract (
        _tao_any,
        CosNotifyChannelAdmin::SupplierAdmin::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_SupplierAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::EventChannel>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr _tao_elem)
  {
    EventChannel_ptr _tao_objptr =
      EventChannel::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannel>::insert (
        _tao_any,
        EventChannel::_tao_any_destructor,
        _tc_EventChannel,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannel_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannel>::extract (
          _tao_any,
          EventChannel::_tao_any_destructor,
          _tc_EventChannel,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::EventChannel_ptr _tao_elem)
{
  CosNotifyChannelAdmin::EventChannel_ptr _tao_objptr =
    CosNotifyChannelAdmin::EventChannel::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::EventChannel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::EventChannel>::insert (
      _tao_any,
      CosNotifyChannelAdmin::EventChannel::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_EventChannel,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::EventChannel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::EventChannel>::extract (
        _tao_any,
        CosNotifyChannelAdmin::EventChannel::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_EventChannel,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ChannelIDSeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotifyChannelAdmin::ChannelIDSeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ChannelIDSeq>::insert_copy (
          _tao_any,
          ::CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ChannelIDSeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ChannelIDSeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ChannelIDSeq>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ChannelIDSeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ChannelIDSeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::ChannelIDSeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ChannelIDSeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ChannelIDSeq>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ChannelIDSeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ChannelIDSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotifyChannelAdmin::ChannelIDSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelIDSeq>::insert_copy (
        _tao_any,
        CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ChannelIDSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ChannelIDSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelIDSeq>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ChannelIDSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ChannelIDSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::ChannelIDSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ChannelIDSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelIDSeq>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ChannelIDSeq::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ChannelIDSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelNotFound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ChannelNotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ChannelNotFound>::insert_copy (
        _tao_any,
        ::CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ChannelNotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ChannelNotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ChannelNotFound>::insert (
        _tao_any,
        ::CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor,
        ::CosNotifyChannelAdmin::_tc_ChannelNotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotifyChannelAdmin::ChannelNotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotifyChannelAdmin::ChannelNotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotifyChannelAdmin::ChannelNotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotifyChannelAdmin::ChannelNotFound>::extract (
          _tao_any,
          ::CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor,
          ::CosNotifyChannelAdmin::_tc_ChannelNotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ChannelNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelNotFound>::insert_copy (
      _tao_any,
      CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ChannelNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ChannelNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelNotFound>::insert (
      _tao_any,
      CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_ChannelNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::ChannelNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotifyChannelAdmin::ChannelNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotifyChannelAdmin::ChannelNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotifyChannelAdmin::ChannelNotFound>::extract (
        _tao_any,
        CosNotifyChannelAdmin::ChannelNotFound::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_ChannelNotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotifyChannelAdmin::EventChannelFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotifyChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr _tao_elem)
  {
    EventChannelFactory_ptr _tao_objptr =
      EventChannelFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannelFactory>::insert (
        _tao_any,
        EventChannelFactory::_tao_any_destructor,
        _tc_EventChannelFactory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannelFactory>::extract (
          _tao_any,
          EventChannelFactory::_tao_any_destructor,
          _tc_EventChannelFactory,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::EventChannelFactory_ptr _tao_elem)
{
  CosNotifyChannelAdmin::EventChannelFactory_ptr _tao_objptr =
    CosNotifyChannelAdmin::EventChannelFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::EventChannelFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotifyChannelAdmin::EventChannelFactory>::insert (
      _tao_any,
      CosNotifyChannelAdmin::EventChannelFactory::_tao_any_destructor,
      CosNotifyChannelAdmin::_tc_EventChannelFactory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotifyChannelAdmin::EventChannelFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotifyChannelAdmin::EventChannelFactory>::extract (
        _tao_any,
        CosNotifyChannelAdmin::EventChannelFactory::_tao_any_destructor,
        CosNotifyChannelAdmin::_tc_EventChannelFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ConnectionAlreadyActive &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNotifyChannelAdmin::ConnectionAlreadyActive&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ConnectionAlreadyInactive &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNotifyChannelAdmin::ConnectionAlreadyInactive&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::NotConnected &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNotifyChannelAdmin::NotConnected&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNotifyChannelAdmin::ProxyType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNotifyChannelAdmin::ProxyType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNotifyChannelAdmin::ProxyType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNotifyChannelAdmin::ObtainInfoMode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNotifyChannelAdmin::ObtainInfoMode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNotifyChannelAdmin::ObtainInfoMode> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ProxyConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ProxyConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::ProxyConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_ProxyConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ProxySupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ProxySupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::ProxySupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_ProxySupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ProxyPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ProxyPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::ProxyPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::StructuredProxyPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::StructuredProxyPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_StructuredProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::SequenceProxyPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::SequenceProxyPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_SequenceProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ProxyPushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ProxyPushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::ProxyPushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::StructuredProxyPushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::StructuredProxyPushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_StructuredProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::SequenceProxyPushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::SequenceProxyPushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_SequenceProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotifyChannelAdmin_ProxyIDSeq_CPP_
#define _TAO_CDR_OP_CosNotifyChannelAdmin_ProxyIDSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ProxyIDSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ProxyIDSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotifyChannelAdmin_ProxyIDSeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNotifyChannelAdmin::ClientType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNotifyChannelAdmin::ClientType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNotifyChannelAdmin::ClientType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNotifyChannelAdmin::InterFilterGroupOperator _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNotifyChannelAdmin::InterFilterGroupOperator & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNotifyChannelAdmin::InterFilterGroupOperator> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotifyChannelAdmin_AdminIDSeq_CPP_
#define _TAO_CDR_OP_CosNotifyChannelAdmin_AdminIDSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::AdminIDSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::AdminIDSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotifyChannelAdmin_AdminIDSeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::AdminNotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNotifyChannelAdmin::AdminNotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ProxyNotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNotifyChannelAdmin::ProxyNotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::AdminLimit &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::AdminLimit &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::AdminLimitExceeded &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.admin_property_err)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::AdminLimitExceeded &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.admin_property_err)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ConsumerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ConsumerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::ConsumerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::SupplierAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::SupplierAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::SupplierAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::EventChannel_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::EventChannel_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::EventChannel RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotifyChannelAdmin_ChannelIDSeq_CPP_
#define _TAO_CDR_OP_CosNotifyChannelAdmin_ChannelIDSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ChannelIDSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::ChannelIDSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotifyChannelAdmin_ChannelIDSeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::ChannelNotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNotifyChannelAdmin::ChannelNotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotifyChannelAdmin::EventChannelFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotifyChannelAdmin::EventChannelFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotifyChannelAdmin::EventChannelFactory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyChannelAdmin__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


