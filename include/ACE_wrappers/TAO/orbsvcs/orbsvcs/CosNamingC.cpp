// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosNamingC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosNamingC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_Istring (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNaming/Istring:1.0",
    "Istring",
    &CORBA::_tc_string);
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_Istring =
    &_tao_tc_CosNaming_Istring;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNaming_NameComponent[] =
      {
        { "id", &CosNaming::_tc_Istring },
        { "kind", &CosNaming::_tc_Istring }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NameComponent (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNaming/NameComponent:1.0",
  "NameComponent",
  _tao_fields_CosNaming_NameComponent,
  2);


namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_NameComponent =
    &_tao_tc_CosNaming_NameComponent;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNaming::NameComponent::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NameComponent *_tao_tmp_pointer =
    static_cast<NameComponent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNAMING_NAME_CS_)
#define _COSNAMING_NAME_CS_

CosNaming::Name::Name (void)
{}

CosNaming::Name::Name (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NameComponent
      > (max)
{}

CosNaming::Name::Name (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNaming::NameComponent * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NameComponent
      >
    (max, length, buffer, release)
{}

CosNaming::Name::Name (
    const Name &seq)
  : ::TAO::unbounded_value_sequence<
        NameComponent
      > (seq)
{}

CosNaming::Name::~Name (void)
{}

void CosNaming::Name::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Name * _tao_tmp_pointer =
    static_cast<Name *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNaming_Name_GUARD
#define _TAO_TYPECODE_CosNaming_Name_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNaming_Name_0 (
          ::CORBA::tk_sequence,
          &CosNaming::_tc_NameComponent,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNaming_Name_0 =
        &CosNaming_Name_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNaming_Name_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_Name (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNaming/Name:1.0",
    "Name",
    &TAO::TypeCode::tc_CosNaming_Name_0);
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_Name =
    &_tao_tc_CosNaming_Name;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNaming_BindingType[] =
  {
    "nobject",
    "ncontext"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_BindingType (
    "IDL:omg.org/CosNaming/BindingType:1.0",
    "BindingType",
    _tao_enumerators_CosNaming_BindingType,
    2);
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_BindingType =
    &_tao_tc_CosNaming_BindingType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNaming_Binding[] =
      {
        { "binding_name", &CosNaming::_tc_Name },
        { "binding_type", &CosNaming::_tc_BindingType }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_Binding (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNaming/Binding:1.0",
  "Binding",
  _tao_fields_CosNaming_Binding,
  2);


namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_Binding =
    &_tao_tc_CosNaming_Binding;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNaming::Binding::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Binding *_tao_tmp_pointer =
    static_cast<Binding *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNAMING_BINDINGLIST_CS_)
#define _COSNAMING_BINDINGLIST_CS_

CosNaming::BindingList::BindingList (void)
{}

CosNaming::BindingList::BindingList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Binding
      > (max)
{}

CosNaming::BindingList::BindingList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNaming::Binding * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Binding
      >
    (max, length, buffer, release)
{}

CosNaming::BindingList::BindingList (
    const BindingList &seq)
  : ::TAO::unbounded_value_sequence<
        Binding
      > (seq)
{}

CosNaming::BindingList::~BindingList (void)
{}

void CosNaming::BindingList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  BindingList * _tao_tmp_pointer =
    static_cast<BindingList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNaming_BindingList_GUARD
#define _TAO_TYPECODE_CosNaming_BindingList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNaming_BindingList_0 (
          ::CORBA::tk_sequence,
          &CosNaming::_tc_Binding,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNaming_BindingList_0 =
        &CosNaming_BindingList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNaming_BindingList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_BindingList (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNaming/BindingList:1.0",
    "BindingList",
    &TAO::TypeCode::tc_CosNaming_BindingList_0);
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_BindingList =
    &_tao_tc_CosNaming_BindingList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNaming::NamingContext.

CosNaming::NamingContext_ptr
TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (
    CosNaming::NamingContext_ptr p)
{
  return CosNaming::NamingContext::_duplicate (p);
}

void
TAO::Objref_Traits<CosNaming::NamingContext>::release (
    CosNaming::NamingContext_ptr p)
{
  ::CORBA::release (p);
}

CosNaming::NamingContext_ptr
TAO::Objref_Traits<CosNaming::NamingContext>::nil (void)
{
  return CosNaming::NamingContext::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNaming::NamingContext>::marshal (
    const CosNaming::NamingContext_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNaming_NamingContext_NotFoundReason[] =
  {
    "missing_node",
    "not_context",
    "not_object"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_NamingContext_NotFoundReason (
    "IDL:omg.org/CosNaming/NamingContext/NotFoundReason:1.0",
    "NotFoundReason",
    _tao_enumerators_CosNaming_NamingContext_NotFoundReason,
    3);
  
::CORBA::TypeCode_ptr const CosNaming::NamingContext::_tc_NotFoundReason =
  &_tao_tc_CosNaming_NamingContext_NotFoundReason;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosNaming::NamingContext::NotFound::NotFound (
    CosNaming::NamingContext::NotFoundReason _tao_why,
    const CosNaming::Name & _tao_rest_of_name)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        "NotFound"
      )
{
  this->why = _tao_why;
  this->rest_of_name = _tao_rest_of_name;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNaming::NamingContext::NotFound::NotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        "NotFound"
      )
{
}

CosNaming::NamingContext::NotFound::~NotFound (void)
{
}

CosNaming::NamingContext::NotFound::NotFound (const ::CosNaming::NamingContext::NotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->why = _tao_excp.why;
  this->rest_of_name = _tao_excp.rest_of_name;
}

CosNaming::NamingContext::NotFound&
CosNaming::NamingContext::NotFound::operator= (const ::CosNaming::NamingContext::NotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->why = _tao_excp.why;
  this->rest_of_name = _tao_excp.rest_of_name;
  return *this;
}

void CosNaming::NamingContext::NotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  NotFound *_tao_tmp_pointer =
    static_cast<NotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNaming::NamingContext::NotFound *
CosNaming::NamingContext::NotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotFound *> (_tao_excp);
}

const CosNaming::NamingContext::NotFound *
CosNaming::NamingContext::NotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotFound *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::NotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::NotFound, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::NotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::NotFound (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::NotFound::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::NotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::NotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNaming::NamingContext::NotFound::_tao_type (void) const
{
  return ::CosNaming::NamingContext::_tc_NotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNaming_NamingContext_NotFound[] =
      {
        { "why", &CosNaming::NamingContext::_tc_NotFoundReason },
        { "rest_of_name", &CosNaming::_tc_Name }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NamingContext_NotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
  "NotFound",
  _tao_fields_CosNaming_NamingContext_NotFound,
  2);

::CORBA::TypeCode_ptr const CosNaming::NamingContext::_tc_NotFound =
  &_tao_tc_CosNaming_NamingContext_NotFound;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosNaming::NamingContext::CannotProceed::CannotProceed (
    const CosNaming::NamingContext_ptr _tao_cxt,
    const CosNaming::Name & _tao_rest_of_name)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        "CannotProceed"
      )
{
  this->cxt = TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (_tao_cxt);
  this->rest_of_name = _tao_rest_of_name;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNaming::NamingContext::CannotProceed::CannotProceed (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        "CannotProceed"
      )
{
}

CosNaming::NamingContext::CannotProceed::~CannotProceed (void)
{
}

CosNaming::NamingContext::CannotProceed::CannotProceed (const ::CosNaming::NamingContext::CannotProceed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->cxt = TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (_tao_excp.cxt.in ());
  this->rest_of_name = _tao_excp.rest_of_name;
}

CosNaming::NamingContext::CannotProceed&
CosNaming::NamingContext::CannotProceed::operator= (const ::CosNaming::NamingContext::CannotProceed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->cxt = TAO::Objref_Traits<CosNaming::NamingContext>::duplicate (_tao_excp.cxt.in ());
  this->rest_of_name = _tao_excp.rest_of_name;
  return *this;
}

void CosNaming::NamingContext::CannotProceed::_tao_any_destructor (void *_tao_void_pointer)
{
  CannotProceed *_tao_tmp_pointer =
    static_cast<CannotProceed *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNaming::NamingContext::CannotProceed *
CosNaming::NamingContext::CannotProceed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CannotProceed *> (_tao_excp);
}

const CosNaming::NamingContext::CannotProceed *
CosNaming::NamingContext::CannotProceed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CannotProceed *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::CannotProceed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::CannotProceed, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::CannotProceed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::CannotProceed (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::CannotProceed::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::CannotProceed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::CannotProceed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNaming::NamingContext::CannotProceed::_tao_type (void) const
{
  return ::CosNaming::NamingContext::_tc_CannotProceed;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNaming_NamingContext_CannotProceed[] =
      {
        { "cxt", &CosNaming::_tc_NamingContext },
        { "rest_of_name", &CosNaming::_tc_Name }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NamingContext_CannotProceed (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
  "CannotProceed",
  _tao_fields_CosNaming_NamingContext_CannotProceed,
  2);

::CORBA::TypeCode_ptr const CosNaming::NamingContext::_tc_CannotProceed =
  &_tao_tc_CosNaming_NamingContext_CannotProceed;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNaming::NamingContext::InvalidName::InvalidName (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        "InvalidName"
      )
{
}

CosNaming::NamingContext::InvalidName::~InvalidName (void)
{
}

CosNaming::NamingContext::InvalidName::InvalidName (const ::CosNaming::NamingContext::InvalidName &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContext::InvalidName&
CosNaming::NamingContext::InvalidName::operator= (const ::CosNaming::NamingContext::InvalidName &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNaming::NamingContext::InvalidName::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidName *_tao_tmp_pointer =
    static_cast<InvalidName *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNaming::NamingContext::InvalidName *
CosNaming::NamingContext::InvalidName::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidName *> (_tao_excp);
}

const CosNaming::NamingContext::InvalidName *
CosNaming::NamingContext::InvalidName::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidName *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::InvalidName::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::InvalidName, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::InvalidName::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::InvalidName (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::InvalidName::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::InvalidName::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::InvalidName::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNaming::NamingContext::InvalidName::_tao_type (void) const
{
  return ::CosNaming::NamingContext::_tc_InvalidName;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNaming_NamingContext_InvalidName = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NamingContext_InvalidName (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
  "InvalidName",
  _tao_fields_CosNaming_NamingContext_InvalidName,
  0);

::CORBA::TypeCode_ptr const CosNaming::NamingContext::_tc_InvalidName =
  &_tao_tc_CosNaming_NamingContext_InvalidName;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNaming::NamingContext::AlreadyBound::AlreadyBound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0",
        "AlreadyBound"
      )
{
}

CosNaming::NamingContext::AlreadyBound::~AlreadyBound (void)
{
}

CosNaming::NamingContext::AlreadyBound::AlreadyBound (const ::CosNaming::NamingContext::AlreadyBound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContext::AlreadyBound&
CosNaming::NamingContext::AlreadyBound::operator= (const ::CosNaming::NamingContext::AlreadyBound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNaming::NamingContext::AlreadyBound::_tao_any_destructor (void *_tao_void_pointer)
{
  AlreadyBound *_tao_tmp_pointer =
    static_cast<AlreadyBound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNaming::NamingContext::AlreadyBound *
CosNaming::NamingContext::AlreadyBound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AlreadyBound *> (_tao_excp);
}

const CosNaming::NamingContext::AlreadyBound *
CosNaming::NamingContext::AlreadyBound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AlreadyBound *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::AlreadyBound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::AlreadyBound, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::AlreadyBound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::AlreadyBound (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::AlreadyBound::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::AlreadyBound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::AlreadyBound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNaming::NamingContext::AlreadyBound::_tao_type (void) const
{
  return ::CosNaming::NamingContext::_tc_AlreadyBound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNaming_NamingContext_AlreadyBound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NamingContext_AlreadyBound (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0",
  "AlreadyBound",
  _tao_fields_CosNaming_NamingContext_AlreadyBound,
  0);

::CORBA::TypeCode_ptr const CosNaming::NamingContext::_tc_AlreadyBound =
  &_tao_tc_CosNaming_NamingContext_AlreadyBound;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNaming::NamingContext::NotEmpty::NotEmpty (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0",
        "NotEmpty"
      )
{
}

CosNaming::NamingContext::NotEmpty::~NotEmpty (void)
{
}

CosNaming::NamingContext::NotEmpty::NotEmpty (const ::CosNaming::NamingContext::NotEmpty &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContext::NotEmpty&
CosNaming::NamingContext::NotEmpty::operator= (const ::CosNaming::NamingContext::NotEmpty &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNaming::NamingContext::NotEmpty::_tao_any_destructor (void *_tao_void_pointer)
{
  NotEmpty *_tao_tmp_pointer =
    static_cast<NotEmpty *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNaming::NamingContext::NotEmpty *
CosNaming::NamingContext::NotEmpty::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotEmpty *> (_tao_excp);
}

const CosNaming::NamingContext::NotEmpty *
CosNaming::NamingContext::NotEmpty::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotEmpty *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContext::NotEmpty::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContext::NotEmpty, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContext::NotEmpty::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContext::NotEmpty (*this),
      0
    );
  return result;
}

void CosNaming::NamingContext::NotEmpty::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContext::NotEmpty::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContext::NotEmpty::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNaming::NamingContext::NotEmpty::_tao_type (void) const
{
  return ::CosNaming::NamingContext::_tc_NotEmpty;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNaming_NamingContext_NotEmpty = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NamingContext_NotEmpty (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0",
  "NotEmpty",
  _tao_fields_CosNaming_NamingContext_NotEmpty,
  0);

::CORBA::TypeCode_ptr const CosNaming::NamingContext::_tc_NotEmpty =
  &_tao_tc_CosNaming_NamingContext_NotEmpty;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::bind (
  const ::CosNaming::Name & n,
  ::CORBA::Object_ptr obj)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_obj (obj);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_obj
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_bind_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0",
        CosNaming::NamingContext::AlreadyBound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_AlreadyBound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "bind",
      4,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_bind_exceptiondata,
      4
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::rebind (
  const ::CosNaming::Name & n,
  ::CORBA::Object_ptr obj)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_obj (obj);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_obj
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_rebind_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "rebind",
      6,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_rebind_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::bind_context (
  const ::CosNaming::Name & n,
  ::CosNaming::NamingContext_ptr nc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CosNaming::NamingContext>::in_arg_val _tao_nc (nc);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_nc
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_bind_context_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0",
        CosNaming::NamingContext::AlreadyBound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_AlreadyBound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "bind_context",
      12,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_bind_context_exceptiondata,
      4
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::rebind_context (
  const ::CosNaming::Name & n,
  ::CosNaming::NamingContext_ptr nc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);
  TAO::Arg_Traits< ::CosNaming::NamingContext>::in_arg_val _tao_nc (nc);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n,
      &_tao_nc
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_rebind_context_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "rebind_context",
      14,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_rebind_context_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Object_ptr
CosNaming::NamingContext::resolve (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_resolve_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "resolve",
      7,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_resolve_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::unbind (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_unbind_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "unbind",
      6,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_unbind_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNaming::NamingContext_ptr
CosNaming::NamingContext::new_context (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNaming::NamingContext>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "new_context",
      11,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNaming::NamingContext_ptr
CosNaming::NamingContext::bind_new_context (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNaming::NamingContext>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_bind_new_context_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0",
        CosNaming::NamingContext::AlreadyBound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_AlreadyBound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "bind_new_context",
      16,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_bind_new_context_exceptiondata,
      4
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContext_destroy_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0",
        CosNaming::NamingContext::NotEmpty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotEmpty
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContext_destroy_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::NamingContext::list (
  ::CORBA::ULong how_many,
  ::CosNaming::BindingList_out bl,
  ::CosNaming::BindingIterator_out bi)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContext_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContext_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosNaming::BindingList>::out_arg_val _tao_bl (bl);
  TAO::Arg_Traits< ::CosNaming::BindingIterator>::out_arg_val _tao_bi (bi);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_bl,
      &_tao_bi
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "list",
      4,
      this->the_TAO_NamingContext_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNaming::NamingContext::NamingContext (void)
 : the_TAO_NamingContext_Proxy_Broker_ (0)
{
  this->CosNaming_NamingContext_setup_collocation ();
}

void
CosNaming::NamingContext::CosNaming_NamingContext_setup_collocation ()
{
  if (::CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_NamingContext_Proxy_Broker_ =
        ::CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNaming::NamingContext::~NamingContext (void)
{}

void 
CosNaming::NamingContext::_tao_any_destructor (void *_tao_void_pointer)
{
  NamingContext *_tao_tmp_pointer =
    static_cast<NamingContext *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContext>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNaming/NamingContext:1.0",
        CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer
      );
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContext>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNaming/NamingContext:1.0",
        CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer
      );
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_nil (void)
{
  return 0;
}

CosNaming::NamingContext_ptr
CosNaming::NamingContext::_duplicate (NamingContext_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNaming::NamingContext::_tao_release (NamingContext_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNaming::NamingContext::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/NamingContext:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNaming::NamingContext::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNaming/NamingContext:1.0";
}

::CORBA::Boolean
CosNaming::NamingContext::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_NamingContext (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNaming/NamingContext:1.0",
    "NamingContext");
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_NamingContext =
    &_tao_tc_CosNaming_NamingContext;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNaming::BindingIterator.

CosNaming::BindingIterator_ptr
TAO::Objref_Traits<CosNaming::BindingIterator>::duplicate (
    CosNaming::BindingIterator_ptr p)
{
  return CosNaming::BindingIterator::_duplicate (p);
}

void
TAO::Objref_Traits<CosNaming::BindingIterator>::release (
    CosNaming::BindingIterator_ptr p)
{
  ::CORBA::release (p);
}

CosNaming::BindingIterator_ptr
TAO::Objref_Traits<CosNaming::BindingIterator>::nil (void)
{
  return CosNaming::BindingIterator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNaming::BindingIterator>::marshal (
    const CosNaming::BindingIterator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosNaming::BindingIterator::next_one (
  ::CosNaming::Binding_out b)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_BindingIterator_Proxy_Broker_ == 0)
    {
      CosNaming_BindingIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Binding>::out_arg_val _tao_b (b);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_b
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "next_one",
      8,
      this->the_TAO_BindingIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
CosNaming::BindingIterator::next_n (
  ::CORBA::ULong how_many,
  ::CosNaming::BindingList_out bl)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_BindingIterator_Proxy_Broker_ == 0)
    {
      CosNaming_BindingIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many (how_many);
  TAO::Arg_Traits< ::CosNaming::BindingList>::out_arg_val _tao_bl (bl);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_how_many,
      &_tao_bl
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "next_n",
      6,
      this->the_TAO_BindingIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNaming::BindingIterator::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_BindingIterator_Proxy_Broker_ == 0)
    {
      CosNaming_BindingIterator_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_BindingIterator_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosNaming::BindingIterator::BindingIterator (void)
 : the_TAO_BindingIterator_Proxy_Broker_ (0)
{
  this->CosNaming_BindingIterator_setup_collocation ();
}

void
CosNaming::BindingIterator::CosNaming_BindingIterator_setup_collocation ()
{
  if (::CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_BindingIterator_Proxy_Broker_ =
        ::CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNaming::BindingIterator::~BindingIterator (void)
{}

void 
CosNaming::BindingIterator::_tao_any_destructor (void *_tao_void_pointer)
{
  BindingIterator *_tao_tmp_pointer =
    static_cast<BindingIterator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<BindingIterator>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNaming/BindingIterator:1.0",
        CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer
      );
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<BindingIterator>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNaming/BindingIterator:1.0",
        CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer
      );
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_nil (void)
{
  return 0;
}

CosNaming::BindingIterator_ptr
CosNaming::BindingIterator::_duplicate (BindingIterator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNaming::BindingIterator::_tao_release (BindingIterator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNaming::BindingIterator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/BindingIterator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNaming::BindingIterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNaming/BindingIterator:1.0";
}

::CORBA::Boolean
CosNaming::BindingIterator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_BindingIterator (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNaming/BindingIterator:1.0",
    "BindingIterator");
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_BindingIterator =
    &_tao_tc_CosNaming_BindingIterator;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNaming::NamingContextExt.

CosNaming::NamingContextExt_ptr
TAO::Objref_Traits<CosNaming::NamingContextExt>::duplicate (
    CosNaming::NamingContextExt_ptr p)
{
  return CosNaming::NamingContextExt::_duplicate (p);
}

void
TAO::Objref_Traits<CosNaming::NamingContextExt>::release (
    CosNaming::NamingContextExt_ptr p)
{
  ::CORBA::release (p);
}

CosNaming::NamingContextExt_ptr
TAO::Objref_Traits<CosNaming::NamingContextExt>::nil (void)
{
  return CosNaming::NamingContextExt::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNaming::NamingContextExt>::marshal (
    const CosNaming::NamingContextExt_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_NamingContextExt_StringName (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0",
    "StringName",
    &CORBA::_tc_string);
  
::CORBA::TypeCode_ptr const CosNaming::NamingContextExt::_tc_StringName =
  &_tao_tc_CosNaming_NamingContextExt_StringName;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_NamingContextExt_Address (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNaming/NamingContextExt/Address:1.0",
    "Address",
    &CORBA::_tc_string);
  
::CORBA::TypeCode_ptr const CosNaming::NamingContextExt::_tc_Address =
  &_tao_tc_CosNaming_NamingContextExt_Address;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_NamingContextExt_URLString (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNaming/NamingContextExt/URLString:1.0",
    "URLString",
    &CORBA::_tc_string);
  
::CORBA::TypeCode_ptr const CosNaming::NamingContextExt::_tc_URLString =
  &_tao_tc_CosNaming_NamingContextExt_URLString;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

char *
CosNaming::NamingContextExt::to_string (
  const ::CosNaming::Name & n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContextExt_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContextExt_setup_collocation ();
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNaming::Name>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_to_string_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "to_string",
      9,
      this->the_TAO_NamingContextExt_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_to_string_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNaming::Name *
CosNaming::NamingContextExt::to_name (
  const char * sn)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContextExt_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContextExt_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNaming::Name>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_sn (sn);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_sn
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_to_name_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "to_name",
      7,
      this->the_TAO_NamingContextExt_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_to_name_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNaming::NamingContextExt::InvalidAddress::InvalidAddress (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0",
        "InvalidAddress"
      )
{
}

CosNaming::NamingContextExt::InvalidAddress::~InvalidAddress (void)
{
}

CosNaming::NamingContextExt::InvalidAddress::InvalidAddress (const ::CosNaming::NamingContextExt::InvalidAddress &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosNaming::NamingContextExt::InvalidAddress&
CosNaming::NamingContextExt::InvalidAddress::operator= (const ::CosNaming::NamingContextExt::InvalidAddress &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidAddress *_tao_tmp_pointer =
    static_cast<InvalidAddress *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNaming::NamingContextExt::InvalidAddress *
CosNaming::NamingContextExt::InvalidAddress::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidAddress *> (_tao_excp);
}

const CosNaming::NamingContextExt::InvalidAddress *
CosNaming::NamingContextExt::InvalidAddress::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidAddress *> (_tao_excp);
}

::CORBA::Exception *CosNaming::NamingContextExt::InvalidAddress::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNaming::NamingContextExt::InvalidAddress, 0);
  return retval;
}

::CORBA::Exception *
CosNaming::NamingContextExt::InvalidAddress::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNaming::NamingContextExt::InvalidAddress (*this),
      0
    );
  return result;
}

void CosNaming::NamingContextExt::InvalidAddress::_raise (void) const
{
  throw *this;
}

void CosNaming::NamingContextExt::InvalidAddress::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNaming::NamingContextExt::InvalidAddress::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNaming::NamingContextExt::InvalidAddress::_tao_type (void) const
{
  return ::CosNaming::NamingContextExt::_tc_InvalidAddress;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosNaming_NamingContextExt_InvalidAddress = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNaming_NamingContextExt_InvalidAddress (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0",
  "InvalidAddress",
  _tao_fields_CosNaming_NamingContextExt_InvalidAddress,
  0);

::CORBA::TypeCode_ptr const CosNaming::NamingContextExt::_tc_InvalidAddress =
  &_tao_tc_CosNaming_NamingContextExt_InvalidAddress;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

char *
CosNaming::NamingContextExt::to_url (
  const char * addr,
  const char * sn)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContextExt_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContextExt_setup_collocation ();
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_addr (addr);
  TAO::Arg_Traits< char *>::in_arg_val _tao_sn (sn);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_addr,
      &_tao_sn
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_to_url_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0",
        CosNaming::NamingContextExt::InvalidAddress::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContextExt::_tc_InvalidAddress
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "to_url",
      6,
      this->the_TAO_NamingContextExt_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_to_url_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Object_ptr
CosNaming::NamingContextExt::resolve_str (
  const char * n)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_NamingContextExt_Proxy_Broker_ == 0)
    {
      CosNaming_NamingContextExt_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_n (n);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_n
    };

  static TAO::Exception_Data
  _tao_CosNaming_NamingContextExt_resolve_str_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0",
        CosNaming::NamingContext::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0",
        CosNaming::NamingContext::CannotProceed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_CannotProceed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0",
        CosNaming::NamingContext::InvalidName::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNaming::NamingContext::_tc_InvalidName
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "resolve_str",
      11,
      this->the_TAO_NamingContextExt_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNaming_NamingContextExt_resolve_str_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

CosNaming::NamingContextExt::NamingContextExt (void)
 : the_TAO_NamingContextExt_Proxy_Broker_ (0)
{
  this->CosNaming_NamingContextExt_setup_collocation ();
}

void
CosNaming::NamingContextExt::CosNaming_NamingContextExt_setup_collocation ()
{
  if (::CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_NamingContextExt_Proxy_Broker_ =
        ::CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNaming_NamingContext_setup_collocation ();
}

CosNaming::NamingContextExt::~NamingContextExt (void)
{}

void 
CosNaming::NamingContextExt::_tao_any_destructor (void *_tao_void_pointer)
{
  NamingContextExt *_tao_tmp_pointer =
    static_cast<NamingContextExt *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContextExt>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNaming/NamingContextExt:1.0",
        CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer
      );
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingContextExt>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNaming/NamingContextExt:1.0",
        CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer
      );
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_nil (void)
{
  return 0;
}

CosNaming::NamingContextExt_ptr
CosNaming::NamingContextExt::_duplicate (NamingContextExt_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNaming::NamingContextExt::_tao_release (NamingContextExt_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNaming::NamingContextExt::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/NamingContext:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/NamingContextExt:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNaming::NamingContextExt::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNaming/NamingContextExt:1.0";
}

::CORBA::Boolean
CosNaming::NamingContextExt::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNaming_NamingContextExt (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNaming/NamingContextExt:1.0",
    "NamingContextExt");
  

namespace CosNaming
{
  ::CORBA::TypeCode_ptr const _tc_NamingContextExt =
    &_tao_tc_CosNaming_NamingContextExt;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NameComponent &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNaming::NameComponent *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNaming::NameComponent>::insert_copy (
          _tao_any,
          ::CosNaming::NameComponent::_tao_any_destructor,
          ::CosNaming::_tc_NameComponent,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNaming::NameComponent *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NameComponent>::insert (
        _tao_any,
        ::CosNaming::NameComponent::_tao_any_destructor,
        ::CosNaming::_tc_NameComponent,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NameComponent *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NameComponent *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NameComponent *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NameComponent>::extract (
          _tao_any,
          ::CosNaming::NameComponent::_tao_any_destructor,
          ::CosNaming::_tc_NameComponent,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NameComponent &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNaming::NameComponent *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNaming::NameComponent>::insert_copy (
        _tao_any,
        CosNaming::NameComponent::_tao_any_destructor,
        CosNaming::_tc_NameComponent,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NameComponent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NameComponent>::insert (
      _tao_any,
      CosNaming::NameComponent::_tao_any_destructor,
      CosNaming::_tc_NameComponent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NameComponent *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NameComponent *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NameComponent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NameComponent>::extract (
        _tao_any,
        CosNaming::NameComponent::_tao_any_destructor,
        CosNaming::_tc_NameComponent,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::Name &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNaming::Name *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNaming::Name>::insert_copy (
          _tao_any,
          ::CosNaming::Name::_tao_any_destructor,
          ::CosNaming::_tc_Name,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::Name *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::Name>::insert (
        _tao_any,
        ::CosNaming::Name::_tao_any_destructor,
        ::CosNaming::_tc_Name,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::Name *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::Name *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::Name *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::Name>::extract (
          _tao_any,
          ::CosNaming::Name::_tao_any_destructor,
          ::CosNaming::_tc_Name,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::Name &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNaming::Name *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNaming::Name>::insert_copy (
        _tao_any,
        CosNaming::Name::_tao_any_destructor,
        CosNaming::_tc_Name,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::Name *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::Name>::insert (
      _tao_any,
      CosNaming::Name::_tao_any_destructor,
      CosNaming::_tc_Name,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::Name *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::Name *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::Name *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::Name>::extract (
        _tao_any,
        CosNaming::Name::_tao_any_destructor,
        CosNaming::_tc_Name,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::BindingType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNaming::BindingType>::insert (
        _tao_any,
        ::CosNaming::_tc_BindingType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::BindingType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNaming::BindingType>::extract (
          _tao_any,
          ::CosNaming::_tc_BindingType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::BindingType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNaming::BindingType>::insert (
      _tao_any,
      CosNaming::_tc_BindingType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::BindingType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNaming::BindingType>::extract (
        _tao_any,
        CosNaming::_tc_BindingType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::Binding &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNaming::Binding *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNaming::Binding>::insert_copy (
          _tao_any,
          ::CosNaming::Binding::_tao_any_destructor,
          ::CosNaming::_tc_Binding,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNaming::Binding *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::Binding>::insert (
        _tao_any,
        ::CosNaming::Binding::_tao_any_destructor,
        ::CosNaming::_tc_Binding,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::Binding *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::Binding *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::Binding *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::Binding>::extract (
          _tao_any,
          ::CosNaming::Binding::_tao_any_destructor,
          ::CosNaming::_tc_Binding,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::Binding &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNaming::Binding *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNaming::Binding>::insert_copy (
        _tao_any,
        CosNaming::Binding::_tao_any_destructor,
        CosNaming::_tc_Binding,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::Binding *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::Binding>::insert (
      _tao_any,
      CosNaming::Binding::_tao_any_destructor,
      CosNaming::_tc_Binding,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::Binding *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::Binding *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::Binding *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::Binding>::extract (
        _tao_any,
        CosNaming::Binding::_tao_any_destructor,
        CosNaming::_tc_Binding,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::BindingList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNaming::BindingList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNaming::BindingList>::insert_copy (
          _tao_any,
          ::CosNaming::BindingList::_tao_any_destructor,
          ::CosNaming::_tc_BindingList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::BindingList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::BindingList>::insert (
        _tao_any,
        ::CosNaming::BindingList::_tao_any_destructor,
        ::CosNaming::_tc_BindingList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::BindingList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::BindingList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::BindingList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::BindingList>::extract (
          _tao_any,
          ::CosNaming::BindingList::_tao_any_destructor,
          ::CosNaming::_tc_BindingList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::BindingList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNaming::BindingList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNaming::BindingList>::insert_copy (
        _tao_any,
        CosNaming::BindingList::_tao_any_destructor,
        CosNaming::_tc_BindingList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::BindingList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::BindingList>::insert (
      _tao_any,
      CosNaming::BindingList::_tao_any_destructor,
      CosNaming::_tc_BindingList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::BindingList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::BindingList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::BindingList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::BindingList>::extract (
        _tao_any,
        CosNaming::BindingList::_tao_any_destructor,
        CosNaming::_tc_BindingList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNaming::NamingContext>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NamingContext_ptr _tao_elem)
  {
    NamingContext_ptr _tao_objptr =
      NamingContext::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NamingContext_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<NamingContext>::insert (
        _tao_any,
        NamingContext::_tao_any_destructor,
        _tc_NamingContext,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NamingContext_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<NamingContext>::extract (
          _tao_any,
          NamingContext::_tao_any_destructor,
          _tc_NamingContext,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext_ptr _tao_elem)
{
  CosNaming::NamingContext_ptr _tao_objptr =
    CosNaming::NamingContext::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNaming::NamingContext>::insert (
      _tao_any,
      CosNaming::NamingContext::_tao_any_destructor,
      CosNaming::_tc_NamingContext,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNaming::NamingContext>::extract (
        _tao_any,
        CosNaming::NamingContext::_tao_any_destructor,
        CosNaming::_tc_NamingContext,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::NotFoundReason _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNaming::NamingContext::NotFoundReason>::insert (
        _tao_any,
        ::CosNaming::NamingContext::_tc_NotFoundReason,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::NotFoundReason &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNaming::NamingContext::NotFoundReason>::extract (
          _tao_any,
          ::CosNaming::NamingContext::_tc_NotFoundReason,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::NotFoundReason _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNaming::NamingContext::NotFoundReason>::insert (
      _tao_any,
      CosNaming::NamingContext::_tc_NotFoundReason,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::NotFoundReason &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNaming::NamingContext::NotFoundReason>::extract (
        _tao_any,
        CosNaming::NamingContext::_tc_NotFoundReason,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNaming::NamingContext::NotFound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::NotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::NotFound>::insert_copy (
        _tao_any,
        ::CosNaming::NamingContext::NotFound::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_NotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::NotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::NotFound>::insert (
        _tao_any,
        ::CosNaming::NamingContext::NotFound::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_NotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::NotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NamingContext::NotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::NotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::NotFound>::extract (
          _tao_any,
          ::CosNaming::NamingContext::NotFound::_tao_any_destructor,
          ::CosNaming::NamingContext::_tc_NotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::NotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::NotFound>::insert_copy (
      _tao_any,
      CosNaming::NamingContext::NotFound::_tao_any_destructor,
      CosNaming::NamingContext::_tc_NotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::NotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::NotFound>::insert (
      _tao_any,
      CosNaming::NamingContext::NotFound::_tao_any_destructor,
      CosNaming::NamingContext::_tc_NotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::NotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NamingContext::NotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::NotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NamingContext::NotFound>::extract (
        _tao_any,
        CosNaming::NamingContext::NotFound::_tao_any_destructor,
        CosNaming::NamingContext::_tc_NotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNaming::NamingContext::CannotProceed>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::CannotProceed &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::CannotProceed>::insert_copy (
        _tao_any,
        ::CosNaming::NamingContext::CannotProceed::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_CannotProceed,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::CannotProceed *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::CannotProceed>::insert (
        _tao_any,
        ::CosNaming::NamingContext::CannotProceed::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_CannotProceed,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::CannotProceed *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NamingContext::CannotProceed *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::CannotProceed *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::CannotProceed>::extract (
          _tao_any,
          ::CosNaming::NamingContext::CannotProceed::_tao_any_destructor,
          ::CosNaming::NamingContext::_tc_CannotProceed,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::CannotProceed &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::CannotProceed>::insert_copy (
      _tao_any,
      CosNaming::NamingContext::CannotProceed::_tao_any_destructor,
      CosNaming::NamingContext::_tc_CannotProceed,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::CannotProceed *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::CannotProceed>::insert (
      _tao_any,
      CosNaming::NamingContext::CannotProceed::_tao_any_destructor,
      CosNaming::NamingContext::_tc_CannotProceed,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::CannotProceed *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NamingContext::CannotProceed *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::CannotProceed *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NamingContext::CannotProceed>::extract (
        _tao_any,
        CosNaming::NamingContext::CannotProceed::_tao_any_destructor,
        CosNaming::NamingContext::_tc_CannotProceed,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNaming::NamingContext::InvalidName>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::InvalidName &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::InvalidName>::insert_copy (
        _tao_any,
        ::CosNaming::NamingContext::InvalidName::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_InvalidName,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::InvalidName *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::InvalidName>::insert (
        _tao_any,
        ::CosNaming::NamingContext::InvalidName::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_InvalidName,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::InvalidName *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NamingContext::InvalidName *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::InvalidName *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::InvalidName>::extract (
          _tao_any,
          ::CosNaming::NamingContext::InvalidName::_tao_any_destructor,
          ::CosNaming::NamingContext::_tc_InvalidName,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::InvalidName &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::InvalidName>::insert_copy (
      _tao_any,
      CosNaming::NamingContext::InvalidName::_tao_any_destructor,
      CosNaming::NamingContext::_tc_InvalidName,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::InvalidName *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::InvalidName>::insert (
      _tao_any,
      CosNaming::NamingContext::InvalidName::_tao_any_destructor,
      CosNaming::NamingContext::_tc_InvalidName,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::InvalidName *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NamingContext::InvalidName *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::InvalidName *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NamingContext::InvalidName>::extract (
        _tao_any,
        CosNaming::NamingContext::InvalidName::_tao_any_destructor,
        CosNaming::NamingContext::_tc_InvalidName,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNaming::NamingContext::AlreadyBound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::AlreadyBound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::AlreadyBound>::insert_copy (
        _tao_any,
        ::CosNaming::NamingContext::AlreadyBound::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_AlreadyBound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::AlreadyBound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::AlreadyBound>::insert (
        _tao_any,
        ::CosNaming::NamingContext::AlreadyBound::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_AlreadyBound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::AlreadyBound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NamingContext::AlreadyBound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::AlreadyBound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::AlreadyBound>::extract (
          _tao_any,
          ::CosNaming::NamingContext::AlreadyBound::_tao_any_destructor,
          ::CosNaming::NamingContext::_tc_AlreadyBound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::AlreadyBound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::AlreadyBound>::insert_copy (
      _tao_any,
      CosNaming::NamingContext::AlreadyBound::_tao_any_destructor,
      CosNaming::NamingContext::_tc_AlreadyBound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::AlreadyBound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::AlreadyBound>::insert (
      _tao_any,
      CosNaming::NamingContext::AlreadyBound::_tao_any_destructor,
      CosNaming::NamingContext::_tc_AlreadyBound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::AlreadyBound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NamingContext::AlreadyBound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::AlreadyBound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NamingContext::AlreadyBound>::extract (
        _tao_any,
        CosNaming::NamingContext::AlreadyBound::_tao_any_destructor,
        CosNaming::NamingContext::_tc_AlreadyBound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNaming::NamingContext::NotEmpty>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::NotEmpty &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::NotEmpty>::insert_copy (
        _tao_any,
        ::CosNaming::NamingContext::NotEmpty::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_NotEmpty,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::NotEmpty *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::NotEmpty>::insert (
        _tao_any,
        ::CosNaming::NamingContext::NotEmpty::_tao_any_destructor,
        ::CosNaming::NamingContext::_tc_NotEmpty,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContext::NotEmpty *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NamingContext::NotEmpty *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContext::NotEmpty *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NamingContext::NotEmpty>::extract (
          _tao_any,
          ::CosNaming::NamingContext::NotEmpty::_tao_any_destructor,
          ::CosNaming::NamingContext::_tc_NotEmpty,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::NotEmpty &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::NotEmpty>::insert_copy (
      _tao_any,
      CosNaming::NamingContext::NotEmpty::_tao_any_destructor,
      CosNaming::NamingContext::_tc_NotEmpty,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::NotEmpty *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContext::NotEmpty>::insert (
      _tao_any,
      CosNaming::NamingContext::NotEmpty::_tao_any_destructor,
      CosNaming::NamingContext::_tc_NotEmpty,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContext::NotEmpty *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NamingContext::NotEmpty *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NamingContext::NotEmpty *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NamingContext::NotEmpty>::extract (
        _tao_any,
        CosNaming::NamingContext::NotEmpty::_tao_any_destructor,
        CosNaming::NamingContext::_tc_NotEmpty,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNaming::BindingIterator>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BindingIterator_ptr _tao_elem)
  {
    BindingIterator_ptr _tao_objptr =
      BindingIterator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      BindingIterator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<BindingIterator>::insert (
        _tao_any,
        BindingIterator::_tao_any_destructor,
        _tc_BindingIterator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      BindingIterator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<BindingIterator>::extract (
          _tao_any,
          BindingIterator::_tao_any_destructor,
          _tc_BindingIterator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::BindingIterator_ptr _tao_elem)
{
  CosNaming::BindingIterator_ptr _tao_objptr =
    CosNaming::BindingIterator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::BindingIterator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNaming::BindingIterator>::insert (
      _tao_any,
      CosNaming::BindingIterator::_tao_any_destructor,
      CosNaming::_tc_BindingIterator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::BindingIterator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNaming::BindingIterator>::extract (
        _tao_any,
        CosNaming::BindingIterator::_tao_any_destructor,
        CosNaming::_tc_BindingIterator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNaming::NamingContextExt>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NamingContextExt_ptr _tao_elem)
  {
    NamingContextExt_ptr _tao_objptr =
      NamingContextExt::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NamingContextExt_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<NamingContextExt>::insert (
        _tao_any,
        NamingContextExt::_tao_any_destructor,
        _tc_NamingContextExt,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NamingContextExt_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<NamingContextExt>::extract (
          _tao_any,
          NamingContextExt::_tao_any_destructor,
          _tc_NamingContextExt,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContextExt_ptr _tao_elem)
{
  CosNaming::NamingContextExt_ptr _tao_objptr =
    CosNaming::NamingContextExt::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContextExt_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNaming::NamingContextExt>::insert (
      _tao_any,
      CosNaming::NamingContextExt::_tao_any_destructor,
      CosNaming::_tc_NamingContextExt,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContextExt_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNaming::NamingContextExt>::extract (
        _tao_any,
        CosNaming::NamingContextExt::_tao_any_destructor,
        CosNaming::_tc_NamingContextExt,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNaming::NamingContextExt::InvalidAddress>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContextExt::InvalidAddress &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContextExt::InvalidAddress>::insert_copy (
        _tao_any,
        ::CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor,
        ::CosNaming::NamingContextExt::_tc_InvalidAddress,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContextExt::InvalidAddress *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNaming::NamingContextExt::InvalidAddress>::insert (
        _tao_any,
        ::CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor,
        ::CosNaming::NamingContextExt::_tc_InvalidAddress,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNaming::NamingContextExt::InvalidAddress *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNaming::NamingContextExt::InvalidAddress *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNaming::NamingContextExt::InvalidAddress *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNaming::NamingContextExt::InvalidAddress>::extract (
          _tao_any,
          ::CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor,
          ::CosNaming::NamingContextExt::_tc_InvalidAddress,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNaming::NamingContextExt::InvalidAddress &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContextExt::InvalidAddress>::insert_copy (
      _tao_any,
      CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor,
      CosNaming::NamingContextExt::_tc_InvalidAddress,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNaming::NamingContextExt::InvalidAddress *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNaming::NamingContextExt::InvalidAddress>::insert (
      _tao_any,
      CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor,
      CosNaming::NamingContextExt::_tc_InvalidAddress,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNaming::NamingContextExt::InvalidAddress *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNaming::NamingContextExt::InvalidAddress *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNaming::NamingContextExt::InvalidAddress *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNaming::NamingContextExt::InvalidAddress>::extract (
        _tao_any,
        CosNaming::NamingContextExt::InvalidAddress::_tao_any_destructor,
        CosNaming::NamingContextExt::_tc_InvalidAddress,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NameComponent &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.kind.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NameComponent &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.kind.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNaming_Name_CPP_
#define _TAO_CDR_OP_CosNaming_Name_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::Name &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::Name &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNaming_Name_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNaming::BindingType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNaming::BindingType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNaming::BindingType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::Binding &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.binding_name) &&
    (strm << _tao_aggregate.binding_type);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::Binding &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.binding_name) &&
    (strm >> _tao_aggregate.binding_type);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNaming_BindingList_CPP_
#define _TAO_CDR_OP_CosNaming_BindingList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::BindingList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::BindingList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNaming_BindingList_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNaming::NamingContext::NotFoundReason _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNaming::NamingContext::NotFoundReason & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNaming::NamingContext::NotFoundReason> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::NotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.why) &&
        (strm << _tao_aggregate.rest_of_name)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContext::NotFound &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.why) &&
    (strm >> _tao_aggregate.rest_of_name)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::CannotProceed &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        ::CORBA::Object::marshal (
            _tao_aggregate.cxt.in (),
            strm
          ) &&
        (strm << _tao_aggregate.rest_of_name)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContext::CannotProceed &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.cxt.out ()) &&
    (strm >> _tao_aggregate.rest_of_name)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::InvalidName &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContext::InvalidName&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::AlreadyBound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContext::AlreadyBound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext::NotEmpty &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContext::NotEmpty&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContext_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContext_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNaming::NamingContext RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::BindingIterator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::BindingIterator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNaming::BindingIterator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContextExt::InvalidAddress &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosNaming::NamingContextExt::InvalidAddress&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::NamingContextExt_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::NamingContextExt_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNaming::NamingContextExt RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


