// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "NotifyMonitoringExtC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "NotifyMonitoringExtC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

NotifyMonitoringExt::NameAlreadyUsed::NameAlreadyUsed (void)
  : ::CORBA::UserException (
        "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
        "NameAlreadyUsed"
      )
{
}

NotifyMonitoringExt::NameAlreadyUsed::~NameAlreadyUsed (void)
{
}

NotifyMonitoringExt::NameAlreadyUsed::NameAlreadyUsed (const ::NotifyMonitoringExt::NameAlreadyUsed &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

NotifyMonitoringExt::NameAlreadyUsed&
NotifyMonitoringExt::NameAlreadyUsed::operator= (const ::NotifyMonitoringExt::NameAlreadyUsed &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor (void *_tao_void_pointer)
{
  NameAlreadyUsed *_tao_tmp_pointer =
    static_cast<NameAlreadyUsed *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

NotifyMonitoringExt::NameAlreadyUsed *
NotifyMonitoringExt::NameAlreadyUsed::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NameAlreadyUsed *> (_tao_excp);
}

const NotifyMonitoringExt::NameAlreadyUsed *
NotifyMonitoringExt::NameAlreadyUsed::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NameAlreadyUsed *> (_tao_excp);
}

::CORBA::Exception *NotifyMonitoringExt::NameAlreadyUsed::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::NotifyMonitoringExt::NameAlreadyUsed, 0);
  return retval;
}

::CORBA::Exception *
NotifyMonitoringExt::NameAlreadyUsed::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::NotifyMonitoringExt::NameAlreadyUsed (*this),
      0
    );
  return result;
}

void NotifyMonitoringExt::NameAlreadyUsed::_raise (void) const
{
  throw *this;
}

void NotifyMonitoringExt::NameAlreadyUsed::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void NotifyMonitoringExt::NameAlreadyUsed::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr NotifyMonitoringExt::NameAlreadyUsed::_tao_type (void) const
{
  return ::NotifyMonitoringExt::_tc_NameAlreadyUsed;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_NotifyMonitoringExt_NameAlreadyUsed = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_NotifyMonitoringExt_NameAlreadyUsed (
  ::CORBA::tk_except,
  "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
  "NameAlreadyUsed",
  _tao_fields_NotifyMonitoringExt_NameAlreadyUsed,
  0);


namespace NotifyMonitoringExt
{
  ::CORBA::TypeCode_ptr const _tc_NameAlreadyUsed =
    &_tao_tc_NotifyMonitoringExt_NameAlreadyUsed;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

NotifyMonitoringExt::NameMapError::NameMapError (void)
  : ::CORBA::UserException (
        "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
        "NameMapError"
      )
{
}

NotifyMonitoringExt::NameMapError::~NameMapError (void)
{
}

NotifyMonitoringExt::NameMapError::NameMapError (const ::NotifyMonitoringExt::NameMapError &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

NotifyMonitoringExt::NameMapError&
NotifyMonitoringExt::NameMapError::operator= (const ::NotifyMonitoringExt::NameMapError &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void NotifyMonitoringExt::NameMapError::_tao_any_destructor (void *_tao_void_pointer)
{
  NameMapError *_tao_tmp_pointer =
    static_cast<NameMapError *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

NotifyMonitoringExt::NameMapError *
NotifyMonitoringExt::NameMapError::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NameMapError *> (_tao_excp);
}

const NotifyMonitoringExt::NameMapError *
NotifyMonitoringExt::NameMapError::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NameMapError *> (_tao_excp);
}

::CORBA::Exception *NotifyMonitoringExt::NameMapError::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::NotifyMonitoringExt::NameMapError, 0);
  return retval;
}

::CORBA::Exception *
NotifyMonitoringExt::NameMapError::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::NotifyMonitoringExt::NameMapError (*this),
      0
    );
  return result;
}

void NotifyMonitoringExt::NameMapError::_raise (void) const
{
  throw *this;
}

void NotifyMonitoringExt::NameMapError::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void NotifyMonitoringExt::NameMapError::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr NotifyMonitoringExt::NameMapError::_tao_type (void) const
{
  return ::NotifyMonitoringExt::_tc_NameMapError;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_NotifyMonitoringExt_NameMapError = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_NotifyMonitoringExt_NameMapError (
  ::CORBA::tk_except,
  "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
  "NameMapError",
  _tao_fields_NotifyMonitoringExt_NameMapError,
  0);


namespace NotifyMonitoringExt
{
  ::CORBA::TypeCode_ptr const _tc_NameMapError =
    &_tao_tc_NotifyMonitoringExt_NameMapError;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyMonitoringExt::SupplierAdmin.

NotifyMonitoringExt::SupplierAdmin_ptr
TAO::Objref_Traits<NotifyMonitoringExt::SupplierAdmin>::duplicate (
    NotifyMonitoringExt::SupplierAdmin_ptr p)
{
  return NotifyMonitoringExt::SupplierAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyMonitoringExt::SupplierAdmin>::release (
    NotifyMonitoringExt::SupplierAdmin_ptr p)
{
  ::CORBA::release (p);
}

NotifyMonitoringExt::SupplierAdmin_ptr
TAO::Objref_Traits<NotifyMonitoringExt::SupplierAdmin>::nil (void)
{
  return NotifyMonitoringExt::SupplierAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyMonitoringExt::SupplierAdmin>::marshal (
    const NotifyMonitoringExt::SupplierAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyConsumer_ptr
NotifyMonitoringExt::SupplierAdmin::obtain_named_notification_push_consumer (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id,
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      NotifyMonitoringExt_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_NotifyMonitoringExt_SupplierAdmin_obtain_named_notification_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
        NotifyMonitoringExt::NameAlreadyUsed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameAlreadyUsed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
        NotifyMonitoringExt::NameMapError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameMapError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "obtain_named_notification_push_consumer",
      39,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyMonitoringExt_SupplierAdmin_obtain_named_notification_push_consumer_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

NotifyMonitoringExt::SupplierAdmin::SupplierAdmin (void)
 : the_TAO_SupplierAdmin_Proxy_Broker_ (0)
{
  this->NotifyMonitoringExt_SupplierAdmin_setup_collocation ();
}

void
NotifyMonitoringExt::SupplierAdmin::NotifyMonitoringExt_SupplierAdmin_setup_collocation ()
{
  if (::NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SupplierAdmin_Proxy_Broker_ =
        ::NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->NotifyExt_SupplierAdmin_setup_collocation ();
}

NotifyMonitoringExt::SupplierAdmin::~SupplierAdmin (void)
{}

void 
NotifyMonitoringExt::SupplierAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  SupplierAdmin *_tao_tmp_pointer =
    static_cast<SupplierAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyMonitoringExt::SupplierAdmin_ptr
NotifyMonitoringExt::SupplierAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0",
        NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::SupplierAdmin_ptr
NotifyMonitoringExt::SupplierAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0",
        NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::SupplierAdmin_ptr
NotifyMonitoringExt::SupplierAdmin::_nil (void)
{
  return 0;
}

NotifyMonitoringExt::SupplierAdmin_ptr
NotifyMonitoringExt::SupplierAdmin::_duplicate (SupplierAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyMonitoringExt::SupplierAdmin::_tao_release (SupplierAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyMonitoringExt::SupplierAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyMonitoringExt::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0";
}

::CORBA::Boolean
NotifyMonitoringExt::SupplierAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyMonitoringExt_SupplierAdmin (
    ::CORBA::tk_objref,
    "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0",
    "SupplierAdmin");
  

namespace NotifyMonitoringExt
{
  ::CORBA::TypeCode_ptr const _tc_SupplierAdmin =
    &_tao_tc_NotifyMonitoringExt_SupplierAdmin;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyMonitoringExt::ConsumerAdmin.

NotifyMonitoringExt::ConsumerAdmin_ptr
TAO::Objref_Traits<NotifyMonitoringExt::ConsumerAdmin>::duplicate (
    NotifyMonitoringExt::ConsumerAdmin_ptr p)
{
  return NotifyMonitoringExt::ConsumerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyMonitoringExt::ConsumerAdmin>::release (
    NotifyMonitoringExt::ConsumerAdmin_ptr p)
{
  ::CORBA::release (p);
}

NotifyMonitoringExt::ConsumerAdmin_ptr
TAO::Objref_Traits<NotifyMonitoringExt::ConsumerAdmin>::nil (void)
{
  return NotifyMonitoringExt::ConsumerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyMonitoringExt::ConsumerAdmin>::marshal (
    const NotifyMonitoringExt::ConsumerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxySupplier_ptr
NotifyMonitoringExt::ConsumerAdmin::obtain_named_notification_push_supplier (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id,
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      NotifyMonitoringExt_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_NotifyMonitoringExt_ConsumerAdmin_obtain_named_notification_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
        NotifyMonitoringExt::NameAlreadyUsed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameAlreadyUsed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
        NotifyMonitoringExt::NameMapError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameMapError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "obtain_named_notification_push_supplier",
      39,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyMonitoringExt_ConsumerAdmin_obtain_named_notification_push_supplier_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

NotifyMonitoringExt::ConsumerAdmin::ConsumerAdmin (void)
 : the_TAO_ConsumerAdmin_Proxy_Broker_ (0)
{
  this->NotifyMonitoringExt_ConsumerAdmin_setup_collocation ();
}

void
NotifyMonitoringExt::ConsumerAdmin::NotifyMonitoringExt_ConsumerAdmin_setup_collocation ()
{
  if (::NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ConsumerAdmin_Proxy_Broker_ =
        ::NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->NotifyExt_ConsumerAdmin_setup_collocation ();
}

NotifyMonitoringExt::ConsumerAdmin::~ConsumerAdmin (void)
{}

void 
NotifyMonitoringExt::ConsumerAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  ConsumerAdmin *_tao_tmp_pointer =
    static_cast<ConsumerAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyMonitoringExt::ConsumerAdmin_ptr
NotifyMonitoringExt::ConsumerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0",
        NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::ConsumerAdmin_ptr
NotifyMonitoringExt::ConsumerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0",
        NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::ConsumerAdmin_ptr
NotifyMonitoringExt::ConsumerAdmin::_nil (void)
{
  return 0;
}

NotifyMonitoringExt::ConsumerAdmin_ptr
NotifyMonitoringExt::ConsumerAdmin::_duplicate (ConsumerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyMonitoringExt::ConsumerAdmin::_tao_release (ConsumerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyMonitoringExt::ConsumerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyMonitoringExt::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0";
}

::CORBA::Boolean
NotifyMonitoringExt::ConsumerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyMonitoringExt_ConsumerAdmin (
    ::CORBA::tk_objref,
    "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0",
    "ConsumerAdmin");
  

namespace NotifyMonitoringExt
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerAdmin =
    &_tao_tc_NotifyMonitoringExt_ConsumerAdmin;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyMonitoringExt::EventChannel.

NotifyMonitoringExt::EventChannel_ptr
TAO::Objref_Traits<NotifyMonitoringExt::EventChannel>::duplicate (
    NotifyMonitoringExt::EventChannel_ptr p)
{
  return NotifyMonitoringExt::EventChannel::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyMonitoringExt::EventChannel>::release (
    NotifyMonitoringExt::EventChannel_ptr p)
{
  ::CORBA::release (p);
}

NotifyMonitoringExt::EventChannel_ptr
TAO::Objref_Traits<NotifyMonitoringExt::EventChannel>::nil (void)
{
  return NotifyMonitoringExt::EventChannel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyMonitoringExt::EventChannel>::marshal (
    const NotifyMonitoringExt::EventChannel_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ConsumerAdmin_ptr
NotifyMonitoringExt::EventChannel::named_new_for_consumers (
  ::CosNotifyChannelAdmin::InterFilterGroupOperator op,
  ::CosNotifyChannelAdmin::AdminID_out id,
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      NotifyMonitoringExt_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op (op);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_id (id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_op,
      &_tao_id,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_NotifyMonitoringExt_EventChannel_named_new_for_consumers_exceptiondata [] = 
    {
      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
        NotifyMonitoringExt::NameAlreadyUsed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameAlreadyUsed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
        NotifyMonitoringExt::NameMapError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameMapError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "named_new_for_consumers",
      23,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyMonitoringExt_EventChannel_named_new_for_consumers_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::SupplierAdmin_ptr
NotifyMonitoringExt::EventChannel::named_new_for_suppliers (
  ::CosNotifyChannelAdmin::InterFilterGroupOperator op,
  ::CosNotifyChannelAdmin::AdminID_out id,
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      NotifyMonitoringExt_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op (op);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_id (id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_op,
      &_tao_id,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_NotifyMonitoringExt_EventChannel_named_new_for_suppliers_exceptiondata [] = 
    {
      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
        NotifyMonitoringExt::NameAlreadyUsed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameAlreadyUsed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
        NotifyMonitoringExt::NameMapError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameMapError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "named_new_for_suppliers",
      23,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyMonitoringExt_EventChannel_named_new_for_suppliers_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

NotifyMonitoringExt::EventChannel::EventChannel (void)
 : the_TAO_EventChannel_Proxy_Broker_ (0)
{
  this->NotifyMonitoringExt_EventChannel_setup_collocation ();
}

void
NotifyMonitoringExt::EventChannel::NotifyMonitoringExt_EventChannel_setup_collocation ()
{
  if (::NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannel_Proxy_Broker_ =
        ::NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_EventChannel_setup_collocation ();
}

NotifyMonitoringExt::EventChannel::~EventChannel (void)
{}

void 
NotifyMonitoringExt::EventChannel::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannel *_tao_tmp_pointer =
    static_cast<EventChannel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyMonitoringExt::EventChannel_ptr
NotifyMonitoringExt::EventChannel::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0",
        NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::EventChannel_ptr
NotifyMonitoringExt::EventChannel::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::unchecked_narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0",
        NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::EventChannel_ptr
NotifyMonitoringExt::EventChannel::_nil (void)
{
  return 0;
}

NotifyMonitoringExt::EventChannel_ptr
NotifyMonitoringExt::EventChannel::_duplicate (EventChannel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyMonitoringExt::EventChannel::_tao_release (EventChannel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyMonitoringExt::EventChannel::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyMonitoringExt::EventChannel::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0";
}

::CORBA::Boolean
NotifyMonitoringExt::EventChannel::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyMonitoringExt_EventChannel (
    ::CORBA::tk_objref,
    "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0",
    "EventChannel");
  

namespace NotifyMonitoringExt
{
  ::CORBA::TypeCode_ptr const _tc_EventChannel =
    &_tao_tc_NotifyMonitoringExt_EventChannel;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyMonitoringExt::EventChannelFactory.

NotifyMonitoringExt::EventChannelFactory_ptr
TAO::Objref_Traits<NotifyMonitoringExt::EventChannelFactory>::duplicate (
    NotifyMonitoringExt::EventChannelFactory_ptr p)
{
  return NotifyMonitoringExt::EventChannelFactory::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyMonitoringExt::EventChannelFactory>::release (
    NotifyMonitoringExt::EventChannelFactory_ptr p)
{
  ::CORBA::release (p);
}

NotifyMonitoringExt::EventChannelFactory_ptr
TAO::Objref_Traits<NotifyMonitoringExt::EventChannelFactory>::nil (void)
{
  return NotifyMonitoringExt::EventChannelFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyMonitoringExt::EventChannelFactory>::marshal (
    const NotifyMonitoringExt::EventChannelFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::EventChannel_ptr
NotifyMonitoringExt::EventChannelFactory::create_named_channel (
  const ::CosNotification::QoSProperties & initial_qos,
  const ::CosNotification::AdminProperties & initial_admin,
  ::CosNotifyChannelAdmin::ChannelID_out id,
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFactory_Proxy_Broker_ == 0)
    {
      NotifyMonitoringExt_EventChannelFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos (initial_qos);
  TAO::Arg_Traits< ::CosNotification::AdminProperties>::in_arg_val _tao_initial_admin (initial_admin);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_id (id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_initial_qos,
      &_tao_initial_admin,
      &_tao_id,
      &_tao_name
    };

  static TAO::Exception_Data
  _tao_NotifyMonitoringExt_EventChannelFactory_create_named_channel_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotification/UnsupportedAdmin:1.0",
        CosNotification::UnsupportedAdmin::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedAdmin
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameAlreadyUsed:1.0",
        NotifyMonitoringExt::NameAlreadyUsed::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameAlreadyUsed
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:sandia.gov/NotifyMonitoringExt/NameMapError:1.0",
        NotifyMonitoringExt::NameMapError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , NotifyMonitoringExt::_tc_NameMapError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "create_named_channel",
      20,
      this->the_TAO_EventChannelFactory_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyMonitoringExt_EventChannelFactory_create_named_channel_exceptiondata,
      4
    );

  return _tao_retval.retn ();
}

NotifyMonitoringExt::EventChannelFactory::EventChannelFactory (void)
 : the_TAO_EventChannelFactory_Proxy_Broker_ (0)
{
  this->NotifyMonitoringExt_EventChannelFactory_setup_collocation ();
}

void
NotifyMonitoringExt::EventChannelFactory::NotifyMonitoringExt_EventChannelFactory_setup_collocation ()
{
  if (::NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannelFactory_Proxy_Broker_ =
        ::NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->NotifyExt_EventChannelFactory_setup_collocation ();
}

NotifyMonitoringExt::EventChannelFactory::~EventChannelFactory (void)
{}

void 
NotifyMonitoringExt::EventChannelFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannelFactory *_tao_tmp_pointer =
    static_cast<EventChannelFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyMonitoringExt::EventChannelFactory_ptr
NotifyMonitoringExt::EventChannelFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFactory>::narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0",
        NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::EventChannelFactory_ptr
NotifyMonitoringExt::EventChannelFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFactory>::unchecked_narrow (
        _tao_objref,
        "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0",
        NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

NotifyMonitoringExt::EventChannelFactory_ptr
NotifyMonitoringExt::EventChannelFactory::_nil (void)
{
  return 0;
}

NotifyMonitoringExt::EventChannelFactory_ptr
NotifyMonitoringExt::EventChannelFactory::_duplicate (EventChannelFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyMonitoringExt::EventChannelFactory::_tao_release (EventChannelFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyMonitoringExt::EventChannelFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionRegistry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyMonitoringExt::EventChannelFactory::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0";
}

::CORBA::Boolean
NotifyMonitoringExt::EventChannelFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyMonitoringExt_EventChannelFactory (
    ::CORBA::tk_objref,
    "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0",
    "EventChannelFactory");
  

namespace NotifyMonitoringExt
{
  ::CORBA::TypeCode_ptr const _tc_EventChannelFactory =
    &_tao_tc_NotifyMonitoringExt_EventChannelFactory;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<NotifyMonitoringExt::NameAlreadyUsed>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyMonitoringExt
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::NotifyMonitoringExt::NameAlreadyUsed &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyMonitoringExt::NameAlreadyUsed>::insert_copy (
        _tao_any,
        ::NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor,
        ::NotifyMonitoringExt::_tc_NameAlreadyUsed,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::NotifyMonitoringExt::NameAlreadyUsed *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyMonitoringExt::NameAlreadyUsed>::insert (
        _tao_any,
        ::NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor,
        ::NotifyMonitoringExt::_tc_NameAlreadyUsed,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyMonitoringExt::NameAlreadyUsed *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::NotifyMonitoringExt::NameAlreadyUsed *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::NotifyMonitoringExt::NameAlreadyUsed *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::NotifyMonitoringExt::NameAlreadyUsed>::extract (
          _tao_any,
          ::NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor,
          ::NotifyMonitoringExt::_tc_NameAlreadyUsed,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const NotifyMonitoringExt::NameAlreadyUsed &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyMonitoringExt::NameAlreadyUsed>::insert_copy (
      _tao_any,
      NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor,
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::NameAlreadyUsed *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyMonitoringExt::NameAlreadyUsed>::insert (
      _tao_any,
      NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor,
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::NameAlreadyUsed *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const NotifyMonitoringExt::NameAlreadyUsed *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const NotifyMonitoringExt::NameAlreadyUsed *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<NotifyMonitoringExt::NameAlreadyUsed>::extract (
        _tao_any,
        NotifyMonitoringExt::NameAlreadyUsed::_tao_any_destructor,
        NotifyMonitoringExt::_tc_NameAlreadyUsed,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<NotifyMonitoringExt::NameMapError>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyMonitoringExt
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::NotifyMonitoringExt::NameMapError &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyMonitoringExt::NameMapError>::insert_copy (
        _tao_any,
        ::NotifyMonitoringExt::NameMapError::_tao_any_destructor,
        ::NotifyMonitoringExt::_tc_NameMapError,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::NotifyMonitoringExt::NameMapError *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyMonitoringExt::NameMapError>::insert (
        _tao_any,
        ::NotifyMonitoringExt::NameMapError::_tao_any_destructor,
        ::NotifyMonitoringExt::_tc_NameMapError,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyMonitoringExt::NameMapError *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::NotifyMonitoringExt::NameMapError *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::NotifyMonitoringExt::NameMapError *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::NotifyMonitoringExt::NameMapError>::extract (
          _tao_any,
          ::NotifyMonitoringExt::NameMapError::_tao_any_destructor,
          ::NotifyMonitoringExt::_tc_NameMapError,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const NotifyMonitoringExt::NameMapError &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyMonitoringExt::NameMapError>::insert_copy (
      _tao_any,
      NotifyMonitoringExt::NameMapError::_tao_any_destructor,
      NotifyMonitoringExt::_tc_NameMapError,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::NameMapError *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyMonitoringExt::NameMapError>::insert (
      _tao_any,
      NotifyMonitoringExt::NameMapError::_tao_any_destructor,
      NotifyMonitoringExt::_tc_NameMapError,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::NameMapError *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const NotifyMonitoringExt::NameMapError *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const NotifyMonitoringExt::NameMapError *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<NotifyMonitoringExt::NameMapError>::extract (
        _tao_any,
        NotifyMonitoringExt::NameMapError::_tao_any_destructor,
        NotifyMonitoringExt::_tc_NameMapError,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyMonitoringExt::SupplierAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyMonitoringExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr _tao_elem)
  {
    SupplierAdmin_ptr _tao_objptr =
      SupplierAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SupplierAdmin>::insert (
        _tao_any,
        SupplierAdmin::_tao_any_destructor,
        _tc_SupplierAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SupplierAdmin>::extract (
          _tao_any,
          SupplierAdmin::_tao_any_destructor,
          _tc_SupplierAdmin,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::SupplierAdmin_ptr _tao_elem)
{
  NotifyMonitoringExt::SupplierAdmin_ptr _tao_objptr =
    NotifyMonitoringExt::SupplierAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::SupplierAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyMonitoringExt::SupplierAdmin>::insert (
      _tao_any,
      NotifyMonitoringExt::SupplierAdmin::_tao_any_destructor,
      NotifyMonitoringExt::_tc_SupplierAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::SupplierAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyMonitoringExt::SupplierAdmin>::extract (
        _tao_any,
        NotifyMonitoringExt::SupplierAdmin::_tao_any_destructor,
        NotifyMonitoringExt::_tc_SupplierAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyMonitoringExt::ConsumerAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyMonitoringExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr _tao_elem)
  {
    ConsumerAdmin_ptr _tao_objptr =
      ConsumerAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ConsumerAdmin>::insert (
        _tao_any,
        ConsumerAdmin::_tao_any_destructor,
        _tc_ConsumerAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ConsumerAdmin>::extract (
          _tao_any,
          ConsumerAdmin::_tao_any_destructor,
          _tc_ConsumerAdmin,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::ConsumerAdmin_ptr _tao_elem)
{
  NotifyMonitoringExt::ConsumerAdmin_ptr _tao_objptr =
    NotifyMonitoringExt::ConsumerAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::ConsumerAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyMonitoringExt::ConsumerAdmin>::insert (
      _tao_any,
      NotifyMonitoringExt::ConsumerAdmin::_tao_any_destructor,
      NotifyMonitoringExt::_tc_ConsumerAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::ConsumerAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyMonitoringExt::ConsumerAdmin>::extract (
        _tao_any,
        NotifyMonitoringExt::ConsumerAdmin::_tao_any_destructor,
        NotifyMonitoringExt::_tc_ConsumerAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyMonitoringExt::EventChannel>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyMonitoringExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr _tao_elem)
  {
    EventChannel_ptr _tao_objptr =
      EventChannel::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannel>::insert (
        _tao_any,
        EventChannel::_tao_any_destructor,
        _tc_EventChannel,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannel_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannel>::extract (
          _tao_any,
          EventChannel::_tao_any_destructor,
          _tc_EventChannel,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::EventChannel_ptr _tao_elem)
{
  NotifyMonitoringExt::EventChannel_ptr _tao_objptr =
    NotifyMonitoringExt::EventChannel::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::EventChannel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyMonitoringExt::EventChannel>::insert (
      _tao_any,
      NotifyMonitoringExt::EventChannel::_tao_any_destructor,
      NotifyMonitoringExt::_tc_EventChannel,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::EventChannel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyMonitoringExt::EventChannel>::extract (
        _tao_any,
        NotifyMonitoringExt::EventChannel::_tao_any_destructor,
        NotifyMonitoringExt::_tc_EventChannel,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyMonitoringExt::EventChannelFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyMonitoringExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr _tao_elem)
  {
    EventChannelFactory_ptr _tao_objptr =
      EventChannelFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannelFactory>::insert (
        _tao_any,
        EventChannelFactory::_tao_any_destructor,
        _tc_EventChannelFactory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannelFactory>::extract (
          _tao_any,
          EventChannelFactory::_tao_any_destructor,
          _tc_EventChannelFactory,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::EventChannelFactory_ptr _tao_elem)
{
  NotifyMonitoringExt::EventChannelFactory_ptr _tao_objptr =
    NotifyMonitoringExt::EventChannelFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::EventChannelFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyMonitoringExt::EventChannelFactory>::insert (
      _tao_any,
      NotifyMonitoringExt::EventChannelFactory::_tao_any_destructor,
      NotifyMonitoringExt::_tc_EventChannelFactory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyMonitoringExt::EventChannelFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyMonitoringExt::EventChannelFactory>::extract (
        _tao_any,
        NotifyMonitoringExt::EventChannelFactory::_tao_any_destructor,
        NotifyMonitoringExt::_tc_EventChannelFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyMonitoringExt::NameAlreadyUsed &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    NotifyMonitoringExt::NameAlreadyUsed&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyMonitoringExt::NameMapError &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    NotifyMonitoringExt::NameMapError&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyMonitoringExt::SupplierAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyMonitoringExt::SupplierAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyMonitoringExt::SupplierAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyMonitoringExt::ConsumerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyMonitoringExt::ConsumerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyMonitoringExt::ConsumerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyMonitoringExt::EventChannel_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyMonitoringExt::EventChannel_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyMonitoringExt::EventChannel RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyMonitoringExt::EventChannelFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyMonitoringExt::EventChannelFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyMonitoringExt::EventChannelFactory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



