// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_NOTIFY_MONITORCONTROLEXT_NOTIFYMONITORINGEXTS_FQ9OUJ_CPP_
#define _TAO_IDL_NOTIFY_MONITORCONTROLEXT_NOTIFYMONITORINGEXTS_FQ9OUJ_CPP_


#include "NotifyMonitoringExtS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "NotifyMonitoringExtS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyMonitoringExt_SupplierAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyMonitoringExt_SupplierAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyMonitoringExt_SupplierAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43,  0, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43,  0, 43,  1, 43, 43,
      0,  0, 43, 20, 43, 43, 43, 43, 10, 43,
     43,  0, 43, 43,  0,  0, 15, 43,  5, 43,
     43, 15, 43, 43, 43, 43, 43, 43,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyMonitoringExt_SupplierAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 27,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 42,
      MIN_HASH_VALUE = 6,
      MAX_HASH_VALUE = 42,
      HASH_VALUE_RANGE = 37,
      DUPLICATES = 4,
      WORDLIST_SIZE = 33
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyMonitoringExt::SupplierAdmin::_is_a_skel, 0},
      {"set_qos", &POA_NotifyMonitoringExt::SupplierAdmin::set_qos_skel, 0},
      {"_get_MyID", &POA_NotifyMonitoringExt::SupplierAdmin::_get_MyID_skel, 0},
      {"_interface", &POA_NotifyMonitoringExt::SupplierAdmin::_interface_skel, 0},
      {"add_filter", &POA_NotifyMonitoringExt::SupplierAdmin::add_filter_skel, 0},
      {"offer_change", &POA_NotifyMonitoringExt::SupplierAdmin::offer_change_skel, 0},
      {"remove_filter", &POA_NotifyMonitoringExt::SupplierAdmin::remove_filter_skel, 0},
      {"_repository_id", &POA_NotifyMonitoringExt::SupplierAdmin::_repository_id_skel, 0},
      {"_get_MyOperator", &POA_NotifyMonitoringExt::SupplierAdmin::_get_MyOperator_skel, 0},
      {"validate_qos", &POA_NotifyMonitoringExt::SupplierAdmin::validate_qos_skel, 0},
      {"remove_all_filters", &POA_NotifyMonitoringExt::SupplierAdmin::remove_all_filters_skel, 0},
      {"_get_pull_consumers", &POA_NotifyMonitoringExt::SupplierAdmin::_get_pull_consumers_skel, 0},
      {"_get_push_consumers", &POA_NotifyMonitoringExt::SupplierAdmin::_get_push_consumers_skel, 0},
      {"obtain_push_consumer", &POA_NotifyMonitoringExt::SupplierAdmin::obtain_push_consumer_skel, 0},
      {"obtain_pull_consumer", &POA_NotifyMonitoringExt::SupplierAdmin::obtain_pull_consumer_skel, 0},
      {"destroy", &POA_NotifyMonitoringExt::SupplierAdmin::destroy_skel, 0},
      {"_get_MyChannel", &POA_NotifyMonitoringExt::SupplierAdmin::_get_MyChannel_skel, 0},
      {"_component", &POA_NotifyMonitoringExt::SupplierAdmin::_component_skel, 0},
      {"get_qos", &POA_NotifyMonitoringExt::SupplierAdmin::get_qos_skel, 0},
      {"_non_existent", &POA_NotifyMonitoringExt::SupplierAdmin::_non_existent_skel, 0},
      {"get_filter", &POA_NotifyMonitoringExt::SupplierAdmin::get_filter_skel, 0},
      {"obtain_notification_pull_consumer", &POA_NotifyMonitoringExt::SupplierAdmin::obtain_notification_pull_consumer_skel, 0},
      {"obtain_notification_push_consumer", &POA_NotifyMonitoringExt::SupplierAdmin::obtain_notification_push_consumer_skel, 0},
      {"get_all_filters", &POA_NotifyMonitoringExt::SupplierAdmin::get_all_filters_skel, 0},
      {"get_proxy_consumer", &POA_NotifyMonitoringExt::SupplierAdmin::get_proxy_consumer_skel, 0},
      {"obtain_named_notification_push_consumer", &POA_NotifyMonitoringExt::SupplierAdmin::obtain_named_notification_push_consumer_skel, 0},
      {"obtain_notification_push_consumer_with_qos", &POA_NotifyMonitoringExt::SupplierAdmin::obtain_notification_push_consumer_with_qos_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1, -17,  -2, -19,  -2,   6,   7,  -1,   8,   9,  10,  11,  12, 
       13,  14,  -1,  15,  16, -59, -58,  -1,  21,  -1,  22,  23,  -1,  24, 
       25,  -1,  26, -27,  -2, -44,  -1,  29,  -1,  -1,  30,  31,  -1,  -1, 
       32, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_NotifyMonitoringExt_SupplierAdmin_Perfect_Hash_OpTable tao_NotifyMonitoringExt_SupplierAdmin_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer = 
    NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyMonitoringExt::SupplierAdmin::SupplierAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyMonitoringExt_SupplierAdmin_optable;
}

POA_NotifyMonitoringExt::SupplierAdmin::SupplierAdmin (const SupplierAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyComm::NotifyPublish (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosEventChannelAdmin::SupplierAdmin (rhs),
    POA_CosNotifyChannelAdmin::SupplierAdmin (rhs),
    POA_NotifyExt::SupplierAdmin (rhs)
{
}

POA_NotifyMonitoringExt::SupplierAdmin::~SupplierAdmin (void)
{
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_named_notification_push_consumer_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_named_notification_push_consumer_SupplierAdmin (
      POA_NotifyMonitoringExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->obtain_named_notification_push_consumer (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_NotifyMonitoringExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyMonitoringExt::SupplierAdmin::obtain_named_notification_push_consumer_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      NotifyMonitoringExt::_tc_NameMapError
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_name
    };
  
  static size_t const nargs = 4;

  POA_NotifyMonitoringExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::SupplierAdmin *> (servant);

  obtain_named_notification_push_consumer_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_SupplierAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyMonitoringExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::SupplierAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyMonitoringExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::SupplierAdmin *> (servant);
  
  _is_a_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_SupplierAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyMonitoringExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::SupplierAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::SupplierAdmin *> (servant);
  
  _non_existent_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_SupplierAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyMonitoringExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::SupplierAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::SupplierAdmin *> (servant);
  
  _repository_id_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyMonitoringExt::SupplierAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyMonitoringExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::SupplierAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_SupplierAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyMonitoringExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::SupplierAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::SupplierAdmin *> (servant);
  
  _get_component_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyMonitoringExt::SupplierAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyMonitoringExt::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/SupplierAdmin:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyMonitoringExt::SupplierAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyMonitoringExt::SupplierAdmin *
POA_NotifyMonitoringExt::SupplierAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyMonitoringExt::SupplierAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyMonitoringExt_ConsumerAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyMonitoringExt_ConsumerAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyMonitoringExt_ConsumerAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48,  0, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48,  0, 48, 18, 48, 48,
      0, 26, 48, 25, 48, 48, 48, 48, 10, 48,
     48,  5, 48, 48,  0,  0, 20, 48,  0, 48,
     48, 10, 48, 48, 48, 48, 48, 48,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyMonitoringExt_ConsumerAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 31,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 42,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 47,
      HASH_VALUE_RANGE = 41,
      DUPLICATES = 7,
      WORDLIST_SIZE = 38
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_NotifyMonitoringExt::ConsumerAdmin::set_qos_skel, 0},
      {"_get_MyID", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_MyID_skel, 0},
      {"validate_qos", &POA_NotifyMonitoringExt::ConsumerAdmin::validate_qos_skel, 0},
      {"remove_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::remove_filter_skel, 0},
      {"_repository_id", &POA_NotifyMonitoringExt::ConsumerAdmin::_repository_id_skel, 0},
      {"_get_MyOperator", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_MyOperator_skel, 0},
      {"destroy", &POA_NotifyMonitoringExt::ConsumerAdmin::destroy_skel, 0},
      {"remove_all_filters", &POA_NotifyMonitoringExt::ConsumerAdmin::remove_all_filters_skel, 0},
      {"_get_pull_suppliers", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_pull_suppliers_skel, 0},
      {"_get_push_suppliers", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_push_suppliers_skel, 0},
      {"_get_priority_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::_set_priority_filter_skel, 0},
      {"_is_a", &POA_NotifyMonitoringExt::ConsumerAdmin::_is_a_skel, 0},
      {"_get_MyChannel", &POA_NotifyMonitoringExt::ConsumerAdmin::_get_MyChannel_skel, 0},
      {"obtain_push_supplier", &POA_NotifyMonitoringExt::ConsumerAdmin::obtain_push_supplier_skel, 0},
      {"obtain_pull_supplier", &POA_NotifyMonitoringExt::ConsumerAdmin::obtain_pull_supplier_skel, 0},
      {"add_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::add_filter_skel, 0},
      {"_component", &POA_NotifyMonitoringExt::ConsumerAdmin::_component_skel, 0},
      {"get_qos", &POA_NotifyMonitoringExt::ConsumerAdmin::get_qos_skel, 0},
      {"_non_existent", &POA_NotifyMonitoringExt::ConsumerAdmin::_non_existent_skel, 0},
      {"get_filter", &POA_NotifyMonitoringExt::ConsumerAdmin::get_filter_skel, 0},
      {"_interface", &POA_NotifyMonitoringExt::ConsumerAdmin::_interface_skel, 0},
      {"obtain_notification_pull_supplier", &POA_NotifyMonitoringExt::ConsumerAdmin::obtain_notification_pull_supplier_skel, 0},
      {"obtain_notification_push_supplier", &POA_NotifyMonitoringExt::ConsumerAdmin::obtain_notification_push_supplier_skel, 0},
      {"get_all_filters", &POA_NotifyMonitoringExt::ConsumerAdmin::get_all_filters_skel, 0},
      {"get_proxy_supplier", &POA_NotifyMonitoringExt::ConsumerAdmin::get_proxy_supplier_skel, 0},
      {"obtain_named_notification_push_supplier", &POA_NotifyMonitoringExt::ConsumerAdmin::obtain_named_notification_push_supplier_skel, 0},
      {"subscription_change", &POA_NotifyMonitoringExt::ConsumerAdmin::subscription_change_skel, 0},
      {"obtain_notification_push_supplier_with_qos", &POA_NotifyMonitoringExt::ConsumerAdmin::obtain_notification_push_supplier_with_qos_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1, -15,  -2,   7,  -1,   8, -17,  -4,   9,  10, 
       11,  12,  -1,  13,  14, -61, -57, -23,  -2,  21,  22, -51, -31,  -2, 
       25,  -1,  26,  -1,  27,  28,  -1,  29,  30,  -1, -59,  -1,  33,  -1, 
       -1,  34,  35,  36,  -1,  37, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_NotifyMonitoringExt_ConsumerAdmin_Perfect_Hash_OpTable tao_NotifyMonitoringExt_ConsumerAdmin_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer = 
    NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyMonitoringExt::ConsumerAdmin::ConsumerAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyMonitoringExt_ConsumerAdmin_optable;
}

POA_NotifyMonitoringExt::ConsumerAdmin::ConsumerAdmin (const ConsumerAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosEventChannelAdmin::ConsumerAdmin (rhs),
    POA_CosNotifyChannelAdmin::ConsumerAdmin (rhs),
    POA_NotifyExt::ConsumerAdmin (rhs)
{
}

POA_NotifyMonitoringExt::ConsumerAdmin::~ConsumerAdmin (void)
{
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_named_notification_push_supplier_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_named_notification_push_supplier_ConsumerAdmin (
      POA_NotifyMonitoringExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxySupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->obtain_named_notification_push_supplier (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_NotifyMonitoringExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyMonitoringExt::ConsumerAdmin::obtain_named_notification_push_supplier_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      NotifyMonitoringExt::_tc_NameMapError
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_name
    };
  
  static size_t const nargs = 4;

  POA_NotifyMonitoringExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::ConsumerAdmin *> (servant);

  obtain_named_notification_push_supplier_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_ConsumerAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyMonitoringExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::ConsumerAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyMonitoringExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::ConsumerAdmin *> (servant);
  
  _is_a_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_ConsumerAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyMonitoringExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::ConsumerAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::ConsumerAdmin *> (servant);
  
  _non_existent_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_ConsumerAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyMonitoringExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::ConsumerAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::ConsumerAdmin *> (servant);
  
  _repository_id_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyMonitoringExt::ConsumerAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyMonitoringExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::ConsumerAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_ConsumerAdmin_Upcall_Command (
      POA_NotifyMonitoringExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyMonitoringExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::ConsumerAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyMonitoringExt::ConsumerAdmin *> (servant);
  
  _get_component_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyMonitoringExt::ConsumerAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyMonitoringExt::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/ConsumerAdmin:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyMonitoringExt::ConsumerAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyMonitoringExt::ConsumerAdmin *
POA_NotifyMonitoringExt::ConsumerAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyMonitoringExt::ConsumerAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyMonitoringExt_EventChannel_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyMonitoringExt_EventChannel_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyMonitoringExt_EventChannel_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48,  0, 48,  0, 48, 48,
     25,  5,  5, 15, 48, 48, 48, 48, 48, 48,
      0, 48, 48, 48, 48,  0,  0, 48,  0, 48,
     48, 15, 48, 48, 48, 48, 48, 48,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyMonitoringExt_EventChannel_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 25,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 27,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 47,
      HASH_VALUE_RANGE = 43,
      DUPLICATES = 7,
      WORDLIST_SIZE = 30
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyMonitoringExt::EventChannel::_is_a_skel, 0},
      {"set_qos", &POA_NotifyMonitoringExt::EventChannel::set_qos_skel, 0},
      {"set_admin", &POA_NotifyMonitoringExt::EventChannel::set_admin_skel, 0},
      {"_component", &POA_NotifyMonitoringExt::EventChannel::_component_skel, 0},
      {"validate_qos", &POA_NotifyMonitoringExt::EventChannel::validate_qos_skel, 0},
      {"_non_existent", &POA_NotifyMonitoringExt::EventChannel::_non_existent_skel, 0},
      {"_interface", &POA_NotifyMonitoringExt::EventChannel::_interface_skel, 0},
      {"new_for_consumers", &POA_NotifyMonitoringExt::EventChannel::new_for_consumers_skel, 0},
      {"new_for_suppliers", &POA_NotifyMonitoringExt::EventChannel::new_for_suppliers_skel, 0},
      {"for_consumers", &POA_NotifyMonitoringExt::EventChannel::for_consumers_skel, 0},
      {"for_suppliers", &POA_NotifyMonitoringExt::EventChannel::for_suppliers_skel, 0},
      {"get_qos", &POA_NotifyMonitoringExt::EventChannel::get_qos_skel, 0},
      {"named_new_for_consumers", &POA_NotifyMonitoringExt::EventChannel::named_new_for_consumers_skel, 0},
      {"named_new_for_suppliers", &POA_NotifyMonitoringExt::EventChannel::named_new_for_suppliers_skel, 0},
      {"get_admin", &POA_NotifyMonitoringExt::EventChannel::get_admin_skel, 0},
      {"_get_default_consumer_admin", &POA_NotifyMonitoringExt::EventChannel::_get_default_consumer_admin_skel, 0},
      {"_get_default_supplier_admin", &POA_NotifyMonitoringExt::EventChannel::_get_default_supplier_admin_skel, 0},
      {"_get_MyFactory", &POA_NotifyMonitoringExt::EventChannel::_get_MyFactory_skel, 0},
      {"get_consumeradmin", &POA_NotifyMonitoringExt::EventChannel::get_consumeradmin_skel, 0},
      {"get_supplieradmin", &POA_NotifyMonitoringExt::EventChannel::get_supplieradmin_skel, 0},
      {"get_all_consumeradmins", &POA_NotifyMonitoringExt::EventChannel::get_all_consumeradmins_skel, 0},
      {"get_all_supplieradmins", &POA_NotifyMonitoringExt::EventChannel::get_all_supplieradmins_skel, 0},
      {"_repository_id", &POA_NotifyMonitoringExt::EventChannel::_repository_id_skel, 0},
      {"_get_default_filter_factory", &POA_NotifyMonitoringExt::EventChannel::_get_default_filter_factory_skel, 0},
      {"destroy", &POA_NotifyMonitoringExt::EventChannel::destroy_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1, -12,  -2, -14,  -2,   5,  -1,   6,  -1,   7,   8,  -1,   9,  10, 
       -1,  11,  -1, -63, -62,  -1, -17,  -2,  16, -50,  19, -20,  -2, -49, 
       -1,  22, -23,  -2, -49,  -1,  -1, -25,  -2, -49,  -1,  27,  -1,  -1, 
       28,  -1,  -1,  -1,  -1,  29, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_NotifyMonitoringExt_EventChannel_Perfect_Hash_OpTable tao_NotifyMonitoringExt_EventChannel_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer = 
    NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyMonitoringExt::EventChannel::EventChannel (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyMonitoringExt_EventChannel_optable;
}

POA_NotifyMonitoringExt::EventChannel::EventChannel (const EventChannel& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotification::AdminPropertiesAdmin (rhs),
    POA_CosEventChannelAdmin::EventChannel (rhs),
    POA_CosNotifyChannelAdmin::EventChannel (rhs)
{
}

POA_NotifyMonitoringExt::EventChannel::~EventChannel (void)
{
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class named_new_for_consumers_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline named_new_for_consumers_EventChannel (
      POA_NotifyMonitoringExt::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ConsumerAdmin> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::InterFilterGroupOperator> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->named_new_for_consumers (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyMonitoringExt::EventChannel::named_new_for_consumers_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      NotifyMonitoringExt::_tc_NameMapError
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_op,
      &_tao_id,
      &_tao_name
    };
  
  static size_t const nargs = 4;

  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);

  named_new_for_consumers_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class named_new_for_suppliers_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline named_new_for_suppliers_EventChannel (
      POA_NotifyMonitoringExt::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::SupplierAdmin> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::InterFilterGroupOperator> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->named_new_for_suppliers (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyMonitoringExt::EventChannel::named_new_for_suppliers_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      NotifyMonitoringExt::_tc_NameMapError
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_op,
      &_tao_id,
      &_tao_name
    };
  
  static size_t const nargs = 4;

  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);

  named_new_for_suppliers_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_EventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_EventChannel_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannel::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);
  
  _is_a_EventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_EventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_EventChannel_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannel::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);
  
  _non_existent_EventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_EventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_EventChannel_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannel::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);
  
  _repository_id_EventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyMonitoringExt::EventChannel::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_EventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_EventChannel_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannel::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::EventChannel * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannel *> (servant);
  
  _get_component_EventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyMonitoringExt::EventChannel::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyMonitoringExt::EventChannel::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/EventChannel:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyMonitoringExt::EventChannel::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyMonitoringExt::EventChannel *
POA_NotifyMonitoringExt::EventChannel::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyMonitoringExt::EventChannel STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyMonitoringExt_EventChannelFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyMonitoringExt_EventChannelFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyMonitoringExt_EventChannelFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26,  0, 26,  0, 26,  5,
      0,  5, 26,  0, 26, 10, 26,  0,  0, 26,
     26, 26, 26, 26,  5,  5,  0,  5, 26, 26,
     26,  0, 26, 26, 26, 26, 26, 26,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyMonitoringExt_EventChannelFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 14,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 20,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 25,
      HASH_VALUE_RANGE = 21,
      DUPLICATES = 0,
      WORDLIST_SIZE = 19
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyMonitoringExt::EventChannelFactory::_is_a_skel, 0},
      {"",0,0},
      {"destroy", &POA_NotifyMonitoringExt::EventChannelFactory::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_component", &POA_NotifyMonitoringExt::EventChannelFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_NotifyMonitoringExt::EventChannelFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_NotifyMonitoringExt::EventChannelFactory::_repository_id_skel, 0},
      {"_interface", &POA_NotifyMonitoringExt::EventChannelFactory::_interface_skel, 0},
      {"",0,0},
      {"get_event_channel", &POA_NotifyMonitoringExt::EventChannelFactory::get_event_channel_skel, 0},
      {"save_topology", &POA_NotifyMonitoringExt::EventChannelFactory::save_topology_skel, 0},
      {"create_channel", &POA_NotifyMonitoringExt::EventChannelFactory::create_channel_skel, 0},
      {"",0,0},
      {"get_all_channels", &POA_NotifyMonitoringExt::EventChannelFactory::get_all_channels_skel, 0},
      {"register_callback", &POA_NotifyMonitoringExt::EventChannelFactory::register_callback_skel, 0},
      {"is_alive", &POA_NotifyMonitoringExt::EventChannelFactory::is_alive_skel, 0},
      {"unregister_callback", &POA_NotifyMonitoringExt::EventChannelFactory::unregister_callback_skel, 0},
      {"create_named_channel", &POA_NotifyMonitoringExt::EventChannelFactory::create_named_channel_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_NotifyMonitoringExt_EventChannelFactory_Perfect_Hash_OpTable tao_NotifyMonitoringExt_EventChannelFactory_optable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer = 
    NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyMonitoringExt::EventChannelFactory::EventChannelFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyMonitoringExt_EventChannelFactory_optable;
}

POA_NotifyMonitoringExt::EventChannelFactory::EventChannelFactory (const EventChannelFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotifyChannelAdmin::EventChannelFactory (rhs),
    POA_NotifyExt::ReconnectionRegistry (rhs),
    POA_NotifyExt::EventChannelFactory (rhs)
{
}

POA_NotifyMonitoringExt::EventChannelFactory::~EventChannelFactory (void)
{
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_named_channel_EventChannelFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_named_channel_EventChannelFactory (
      POA_NotifyMonitoringExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::EventChannel> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::QoSProperties> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNotification::AdminProperties>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::AdminProperties> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_4 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          4);
        
      retval =
        this->servant_->create_named_channel (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyMonitoringExt::EventChannelFactory::create_named_channel_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotification::_tc_UnsupportedQoS,
      CosNotification::_tc_UnsupportedAdmin,
      NotifyMonitoringExt::_tc_NameAlreadyUsed,
      NotifyMonitoringExt::_tc_NameMapError
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos;
  TAO::SArg_Traits< ::CosNotification::AdminProperties>::in_arg_val _tao_initial_admin;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_id;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_initial_qos,
      &_tao_initial_admin,
      &_tao_id,
      &_tao_name
    };
  
  static size_t const nargs = 5;

  POA_NotifyMonitoringExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannelFactory *> (servant);

  create_named_channel_EventChannelFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_EventChannelFactory_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannelFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyMonitoringExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannelFactory *> (servant);
  
  _is_a_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_EventChannelFactory_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannelFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannelFactory *> (servant);
  
  _non_existent_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_EventChannelFactory_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannelFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannelFactory *> (servant);
  
  _repository_id_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyMonitoringExt::EventChannelFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyMonitoringExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannelFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyMonitoringExt
{
  

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_EventChannelFactory_Upcall_Command (
      POA_NotifyMonitoringExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyMonitoringExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyMonitoringExt::EventChannelFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyMonitoringExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyMonitoringExt::EventChannelFactory *> (servant);
  
  _get_component_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyMonitoringExt::EventChannelFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionRegistry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyMonitoringExt::EventChannelFactory::_interface_repository_id (void) const
{
  return "IDL:sandia.gov/NotifyMonitoringExt/EventChannelFactory:1.0";
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyMonitoringExt::EventChannelFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyMonitoringExt::EventChannelFactory *
POA_NotifyMonitoringExt::EventChannelFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyMonitoringExt::EventChannelFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyMonitoringExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

