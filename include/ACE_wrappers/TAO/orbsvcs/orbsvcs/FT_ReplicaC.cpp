// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FT_ReplicaC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FT_ReplicaC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::PullMonitorable.

FT::PullMonitorable_ptr
TAO::Objref_Traits<FT::PullMonitorable>::duplicate (
    FT::PullMonitorable_ptr p)
{
  return FT::PullMonitorable::_duplicate (p);
}

void
TAO::Objref_Traits<FT::PullMonitorable>::release (
    FT::PullMonitorable_ptr p)
{
  ::CORBA::release (p);
}

FT::PullMonitorable_ptr
TAO::Objref_Traits<FT::PullMonitorable>::nil (void)
{
  return FT::PullMonitorable::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::PullMonitorable>::marshal (
    const FT::PullMonitorable_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
FT::PullMonitorable::is_alive (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PullMonitorable_Proxy_Broker_ == 0)
    {
      FT_PullMonitorable_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "is_alive",
      8,
      this->the_TAO_PullMonitorable_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

FT::PullMonitorable::PullMonitorable (void)
 : the_TAO_PullMonitorable_Proxy_Broker_ (0)
{
  this->FT_PullMonitorable_setup_collocation ();
}

void
FT::PullMonitorable::FT_PullMonitorable_setup_collocation ()
{
  if (::FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PullMonitorable_Proxy_Broker_ =
        ::FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer (this);
    }
}

FT::PullMonitorable::~PullMonitorable (void)
{}

void 
FT::PullMonitorable::_tao_any_destructor (void *_tao_void_pointer)
{
  PullMonitorable *_tao_tmp_pointer =
    static_cast<PullMonitorable *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::PullMonitorable_ptr
FT::PullMonitorable::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PullMonitorable>::narrow (
        _tao_objref,
        "IDL:omg.org/FT/PullMonitorable:1.0",
        FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer
      );
}

FT::PullMonitorable_ptr
FT::PullMonitorable::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PullMonitorable>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/FT/PullMonitorable:1.0",
        FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer
      );
}

FT::PullMonitorable_ptr
FT::PullMonitorable::_nil (void)
{
  return 0;
}

FT::PullMonitorable_ptr
FT::PullMonitorable::_duplicate (PullMonitorable_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::PullMonitorable::_tao_release (PullMonitorable_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::PullMonitorable::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/PullMonitorable:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT::PullMonitorable::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/PullMonitorable:1.0";
}

::CORBA::Boolean
FT::PullMonitorable::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_PullMonitorable (
    ::CORBA::tk_objref,
    "IDL:omg.org/FT/PullMonitorable:1.0",
    "PullMonitorable");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_PullMonitorable =
    &_tao_tc_FT_PullMonitorable;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FT_STATE_CS_)
#define _FT_STATE_CS_

FT::State::State (void)
{}

FT::State::State (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

FT::State::State (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

FT::State::State (
    const State &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

FT::State::~State (void)
{}

void FT::State::_tao_any_destructor (
    void * _tao_void_pointer)
{
  State * _tao_tmp_pointer =
    static_cast<State *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FT_State_GUARD
#define _TAO_TYPECODE_FT_State_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FT_State_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FT_State_0 =
        &FT_State_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FT_State_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_State (
    ::CORBA::tk_alias,
    "IDL:omg.org/FT/State:1.0",
    "State",
    &TAO::TypeCode::tc_FT_State_0);
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_State =
    &_tao_tc_FT_State;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::NoStateAvailable::NoStateAvailable (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/NoStateAvailable:1.0",
        "NoStateAvailable"
      )
{
}

FT::NoStateAvailable::~NoStateAvailable (void)
{
}

FT::NoStateAvailable::NoStateAvailable (const ::FT::NoStateAvailable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::NoStateAvailable&
FT::NoStateAvailable::operator= (const ::FT::NoStateAvailable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::NoStateAvailable::_tao_any_destructor (void *_tao_void_pointer)
{
  NoStateAvailable *_tao_tmp_pointer =
    static_cast<NoStateAvailable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::NoStateAvailable *
FT::NoStateAvailable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoStateAvailable *> (_tao_excp);
}

const FT::NoStateAvailable *
FT::NoStateAvailable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoStateAvailable *> (_tao_excp);
}

::CORBA::Exception *FT::NoStateAvailable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::NoStateAvailable, 0);
  return retval;
}

::CORBA::Exception *
FT::NoStateAvailable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::NoStateAvailable (*this),
      0
    );
  return result;
}

void FT::NoStateAvailable::_raise (void) const
{
  throw *this;
}

void FT::NoStateAvailable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::NoStateAvailable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::NoStateAvailable::_tao_type (void) const
{
  return ::FT::_tc_NoStateAvailable;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_NoStateAvailable = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_NoStateAvailable (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/NoStateAvailable:1.0",
  "NoStateAvailable",
  _tao_fields_FT_NoStateAvailable,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_NoStateAvailable =
    &_tao_tc_FT_NoStateAvailable;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::InvalidState::InvalidState (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/InvalidState:1.0",
        "InvalidState"
      )
{
}

FT::InvalidState::~InvalidState (void)
{
}

FT::InvalidState::InvalidState (const ::FT::InvalidState &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::InvalidState&
FT::InvalidState::operator= (const ::FT::InvalidState &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::InvalidState::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidState *_tao_tmp_pointer =
    static_cast<InvalidState *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::InvalidState *
FT::InvalidState::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidState *> (_tao_excp);
}

const FT::InvalidState *
FT::InvalidState::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidState *> (_tao_excp);
}

::CORBA::Exception *FT::InvalidState::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::InvalidState, 0);
  return retval;
}

::CORBA::Exception *
FT::InvalidState::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::InvalidState (*this),
      0
    );
  return result;
}

void FT::InvalidState::_raise (void) const
{
  throw *this;
}

void FT::InvalidState::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::InvalidState::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::InvalidState::_tao_type (void) const
{
  return ::FT::_tc_InvalidState;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_InvalidState = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_InvalidState (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/InvalidState:1.0",
  "InvalidState",
  _tao_fields_FT_InvalidState,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_InvalidState =
    &_tao_tc_FT_InvalidState;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::NoUpdateAvailable::NoUpdateAvailable (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/NoUpdateAvailable:1.0",
        "NoUpdateAvailable"
      )
{
}

FT::NoUpdateAvailable::~NoUpdateAvailable (void)
{
}

FT::NoUpdateAvailable::NoUpdateAvailable (const ::FT::NoUpdateAvailable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::NoUpdateAvailable&
FT::NoUpdateAvailable::operator= (const ::FT::NoUpdateAvailable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::NoUpdateAvailable::_tao_any_destructor (void *_tao_void_pointer)
{
  NoUpdateAvailable *_tao_tmp_pointer =
    static_cast<NoUpdateAvailable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::NoUpdateAvailable *
FT::NoUpdateAvailable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoUpdateAvailable *> (_tao_excp);
}

const FT::NoUpdateAvailable *
FT::NoUpdateAvailable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoUpdateAvailable *> (_tao_excp);
}

::CORBA::Exception *FT::NoUpdateAvailable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::NoUpdateAvailable, 0);
  return retval;
}

::CORBA::Exception *
FT::NoUpdateAvailable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::NoUpdateAvailable (*this),
      0
    );
  return result;
}

void FT::NoUpdateAvailable::_raise (void) const
{
  throw *this;
}

void FT::NoUpdateAvailable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::NoUpdateAvailable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::NoUpdateAvailable::_tao_type (void) const
{
  return ::FT::_tc_NoUpdateAvailable;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_NoUpdateAvailable = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_NoUpdateAvailable (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/NoUpdateAvailable:1.0",
  "NoUpdateAvailable",
  _tao_fields_FT_NoUpdateAvailable,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_NoUpdateAvailable =
    &_tao_tc_FT_NoUpdateAvailable;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::InvalidUpdate::InvalidUpdate (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/InvalidUpdate:1.0",
        "InvalidUpdate"
      )
{
}

FT::InvalidUpdate::~InvalidUpdate (void)
{
}

FT::InvalidUpdate::InvalidUpdate (const ::FT::InvalidUpdate &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::InvalidUpdate&
FT::InvalidUpdate::operator= (const ::FT::InvalidUpdate &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::InvalidUpdate::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidUpdate *_tao_tmp_pointer =
    static_cast<InvalidUpdate *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::InvalidUpdate *
FT::InvalidUpdate::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidUpdate *> (_tao_excp);
}

const FT::InvalidUpdate *
FT::InvalidUpdate::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidUpdate *> (_tao_excp);
}

::CORBA::Exception *FT::InvalidUpdate::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::InvalidUpdate, 0);
  return retval;
}

::CORBA::Exception *
FT::InvalidUpdate::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::InvalidUpdate (*this),
      0
    );
  return result;
}

void FT::InvalidUpdate::_raise (void) const
{
  throw *this;
}

void FT::InvalidUpdate::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::InvalidUpdate::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::InvalidUpdate::_tao_type (void) const
{
  return ::FT::_tc_InvalidUpdate;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_InvalidUpdate = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_InvalidUpdate (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/InvalidUpdate:1.0",
  "InvalidUpdate",
  _tao_fields_FT_InvalidUpdate,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_InvalidUpdate =
    &_tao_tc_FT_InvalidUpdate;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::Checkpointable.

FT::Checkpointable_ptr
TAO::Objref_Traits<FT::Checkpointable>::duplicate (
    FT::Checkpointable_ptr p)
{
  return FT::Checkpointable::_duplicate (p);
}

void
TAO::Objref_Traits<FT::Checkpointable>::release (
    FT::Checkpointable_ptr p)
{
  ::CORBA::release (p);
}

FT::Checkpointable_ptr
TAO::Objref_Traits<FT::Checkpointable>::nil (void)
{
  return FT::Checkpointable::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::Checkpointable>::marshal (
    const FT::Checkpointable_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::FT::State *
FT::Checkpointable::get_state (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Checkpointable_Proxy_Broker_ == 0)
    {
      FT_Checkpointable_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::FT::State>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_FT_Checkpointable_get_state_exceptiondata [] = 
    {
      {
        "IDL:omg.org/FT/NoStateAvailable:1.0",
        FT::NoStateAvailable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_NoStateAvailable
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_state",
      9,
      this->the_TAO_Checkpointable_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FT_Checkpointable_get_state_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FT::Checkpointable::set_state (
  const ::FT::State & s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Checkpointable_Proxy_Broker_ == 0)
    {
      FT_Checkpointable_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FT::State>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  static TAO::Exception_Data
  _tao_FT_Checkpointable_set_state_exceptiondata [] = 
    {
      {
        "IDL:omg.org/FT/InvalidState:1.0",
        FT::InvalidState::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_InvalidState
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_state",
      9,
      this->the_TAO_Checkpointable_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FT_Checkpointable_set_state_exceptiondata,
      1
    );
}

FT::Checkpointable::Checkpointable (void)
 : the_TAO_Checkpointable_Proxy_Broker_ (0)
{
  this->FT_Checkpointable_setup_collocation ();
}

void
FT::Checkpointable::FT_Checkpointable_setup_collocation ()
{
  if (::FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Checkpointable_Proxy_Broker_ =
        ::FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer (this);
    }
}

FT::Checkpointable::~Checkpointable (void)
{}

void 
FT::Checkpointable::_tao_any_destructor (void *_tao_void_pointer)
{
  Checkpointable *_tao_tmp_pointer =
    static_cast<Checkpointable *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::Checkpointable_ptr
FT::Checkpointable::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Checkpointable>::narrow (
        _tao_objref,
        "IDL:omg.org/FT/Checkpointable:1.0",
        FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer
      );
}

FT::Checkpointable_ptr
FT::Checkpointable::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Checkpointable>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/FT/Checkpointable:1.0",
        FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer
      );
}

FT::Checkpointable_ptr
FT::Checkpointable::_nil (void)
{
  return 0;
}

FT::Checkpointable_ptr
FT::Checkpointable::_duplicate (Checkpointable_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::Checkpointable::_tao_release (Checkpointable_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::Checkpointable::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/Checkpointable:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT::Checkpointable::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/Checkpointable:1.0";
}

::CORBA::Boolean
FT::Checkpointable::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_Checkpointable (
    ::CORBA::tk_objref,
    "IDL:omg.org/FT/Checkpointable:1.0",
    "Checkpointable");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Checkpointable =
    &_tao_tc_FT_Checkpointable;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::Updateable.

FT::Updateable_ptr
TAO::Objref_Traits<FT::Updateable>::duplicate (
    FT::Updateable_ptr p)
{
  return FT::Updateable::_duplicate (p);
}

void
TAO::Objref_Traits<FT::Updateable>::release (
    FT::Updateable_ptr p)
{
  ::CORBA::release (p);
}

FT::Updateable_ptr
TAO::Objref_Traits<FT::Updateable>::nil (void)
{
  return FT::Updateable::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::Updateable>::marshal (
    const FT::Updateable_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::FT::State *
FT::Updateable::get_update (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Updateable_Proxy_Broker_ == 0)
    {
      FT_Updateable_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::FT::State>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_FT_Updateable_get_update_exceptiondata [] = 
    {
      {
        "IDL:omg.org/FT/NoUpdateAvailable:1.0",
        FT::NoUpdateAvailable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_NoUpdateAvailable
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_update",
      10,
      this->the_TAO_Updateable_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FT_Updateable_get_update_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FT::Updateable::set_update (
  const ::FT::State & s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Updateable_Proxy_Broker_ == 0)
    {
      FT_Updateable_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FT::State>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  static TAO::Exception_Data
  _tao_FT_Updateable_set_update_exceptiondata [] = 
    {
      {
        "IDL:omg.org/FT/InvalidUpdate:1.0",
        FT::InvalidUpdate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_InvalidUpdate
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_update",
      10,
      this->the_TAO_Updateable_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FT_Updateable_set_update_exceptiondata,
      1
    );
}

FT::Updateable::Updateable (void)
 : the_TAO_Updateable_Proxy_Broker_ (0)
{
  this->FT_Updateable_setup_collocation ();
}

void
FT::Updateable::FT_Updateable_setup_collocation ()
{
  if (::FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Updateable_Proxy_Broker_ =
        ::FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->FT_Checkpointable_setup_collocation ();
}

FT::Updateable::~Updateable (void)
{}

void 
FT::Updateable::_tao_any_destructor (void *_tao_void_pointer)
{
  Updateable *_tao_tmp_pointer =
    static_cast<Updateable *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::Updateable_ptr
FT::Updateable::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Updateable>::narrow (
        _tao_objref,
        "IDL:omg.org/FT/Updateable:1.0",
        FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer
      );
}

FT::Updateable_ptr
FT::Updateable::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Updateable>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/FT/Updateable:1.0",
        FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer
      );
}

FT::Updateable_ptr
FT::Updateable::_nil (void)
{
  return 0;
}

FT::Updateable_ptr
FT::Updateable::_duplicate (Updateable_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::Updateable::_tao_release (Updateable_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::Updateable::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/Checkpointable:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/Updateable:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT::Updateable::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/Updateable:1.0";
}

::CORBA::Boolean
FT::Updateable::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_Updateable (
    ::CORBA::tk_objref,
    "IDL:omg.org/FT/Updateable:1.0",
    "Updateable");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_Updateable =
    &_tao_tc_FT_Updateable;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::PullMonitorable>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PullMonitorable_ptr _tao_elem)
  {
    PullMonitorable_ptr _tao_objptr =
      PullMonitorable::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PullMonitorable_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PullMonitorable>::insert (
        _tao_any,
        PullMonitorable::_tao_any_destructor,
        _tc_PullMonitorable,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PullMonitorable_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PullMonitorable>::extract (
          _tao_any,
          PullMonitorable::_tao_any_destructor,
          _tc_PullMonitorable,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::PullMonitorable_ptr _tao_elem)
{
  FT::PullMonitorable_ptr _tao_objptr =
    FT::PullMonitorable::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::PullMonitorable_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::PullMonitorable>::insert (
      _tao_any,
      FT::PullMonitorable::_tao_any_destructor,
      FT::_tc_PullMonitorable,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::PullMonitorable_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::PullMonitorable>::extract (
        _tao_any,
        FT::PullMonitorable::_tao_any_destructor,
        FT::_tc_PullMonitorable,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::State &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FT::State *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FT::State>::insert_copy (
          _tao_any,
          ::FT::State::_tao_any_destructor,
          ::FT::_tc_State,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::State *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::State>::insert (
        _tao_any,
        ::FT::State::_tao_any_destructor,
        ::FT::_tc_State,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::State *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::State *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::State *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::State>::extract (
          _tao_any,
          ::FT::State::_tao_any_destructor,
          ::FT::_tc_State,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::State &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FT::State *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FT::State>::insert_copy (
        _tao_any,
        FT::State::_tao_any_destructor,
        FT::_tc_State,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::State *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::State>::insert (
      _tao_any,
      FT::State::_tao_any_destructor,
      FT::_tc_State,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::State *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::State *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::State *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::State>::extract (
        _tao_any,
        FT::State::_tao_any_destructor,
        FT::_tc_State,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::NoStateAvailable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::NoStateAvailable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::NoStateAvailable>::insert_copy (
        _tao_any,
        ::FT::NoStateAvailable::_tao_any_destructor,
        ::FT::_tc_NoStateAvailable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::NoStateAvailable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::NoStateAvailable>::insert (
        _tao_any,
        ::FT::NoStateAvailable::_tao_any_destructor,
        ::FT::_tc_NoStateAvailable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::NoStateAvailable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::NoStateAvailable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::NoStateAvailable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::NoStateAvailable>::extract (
          _tao_any,
          ::FT::NoStateAvailable::_tao_any_destructor,
          ::FT::_tc_NoStateAvailable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::NoStateAvailable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::NoStateAvailable>::insert_copy (
      _tao_any,
      FT::NoStateAvailable::_tao_any_destructor,
      FT::_tc_NoStateAvailable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::NoStateAvailable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::NoStateAvailable>::insert (
      _tao_any,
      FT::NoStateAvailable::_tao_any_destructor,
      FT::_tc_NoStateAvailable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::NoStateAvailable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::NoStateAvailable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::NoStateAvailable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::NoStateAvailable>::extract (
        _tao_any,
        FT::NoStateAvailable::_tao_any_destructor,
        FT::_tc_NoStateAvailable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::InvalidState>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::InvalidState &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::InvalidState>::insert_copy (
        _tao_any,
        ::FT::InvalidState::_tao_any_destructor,
        ::FT::_tc_InvalidState,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::InvalidState *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::InvalidState>::insert (
        _tao_any,
        ::FT::InvalidState::_tao_any_destructor,
        ::FT::_tc_InvalidState,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::InvalidState *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::InvalidState *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::InvalidState *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::InvalidState>::extract (
          _tao_any,
          ::FT::InvalidState::_tao_any_destructor,
          ::FT::_tc_InvalidState,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::InvalidState &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::InvalidState>::insert_copy (
      _tao_any,
      FT::InvalidState::_tao_any_destructor,
      FT::_tc_InvalidState,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::InvalidState *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::InvalidState>::insert (
      _tao_any,
      FT::InvalidState::_tao_any_destructor,
      FT::_tc_InvalidState,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::InvalidState *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::InvalidState *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::InvalidState *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::InvalidState>::extract (
        _tao_any,
        FT::InvalidState::_tao_any_destructor,
        FT::_tc_InvalidState,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::NoUpdateAvailable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::NoUpdateAvailable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::NoUpdateAvailable>::insert_copy (
        _tao_any,
        ::FT::NoUpdateAvailable::_tao_any_destructor,
        ::FT::_tc_NoUpdateAvailable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::NoUpdateAvailable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::NoUpdateAvailable>::insert (
        _tao_any,
        ::FT::NoUpdateAvailable::_tao_any_destructor,
        ::FT::_tc_NoUpdateAvailable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::NoUpdateAvailable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::NoUpdateAvailable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::NoUpdateAvailable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::NoUpdateAvailable>::extract (
          _tao_any,
          ::FT::NoUpdateAvailable::_tao_any_destructor,
          ::FT::_tc_NoUpdateAvailable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::NoUpdateAvailable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::NoUpdateAvailable>::insert_copy (
      _tao_any,
      FT::NoUpdateAvailable::_tao_any_destructor,
      FT::_tc_NoUpdateAvailable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::NoUpdateAvailable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::NoUpdateAvailable>::insert (
      _tao_any,
      FT::NoUpdateAvailable::_tao_any_destructor,
      FT::_tc_NoUpdateAvailable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::NoUpdateAvailable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::NoUpdateAvailable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::NoUpdateAvailable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::NoUpdateAvailable>::extract (
        _tao_any,
        FT::NoUpdateAvailable::_tao_any_destructor,
        FT::_tc_NoUpdateAvailable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::InvalidUpdate>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::InvalidUpdate &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::InvalidUpdate>::insert_copy (
        _tao_any,
        ::FT::InvalidUpdate::_tao_any_destructor,
        ::FT::_tc_InvalidUpdate,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::InvalidUpdate *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::InvalidUpdate>::insert (
        _tao_any,
        ::FT::InvalidUpdate::_tao_any_destructor,
        ::FT::_tc_InvalidUpdate,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::InvalidUpdate *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::InvalidUpdate *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::InvalidUpdate *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::InvalidUpdate>::extract (
          _tao_any,
          ::FT::InvalidUpdate::_tao_any_destructor,
          ::FT::_tc_InvalidUpdate,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::InvalidUpdate &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::InvalidUpdate>::insert_copy (
      _tao_any,
      FT::InvalidUpdate::_tao_any_destructor,
      FT::_tc_InvalidUpdate,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::InvalidUpdate *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::InvalidUpdate>::insert (
      _tao_any,
      FT::InvalidUpdate::_tao_any_destructor,
      FT::_tc_InvalidUpdate,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::InvalidUpdate *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::InvalidUpdate *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::InvalidUpdate *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::InvalidUpdate>::extract (
        _tao_any,
        FT::InvalidUpdate::_tao_any_destructor,
        FT::_tc_InvalidUpdate,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::Checkpointable>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Checkpointable_ptr _tao_elem)
  {
    Checkpointable_ptr _tao_objptr =
      Checkpointable::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Checkpointable_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Checkpointable>::insert (
        _tao_any,
        Checkpointable::_tao_any_destructor,
        _tc_Checkpointable,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Checkpointable_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Checkpointable>::extract (
          _tao_any,
          Checkpointable::_tao_any_destructor,
          _tc_Checkpointable,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::Checkpointable_ptr _tao_elem)
{
  FT::Checkpointable_ptr _tao_objptr =
    FT::Checkpointable::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::Checkpointable_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::Checkpointable>::insert (
      _tao_any,
      FT::Checkpointable::_tao_any_destructor,
      FT::_tc_Checkpointable,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::Checkpointable_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::Checkpointable>::extract (
        _tao_any,
        FT::Checkpointable::_tao_any_destructor,
        FT::_tc_Checkpointable,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::Updateable>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Updateable_ptr _tao_elem)
  {
    Updateable_ptr _tao_objptr =
      Updateable::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Updateable_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Updateable>::insert (
        _tao_any,
        Updateable::_tao_any_destructor,
        _tc_Updateable,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Updateable_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Updateable>::extract (
          _tao_any,
          Updateable::_tao_any_destructor,
          _tc_Updateable,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::Updateable_ptr _tao_elem)
{
  FT::Updateable_ptr _tao_objptr =
    FT::Updateable::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::Updateable_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::Updateable>::insert (
      _tao_any,
      FT::Updateable::_tao_any_destructor,
      FT::_tc_Updateable,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::Updateable_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::Updateable>::extract (
        _tao_any,
        FT::Updateable::_tao_any_destructor,
        FT::_tc_Updateable,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::PullMonitorable_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::PullMonitorable_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT::PullMonitorable RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FT_State_CPP_
#define _TAO_CDR_OP_FT_State_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::State &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::State &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FT_State_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::NoStateAvailable &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::NoStateAvailable&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::InvalidState &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::InvalidState&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::NoUpdateAvailable &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::NoUpdateAvailable&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::InvalidUpdate &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::InvalidUpdate&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::Checkpointable_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::Checkpointable_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT::Checkpointable RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::Updateable_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::Updateable_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT::Updateable RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


