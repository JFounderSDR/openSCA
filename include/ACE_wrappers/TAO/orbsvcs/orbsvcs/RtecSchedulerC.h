// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_RTECSCHEDULERC_SF2QDG_H_
#define _TAO_IDL_RTECSCHEDULERC_SF2QDG_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Sched/sched_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "TimeBaseC.h"
#include "RtecBaseC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_RTSched_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace RtecScheduler
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef TimeBase::TimeT Time;
  typedef TimeBase::TimeT_out Time_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Time;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef Time Quantum_t;
  typedef Time_out Quantum_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Quantum_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Long Period_t;
  typedef ::CORBA::Long_out Period_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Period_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Long Threads_t;
  typedef ::CORBA::Long_out Threads_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Threads_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTECSCHEDULER_PERIOD_SET_CH_)
#define _RTECSCHEDULER_PERIOD_SET_CH_

  class Period_Set;

  typedef
    ::TAO_FixedSeq_Var_T<
        Period_Set
      >
    Period_Set_var;

  typedef
    ::TAO_Seq_Out_T<
        Period_Set
      >
    Period_Set_out;

  class TAO_RTSched_Export Period_Set
    : public
        ::TAO::unbounded_value_sequence<
            Period_t
          >
  {
  public:
    Period_Set (void);
    Period_Set ( ::CORBA::ULong max);
    Period_Set (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer, 
      ::CORBA::Boolean release = false);
    Period_Set (const Period_Set &);
    virtual ~Period_Set (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Period_Set_var _var_type;
    typedef Period_Set_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Period_Set;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum Criticality_t
  {
    VERY_LOW_CRITICALITY,
    LOW_CRITICALITY,
    MEDIUM_CRITICALITY,
    HIGH_CRITICALITY,
    VERY_HIGH_CRITICALITY
  };

  typedef Criticality_t &Criticality_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Criticality_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum Importance_t
  {
    VERY_LOW_IMPORTANCE,
    LOW_IMPORTANCE,
    MEDIUM_IMPORTANCE,
    HIGH_IMPORTANCE,
    VERY_HIGH_IMPORTANCE
  };

  typedef Importance_t &Importance_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Importance_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum Info_Type_t
  {
    OPERATION,
    CONJUNCTION,
    DISJUNCTION,
    REMOTE_DEPENDANT
  };

  typedef Info_Type_t &Info_Type_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Info_Type_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:289

  typedef RtecBase::Dependency_Enabled_Type_t Dependency_Enabled_Type_t;
  typedef RtecBase::Dependency_Enabled_Type_t_out Dependency_Enabled_Type_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Dependency_Enabled_Type_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:289

  typedef RtecBase::Dependency_Type_t Dependency_Type_t;
  typedef RtecBase::Dependency_Type_t_out Dependency_Type_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Dependency_Type_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum RT_Info_Enabled_Type_t
  {
    RT_INFO_DISABLED,
    RT_INFO_ENABLED,
    RT_INFO_NON_VOLATILE
  };

  typedef RT_Info_Enabled_Type_t &RT_Info_Enabled_Type_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_RT_Info_Enabled_Type_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef RtecBase::handle_t handle_t;
  typedef RtecBase::handle_t_out handle_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_handle_t;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct RT_Info_Enable_State_Pair;

  typedef
    ::TAO_Fixed_Var_T<
        RT_Info_Enable_State_Pair
      >
    RT_Info_Enable_State_Pair_var;
  
  typedef
    RT_Info_Enable_State_Pair &
    RT_Info_Enable_State_Pair_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTSched_Export RT_Info_Enable_State_Pair
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RT_Info_Enable_State_Pair_var _var_type;
    typedef RT_Info_Enable_State_Pair_out _out_type;

    static void _tao_any_destructor (void *);
    
    RtecScheduler::handle_t handle;
    RtecScheduler::RT_Info_Enabled_Type_t enabled;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_RT_Info_Enable_State_Pair;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTECSCHEDULER_RT_INFO_ENABLE_STATE_PAIR_SET_CH_)
#define _RTECSCHEDULER_RT_INFO_ENABLE_STATE_PAIR_SET_CH_

  class RT_Info_Enable_State_Pair_Set;

  typedef
    ::TAO_FixedSeq_Var_T<
        RT_Info_Enable_State_Pair_Set
      >
    RT_Info_Enable_State_Pair_Set_var;

  typedef
    ::TAO_Seq_Out_T<
        RT_Info_Enable_State_Pair_Set
      >
    RT_Info_Enable_State_Pair_Set_out;

  class TAO_RTSched_Export RT_Info_Enable_State_Pair_Set
    : public
        ::TAO::unbounded_value_sequence<
            RT_Info_Enable_State_Pair
          >
  {
  public:
    RT_Info_Enable_State_Pair_Set (void);
    RT_Info_Enable_State_Pair_Set ( ::CORBA::ULong max);
    RT_Info_Enable_State_Pair_Set (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RT_Info_Enable_State_Pair* buffer, 
      ::CORBA::Boolean release = false);
    RT_Info_Enable_State_Pair_Set (const RT_Info_Enable_State_Pair_Set &);
    virtual ~RT_Info_Enable_State_Pair_Set (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RT_Info_Enable_State_Pair_Set_var _var_type;
    typedef RT_Info_Enable_State_Pair_Set_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_RT_Info_Enable_State_Pair_Set;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:509

  typedef RtecBase::Dependency_Info Dependency_Info;
  typedef RtecBase::Dependency_Info_var Dependency_Info_var;
  typedef RtecBase::Dependency_Info_out Dependency_Info_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Dependency_Info;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTECSCHEDULER_DEPENDENCY_SET_CH_)
#define _RTECSCHEDULER_DEPENDENCY_SET_CH_

  class Dependency_Set;

  typedef
    ::TAO_FixedSeq_Var_T<
        Dependency_Set
      >
    Dependency_Set_var;

  typedef
    ::TAO_Seq_Out_T<
        Dependency_Set
      >
    Dependency_Set_out;

  class TAO_RTSched_Export Dependency_Set
    : public
        ::TAO::unbounded_value_sequence<
            Dependency_Info
          >
  {
  public:
    Dependency_Set (void);
    Dependency_Set ( ::CORBA::ULong max);
    Dependency_Set (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Dependency_Info* buffer, 
      ::CORBA::Boolean release = false);
    Dependency_Set (const Dependency_Set &);
    virtual ~Dependency_Set (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Dependency_Set_var _var_type;
    typedef Dependency_Set_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Dependency_Set;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef RtecBase::OS_Priority OS_Priority;
  typedef RtecBase::OS_Priority_out OS_Priority_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_OS_Priority;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef RtecBase::Preemption_Subpriority_t Preemption_Subpriority_t;
  typedef RtecBase::Preemption_Subpriority_t_out Preemption_Subpriority_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Preemption_Subpriority_t;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef RtecBase::Preemption_Priority_t Preemption_Priority_t;
  typedef RtecBase::Preemption_Priority_t_out Preemption_Priority_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Preemption_Priority_t;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct RT_Info;

  typedef
    ::TAO_Var_Var_T<
        RT_Info
      >
    RT_Info_var;
  
  typedef
    ::TAO_Out_T<
        RT_Info
      >
    RT_Info_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTSched_Export RT_Info
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RT_Info_var _var_type;
    typedef RT_Info_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager entry_point;
    RtecScheduler::handle_t handle;
    RtecScheduler::Time worst_case_execution_time;
    RtecScheduler::Time typical_execution_time;
    RtecScheduler::Time cached_execution_time;
    RtecScheduler::Period_t period;
    RtecScheduler::Criticality_t criticality;
    RtecScheduler::Importance_t importance;
    RtecScheduler::Quantum_t quantum;
    RtecScheduler::Threads_t threads;
    RtecScheduler::Dependency_Set dependencies;
    RtecScheduler::OS_Priority priority;
    RtecScheduler::Preemption_Subpriority_t preemption_subpriority;
    RtecScheduler::Preemption_Priority_t preemption_priority;
    RtecScheduler::Info_Type_t info_type;
    RtecScheduler::RT_Info_Enabled_Type_t enabled;
    ::CORBA::ULongLong volatile_token;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_RT_Info;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum Dispatching_Type_t
  {
    STATIC_DISPATCHING,
    DEADLINE_DISPATCHING,
    LAXITY_DISPATCHING
  };

  typedef Dispatching_Type_t &Dispatching_Type_t_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Dispatching_Type_t;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Config_Info;

  typedef
    ::TAO_Var_Var_T<
        Config_Info
      >
    Config_Info_var;
  
  typedef
    ::TAO_Out_T<
        Config_Info
      >
    Config_Info_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTSched_Export Config_Info
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Config_Info_var _var_type;
    typedef Config_Info_out _out_type;

    static void _tao_any_destructor (void *);
    
    RtecScheduler::Preemption_Priority_t preemption_priority;
    RtecScheduler::OS_Priority thread_priority;
    RtecScheduler::Dispatching_Type_t dispatching_type;
    RtecScheduler::Period_Set timer_periods;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Config_Info;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTECSCHEDULER_CONFIG_INFO_SET_CH_)
#define _RTECSCHEDULER_CONFIG_INFO_SET_CH_

  class Config_Info_Set;

  typedef
    ::TAO_VarSeq_Var_T<
        Config_Info_Set
      >
    Config_Info_Set_var;

  typedef
    ::TAO_Seq_Out_T<
        Config_Info_Set
      >
    Config_Info_Set_out;

  class TAO_RTSched_Export Config_Info_Set
    : public
        ::TAO::unbounded_value_sequence<
            Config_Info
          >
  {
  public:
    Config_Info_Set (void);
    Config_Info_Set ( ::CORBA::ULong max);
    Config_Info_Set (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Config_Info* buffer, 
      ::CORBA::Boolean release = false);
    Config_Info_Set (const Config_Info_Set &);
    virtual ~Config_Info_Set (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Config_Info_Set_var _var_type;
    typedef Config_Info_Set_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Config_Info_Set;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum Anomaly_Severity
  {
    ANOMALY_FATAL,
    ANOMALY_ERROR,
    ANOMALY_WARNING,
    ANOMALY_NONE
  };

  typedef Anomaly_Severity &Anomaly_Severity_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Anomaly_Severity;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Scheduling_Anomaly;

  typedef
    ::TAO_Var_Var_T<
        Scheduling_Anomaly
      >
    Scheduling_Anomaly_var;
  
  typedef
    ::TAO_Out_T<
        Scheduling_Anomaly
      >
    Scheduling_Anomaly_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTSched_Export Scheduling_Anomaly
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Scheduling_Anomaly_var _var_type;
    typedef Scheduling_Anomaly_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager description;
    RtecScheduler::Anomaly_Severity severity;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Scheduling_Anomaly;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTECSCHEDULER_SCHEDULING_ANOMALY_SET_CH_)
#define _RTECSCHEDULER_SCHEDULING_ANOMALY_SET_CH_

  class Scheduling_Anomaly_Set;

  typedef
    ::TAO_VarSeq_Var_T<
        Scheduling_Anomaly_Set
      >
    Scheduling_Anomaly_Set_var;

  typedef
    ::TAO_Seq_Out_T<
        Scheduling_Anomaly_Set
      >
    Scheduling_Anomaly_Set_out;

  class TAO_RTSched_Export Scheduling_Anomaly_Set
    : public
        ::TAO::unbounded_value_sequence<
            Scheduling_Anomaly
          >
  {
  public:
    Scheduling_Anomaly_Set (void);
    Scheduling_Anomaly_Set ( ::CORBA::ULong max);
    Scheduling_Anomaly_Set (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Scheduling_Anomaly* buffer, 
      ::CORBA::Boolean release = false);
    Scheduling_Anomaly_Set (const Scheduling_Anomaly_Set &);
    virtual ~Scheduling_Anomaly_Set (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Scheduling_Anomaly_Set_var _var_type;
    typedef Scheduling_Anomaly_Set_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Scheduling_Anomaly_Set;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export CYCLIC_DEPENDENCIES : public ::CORBA::UserException
  {
  public:
    
    CYCLIC_DEPENDENCIES (void);
    CYCLIC_DEPENDENCIES (const CYCLIC_DEPENDENCIES &);
    ~CYCLIC_DEPENDENCIES (void);

    CYCLIC_DEPENDENCIES &operator= (const CYCLIC_DEPENDENCIES &);

    static void _tao_any_destructor (void *);

    static CYCLIC_DEPENDENCIES *_downcast ( ::CORBA::Exception *);
    static const CYCLIC_DEPENDENCIES *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_CYCLIC_DEPENDENCIES;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export UNRESOLVED_LOCAL_DEPENDENCIES : public ::CORBA::UserException
  {
  public:
    
    UNRESOLVED_LOCAL_DEPENDENCIES (void);
    UNRESOLVED_LOCAL_DEPENDENCIES (const UNRESOLVED_LOCAL_DEPENDENCIES &);
    ~UNRESOLVED_LOCAL_DEPENDENCIES (void);

    UNRESOLVED_LOCAL_DEPENDENCIES &operator= (const UNRESOLVED_LOCAL_DEPENDENCIES &);

    static void _tao_any_destructor (void *);

    static UNRESOLVED_LOCAL_DEPENDENCIES *_downcast ( ::CORBA::Exception *);
    static const UNRESOLVED_LOCAL_DEPENDENCIES *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_UNRESOLVED_LOCAL_DEPENDENCIES;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export THREAD_SPECIFICATION : public ::CORBA::UserException
  {
  public:
    
    THREAD_SPECIFICATION (void);
    THREAD_SPECIFICATION (const THREAD_SPECIFICATION &);
    ~THREAD_SPECIFICATION (void);

    THREAD_SPECIFICATION &operator= (const THREAD_SPECIFICATION &);

    static void _tao_any_destructor (void *);

    static THREAD_SPECIFICATION *_downcast ( ::CORBA::Exception *);
    static const THREAD_SPECIFICATION *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_THREAD_SPECIFICATION;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export DUPLICATE_NAME : public ::CORBA::UserException
  {
  public:
    
    DUPLICATE_NAME (void);
    DUPLICATE_NAME (const DUPLICATE_NAME &);
    ~DUPLICATE_NAME (void);

    DUPLICATE_NAME &operator= (const DUPLICATE_NAME &);

    static void _tao_any_destructor (void *);

    static DUPLICATE_NAME *_downcast ( ::CORBA::Exception *);
    static const DUPLICATE_NAME *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_DUPLICATE_NAME;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export UNKNOWN_TASK : public ::CORBA::UserException
  {
  public:
    
    UNKNOWN_TASK (void);
    UNKNOWN_TASK (const UNKNOWN_TASK &);
    ~UNKNOWN_TASK (void);

    UNKNOWN_TASK &operator= (const UNKNOWN_TASK &);

    static void _tao_any_destructor (void *);

    static UNKNOWN_TASK *_downcast ( ::CORBA::Exception *);
    static const UNKNOWN_TASK *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_UNKNOWN_TASK;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export NOT_SCHEDULED : public ::CORBA::UserException
  {
  public:
    
    NOT_SCHEDULED (void);
    NOT_SCHEDULED (const NOT_SCHEDULED &);
    ~NOT_SCHEDULED (void);

    NOT_SCHEDULED &operator= (const NOT_SCHEDULED &);

    static void _tao_any_destructor (void *);

    static NOT_SCHEDULED *_downcast ( ::CORBA::Exception *);
    static const NOT_SCHEDULED *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_NOT_SCHEDULED;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export UTILIZATION_BOUND_EXCEEDED : public ::CORBA::UserException
  {
  public:
    
    UTILIZATION_BOUND_EXCEEDED (void);
    UTILIZATION_BOUND_EXCEEDED (const UTILIZATION_BOUND_EXCEEDED &);
    ~UTILIZATION_BOUND_EXCEEDED (void);

    UTILIZATION_BOUND_EXCEEDED &operator= (const UTILIZATION_BOUND_EXCEEDED &);

    static void _tao_any_destructor (void *);

    static UTILIZATION_BOUND_EXCEEDED *_downcast ( ::CORBA::Exception *);
    static const UTILIZATION_BOUND_EXCEEDED *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_UTILIZATION_BOUND_EXCEEDED;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export INSUFFICIENT_THREAD_PRIORITY_LEVELS : public ::CORBA::UserException
  {
  public:
    
    INSUFFICIENT_THREAD_PRIORITY_LEVELS (void);
    INSUFFICIENT_THREAD_PRIORITY_LEVELS (const INSUFFICIENT_THREAD_PRIORITY_LEVELS &);
    ~INSUFFICIENT_THREAD_PRIORITY_LEVELS (void);

    INSUFFICIENT_THREAD_PRIORITY_LEVELS &operator= (const INSUFFICIENT_THREAD_PRIORITY_LEVELS &);

    static void _tao_any_destructor (void *);

    static INSUFFICIENT_THREAD_PRIORITY_LEVELS *_downcast ( ::CORBA::Exception *);
    static const INSUFFICIENT_THREAD_PRIORITY_LEVELS *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_INSUFFICIENT_THREAD_PRIORITY_LEVELS;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export TASK_COUNT_MISMATCH : public ::CORBA::UserException
  {
  public:
    
    TASK_COUNT_MISMATCH (void);
    TASK_COUNT_MISMATCH (const TASK_COUNT_MISMATCH &);
    ~TASK_COUNT_MISMATCH (void);

    TASK_COUNT_MISMATCH &operator= (const TASK_COUNT_MISMATCH &);

    static void _tao_any_destructor (void *);

    static TASK_COUNT_MISMATCH *_downcast ( ::CORBA::Exception *);
    static const TASK_COUNT_MISMATCH *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_TASK_COUNT_MISMATCH;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export UNKNOWN_PRIORITY_LEVEL : public ::CORBA::UserException
  {
  public:
    
    UNKNOWN_PRIORITY_LEVEL (void);
    UNKNOWN_PRIORITY_LEVEL (const UNKNOWN_PRIORITY_LEVEL &);
    ~UNKNOWN_PRIORITY_LEVEL (void);

    UNKNOWN_PRIORITY_LEVEL &operator= (const UNKNOWN_PRIORITY_LEVEL &);

    static void _tao_any_destructor (void *);

    static UNKNOWN_PRIORITY_LEVEL *_downcast ( ::CORBA::Exception *);
    static const UNKNOWN_PRIORITY_LEVEL *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_UNKNOWN_PRIORITY_LEVEL;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export SYNCHRONIZATION_FAILURE : public ::CORBA::UserException
  {
  public:
    
    SYNCHRONIZATION_FAILURE (void);
    SYNCHRONIZATION_FAILURE (const SYNCHRONIZATION_FAILURE &);
    ~SYNCHRONIZATION_FAILURE (void);

    SYNCHRONIZATION_FAILURE &operator= (const SYNCHRONIZATION_FAILURE &);

    static void _tao_any_destructor (void *);

    static SYNCHRONIZATION_FAILURE *_downcast ( ::CORBA::Exception *);
    static const SYNCHRONIZATION_FAILURE *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_SYNCHRONIZATION_FAILURE;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_RTSched_Export INTERNAL : public ::CORBA::UserException
  {
  public:
    
    INTERNAL (void);
    INTERNAL (const INTERNAL &);
    ~INTERNAL (void);

    INTERNAL &operator= (const INTERNAL &);

    static void _tao_any_destructor (void *);

    static INTERNAL *_downcast ( ::CORBA::Exception *);
    static const INTERNAL *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_INTERNAL;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTECSCHEDULER_RT_INFO_SET_CH_)
#define _RTECSCHEDULER_RT_INFO_SET_CH_

  class RT_Info_Set;

  typedef
    ::TAO_VarSeq_Var_T<
        RT_Info_Set
      >
    RT_Info_Set_var;

  typedef
    ::TAO_Seq_Out_T<
        RT_Info_Set
      >
    RT_Info_Set_out;

  class TAO_RTSched_Export RT_Info_Set
    : public
        ::TAO::unbounded_value_sequence<
            RT_Info
          >
  {
  public:
    RT_Info_Set (void);
    RT_Info_Set ( ::CORBA::ULong max);
    RT_Info_Set (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      RT_Info* buffer, 
      ::CORBA::Boolean release = false);
    RT_Info_Set (const RT_Info_Set &);
    virtual ~RT_Info_Set (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RT_Info_Set_var _var_type;
    typedef RT_Info_Set_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_RT_Info_Set;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTECSCHEDULER_SCHEDULER__VAR_OUT_CH_)
#define _RTECSCHEDULER_SCHEDULER__VAR_OUT_CH_

  class Scheduler;
  typedef Scheduler *Scheduler_ptr;

  typedef
    TAO_Objref_Var_T<
        Scheduler
      >
    Scheduler_var;
  
  typedef
    TAO_Objref_Out_T<
        Scheduler
      >
    Scheduler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTSched_Export Scheduler
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Scheduler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Scheduler_ptr _ptr_type;
    typedef Scheduler_var _var_type;
    typedef Scheduler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Scheduler_ptr _duplicate (Scheduler_ptr obj);

    static void _tao_release (Scheduler_ptr obj);

    static Scheduler_ptr _narrow (::CORBA::Object_ptr obj);
    static Scheduler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Scheduler_ptr _nil (void);

    virtual ::RtecScheduler::handle_t create (
      const char * entry_point);

    virtual ::RtecScheduler::handle_t lookup (
      const char * entry_point);

    virtual ::RtecScheduler::RT_Info * get (
      ::RtecScheduler::handle_t handle);

    virtual void set (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::Criticality_t criticality,
      ::RtecScheduler::Time wc_time,
      ::RtecScheduler::Time typical_time,
      ::RtecScheduler::Time cached_time,
      ::RtecScheduler::Period_t period,
      ::RtecScheduler::Importance_t importance,
      ::RtecScheduler::Quantum_t quantum,
      ::RtecScheduler::Threads_t threads,
      ::RtecScheduler::Info_Type_t info_type);

    virtual void reset (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::Criticality_t criticality,
      ::RtecScheduler::Time wc_time,
      ::RtecScheduler::Time typical_time,
      ::RtecScheduler::Time cached_time,
      ::RtecScheduler::Period_t period,
      ::RtecScheduler::Importance_t importance,
      ::RtecScheduler::Quantum_t quantum,
      ::RtecScheduler::Threads_t threads,
      ::RtecScheduler::Info_Type_t info_type);

    virtual void set_seq (
      const ::RtecScheduler::RT_Info_Set & infos);

    virtual void reset_seq (
      const ::RtecScheduler::RT_Info_Set & infos);

    virtual void replace_seq (
      const ::RtecScheduler::RT_Info_Set & infos);

    virtual void add_dependency (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::handle_t dependency,
      ::CORBA::Long number_of_calls,
      ::RtecScheduler::Dependency_Type_t dependency_type);

    virtual void remove_dependency (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::handle_t dependency,
      ::CORBA::Long number_of_calls,
      ::RtecScheduler::Dependency_Type_t dependency_type);

    virtual void set_dependency_enable_state (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::handle_t dependency,
      ::CORBA::Long number_of_calls,
      ::RtecScheduler::Dependency_Type_t dependency_type,
      ::RtecScheduler::Dependency_Enabled_Type_t enabled);

    virtual void set_dependency_enable_state_seq (
      const ::RtecScheduler::Dependency_Set & dependencies);

    virtual void set_rt_info_enable_state (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::RT_Info_Enabled_Type_t enabled);

    virtual void set_rt_info_enable_state_seq (
      const ::RtecScheduler::RT_Info_Enable_State_Pair_Set & pair_set);

    virtual void priority (
      ::RtecScheduler::handle_t handle,
      ::RtecScheduler::OS_Priority_out o_priority,
      ::RtecScheduler::Preemption_Subpriority_t_out p_subpriority,
      ::RtecScheduler::Preemption_Priority_t_out p_priority);

    virtual void entry_point_priority (
      const char * entry_point,
      ::RtecScheduler::OS_Priority_out o_priority,
      ::RtecScheduler::Preemption_Subpriority_t_out p_subpriority,
      ::RtecScheduler::Preemption_Priority_t_out p_priority);

    virtual void compute_scheduling (
      ::CORBA::Long minimum_priority,
      ::CORBA::Long maximum_priority,
      ::RtecScheduler::RT_Info_Set_out infos,
      ::RtecScheduler::Dependency_Set_out dependencies,
      ::RtecScheduler::Config_Info_Set_out configs,
      ::RtecScheduler::Scheduling_Anomaly_Set_out anomalies);

    virtual void recompute_scheduling (
      ::CORBA::Long minimum_priority,
      ::CORBA::Long maximum_priority,
      ::RtecScheduler::Scheduling_Anomaly_Set_out anomalies);

    virtual void get_rt_info_set (
      ::RtecScheduler::RT_Info_Set_out infos);

    virtual void get_dependency_set (
      ::RtecScheduler::Dependency_Set_out dependencies);

    virtual void get_config_info_set (
      ::RtecScheduler::Config_Info_Set_out configs);

    virtual void dispatch_configuration (
      ::RtecScheduler::Preemption_Priority_t p_priority,
      ::RtecScheduler::OS_Priority_out o_priority,
      ::RtecScheduler::Dispatching_Type_t_out d_type);

    virtual ::RtecScheduler::Preemption_Priority_t last_scheduled_priority (
      void);

    virtual void get_config_infos (
      ::RtecScheduler::Config_Info_Set_out configs);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Scheduler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Scheduler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void RtecScheduler_Scheduler_setup_collocation (void);

    // Concrete non-local interface only.
    Scheduler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Scheduler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Scheduler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Scheduler (const Scheduler &);

    void operator= (const Scheduler &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTSched_Export ::CORBA::TypeCode_ptr const _tc_Scheduler;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module RtecScheduler

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RtecScheduler::Period_Set>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::Period_Set,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecScheduler::Criticality_t>
    : public
        Basic_Arg_Traits_T<
            ::RtecScheduler::Criticality_t,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecScheduler::Importance_t>
    : public
        Basic_Arg_Traits_T<
            ::RtecScheduler::Importance_t,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecScheduler::Info_Type_t>
    : public
        Basic_Arg_Traits_T<
            ::RtecScheduler::Info_Type_t,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecScheduler::RT_Info_Enabled_Type_t>
    : public
        Basic_Arg_Traits_T<
            ::RtecScheduler::RT_Info_Enabled_Type_t,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RtecScheduler::RT_Info_Enable_State_Pair>
    : public
        Fixed_Size_Arg_Traits_T<
            ::RtecScheduler::RT_Info_Enable_State_Pair,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RtecScheduler::RT_Info_Enable_State_Pair_Set>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::RT_Info_Enable_State_Pair_Set,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RtecScheduler::Dependency_Set>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::Dependency_Set,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RtecScheduler::RT_Info>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::RT_Info,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecScheduler::Dispatching_Type_t>
    : public
        Basic_Arg_Traits_T<
            ::RtecScheduler::Dispatching_Type_t,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RtecScheduler::Config_Info>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::Config_Info,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RtecScheduler::Config_Info_Set>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::Config_Info_Set,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecScheduler::Anomaly_Severity>
    : public
        Basic_Arg_Traits_T<
            ::RtecScheduler::Anomaly_Severity,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RtecScheduler::Scheduling_Anomaly>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::Scheduling_Anomaly,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RtecScheduler::Scheduling_Anomaly_Set>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::Scheduling_Anomaly_Set,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RtecScheduler::RT_Info_Set>
    : public
        Var_Size_Arg_Traits_T<
            ::RtecScheduler::RT_Info_Set,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_RTECSCHEDULER_SCHEDULER__ARG_TRAITS_)
#define _RTECSCHEDULER_SCHEDULER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::RtecScheduler::Scheduler>
    : public
        Object_Arg_Traits_T<
            ::RtecScheduler::Scheduler_ptr,
            ::RtecScheduler::Scheduler_var,
            ::RtecScheduler::Scheduler_out,
            TAO::Objref_Traits<RtecScheduler::Scheduler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_RTSched_Export
TAO::Collocation_Proxy_Broker *
(*RtecScheduler__TAO_Scheduler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_RTECSCHEDULER_SCHEDULER__TRAITS_)
#define _RTECSCHEDULER_SCHEDULER__TRAITS_

  template<>
  struct TAO_RTSched_Export Objref_Traits< ::RtecScheduler::Scheduler>
  {
    static ::RtecScheduler::Scheduler_ptr duplicate (
        ::RtecScheduler::Scheduler_ptr p);
    static void release (
        ::RtecScheduler::Scheduler_ptr p);
    static ::RtecScheduler::Scheduler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RtecScheduler::Scheduler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const ::RtecScheduler::Period_Set &); // copying version
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, ::RtecScheduler::Period_Set*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Period_Set *&); // deprecated
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::Period_Set *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const RtecScheduler::Period_Set &); // copying version
TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, RtecScheduler::Period_Set*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Period_Set *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::Period_Set *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Criticality_t);
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Criticality_t &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Criticality_t);
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Criticality_t &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Importance_t);
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Importance_t &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Importance_t);
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Importance_t &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Info_Type_t);
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Info_Type_t &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Info_Type_t);
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Info_Type_t &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::RT_Info_Enabled_Type_t);
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::RT_Info_Enabled_Type_t &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::RT_Info_Enabled_Type_t);
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::RT_Info_Enabled_Type_t &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::RT_Info_Enable_State_Pair &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::RT_Info_Enable_State_Pair*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::RT_Info_Enable_State_Pair *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::RT_Info_Enable_State_Pair *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::RT_Info_Enable_State_Pair &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::RT_Info_Enable_State_Pair*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::RT_Info_Enable_State_Pair *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::RT_Info_Enable_State_Pair *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const ::RtecScheduler::RT_Info_Enable_State_Pair_Set &); // copying version
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, ::RtecScheduler::RT_Info_Enable_State_Pair_Set*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::RT_Info_Enable_State_Pair_Set *&); // deprecated
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::RT_Info_Enable_State_Pair_Set *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const RtecScheduler::RT_Info_Enable_State_Pair_Set &); // copying version
TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, RtecScheduler::RT_Info_Enable_State_Pair_Set*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::RT_Info_Enable_State_Pair_Set *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::RT_Info_Enable_State_Pair_Set *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const ::RtecScheduler::Dependency_Set &); // copying version
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, ::RtecScheduler::Dependency_Set*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Dependency_Set *&); // deprecated
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::Dependency_Set *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const RtecScheduler::Dependency_Set &); // copying version
TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, RtecScheduler::Dependency_Set*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Dependency_Set *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::Dependency_Set *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::RT_Info &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::RT_Info*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::RT_Info *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::RT_Info *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::RT_Info &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::RT_Info*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::RT_Info *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::RT_Info *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Dispatching_Type_t);
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Dispatching_Type_t &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Dispatching_Type_t);
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Dispatching_Type_t &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::Config_Info &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Config_Info*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Config_Info *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::Config_Info *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::Config_Info &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Config_Info*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Config_Info *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::Config_Info *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const ::RtecScheduler::Config_Info_Set &); // copying version
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, ::RtecScheduler::Config_Info_Set*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Config_Info_Set *&); // deprecated
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::Config_Info_Set *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const RtecScheduler::Config_Info_Set &); // copying version
TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, RtecScheduler::Config_Info_Set*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Config_Info_Set *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::Config_Info_Set *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Anomaly_Severity);
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Anomaly_Severity &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Anomaly_Severity);
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Anomaly_Severity &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::Scheduling_Anomaly &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::Scheduling_Anomaly*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Scheduling_Anomaly *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::Scheduling_Anomaly *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::Scheduling_Anomaly &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Scheduling_Anomaly*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Scheduling_Anomaly *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::Scheduling_Anomaly *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const ::RtecScheduler::Scheduling_Anomaly_Set &); // copying version
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, ::RtecScheduler::Scheduling_Anomaly_Set*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::Scheduling_Anomaly_Set *&); // deprecated
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::Scheduling_Anomaly_Set *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const RtecScheduler::Scheduling_Anomaly_Set &); // copying version
TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, RtecScheduler::Scheduling_Anomaly_Set*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Scheduling_Anomaly_Set *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::Scheduling_Anomaly_Set *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::CYCLIC_DEPENDENCIES &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::CYCLIC_DEPENDENCIES*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::CYCLIC_DEPENDENCIES *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::CYCLIC_DEPENDENCIES *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::CYCLIC_DEPENDENCIES &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::CYCLIC_DEPENDENCIES*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::CYCLIC_DEPENDENCIES *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::CYCLIC_DEPENDENCIES *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::THREAD_SPECIFICATION &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::THREAD_SPECIFICATION*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::THREAD_SPECIFICATION *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::THREAD_SPECIFICATION *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::THREAD_SPECIFICATION &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::THREAD_SPECIFICATION*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::THREAD_SPECIFICATION *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::THREAD_SPECIFICATION *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::DUPLICATE_NAME &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::DUPLICATE_NAME*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::DUPLICATE_NAME *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::DUPLICATE_NAME *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::DUPLICATE_NAME &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::DUPLICATE_NAME*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::DUPLICATE_NAME *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::DUPLICATE_NAME *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::UNKNOWN_TASK &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::UNKNOWN_TASK*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::UNKNOWN_TASK *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::UNKNOWN_TASK *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::UNKNOWN_TASK &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::UNKNOWN_TASK*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::UNKNOWN_TASK *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::UNKNOWN_TASK *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::NOT_SCHEDULED &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::NOT_SCHEDULED*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::NOT_SCHEDULED *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::NOT_SCHEDULED *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::NOT_SCHEDULED &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::NOT_SCHEDULED*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::NOT_SCHEDULED *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::NOT_SCHEDULED *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::UTILIZATION_BOUND_EXCEEDED &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::UTILIZATION_BOUND_EXCEEDED*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::UTILIZATION_BOUND_EXCEEDED *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::UTILIZATION_BOUND_EXCEEDED *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::UTILIZATION_BOUND_EXCEEDED &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::UTILIZATION_BOUND_EXCEEDED*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::UTILIZATION_BOUND_EXCEEDED *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::UTILIZATION_BOUND_EXCEEDED *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::TASK_COUNT_MISMATCH &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::TASK_COUNT_MISMATCH*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::TASK_COUNT_MISMATCH *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::TASK_COUNT_MISMATCH *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::TASK_COUNT_MISMATCH &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::TASK_COUNT_MISMATCH*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::TASK_COUNT_MISMATCH *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::TASK_COUNT_MISMATCH *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::UNKNOWN_PRIORITY_LEVEL &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::UNKNOWN_PRIORITY_LEVEL*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::UNKNOWN_PRIORITY_LEVEL *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::UNKNOWN_PRIORITY_LEVEL *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::UNKNOWN_PRIORITY_LEVEL &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::UNKNOWN_PRIORITY_LEVEL*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::UNKNOWN_PRIORITY_LEVEL *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::UNKNOWN_PRIORITY_LEVEL *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::SYNCHRONIZATION_FAILURE &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::SYNCHRONIZATION_FAILURE*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::SYNCHRONIZATION_FAILURE *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::SYNCHRONIZATION_FAILURE *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::SYNCHRONIZATION_FAILURE &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::SYNCHRONIZATION_FAILURE*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::SYNCHRONIZATION_FAILURE *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::SYNCHRONIZATION_FAILURE *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  

  TAO_RTSched_Export void operator<<= (::CORBA::Any &, const ::RtecScheduler::INTERNAL &); // copying version
  TAO_RTSched_Export void operator<<= (::CORBA::Any &, ::RtecScheduler::INTERNAL*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::INTERNAL *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::INTERNAL *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export void operator<<= (::CORBA::Any &, const RtecScheduler::INTERNAL &); // copying version
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::INTERNAL*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::INTERNAL *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::INTERNAL *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const ::RtecScheduler::RT_Info_Set &); // copying version
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, ::RtecScheduler::RT_Info_Set*); // noncopying version
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecScheduler::RT_Info_Set *&); // deprecated
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecScheduler::RT_Info_Set *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, const RtecScheduler::RT_Info_Set &); // copying version
TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, RtecScheduler::RT_Info_Set*); // noncopying version
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::RT_Info_Set *&); // deprecated
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecScheduler::RT_Info_Set *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecScheduler
{
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, Scheduler_ptr); // copying
  TAO_RTSched_Export void operator<<= ( ::CORBA::Any &, Scheduler_ptr *); // non-copying
  TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Scheduler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Scheduler_ptr); // copying
TAO_RTSched_Export void operator<<= (::CORBA::Any &, RtecScheduler::Scheduler_ptr *); // non-copying
TAO_RTSched_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecScheduler::Scheduler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RtecScheduler_Period_Set_H_
#define _TAO_CDR_OP_RtecScheduler_Period_Set_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTSched_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecScheduler::Period_Set &_tao_sequence);
TAO_RTSched_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecScheduler::Period_Set &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RtecScheduler_Period_Set_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecScheduler::Criticality_t _tao_enumerator);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecScheduler::Criticality_t &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecScheduler::Importance_t _tao_enumerator);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecScheduler::Importance_t &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecScheduler::Info_Type_t _tao_enumerator);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecScheduler::Info_Type_t &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecScheduler::RT_Info_Enabled_Type_t _tao_enumerator);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecScheduler::RT_Info_Enabled_Type_t &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::RT_Info_Enable_State_Pair &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::RT_Info_Enable_State_Pair &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RtecScheduler_RT_Info_Enable_State_Pair_Set_H_
#define _TAO_CDR_OP_RtecScheduler_RT_Info_Enable_State_Pair_Set_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTSched_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecScheduler::RT_Info_Enable_State_Pair_Set &_tao_sequence);
TAO_RTSched_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecScheduler::RT_Info_Enable_State_Pair_Set &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RtecScheduler_RT_Info_Enable_State_Pair_Set_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RtecScheduler_Dependency_Set_H_
#define _TAO_CDR_OP_RtecScheduler_Dependency_Set_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTSched_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecScheduler::Dependency_Set &_tao_sequence);
TAO_RTSched_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecScheduler::Dependency_Set &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RtecScheduler_Dependency_Set_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::RT_Info &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::RT_Info &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecScheduler::Dispatching_Type_t _tao_enumerator);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecScheduler::Dispatching_Type_t &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::Config_Info &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::Config_Info &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RtecScheduler_Config_Info_Set_H_
#define _TAO_CDR_OP_RtecScheduler_Config_Info_Set_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTSched_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecScheduler::Config_Info_Set &_tao_sequence);
TAO_RTSched_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecScheduler::Config_Info_Set &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RtecScheduler_Config_Info_Set_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecScheduler::Anomaly_Severity _tao_enumerator);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecScheduler::Anomaly_Severity &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::Scheduling_Anomaly &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::Scheduling_Anomaly &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RtecScheduler_Scheduling_Anomaly_Set_H_
#define _TAO_CDR_OP_RtecScheduler_Scheduling_Anomaly_Set_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTSched_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecScheduler::Scheduling_Anomaly_Set &_tao_sequence);
TAO_RTSched_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecScheduler::Scheduling_Anomaly_Set &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RtecScheduler_Scheduling_Anomaly_Set_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::CYCLIC_DEPENDENCIES &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::CYCLIC_DEPENDENCIES &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::UNRESOLVED_LOCAL_DEPENDENCIES &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::THREAD_SPECIFICATION &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::THREAD_SPECIFICATION &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::DUPLICATE_NAME &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::DUPLICATE_NAME &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::UNKNOWN_TASK &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::UNKNOWN_TASK &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::NOT_SCHEDULED &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::NOT_SCHEDULED &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::UTILIZATION_BOUND_EXCEEDED &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::UTILIZATION_BOUND_EXCEEDED &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::INSUFFICIENT_THREAD_PRIORITY_LEVELS &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::TASK_COUNT_MISMATCH &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::TASK_COUNT_MISMATCH &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::UNKNOWN_PRIORITY_LEVEL &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::UNKNOWN_PRIORITY_LEVEL &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::SYNCHRONIZATION_FAILURE &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::SYNCHRONIZATION_FAILURE &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::INTERNAL &);
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::INTERNAL &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RtecScheduler_RT_Info_Set_H_
#define _TAO_CDR_OP_RtecScheduler_RT_Info_Set_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTSched_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecScheduler::RT_Info_Set &_tao_sequence);
TAO_RTSched_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecScheduler::RT_Info_Set &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RtecScheduler_RT_Info_Set_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTSched_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecScheduler::Scheduler_ptr );
TAO_RTSched_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecScheduler::Scheduler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "RtecSchedulerC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

