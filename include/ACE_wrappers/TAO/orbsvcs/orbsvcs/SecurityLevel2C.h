// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_SECURITYLEVEL2C_I00AZG_H_
#define _TAO_IDL_SECURITYLEVEL2C_I00AZG_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Security/security_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/SecurityLevel1C.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Security_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace SecurityLevel2
{

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_PRINCIPALAUTHENTICATOR__VAR_OUT_CH_)
#define _SECURITYLEVEL2_PRINCIPALAUTHENTICATOR__VAR_OUT_CH_

  class PrincipalAuthenticator;
  typedef PrincipalAuthenticator *PrincipalAuthenticator_ptr;

  typedef
    TAO_Objref_Var_T<
        PrincipalAuthenticator
      >
    PrincipalAuthenticator_var;
  
  typedef
    TAO_Objref_Out_T<
        PrincipalAuthenticator
      >
    PrincipalAuthenticator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_CREDENTIALS__VAR_OUT_CH_)
#define _SECURITYLEVEL2_CREDENTIALS__VAR_OUT_CH_

  class Credentials;
  typedef Credentials *Credentials_ptr;

  typedef
    TAO_Objref_Var_T<
        Credentials
      >
    Credentials_var;
  
  typedef
    TAO_Objref_Out_T<
        Credentials
      >
    Credentials_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_CURRENT__VAR_OUT_CH_)
#define _SECURITYLEVEL2_CURRENT__VAR_OUT_CH_

  class Current;
  typedef Current *Current_ptr;

  typedef
    TAO_Objref_Var_T<
        Current
      >
    Current_var;
  
  typedef
    TAO_Objref_Out_T<
        Current
      >
    Current_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export PrincipalAuthenticator
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PrincipalAuthenticator_ptr _ptr_type;
    typedef PrincipalAuthenticator_var _var_type;
    typedef PrincipalAuthenticator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PrincipalAuthenticator_ptr _duplicate (PrincipalAuthenticator_ptr obj);

    static void _tao_release (PrincipalAuthenticator_ptr obj);

    static PrincipalAuthenticator_ptr _narrow (::CORBA::Object_ptr obj);
    static PrincipalAuthenticator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PrincipalAuthenticator_ptr _nil (void);

    virtual ::Security::AuthenticationMethodList * get_supported_authen_methods (
      const char * mechanism) = 0;

    virtual ::Security::AuthenticationStatus authenticate (
      ::Security::AuthenticationMethod method,
      const char * mechanism,
      const char * security_name,
      const ::CORBA::Any & auth_data,
      const ::Security::AttributeList & privileges,
      ::SecurityLevel2::Credentials_out creds,
      ::CORBA::Any_out continuation_data,
      ::CORBA::Any_out auth_specific_data) = 0;

    virtual ::Security::AuthenticationStatus continue_authentication (
      const ::CORBA::Any & response_data,
      ::SecurityLevel2::Credentials_ptr creds,
      ::CORBA::Any_out continuation_data,
      ::CORBA::Any_out auth_specific_data) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    PrincipalAuthenticator (void);

    

    virtual ~PrincipalAuthenticator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PrincipalAuthenticator (const PrincipalAuthenticator &);

    void operator= (const PrincipalAuthenticator &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_PrincipalAuthenticator;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export Credentials
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Credentials_ptr _ptr_type;
    typedef Credentials_var _var_type;
    typedef Credentials_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Credentials_ptr _duplicate (Credentials_ptr obj);

    static void _tao_release (Credentials_ptr obj);

    static Credentials_ptr _narrow (::CORBA::Object_ptr obj);
    static Credentials_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Credentials_ptr _nil (void);

    virtual ::SecurityLevel2::Credentials_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    virtual ::Security::InvocationCredentialsType credentials_type (
      void) = 0;

    virtual ::Security::AuthenticationStatus authentication_state (
      void) = 0;

    virtual char * mechanism (
      void) = 0;

    virtual ::Security::AssociationOptions accepting_options_supported (
      void) = 0;

    virtual void accepting_options_supported (
      ::Security::AssociationOptions accepting_options_supported) = 0;

    virtual ::Security::AssociationOptions accepting_options_required (
      void) = 0;

    virtual void accepting_options_required (
      ::Security::AssociationOptions accepting_options_required) = 0;

    virtual ::Security::AssociationOptions invocation_options_supported (
      void) = 0;

    virtual void invocation_options_supported (
      ::Security::AssociationOptions invocation_options_supported) = 0;

    virtual ::Security::AssociationOptions invocation_options_required (
      void) = 0;

    virtual void invocation_options_required (
      ::Security::AssociationOptions invocation_options_required) = 0;

    virtual ::CORBA::Boolean get_security_feature (
      ::Security::CommunicationDirection direction,
      ::Security::SecurityFeature feature) = 0;

    virtual ::CORBA::Boolean set_attributes (
      const ::Security::AttributeList & requested_attributes,
      ::Security::AttributeList_out actual_attributes) = 0;

    virtual ::Security::AttributeList * get_attributes (
      const ::Security::AttributeTypeList & attributes) = 0;

    virtual ::CORBA::Boolean is_valid (
      ::Security::UtcT_out expiry_time) = 0;

    virtual ::CORBA::Boolean refresh (
      const ::CORBA::Any & refresh_data) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Credentials (void);

    

    virtual ~Credentials (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Credentials (const Credentials &);

    void operator= (const Credentials &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_Credentials;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_SECURITYLEVEL2_CREDENTIALSLIST_CH_)
#define _SECURITYLEVEL2_CREDENTIALSLIST_CH_

  class CredentialsList;

  typedef
    ::TAO_VarSeq_Var_T<
        CredentialsList
      >
    CredentialsList_var;

  typedef
    ::TAO_Seq_Out_T<
        CredentialsList
      >
    CredentialsList_out;

  class TAO_Security_Export CredentialsList
    : public
        ::TAO::unbounded_object_reference_sequence<
            Credentials,
            Credentials_var
          >
  {
  public:
    CredentialsList (void);
    CredentialsList ( ::CORBA::ULong max);
    CredentialsList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Credentials_ptr* buffer, 
      ::CORBA::Boolean release = false);
    CredentialsList (const CredentialsList &);
    virtual ~CredentialsList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef CredentialsList_var _var_type;
    typedef CredentialsList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_CredentialsList;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_RECEIVEDCREDENTIALS__VAR_OUT_CH_)
#define _SECURITYLEVEL2_RECEIVEDCREDENTIALS__VAR_OUT_CH_

  class ReceivedCredentials;
  typedef ReceivedCredentials *ReceivedCredentials_ptr;

  typedef
    TAO_Objref_Var_T<
        ReceivedCredentials
      >
    ReceivedCredentials_var;
  
  typedef
    TAO_Objref_Out_T<
        ReceivedCredentials
      >
    ReceivedCredentials_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export ReceivedCredentials
    : public virtual ::SecurityLevel2::Credentials
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ReceivedCredentials_ptr _ptr_type;
    typedef ReceivedCredentials_var _var_type;
    typedef ReceivedCredentials_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ReceivedCredentials_ptr _duplicate (ReceivedCredentials_ptr obj);

    static void _tao_release (ReceivedCredentials_ptr obj);

    static ReceivedCredentials_ptr _narrow (::CORBA::Object_ptr obj);
    static ReceivedCredentials_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ReceivedCredentials_ptr _nil (void);

    virtual ::SecurityLevel2::Credentials_ptr accepting_credentials (
      void) = 0;

    virtual ::Security::AssociationOptions association_options_used (
      void) = 0;

    virtual ::Security::DelegationState delegation_state (
      void) = 0;

    virtual ::Security::DelegationMode delegation_mode (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ReceivedCredentials (void);

    

    virtual ~ReceivedCredentials (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ReceivedCredentials (const ReceivedCredentials &);

    void operator= (const ReceivedCredentials &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_ReceivedCredentials;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_TARGETCREDENTIALS__VAR_OUT_CH_)
#define _SECURITYLEVEL2_TARGETCREDENTIALS__VAR_OUT_CH_

  class TargetCredentials;
  typedef TargetCredentials *TargetCredentials_ptr;

  typedef
    TAO_Objref_Var_T<
        TargetCredentials
      >
    TargetCredentials_var;
  
  typedef
    TAO_Objref_Out_T<
        TargetCredentials
      >
    TargetCredentials_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export TargetCredentials
    : public virtual ::SecurityLevel2::Credentials
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef TargetCredentials_ptr _ptr_type;
    typedef TargetCredentials_var _var_type;
    typedef TargetCredentials_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static TargetCredentials_ptr _duplicate (TargetCredentials_ptr obj);

    static void _tao_release (TargetCredentials_ptr obj);

    static TargetCredentials_ptr _narrow (::CORBA::Object_ptr obj);
    static TargetCredentials_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TargetCredentials_ptr _nil (void);

    virtual ::SecurityLevel2::Credentials_ptr initiating_credentials (
      void) = 0;

    virtual ::Security::AssociationOptions association_options_used (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TargetCredentials (void);

    

    virtual ~TargetCredentials (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TargetCredentials (const TargetCredentials &);

    void operator= (const TargetCredentials &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_TargetCredentials;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_REQUIREDRIGHTS__VAR_OUT_CH_)
#define _SECURITYLEVEL2_REQUIREDRIGHTS__VAR_OUT_CH_

  class RequiredRights;
  typedef RequiredRights *RequiredRights_ptr;

  typedef
    TAO_Objref_Var_T<
        RequiredRights
      >
    RequiredRights_var;
  
  typedef
    TAO_Objref_Out_T<
        RequiredRights
      >
    RequiredRights_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export RequiredRights
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<RequiredRights>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RequiredRights_ptr _ptr_type;
    typedef RequiredRights_var _var_type;
    typedef RequiredRights_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static RequiredRights_ptr _duplicate (RequiredRights_ptr obj);

    static void _tao_release (RequiredRights_ptr obj);

    static RequiredRights_ptr _narrow (::CORBA::Object_ptr obj);
    static RequiredRights_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static RequiredRights_ptr _nil (void);

    virtual void get_required_rights (
      ::CORBA::Object_ptr obj,
      const char * operation_name,
      const char * interface_name,
      ::Security::RightsList_out rights,
      ::Security::RightsCombinator_out rights_combinator);

    virtual void set_required_rights (
      const char * operation_name,
      const char * interface_name,
      const ::Security::RightsList & rights,
      ::Security::RightsCombinator rights_combinator);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_RequiredRights_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    RequiredRights (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void SecurityLevel2_RequiredRights_setup_collocation (void);

    // Concrete non-local interface only.
    RequiredRights (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    RequiredRights (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~RequiredRights (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    RequiredRights (const RequiredRights &);

    void operator= (const RequiredRights &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_RequiredRights;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_AUDITCHANNEL__VAR_OUT_CH_)
#define _SECURITYLEVEL2_AUDITCHANNEL__VAR_OUT_CH_

  class AuditChannel;
  typedef AuditChannel *AuditChannel_ptr;

  typedef
    TAO_Objref_Var_T<
        AuditChannel
      >
    AuditChannel_var;
  
  typedef
    TAO_Objref_Out_T<
        AuditChannel
      >
    AuditChannel_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export AuditChannel
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AuditChannel_ptr _ptr_type;
    typedef AuditChannel_var _var_type;
    typedef AuditChannel_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AuditChannel_ptr _duplicate (AuditChannel_ptr obj);

    static void _tao_release (AuditChannel_ptr obj);

    static AuditChannel_ptr _narrow (::CORBA::Object_ptr obj);
    static AuditChannel_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AuditChannel_ptr _nil (void);

    virtual void audit_write (
      const ::Security::AuditEventType & event_type,
      const ::SecurityLevel2::CredentialsList & creds,
      const ::Security::UtcT & time,
      const ::Security::SelectorValueList & descriptors,
      const ::CORBA::Any & event_specific_data) = 0;

    virtual ::Security::AuditChannelId audit_channel_id (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AuditChannel (void);

    

    virtual ~AuditChannel (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AuditChannel (const AuditChannel &);

    void operator= (const AuditChannel &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_AuditChannel;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_AUDITDECISION__VAR_OUT_CH_)
#define _SECURITYLEVEL2_AUDITDECISION__VAR_OUT_CH_

  class AuditDecision;
  typedef AuditDecision *AuditDecision_ptr;

  typedef
    TAO_Objref_Var_T<
        AuditDecision
      >
    AuditDecision_var;
  
  typedef
    TAO_Objref_Out_T<
        AuditDecision
      >
    AuditDecision_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export AuditDecision
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AuditDecision_ptr _ptr_type;
    typedef AuditDecision_var _var_type;
    typedef AuditDecision_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AuditDecision_ptr _duplicate (AuditDecision_ptr obj);

    static void _tao_release (AuditDecision_ptr obj);

    static AuditDecision_ptr _narrow (::CORBA::Object_ptr obj);
    static AuditDecision_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AuditDecision_ptr _nil (void);

    virtual ::CORBA::Boolean audit_needed (
      const ::Security::AuditEventType & event_type,
      const ::Security::SelectorValueList & value_list) = 0;

    virtual ::SecurityLevel2::AuditChannel_ptr audit_channel (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AuditDecision (void);

    

    virtual ~AuditDecision (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AuditDecision (const AuditDecision &);

    void operator= (const AuditDecision &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_AuditDecision;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_ACCESSDECISION__VAR_OUT_CH_)
#define _SECURITYLEVEL2_ACCESSDECISION__VAR_OUT_CH_

  class AccessDecision;
  typedef AccessDecision *AccessDecision_ptr;

  typedef
    TAO_Objref_Var_T<
        AccessDecision
      >
    AccessDecision_var;
  
  typedef
    TAO_Objref_Out_T<
        AccessDecision
      >
    AccessDecision_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export AccessDecision
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AccessDecision_ptr _ptr_type;
    typedef AccessDecision_var _var_type;
    typedef AccessDecision_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AccessDecision_ptr _duplicate (AccessDecision_ptr obj);

    static void _tao_release (AccessDecision_ptr obj);

    static AccessDecision_ptr _narrow (::CORBA::Object_ptr obj);
    static AccessDecision_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AccessDecision_ptr _nil (void);

    virtual ::CORBA::Boolean access_allowed (
      const ::SecurityLevel2::CredentialsList & cred_list,
      ::CORBA::Object_ptr target,
      const char * operation_name,
      const char * target_interface_name) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    AccessDecision (void);

    

    virtual ~AccessDecision (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AccessDecision (const AccessDecision &);

    void operator= (const AccessDecision &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_AccessDecision;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_QOPPOLICY__VAR_OUT_CH_)
#define _SECURITYLEVEL2_QOPPOLICY__VAR_OUT_CH_

  class QOPPolicy;
  typedef QOPPolicy *QOPPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        QOPPolicy
      >
    QOPPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        QOPPolicy
      >
    QOPPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export QOPPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef QOPPolicy_ptr _ptr_type;
    typedef QOPPolicy_var _var_type;
    typedef QOPPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static QOPPolicy_ptr _duplicate (QOPPolicy_ptr obj);

    static void _tao_release (QOPPolicy_ptr obj);

    static QOPPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static QOPPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static QOPPolicy_ptr _nil (void);

    virtual ::Security::QOP qop (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    QOPPolicy (void);

    

    virtual ~QOPPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    QOPPolicy (const QOPPolicy &);

    void operator= (const QOPPolicy &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_QOPPolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_MECHANISMPOLICY__VAR_OUT_CH_)
#define _SECURITYLEVEL2_MECHANISMPOLICY__VAR_OUT_CH_

  class MechanismPolicy;
  typedef MechanismPolicy *MechanismPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        MechanismPolicy
      >
    MechanismPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        MechanismPolicy
      >
    MechanismPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export MechanismPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef MechanismPolicy_ptr _ptr_type;
    typedef MechanismPolicy_var _var_type;
    typedef MechanismPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static MechanismPolicy_ptr _duplicate (MechanismPolicy_ptr obj);

    static void _tao_release (MechanismPolicy_ptr obj);

    static MechanismPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static MechanismPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MechanismPolicy_ptr _nil (void);

    virtual ::Security::MechanismTypeList * mechanisms (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MechanismPolicy (void);

    

    virtual ~MechanismPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    MechanismPolicy (const MechanismPolicy &);

    void operator= (const MechanismPolicy &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_MechanismPolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_INVOCATIONCREDENTIALSPOLICY__VAR_OUT_CH_)
#define _SECURITYLEVEL2_INVOCATIONCREDENTIALSPOLICY__VAR_OUT_CH_

  class InvocationCredentialsPolicy;
  typedef InvocationCredentialsPolicy *InvocationCredentialsPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        InvocationCredentialsPolicy
      >
    InvocationCredentialsPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        InvocationCredentialsPolicy
      >
    InvocationCredentialsPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export InvocationCredentialsPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef InvocationCredentialsPolicy_ptr _ptr_type;
    typedef InvocationCredentialsPolicy_var _var_type;
    typedef InvocationCredentialsPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static InvocationCredentialsPolicy_ptr _duplicate (InvocationCredentialsPolicy_ptr obj);

    static void _tao_release (InvocationCredentialsPolicy_ptr obj);

    static InvocationCredentialsPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static InvocationCredentialsPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static InvocationCredentialsPolicy_ptr _nil (void);

    virtual ::SecurityLevel2::CredentialsList * creds (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    InvocationCredentialsPolicy (void);

    

    virtual ~InvocationCredentialsPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    InvocationCredentialsPolicy (const InvocationCredentialsPolicy &);

    void operator= (const InvocationCredentialsPolicy &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_InvocationCredentialsPolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_ESTABLISHTRUSTPOLICY__VAR_OUT_CH_)
#define _SECURITYLEVEL2_ESTABLISHTRUSTPOLICY__VAR_OUT_CH_

  class EstablishTrustPolicy;
  typedef EstablishTrustPolicy *EstablishTrustPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        EstablishTrustPolicy
      >
    EstablishTrustPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        EstablishTrustPolicy
      >
    EstablishTrustPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export EstablishTrustPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef EstablishTrustPolicy_ptr _ptr_type;
    typedef EstablishTrustPolicy_var _var_type;
    typedef EstablishTrustPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static EstablishTrustPolicy_ptr _duplicate (EstablishTrustPolicy_ptr obj);

    static void _tao_release (EstablishTrustPolicy_ptr obj);

    static EstablishTrustPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static EstablishTrustPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static EstablishTrustPolicy_ptr _nil (void);

    virtual ::Security::EstablishTrust trust (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    EstablishTrustPolicy (void);

    

    virtual ~EstablishTrustPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    EstablishTrustPolicy (const EstablishTrustPolicy &);

    void operator= (const EstablishTrustPolicy &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_EstablishTrustPolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_DELEGATIONDIRECTIVEPOLICY__VAR_OUT_CH_)
#define _SECURITYLEVEL2_DELEGATIONDIRECTIVEPOLICY__VAR_OUT_CH_

  class DelegationDirectivePolicy;
  typedef DelegationDirectivePolicy *DelegationDirectivePolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        DelegationDirectivePolicy
      >
    DelegationDirectivePolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        DelegationDirectivePolicy
      >
    DelegationDirectivePolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export DelegationDirectivePolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef DelegationDirectivePolicy_ptr _ptr_type;
    typedef DelegationDirectivePolicy_var _var_type;
    typedef DelegationDirectivePolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static DelegationDirectivePolicy_ptr _duplicate (DelegationDirectivePolicy_ptr obj);

    static void _tao_release (DelegationDirectivePolicy_ptr obj);

    static DelegationDirectivePolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static DelegationDirectivePolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static DelegationDirectivePolicy_ptr _nil (void);

    virtual ::Security::DelegationDirective delegation_directive (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    DelegationDirectivePolicy (void);

    

    virtual ~DelegationDirectivePolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    DelegationDirectivePolicy (const DelegationDirectivePolicy &);

    void operator= (const DelegationDirectivePolicy &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_DelegationDirectivePolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_SECURITYLEVEL2_SECURITYMANAGER__VAR_OUT_CH_)
#define _SECURITYLEVEL2_SECURITYMANAGER__VAR_OUT_CH_

  class SecurityManager;
  typedef SecurityManager *SecurityManager_ptr;

  typedef
    TAO_Objref_Var_T<
        SecurityManager
      >
    SecurityManager_var;
  
  typedef
    TAO_Objref_Out_T<
        SecurityManager
      >
    SecurityManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export SecurityManager
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef SecurityManager_ptr _ptr_type;
    typedef SecurityManager_var _var_type;
    typedef SecurityManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static SecurityManager_ptr _duplicate (SecurityManager_ptr obj);

    static void _tao_release (SecurityManager_ptr obj);

    static SecurityManager_ptr _narrow (::CORBA::Object_ptr obj);
    static SecurityManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SecurityManager_ptr _nil (void);

    virtual ::Security::MechandOptionsList * supported_mechanisms (
      void) = 0;

    virtual ::SecurityLevel2::CredentialsList * own_credentials (
      void) = 0;

    virtual ::SecurityLevel2::RequiredRights_ptr required_rights_object (
      void) = 0;

    virtual ::SecurityLevel2::PrincipalAuthenticator_ptr principal_authenticator (
      void) = 0;

    virtual ::SecurityLevel2::AccessDecision_ptr access_decision (
      void) = 0;

    virtual ::SecurityLevel2::AuditDecision_ptr audit_decision (
      void) = 0;

    virtual ::SecurityLevel2::TargetCredentials_ptr get_target_credentials (
      ::CORBA::Object_ptr obj_ref) = 0;

    virtual void remove_own_credentials (
      ::SecurityLevel2::Credentials_ptr creds) = 0;

    virtual ::CORBA::Policy_ptr get_security_policy (
      ::CORBA::PolicyType policy_type) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    SecurityManager (void);

    

    virtual ~SecurityManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    SecurityManager (const SecurityManager &);

    void operator= (const SecurityManager &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_SecurityManager;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Security_Export Current
    : public virtual ::SecurityLevel1::Current
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Current_ptr _ptr_type;
    typedef Current_var _var_type;
    typedef Current_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Current_ptr _duplicate (Current_ptr obj);

    static void _tao_release (Current_ptr obj);

    static Current_ptr _narrow (::CORBA::Object_ptr obj);
    static Current_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Current_ptr _nil (void);

    virtual ::SecurityLevel2::ReceivedCredentials_ptr received_credentials (
      void) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Current (void);

    

    virtual ~Current (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Current (const Current &);

    void operator= (const Current &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_Current;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module SecurityLevel2

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace TAO
{

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

  namespace SL2
  {

    // TAO_IDL - Generated from
    // .\be\be_interface.cpp:784

#if !defined (_TAO_SL2_ACCESSDECISION__VAR_OUT_CH_)
#define _TAO_SL2_ACCESSDECISION__VAR_OUT_CH_

    class AccessDecision;
    typedef AccessDecision *AccessDecision_ptr;

    typedef
      TAO_Objref_Var_T<
          AccessDecision
        >
      AccessDecision_var;
    
    typedef
      TAO_Objref_Out_T<
          AccessDecision
        >
      AccessDecision_out;

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

    class TAO_Security_Export AccessDecision
      : public virtual ::SecurityLevel2::AccessDecision
    
    {
    public:

      // TAO_IDL - Generated from
      // .\be\be_type.cpp:307
      
      typedef AccessDecision_ptr _ptr_type;
      typedef AccessDecision_var _var_type;
      typedef AccessDecision_out _out_type;

      static void _tao_any_destructor (void *);

      // The static operations.
      static AccessDecision_ptr _duplicate (AccessDecision_ptr obj);

      static void _tao_release (AccessDecision_ptr obj);

      static AccessDecision_ptr _narrow (::CORBA::Object_ptr obj);
      static AccessDecision_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
      static AccessDecision_ptr _nil (void);

      virtual ::CORBA::Boolean access_allowed_ex (
        const char * orb_id,
        const ::CORBA::OctetSeq & adapter_id,
        const ::CORBA::OctetSeq & object_id,
        const ::SecurityLevel2::CredentialsList & cred_list,
        const char * operation_name) = 0;

      virtual ::CORBA::Boolean default_decision (
        void) = 0;

      virtual void default_decision (
        ::CORBA::Boolean default_decision) = 0;

      virtual void add_object (
        const char * orb_id,
        const ::CORBA::OctetSeq & adapter_id,
        const ::CORBA::OctetSeq & object_id,
        ::CORBA::Boolean allow_insecure_access) = 0;

      virtual void remove_object (
        const char * orb_id,
        const ::CORBA::OctetSeq & adapter_id,
        const ::CORBA::OctetSeq & object_id) = 0;

      // TAO_IDL - Generated from
      // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

      virtual ::CORBA::Boolean _is_a (const char *type_id);
      virtual const char* _interface_repository_id (void) const;
      virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
    
    protected:
      // Abstract or local interface only.
      AccessDecision (void);

      

      virtual ~AccessDecision (void);
    
    private:
      // Private and unimplemented for concrete interfaces.
      AccessDecision (const AccessDecision &);

      void operator= (const AccessDecision &);
    };

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    extern TAO_Security_Export ::CORBA::TypeCode_ptr const _tc_AccessDecision;
  
  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70
  
  } // module TAO::SL2

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module TAO

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::SecurityLevel2::CredentialsList>
    : public
        Var_Size_Arg_Traits_T<
            ::SecurityLevel2::CredentialsList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_SECURITYLEVEL2_REQUIREDRIGHTS__ARG_TRAITS_)
#define _SECURITYLEVEL2_REQUIREDRIGHTS__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::SecurityLevel2::RequiredRights>
    : public
        Object_Arg_Traits_T<
            ::SecurityLevel2::RequiredRights_ptr,
            ::SecurityLevel2::RequiredRights_var,
            ::SecurityLevel2::RequiredRights_out,
            TAO::Objref_Traits<SecurityLevel2::RequiredRights>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_Security_Export
TAO::Collocation_Proxy_Broker *
(*SecurityLevel2__TAO_RequiredRights_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SECURITYLEVEL2_PRINCIPALAUTHENTICATOR__TRAITS_)
#define _SECURITYLEVEL2_PRINCIPALAUTHENTICATOR__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::PrincipalAuthenticator>
  {
    static ::SecurityLevel2::PrincipalAuthenticator_ptr duplicate (
        ::SecurityLevel2::PrincipalAuthenticator_ptr p);
    static void release (
        ::SecurityLevel2::PrincipalAuthenticator_ptr p);
    static ::SecurityLevel2::PrincipalAuthenticator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::PrincipalAuthenticator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_CREDENTIALS__TRAITS_)
#define _SECURITYLEVEL2_CREDENTIALS__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::Credentials>
  {
    static ::SecurityLevel2::Credentials_ptr duplicate (
        ::SecurityLevel2::Credentials_ptr p);
    static void release (
        ::SecurityLevel2::Credentials_ptr p);
    static ::SecurityLevel2::Credentials_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::Credentials_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_RECEIVEDCREDENTIALS__TRAITS_)
#define _SECURITYLEVEL2_RECEIVEDCREDENTIALS__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::ReceivedCredentials>
  {
    static ::SecurityLevel2::ReceivedCredentials_ptr duplicate (
        ::SecurityLevel2::ReceivedCredentials_ptr p);
    static void release (
        ::SecurityLevel2::ReceivedCredentials_ptr p);
    static ::SecurityLevel2::ReceivedCredentials_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::ReceivedCredentials_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_TARGETCREDENTIALS__TRAITS_)
#define _SECURITYLEVEL2_TARGETCREDENTIALS__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::TargetCredentials>
  {
    static ::SecurityLevel2::TargetCredentials_ptr duplicate (
        ::SecurityLevel2::TargetCredentials_ptr p);
    static void release (
        ::SecurityLevel2::TargetCredentials_ptr p);
    static ::SecurityLevel2::TargetCredentials_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::TargetCredentials_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_REQUIREDRIGHTS__TRAITS_)
#define _SECURITYLEVEL2_REQUIREDRIGHTS__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::RequiredRights>
  {
    static ::SecurityLevel2::RequiredRights_ptr duplicate (
        ::SecurityLevel2::RequiredRights_ptr p);
    static void release (
        ::SecurityLevel2::RequiredRights_ptr p);
    static ::SecurityLevel2::RequiredRights_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::RequiredRights_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_AUDITCHANNEL__TRAITS_)
#define _SECURITYLEVEL2_AUDITCHANNEL__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::AuditChannel>
  {
    static ::SecurityLevel2::AuditChannel_ptr duplicate (
        ::SecurityLevel2::AuditChannel_ptr p);
    static void release (
        ::SecurityLevel2::AuditChannel_ptr p);
    static ::SecurityLevel2::AuditChannel_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::AuditChannel_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_AUDITDECISION__TRAITS_)
#define _SECURITYLEVEL2_AUDITDECISION__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::AuditDecision>
  {
    static ::SecurityLevel2::AuditDecision_ptr duplicate (
        ::SecurityLevel2::AuditDecision_ptr p);
    static void release (
        ::SecurityLevel2::AuditDecision_ptr p);
    static ::SecurityLevel2::AuditDecision_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::AuditDecision_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_ACCESSDECISION__TRAITS_)
#define _SECURITYLEVEL2_ACCESSDECISION__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::AccessDecision>
  {
    static ::SecurityLevel2::AccessDecision_ptr duplicate (
        ::SecurityLevel2::AccessDecision_ptr p);
    static void release (
        ::SecurityLevel2::AccessDecision_ptr p);
    static ::SecurityLevel2::AccessDecision_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::AccessDecision_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_QOPPOLICY__TRAITS_)
#define _SECURITYLEVEL2_QOPPOLICY__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::QOPPolicy>
  {
    static ::SecurityLevel2::QOPPolicy_ptr duplicate (
        ::SecurityLevel2::QOPPolicy_ptr p);
    static void release (
        ::SecurityLevel2::QOPPolicy_ptr p);
    static ::SecurityLevel2::QOPPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::QOPPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_MECHANISMPOLICY__TRAITS_)
#define _SECURITYLEVEL2_MECHANISMPOLICY__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::MechanismPolicy>
  {
    static ::SecurityLevel2::MechanismPolicy_ptr duplicate (
        ::SecurityLevel2::MechanismPolicy_ptr p);
    static void release (
        ::SecurityLevel2::MechanismPolicy_ptr p);
    static ::SecurityLevel2::MechanismPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::MechanismPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_INVOCATIONCREDENTIALSPOLICY__TRAITS_)
#define _SECURITYLEVEL2_INVOCATIONCREDENTIALSPOLICY__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::InvocationCredentialsPolicy>
  {
    static ::SecurityLevel2::InvocationCredentialsPolicy_ptr duplicate (
        ::SecurityLevel2::InvocationCredentialsPolicy_ptr p);
    static void release (
        ::SecurityLevel2::InvocationCredentialsPolicy_ptr p);
    static ::SecurityLevel2::InvocationCredentialsPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::InvocationCredentialsPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_ESTABLISHTRUSTPOLICY__TRAITS_)
#define _SECURITYLEVEL2_ESTABLISHTRUSTPOLICY__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::EstablishTrustPolicy>
  {
    static ::SecurityLevel2::EstablishTrustPolicy_ptr duplicate (
        ::SecurityLevel2::EstablishTrustPolicy_ptr p);
    static void release (
        ::SecurityLevel2::EstablishTrustPolicy_ptr p);
    static ::SecurityLevel2::EstablishTrustPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::EstablishTrustPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_DELEGATIONDIRECTIVEPOLICY__TRAITS_)
#define _SECURITYLEVEL2_DELEGATIONDIRECTIVEPOLICY__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::DelegationDirectivePolicy>
  {
    static ::SecurityLevel2::DelegationDirectivePolicy_ptr duplicate (
        ::SecurityLevel2::DelegationDirectivePolicy_ptr p);
    static void release (
        ::SecurityLevel2::DelegationDirectivePolicy_ptr p);
    static ::SecurityLevel2::DelegationDirectivePolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::DelegationDirectivePolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_SECURITYMANAGER__TRAITS_)
#define _SECURITYLEVEL2_SECURITYMANAGER__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::SecurityManager>
  {
    static ::SecurityLevel2::SecurityManager_ptr duplicate (
        ::SecurityLevel2::SecurityManager_ptr p);
    static void release (
        ::SecurityLevel2::SecurityManager_ptr p);
    static ::SecurityLevel2::SecurityManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::SecurityManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SECURITYLEVEL2_CURRENT__TRAITS_)
#define _SECURITYLEVEL2_CURRENT__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::SecurityLevel2::Current>
  {
    static ::SecurityLevel2::Current_ptr duplicate (
        ::SecurityLevel2::Current_ptr p);
    static void release (
        ::SecurityLevel2::Current_ptr p);
    static ::SecurityLevel2::Current_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SecurityLevel2::Current_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TAO_SL2_ACCESSDECISION__TRAITS_)
#define _TAO_SL2_ACCESSDECISION__TRAITS_

  template<>
  struct TAO_Security_Export Objref_Traits< ::TAO::SL2::AccessDecision>
  {
    static ::TAO::SL2::AccessDecision_ptr duplicate (
        ::TAO::SL2::AccessDecision_ptr p);
    static void release (
        ::TAO::SL2::AccessDecision_ptr p);
    static ::TAO::SL2::AccessDecision_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::TAO::SL2::AccessDecision_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, PrincipalAuthenticator_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, PrincipalAuthenticator_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PrincipalAuthenticator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::PrincipalAuthenticator_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::PrincipalAuthenticator_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::PrincipalAuthenticator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, Credentials_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, Credentials_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Credentials_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::Credentials_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::Credentials_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::Credentials_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, const ::SecurityLevel2::CredentialsList &); // copying version
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, ::SecurityLevel2::CredentialsList*); // noncopying version
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::SecurityLevel2::CredentialsList *&); // deprecated
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::SecurityLevel2::CredentialsList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= ( ::CORBA::Any &, const SecurityLevel2::CredentialsList &); // copying version
TAO_Security_Export void operator<<= ( ::CORBA::Any &, SecurityLevel2::CredentialsList*); // noncopying version
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::CredentialsList *&); // deprecated
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const SecurityLevel2::CredentialsList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, ReceivedCredentials_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, ReceivedCredentials_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ReceivedCredentials_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::ReceivedCredentials_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::ReceivedCredentials_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::ReceivedCredentials_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, TargetCredentials_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, TargetCredentials_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TargetCredentials_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::TargetCredentials_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::TargetCredentials_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::TargetCredentials_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, RequiredRights_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, RequiredRights_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RequiredRights_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::RequiredRights_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::RequiredRights_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::RequiredRights_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, AuditChannel_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, AuditChannel_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AuditChannel_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::AuditChannel_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::AuditChannel_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::AuditChannel_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, AuditDecision_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, AuditDecision_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AuditDecision_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::AuditDecision_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::AuditDecision_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::AuditDecision_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, AccessDecision_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, AccessDecision_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AccessDecision_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::AccessDecision_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::AccessDecision_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::AccessDecision_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, QOPPolicy_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, QOPPolicy_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, QOPPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::QOPPolicy_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::QOPPolicy_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::QOPPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, MechanismPolicy_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, MechanismPolicy_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, MechanismPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::MechanismPolicy_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::MechanismPolicy_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::MechanismPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, InvocationCredentialsPolicy_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, InvocationCredentialsPolicy_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, InvocationCredentialsPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::InvocationCredentialsPolicy_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::InvocationCredentialsPolicy_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::InvocationCredentialsPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, EstablishTrustPolicy_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, EstablishTrustPolicy_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, EstablishTrustPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::EstablishTrustPolicy_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::EstablishTrustPolicy_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::EstablishTrustPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, DelegationDirectivePolicy_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, DelegationDirectivePolicy_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DelegationDirectivePolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::DelegationDirectivePolicy_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::DelegationDirectivePolicy_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::DelegationDirectivePolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, SecurityManager_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, SecurityManager_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::SecurityManager_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::SecurityManager_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::SecurityManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel2
{
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, Current_ptr); // copying
  TAO_Security_Export void operator<<= ( ::CORBA::Any &, Current_ptr *); // non-copying
  TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Current_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::Current_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, SecurityLevel2::Current_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SecurityLevel2::Current_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO
{
  
  namespace SL2
  {
    TAO_Security_Export void operator<<= ( ::CORBA::Any &, AccessDecision_ptr); // copying
    TAO_Security_Export void operator<<= ( ::CORBA::Any &, AccessDecision_ptr *); // non-copying
    TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AccessDecision_ptr &);
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export void operator<<= (::CORBA::Any &, TAO::SL2::AccessDecision_ptr); // copying
TAO_Security_Export void operator<<= (::CORBA::Any &, TAO::SL2::AccessDecision_ptr *); // non-copying
TAO_Security_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO::SL2::AccessDecision_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Security_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SecurityLevel2::RequiredRights_ptr );
TAO_Security_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, SecurityLevel2::RequiredRights_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "SecurityLevel2C.inl"
#endif /* defined INLINE */

#endif /* ifndef */

