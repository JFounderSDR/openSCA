// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "RtecUDPAdminC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Array_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "RtecUDPAdminC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecUDPAdmin_UDP_Addr[] =
      {
        { "ipaddr", &CORBA::_tc_ulong },
        { "port", &CORBA::_tc_ushort }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecUDPAdmin_UDP_Addr (
  ::CORBA::tk_struct,
  "IDL:RtecUDPAdmin/UDP_Addr:1.0",
  "UDP_Addr",
  _tao_fields_RtecUDPAdmin_UDP_Addr,
  2);


namespace RtecUDPAdmin
{
  ::CORBA::TypeCode_ptr const _tc_UDP_Addr =
    &_tao_tc_RtecUDPAdmin_UDP_Addr;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecUDPAdmin::UDP_Addr::_tao_any_destructor (
    void *_tao_void_pointer)
{
  UDP_Addr *_tao_tmp_pointer =
    static_cast<UDP_Addr *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/array_cs.cpp:100

RtecUDPAdmin::char16_slice *
RtecUDPAdmin::char16_dup (const RtecUDPAdmin::char16_slice *_tao_src_array)
{
  RtecUDPAdmin::char16_slice *_tao_dup_array =
    RtecUDPAdmin::char16_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <RtecUDPAdmin::char16_slice *> (0);
    }
  
  RtecUDPAdmin::char16_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

RtecUDPAdmin::char16_slice *
RtecUDPAdmin::char16_alloc (void)
{
  RtecUDPAdmin::char16_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[16], 0);
  return retval;
}

void
RtecUDPAdmin::char16_free (
    RtecUDPAdmin::char16_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void 
RtecUDPAdmin::char16_copy (
    RtecUDPAdmin::char16_slice * _tao_to,
    const RtecUDPAdmin::char16_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 16; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:297


#ifndef _TAO_TYPECODE_RtecUDPAdmin_char16_GUARD
#define _TAO_TYPECODE_RtecUDPAdmin_char16_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        RtecUDPAdmin_char16_16 (
          ::CORBA::tk_array,
          &CORBA::_tc_char,
          16U);
        
      ::CORBA::TypeCode_ptr const tc_RtecUDPAdmin_char16 =
        &RtecUDPAdmin_char16_16;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_RtecUDPAdmin_char16_GUARD */
static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecUDPAdmin_char16 (
    ::CORBA::tk_alias,
    "IDL:RtecUDPAdmin/char16:1.0",
    "char16",
    &TAO::TypeCode::tc_RtecUDPAdmin_char16);
  

namespace RtecUDPAdmin
{
  ::CORBA::TypeCode_ptr const _tc_char16 =
    &_tao_tc_RtecUDPAdmin_char16;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:297

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecUDPAdmin_UDP_Addr_v6[] =
      {
        { "ipaddr", &RtecUDPAdmin::_tc_char16 },
        { "port", &CORBA::_tc_ushort }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecUDPAdmin_UDP_Addr_v6 (
  ::CORBA::tk_struct,
  "IDL:RtecUDPAdmin/UDP_Addr_v6:1.0",
  "UDP_Addr_v6",
  _tao_fields_RtecUDPAdmin_UDP_Addr_v6,
  2);


namespace RtecUDPAdmin
{
  ::CORBA::TypeCode_ptr const _tc_UDP_Addr_v6 =
    &_tao_tc_RtecUDPAdmin_UDP_Addr_v6;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor (
    void *_tao_void_pointer)
{
  UDP_Addr_v6 *_tao_tmp_pointer =
    static_cast<UDP_Addr_v6 *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_RtecUDPAdmin_Address_Family[] =
  {
    "Rtec_inet",
    "Rtec_inet6"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_RtecUDPAdmin_Address_Family (
    "IDL:RtecUDPAdmin/Address_Family:1.0",
    "Address_Family",
    _tao_enumerators_RtecUDPAdmin_Address_Family,
    2);
  

namespace RtecUDPAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Address_Family =
    &_tao_tc_RtecUDPAdmin_Address_Family;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_cs.cpp:82

RtecUDPAdmin::UDP_Address::UDP_Address (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (RtecUDPAdmin::Address_Family) -1;
}

RtecUDPAdmin::UDP_Address::UDP_Address (const ::RtecUDPAdmin::UDP_Address &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case RtecUDPAdmin::Rtec_inet:
    {
      this->u_.v4_addr_ = u.u_.v4_addr_;
    }
    break;
    case RtecUDPAdmin::Rtec_inet6:
    {
      this->u_.v6_addr_ = u.u_.v6_addr_;
    }
    break;
    default:
    break;
  }
}

RtecUDPAdmin::UDP_Address::~UDP_Address (void)
{
  // Finalize.
  this->_reset ();
}

void RtecUDPAdmin::UDP_Address::_tao_any_destructor (void *_tao_void_pointer)
{
  UDP_Address *tmp =
    static_cast<UDP_Address *> (_tao_void_pointer);
  delete tmp;
}

RtecUDPAdmin::UDP_Address &
RtecUDPAdmin::UDP_Address::operator= (const ::RtecUDPAdmin::UDP_Address &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case RtecUDPAdmin::Rtec_inet:
    {
      this->u_.v4_addr_ = u.u_.v4_addr_;
    }
    break;
    case RtecUDPAdmin::Rtec_inet6:
    {
      this->u_.v6_addr_ = u.u_.v6_addr_;
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void RtecUDPAdmin::UDP_Address::_reset (void)
{
  switch (this->disc_)
  {
    
    case RtecUDPAdmin::Rtec_inet:
      break;
    case RtecUDPAdmin::Rtec_inet6:
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/union_typecode.cpp:66

static TAO::TypeCode::Case_T<RtecUDPAdmin::Address_Family, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_RtecUDPAdmin_UDP_Address__0 (RtecUDPAdmin::Rtec_inet, "v4_addr", &RtecUDPAdmin::_tc_UDP_Addr);
static TAO::TypeCode::Case_T<RtecUDPAdmin::Address_Family, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_RtecUDPAdmin_UDP_Address__1 (RtecUDPAdmin::Rtec_inet6, "v6_addr", &RtecUDPAdmin::_tc_UDP_Addr_v6);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_RtecUDPAdmin_UDP_Address[] =
  {
    &_tao_cases_RtecUDPAdmin_UDP_Address__0,
    &_tao_cases_RtecUDPAdmin_UDP_Address__1
    
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecUDPAdmin_UDP_Address (
    "IDL:RtecUDPAdmin/UDP_Address:1.0",
    "UDP_Address",
    &RtecUDPAdmin::_tc_Address_Family,
    _tao_cases_RtecUDPAdmin_UDP_Address,
    2, -1);
  

namespace RtecUDPAdmin
{
  ::CORBA::TypeCode_ptr const _tc_UDP_Address =
    &_tao_tc_RtecUDPAdmin_UDP_Address;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecUDPAdmin::AddrServer.

RtecUDPAdmin::AddrServer_ptr
TAO::Objref_Traits<RtecUDPAdmin::AddrServer>::duplicate (
    RtecUDPAdmin::AddrServer_ptr p)
{
  return RtecUDPAdmin::AddrServer::_duplicate (p);
}

void
TAO::Objref_Traits<RtecUDPAdmin::AddrServer>::release (
    RtecUDPAdmin::AddrServer_ptr p)
{
  ::CORBA::release (p);
}

RtecUDPAdmin::AddrServer_ptr
TAO::Objref_Traits<RtecUDPAdmin::AddrServer>::nil (void)
{
  return RtecUDPAdmin::AddrServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecUDPAdmin::AddrServer>::marshal (
    const RtecUDPAdmin::AddrServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecUDPAdmin::AddrServer::get_addr (
  const ::RtecEventComm::EventHeader & header,
  ::RtecUDPAdmin::UDP_Addr_out addr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AddrServer_Proxy_Broker_ == 0)
    {
      RtecUDPAdmin_AddrServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventComm::EventHeader>::in_arg_val _tao_header (header);
  TAO::Arg_Traits< ::RtecUDPAdmin::UDP_Addr>::out_arg_val _tao_addr (addr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_header,
      &_tao_addr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_addr",
      8,
      this->the_TAO_AddrServer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecUDPAdmin::AddrServer::get_address (
  const ::RtecEventComm::EventHeader & header,
  ::RtecUDPAdmin::UDP_Address_out addr)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AddrServer_Proxy_Broker_ == 0)
    {
      RtecUDPAdmin_AddrServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventComm::EventHeader>::in_arg_val _tao_header (header);
  TAO::Arg_Traits< ::RtecUDPAdmin::UDP_Address>::out_arg_val _tao_addr (addr);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_header,
      &_tao_addr
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "get_address",
      11,
      this->the_TAO_AddrServer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

RtecUDPAdmin::AddrServer::AddrServer (void)
 : the_TAO_AddrServer_Proxy_Broker_ (0)
{
  this->RtecUDPAdmin_AddrServer_setup_collocation ();
}

void
RtecUDPAdmin::AddrServer::RtecUDPAdmin_AddrServer_setup_collocation ()
{
  if (::RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_AddrServer_Proxy_Broker_ =
        ::RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer (this);
    }
}

RtecUDPAdmin::AddrServer::~AddrServer (void)
{}

void 
RtecUDPAdmin::AddrServer::_tao_any_destructor (void *_tao_void_pointer)
{
  AddrServer *_tao_tmp_pointer =
    static_cast<AddrServer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecUDPAdmin::AddrServer_ptr
RtecUDPAdmin::AddrServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AddrServer>::narrow (
        _tao_objref,
        "IDL:RtecUDPAdmin/AddrServer:1.0",
        RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer
      );
}

RtecUDPAdmin::AddrServer_ptr
RtecUDPAdmin::AddrServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AddrServer>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecUDPAdmin/AddrServer:1.0",
        RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer
      );
}

RtecUDPAdmin::AddrServer_ptr
RtecUDPAdmin::AddrServer::_nil (void)
{
  return 0;
}

RtecUDPAdmin::AddrServer_ptr
RtecUDPAdmin::AddrServer::_duplicate (AddrServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecUDPAdmin::AddrServer::_tao_release (AddrServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecUDPAdmin::AddrServer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecUDPAdmin/AddrServer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecUDPAdmin::AddrServer::_interface_repository_id (void) const
{
  return "IDL:RtecUDPAdmin/AddrServer:1.0";
}

::CORBA::Boolean
RtecUDPAdmin::AddrServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecUDPAdmin_AddrServer (
    ::CORBA::tk_objref,
    "IDL:RtecUDPAdmin/AddrServer:1.0",
    "AddrServer");
  

namespace RtecUDPAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AddrServer =
    &_tao_tc_RtecUDPAdmin_AddrServer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecUDPAdmin::UDP_Addr &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecUDPAdmin::UDP_Addr *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Addr>::insert_copy (
          _tao_any,
          ::RtecUDPAdmin::UDP_Addr::_tao_any_destructor,
          ::RtecUDPAdmin::_tc_UDP_Addr,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecUDPAdmin::UDP_Addr *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Addr>::insert (
        _tao_any,
        ::RtecUDPAdmin::UDP_Addr::_tao_any_destructor,
        ::RtecUDPAdmin::_tc_UDP_Addr,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecUDPAdmin::UDP_Addr *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecUDPAdmin::UDP_Addr *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecUDPAdmin::UDP_Addr *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Addr>::extract (
          _tao_any,
          ::RtecUDPAdmin::UDP_Addr::_tao_any_destructor,
          ::RtecUDPAdmin::_tc_UDP_Addr,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::UDP_Addr &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecUDPAdmin::UDP_Addr *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Addr>::insert_copy (
        _tao_any,
        RtecUDPAdmin::UDP_Addr::_tao_any_destructor,
        RtecUDPAdmin::_tc_UDP_Addr,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecUDPAdmin::UDP_Addr *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Addr>::insert (
      _tao_any,
      RtecUDPAdmin::UDP_Addr::_tao_any_destructor,
      RtecUDPAdmin::_tc_UDP_Addr,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecUDPAdmin::UDP_Addr *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecUDPAdmin::UDP_Addr *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::UDP_Addr *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Addr>::extract (
        _tao_any,
        RtecUDPAdmin::UDP_Addr::_tao_any_destructor,
        RtecUDPAdmin::_tc_UDP_Addr,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::char16_forany &_tao_elem
  )
{
  TAO::Any_Array_Impl_T<
      RtecUDPAdmin::char16_slice,
      RtecUDPAdmin::char16_forany
    >::insert (
        _tao_any,
        RtecUDPAdmin::char16_forany::_tao_any_destructor,
        RtecUDPAdmin::_tc_char16,
        _tao_elem.nocopy ()
          ? _tao_elem.ptr ()
          : RtecUDPAdmin::char16_dup (_tao_elem.in ())
      );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecUDPAdmin::char16_forany &_tao_elem
  )
{
  return
    TAO::Any_Array_Impl_T<
        RtecUDPAdmin::char16_slice,
        RtecUDPAdmin::char16_forany
      >::extract (
          _tao_any,
          RtecUDPAdmin::char16_forany::_tao_any_destructor,
          RtecUDPAdmin::_tc_char16,
          _tao_elem.out ()
        );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecUDPAdmin::UDP_Addr_v6 &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecUDPAdmin::UDP_Addr_v6 *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Addr_v6>::insert_copy (
          _tao_any,
          ::RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor,
          ::RtecUDPAdmin::_tc_UDP_Addr_v6,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecUDPAdmin::UDP_Addr_v6 *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Addr_v6>::insert (
        _tao_any,
        ::RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor,
        ::RtecUDPAdmin::_tc_UDP_Addr_v6,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecUDPAdmin::UDP_Addr_v6 *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecUDPAdmin::UDP_Addr_v6 *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecUDPAdmin::UDP_Addr_v6 *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Addr_v6>::extract (
          _tao_any,
          ::RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor,
          ::RtecUDPAdmin::_tc_UDP_Addr_v6,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::UDP_Addr_v6 &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecUDPAdmin::UDP_Addr_v6 *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Addr_v6>::insert_copy (
        _tao_any,
        RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor,
        RtecUDPAdmin::_tc_UDP_Addr_v6,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecUDPAdmin::UDP_Addr_v6 *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Addr_v6>::insert (
      _tao_any,
      RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor,
      RtecUDPAdmin::_tc_UDP_Addr_v6,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecUDPAdmin::UDP_Addr_v6 *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecUDPAdmin::UDP_Addr_v6 *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::UDP_Addr_v6 *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Addr_v6>::extract (
        _tao_any,
        RtecUDPAdmin::UDP_Addr_v6::_tao_any_destructor,
        RtecUDPAdmin::_tc_UDP_Addr_v6,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecUDPAdmin::Address_Family _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::RtecUDPAdmin::Address_Family>::insert (
        _tao_any,
        ::RtecUDPAdmin::_tc_Address_Family,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecUDPAdmin::Address_Family &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::RtecUDPAdmin::Address_Family>::extract (
          _tao_any,
          ::RtecUDPAdmin::_tc_Address_Family,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecUDPAdmin::Address_Family _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<RtecUDPAdmin::Address_Family>::insert (
      _tao_any,
      RtecUDPAdmin::_tc_Address_Family,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecUDPAdmin::Address_Family &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<RtecUDPAdmin::Address_Family>::extract (
        _tao_any,
        RtecUDPAdmin::_tc_Address_Family,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecUDPAdmin::UDP_Address &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecUDPAdmin::UDP_Address *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Address>::insert_copy (
          _tao_any,
          ::RtecUDPAdmin::UDP_Address::_tao_any_destructor,
          ::RtecUDPAdmin::_tc_UDP_Address,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecUDPAdmin::UDP_Address *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Address>::insert (
        _tao_any,
        ::RtecUDPAdmin::UDP_Address::_tao_any_destructor,
        ::RtecUDPAdmin::_tc_UDP_Address,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecUDPAdmin::UDP_Address *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecUDPAdmin::UDP_Address *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecUDPAdmin::UDP_Address *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecUDPAdmin::UDP_Address>::extract (
          _tao_any,
          ::RtecUDPAdmin::UDP_Address::_tao_any_destructor,
          ::RtecUDPAdmin::_tc_UDP_Address,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::UDP_Address &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecUDPAdmin::UDP_Address *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Address>::insert_copy (
        _tao_any,
        RtecUDPAdmin::UDP_Address::_tao_any_destructor,
        RtecUDPAdmin::_tc_UDP_Address,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecUDPAdmin::UDP_Address *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Address>::insert (
      _tao_any,
      RtecUDPAdmin::UDP_Address::_tao_any_destructor,
      RtecUDPAdmin::_tc_UDP_Address,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecUDPAdmin::UDP_Address *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecUDPAdmin::UDP_Address *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecUDPAdmin::UDP_Address *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecUDPAdmin::UDP_Address>::extract (
        _tao_any,
        RtecUDPAdmin::UDP_Address::_tao_any_destructor,
        RtecUDPAdmin::_tc_UDP_Address,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecUDPAdmin::AddrServer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AddrServer_ptr _tao_elem)
  {
    AddrServer_ptr _tao_objptr =
      AddrServer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AddrServer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AddrServer>::insert (
        _tao_any,
        AddrServer::_tao_any_destructor,
        _tc_AddrServer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AddrServer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AddrServer>::extract (
          _tao_any,
          AddrServer::_tao_any_destructor,
          _tc_AddrServer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecUDPAdmin::AddrServer_ptr _tao_elem)
{
  RtecUDPAdmin::AddrServer_ptr _tao_objptr =
    RtecUDPAdmin::AddrServer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecUDPAdmin::AddrServer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecUDPAdmin::AddrServer>::insert (
      _tao_any,
      RtecUDPAdmin::AddrServer::_tao_any_destructor,
      RtecUDPAdmin::_tc_AddrServer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecUDPAdmin::AddrServer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecUDPAdmin::AddrServer>::extract (
        _tao_any,
        RtecUDPAdmin::AddrServer::_tao_any_destructor,
        RtecUDPAdmin::_tc_AddrServer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecUDPAdmin::UDP_Addr &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.ipaddr) &&
    (strm << _tao_aggregate.port);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecUDPAdmin::UDP_Addr &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.ipaddr) &&
    (strm >> _tao_aggregate.port);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/cdr_op_cs.cpp:171



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecUDPAdmin::char16_forany &_tao_array
  )
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        16
      );
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecUDPAdmin::char16_forany &_tao_array
  )
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        16
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecUDPAdmin::UDP_Addr_v6 &_tao_aggregate)
{
  RtecUDPAdmin::char16_forany _tao_aggregate_ipaddr
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((RtecUDPAdmin::char16_slice*) (
      #else
      (const_cast<
          RtecUDPAdmin::char16_slice*> (
      #endif
          _tao_aggregate.ipaddr
        )
    );
  return
    (strm << _tao_aggregate_ipaddr) &&
    (strm << _tao_aggregate.port);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecUDPAdmin::UDP_Addr_v6 &_tao_aggregate)
{
  RtecUDPAdmin::char16_forany _tao_aggregate_ipaddr
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((RtecUDPAdmin::char16_slice*) (
      #else
      (const_cast<
          RtecUDPAdmin::char16_slice*> (
      #endif
          _tao_aggregate.ipaddr
        )
    );
  return
    (strm >> _tao_aggregate_ipaddr) &&
    (strm >> _tao_aggregate.port);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecUDPAdmin::Address_Family _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecUDPAdmin::Address_Family & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<RtecUDPAdmin::Address_Family> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_cs.cpp:82



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecUDPAdmin::UDP_Address &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case RtecUDPAdmin::Rtec_inet:
      {
        result = strm << _tao_union.v4_addr ();
      }
      break;
    case RtecUDPAdmin::Rtec_inet6:
      {
        result = strm << _tao_union.v6_addr ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecUDPAdmin::UDP_Address &_tao_union
  )
{
  RtecUDPAdmin::Address_Family _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case RtecUDPAdmin::Rtec_inet:
      {
        RtecUDPAdmin::UDP_Addr _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.v4_addr (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case RtecUDPAdmin::Rtec_inet6:
      {
        RtecUDPAdmin::UDP_Addr_v6 _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.v6_addr (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecUDPAdmin::AddrServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecUDPAdmin::AddrServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecUDPAdmin::AddrServer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


