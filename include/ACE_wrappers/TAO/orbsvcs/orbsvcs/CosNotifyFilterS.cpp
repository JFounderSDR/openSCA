// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_COSNOTIFYFILTERS_XZFCDQ_CPP_
#define _TAO_IDL_COSNOTIFYFILTERS_XZFCDQ_CPP_


#include "CosNotifyFilterS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "CosNotifyFilterS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosNotifyFilter_Filter_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyFilter_Filter_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyFilter_Filter_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41,  0, 41,  5, 41, 41,
      0, 20, 41,  0,  0, 41, 41, 20, 41,  0,
     41, 41, 41, 41,  0,  0, 15, 41, 41, 41,
     41,  0, 41, 41, 41, 41, 41, 41,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosNotifyFilter_Filter_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 18,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 23,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 40,
      HASH_VALUE_RANGE = 36,
      DUPLICATES = 0,
      WORDLIST_SIZE = 23
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"match", &POA_CosNotifyFilter::Filter::match_skel, 0},
      {"",0,0},
      {"destroy", &POA_CosNotifyFilter::Filter::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_is_a", &POA_CosNotifyFilter::Filter::_is_a_skel, 0},
      {"match_typed", &POA_CosNotifyFilter::Filter::match_typed_skel, 0},
      {"",0,0},
      {"get_callbacks", &POA_CosNotifyFilter::Filter::get_callbacks_skel, 0},
      {"_repository_id", &POA_CosNotifyFilter::Filter::_repository_id_skel, 0},
      {"get_constraints", &POA_CosNotifyFilter::Filter::get_constraints_skel, 0},
      {"match_structured", &POA_CosNotifyFilter::Filter::match_structured_skel, 0},
      {"",0,0},
      {"modify_constraints", &POA_CosNotifyFilter::Filter::modify_constraints_skel, 0},
      {"get_all_constraints", &POA_CosNotifyFilter::Filter::get_all_constraints_skel, 0},
      {"add_constraints", &POA_CosNotifyFilter::Filter::add_constraints_skel, 0},
      {"",0,0},
      {"remove_all_constraints", &POA_CosNotifyFilter::Filter::remove_all_constraints_skel, 0},
      {"_get_constraint_grammar", &POA_CosNotifyFilter::Filter::_get_constraint_grammar_skel, 0},
      {"",0,0},
      {"_component", &POA_CosNotifyFilter::Filter::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosNotifyFilter::Filter::_non_existent_skel, 0},
      {"",0,0},
      {"_interface", &POA_CosNotifyFilter::Filter::_interface_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"detach_callback", &POA_CosNotifyFilter::Filter::detach_callback_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"attach_callback", &POA_CosNotifyFilter::Filter::attach_callback_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyFilter_Filter_Perfect_Hash_OpTable tao_CosNotifyFilter_Filter_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_function_pointer = 
    CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNotifyFilter__TAO_Filter_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosNotifyFilter::Filter::Filter (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyFilter_Filter_optable;
}

POA_CosNotifyFilter::Filter::Filter (const Filter& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNotifyFilter::Filter::~Filter (void)
{
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_constraint_grammar_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline _get_constraint_grammar_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->constraint_grammar ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::_get_constraint_grammar_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  _get_constraint_grammar_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_constraints_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline add_constraints_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::ConstraintInfoSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintExpSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::ConstraintExpSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->add_constraints (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::add_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_InvalidConstraint
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintExpSeq>::in_arg_val _tao_constraint_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_constraint_list
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  add_constraints_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class modify_constraints_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline modify_constraints_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::ConstraintIDSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::ConstraintInfoSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->modify_constraints (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::modify_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_InvalidConstraint,
      CosNotifyFilter::_tc_ConstraintNotFound
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_val _tao_del_list;
  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::in_arg_val _tao_modify_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_del_list,
      &_tao_modify_list
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  modify_constraints_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_constraints_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline get_constraints_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::ConstraintInfoSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::ConstraintIDSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_constraints (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::get_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_ConstraintNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_val _tao_id_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id_list
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  get_constraints_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_all_constraints_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_constraints_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::ConstraintInfoSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_all_constraints ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::get_all_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintInfoSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  get_all_constraints_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_all_constraints_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline remove_all_constraints_Filter (
      POA_CosNotifyFilter::Filter * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->remove_all_constraints ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::remove_all_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  remove_all_constraints_Filter command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_Filter (
      POA_CosNotifyFilter::Filter * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  destroy_Filter command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline match_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->match (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::match_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_UnsupportedFilterableData
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_filterable_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filterable_data
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  match_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_structured_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline match_structured_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::StructuredEvent> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->match_structured (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::match_structured_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_UnsupportedFilterableData
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_filterable_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filterable_data
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  match_structured_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_typed_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline match_typed_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotification::PropertySeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::PropertySeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->match_typed (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::match_typed_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_UnsupportedFilterableData
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::PropertySeq>::in_arg_val _tao_filterable_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filterable_data
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  match_typed_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class attach_callback_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline attach_callback_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyComm::NotifySubscribe>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyComm::NotifySubscribe> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->attach_callback (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::attach_callback_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyComm::NotifySubscribe>::in_arg_val _tao_callback;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_callback
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  attach_callback_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class detach_callback_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline detach_callback_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->detach_callback (
        arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::detach_callback_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_CallbackNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_callback;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_callback
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  detach_callback_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_callbacks_Filter
    : public TAO::Upcall_Command
  {
  public:
    inline get_callbacks_Filter (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::CallbackIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::CallbackIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_callbacks ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::Filter::get_callbacks_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::CallbackIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);

  get_callbacks_Filter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_Filter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_Filter_Upcall_Command (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::Filter::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);
  
  _is_a_Filter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_Filter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_Filter_Upcall_Command (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::Filter::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);
  
  _non_existent_Filter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_Filter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_Filter_Upcall_Command (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::Filter::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);
  
  _repository_id_Filter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosNotifyFilter::Filter::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_Filter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_Filter_Upcall_Command (
      POA_CosNotifyFilter::Filter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNotifyFilter::Filter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::Filter::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::Filter * const impl =
    static_cast<POA_CosNotifyFilter::Filter *> (servant);
  
  _get_component_Filter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNotifyFilter::Filter::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/Filter:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyFilter::Filter::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyFilter/Filter:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosNotifyFilter::Filter::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosNotifyFilter::Filter *
POA_CosNotifyFilter::Filter::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyFilter::Filter STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyFilter__TAO_Filter_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosNotifyFilter_MappingFilter_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyFilter_MappingFilter_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyFilter_MappingFilter_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39,  0, 39, 15, 39, 39,
      0,  0, 39, 10,  0, 39, 39, 39, 39,  0,
     39, 39, 39, 39,  0,  0, 15, 39, 39, 39,
     39,  0, 39, 39, 39, 39, 39, 39,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosNotifyFilter_MappingFilter_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 17,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 30,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 38,
      HASH_VALUE_RANGE = 34,
      DUPLICATES = 0,
      WORDLIST_SIZE = 22
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"match", &POA_CosNotifyFilter::MappingFilter::match_skel, 0},
      {"",0,0},
      {"destroy", &POA_CosNotifyFilter::MappingFilter::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_interface", &POA_CosNotifyFilter::MappingFilter::_interface_skel, 0},
      {"match_typed", &POA_CosNotifyFilter::MappingFilter::match_typed_skel, 0},
      {"",0,0},{"",0,0},
      {"_repository_id", &POA_CosNotifyFilter::MappingFilter::_repository_id_skel, 0},
      {"_get_value_type", &POA_CosNotifyFilter::MappingFilter::_get_value_type_skel, 0},
      {"match_structured", &POA_CosNotifyFilter::MappingFilter::match_structured_skel, 0},
      {"",0,0},
      {"_get_default_value", &POA_CosNotifyFilter::MappingFilter::_get_default_value_skel, 0},
      {"",0,0},
      {"_is_a", &POA_CosNotifyFilter::MappingFilter::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"_get_constraint_grammar", &POA_CosNotifyFilter::MappingFilter::_get_constraint_grammar_skel, 0},
      {"",0,0},
      {"_component", &POA_CosNotifyFilter::MappingFilter::_component_skel, 0},
      {"modify_mapping_constraints", &POA_CosNotifyFilter::MappingFilter::modify_mapping_constraints_skel, 0},
      {"",0,0},
      {"_non_existent", &POA_CosNotifyFilter::MappingFilter::_non_existent_skel, 0},
      {"",0,0},
      {"remove_all_mapping_constraints", &POA_CosNotifyFilter::MappingFilter::remove_all_mapping_constraints_skel, 0},
      {"",0,0},{"",0,0},
      {"get_mapping_constraints", &POA_CosNotifyFilter::MappingFilter::get_mapping_constraints_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"get_all_mapping_constraints", &POA_CosNotifyFilter::MappingFilter::get_all_mapping_constraints_skel, 0},
      {"add_mapping_constraints", &POA_CosNotifyFilter::MappingFilter::add_mapping_constraints_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyFilter_MappingFilter_Perfect_Hash_OpTable tao_CosNotifyFilter_MappingFilter_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_function_pointer = 
    CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosNotifyFilter::MappingFilter::MappingFilter (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyFilter_MappingFilter_optable;
}

POA_CosNotifyFilter::MappingFilter::MappingFilter (const MappingFilter& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNotifyFilter::MappingFilter::~MappingFilter (void)
{
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_constraint_grammar_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline _get_constraint_grammar_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->constraint_grammar ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::_get_constraint_grammar_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  _get_constraint_grammar_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_value_type_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline _get_value_type_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::TypeCode>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::TypeCode> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->value_type ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::_get_value_type_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::TypeCode>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  _get_value_type_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_default_value_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline _get_default_value_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->default_value ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::_get_default_value_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Any>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  _get_default_value_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_mapping_constraints_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline add_mapping_constraints_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingConstraintInfoSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintPairSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::MappingConstraintPairSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->add_mapping_constraints (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::add_mapping_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_InvalidConstraint,
      CosNotifyFilter::_tc_InvalidValue
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintPairSeq>::in_arg_val _tao_pair_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_pair_list
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  add_mapping_constraints_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class modify_mapping_constraints_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline modify_mapping_constraints_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::ConstraintIDSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::MappingConstraintInfoSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->modify_mapping_constraints (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::modify_mapping_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_InvalidConstraint,
      CosNotifyFilter::_tc_InvalidValue,
      CosNotifyFilter::_tc_ConstraintNotFound
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_val _tao_del_list;
  TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::in_arg_val _tao_modify_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_del_list,
      &_tao_modify_list
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  modify_mapping_constraints_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_mapping_constraints_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline get_mapping_constraints_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingConstraintInfoSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::ConstraintIDSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_mapping_constraints (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::get_mapping_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_ConstraintNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::ConstraintIDSeq>::in_arg_val _tao_id_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id_list
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  get_mapping_constraints_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_all_mapping_constraints_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_mapping_constraints_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingConstraintInfoSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_all_mapping_constraints ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::get_all_mapping_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingConstraintInfoSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  get_all_mapping_constraints_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_all_mapping_constraints_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline remove_all_mapping_constraints_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->remove_all_mapping_constraints ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::remove_all_mapping_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  remove_all_mapping_constraints_MappingFilter command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  destroy_MappingFilter command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline match_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->match (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::match_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_UnsupportedFilterableData
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_filterable_data;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_result_to_set;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filterable_data,
      &_tao_result_to_set
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  match_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_structured_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline match_structured_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::StructuredEvent> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->match_structured (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::match_structured_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_UnsupportedFilterableData
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_filterable_data;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_result_to_set;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filterable_data,
      &_tao_result_to_set
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  match_structured_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class match_typed_MappingFilter
    : public TAO::Upcall_Command
  {
  public:
    inline match_typed_MappingFilter (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotification::PropertySeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::PropertySeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->match_typed (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::MappingFilter::match_typed_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_UnsupportedFilterableData
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::PropertySeq>::in_arg_val _tao_filterable_data;
  TAO::SArg_Traits< ::CORBA::Any>::out_arg_val _tao_result_to_set;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filterable_data,
      &_tao_result_to_set
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);

  match_typed_MappingFilter command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_MappingFilter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_MappingFilter_Upcall_Command (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::MappingFilter::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);
  
  _is_a_MappingFilter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_MappingFilter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_MappingFilter_Upcall_Command (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::MappingFilter::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);
  
  _non_existent_MappingFilter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_MappingFilter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_MappingFilter_Upcall_Command (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::MappingFilter::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);
  
  _repository_id_MappingFilter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosNotifyFilter::MappingFilter::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_MappingFilter_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_MappingFilter_Upcall_Command (
      POA_CosNotifyFilter::MappingFilter * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNotifyFilter::MappingFilter * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::MappingFilter::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::MappingFilter * const impl =
    static_cast<POA_CosNotifyFilter::MappingFilter *> (servant);
  
  _get_component_MappingFilter_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNotifyFilter::MappingFilter::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/MappingFilter:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyFilter::MappingFilter::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyFilter/MappingFilter:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosNotifyFilter::MappingFilter::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosNotifyFilter::MappingFilter *
POA_CosNotifyFilter::MappingFilter::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyFilter::MappingFilter STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyFilter__TAO_MappingFilter_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosNotifyFilter_FilterFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyFilter_FilterFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyFilter_FilterFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27,  0, 27,  0, 27,  5,
      0,  5, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27,  0, 27,  0, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosNotifyFilter_FilterFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 21,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 26,
      HASH_VALUE_RANGE = 22,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosNotifyFilter::FilterFactory::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_CosNotifyFilter::FilterFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosNotifyFilter::FilterFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_CosNotifyFilter::FilterFactory::_repository_id_skel, 0},
      {"_interface", &POA_CosNotifyFilter::FilterFactory::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"create_filter", &POA_CosNotifyFilter::FilterFactory::create_filter_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"create_mapping_filter", &POA_CosNotifyFilter::FilterFactory::create_mapping_filter_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyFilter_FilterFactory_Perfect_Hash_OpTable tao_CosNotifyFilter_FilterFactory_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_function_pointer = 
    CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosNotifyFilter::FilterFactory::FilterFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyFilter_FilterFactory_optable;
}

POA_CosNotifyFilter::FilterFactory::FilterFactory (const FilterFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNotifyFilter::FilterFactory::~FilterFactory (void)
{
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_filter_FilterFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_filter_FilterFactory (
      POA_CosNotifyFilter::FilterFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::Filter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::Filter> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->create_filter (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::FilterFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterFactory::create_filter_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_InvalidGrammar
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::Filter>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_constraint_grammar;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_constraint_grammar
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);

  create_filter_FilterFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class create_mapping_filter_FilterFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_mapping_filter_FilterFactory (
      POA_CosNotifyFilter::FilterFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->create_mapping_filter (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyFilter::FilterFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterFactory::create_mapping_filter_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_InvalidGrammar
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_constraint_grammar;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_default_value;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_constraint_grammar,
      &_tao_default_value
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);

  create_mapping_filter_FilterFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_FilterFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_FilterFactory_Upcall_Command (
      POA_CosNotifyFilter::FilterFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::FilterFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);
  
  _is_a_FilterFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_FilterFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_FilterFactory_Upcall_Command (
      POA_CosNotifyFilter::FilterFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNotifyFilter::FilterFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);
  
  _non_existent_FilterFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_FilterFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_FilterFactory_Upcall_Command (
      POA_CosNotifyFilter::FilterFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNotifyFilter::FilterFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);
  
  _repository_id_FilterFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosNotifyFilter::FilterFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_FilterFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_FilterFactory_Upcall_Command (
      POA_CosNotifyFilter::FilterFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNotifyFilter::FilterFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterFactory * const impl =
    static_cast<POA_CosNotifyFilter::FilterFactory *> (servant);
  
  _get_component_FilterFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNotifyFilter::FilterFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyFilter::FilterFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyFilter/FilterFactory:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosNotifyFilter::FilterFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosNotifyFilter::FilterFactory *
POA_CosNotifyFilter::FilterFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyFilter::FilterFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyFilter__TAO_FilterFactory_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosNotifyFilter_FilterAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyFilter_FilterAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyFilter_FilterAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26, 26,  0, 26,  4, 26, 26,
      5, 15, 26,  0, 26, 26, 26, 26, 26, 26,
     26, 26, 26, 26,  0,  0, 10, 26, 26, 26,
     26, 26, 26, 26, 26, 26, 26, 26,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosNotifyFilter_FilterAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 10,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 18,
      MIN_HASH_VALUE = 9,
      MAX_HASH_VALUE = 25,
      HASH_VALUE_RANGE = 17,
      DUPLICATES = 0,
      WORDLIST_SIZE = 19
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
            {"_is_a", &POA_CosNotifyFilter::FilterAdmin::_is_a_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"",0,0},{"",0,0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"",0,0},{"",0,0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"_repository_id", &POA_CosNotifyFilter::FilterAdmin::_repository_id_skel, 0},
      {"_component", &POA_CosNotifyFilter::FilterAdmin::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosNotifyFilter::FilterAdmin::_non_existent_skel, 0},
      {"",0,0},
      {"_interface", &POA_CosNotifyFilter::FilterAdmin::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyFilter_FilterAdmin_Perfect_Hash_OpTable tao_CosNotifyFilter_FilterAdmin_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_function_pointer = 
    CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosNotifyFilter::FilterAdmin::FilterAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyFilter_FilterAdmin_optable;
}

POA_CosNotifyFilter::FilterAdmin::FilterAdmin (const FilterAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNotifyFilter::FilterAdmin::~FilterAdmin (void)
{
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class add_filter_FilterAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline add_filter_FilterAdmin (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyFilter::Filter>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::Filter> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->add_filter (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterAdmin::add_filter_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::Filter>::in_arg_val _tao_new_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_new_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);

  add_filter_FilterAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_filter_FilterAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline remove_filter_FilterAdmin (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->remove_filter (
        arg_1);
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterAdmin::remove_filter_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_FilterNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);

  remove_filter_FilterAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_filter_FilterAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline get_filter_FilterAdmin (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::Filter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::Filter> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_filter (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterAdmin::get_filter_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyFilter::_tc_FilterNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::Filter>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);

  get_filter_FilterAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_all_filters_FilterAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_filters_FilterAdmin (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::FilterIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::FilterIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_all_filters ();
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::FilterIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);

  get_all_filters_FilterAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class remove_all_filters_FilterAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline remove_all_filters_FilterAdmin (
      POA_CosNotifyFilter::FilterAdmin * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->remove_all_filters ();
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);

  remove_all_filters_FilterAdmin command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_FilterAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_FilterAdmin_Upcall_Command (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);
  
  _is_a_FilterAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_FilterAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_FilterAdmin_Upcall_Command (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);
  
  _non_existent_FilterAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_FilterAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_FilterAdmin_Upcall_Command (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);
  
  _repository_id_FilterAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosNotifyFilter::FilterAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosNotifyFilter
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_FilterAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_FilterAdmin_Upcall_Command (
      POA_CosNotifyFilter::FilterAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNotifyFilter::FilterAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosNotifyFilter::FilterAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyFilter::FilterAdmin * const impl =
    static_cast<POA_CosNotifyFilter::FilterAdmin *> (servant);
  
  _get_component_FilterAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNotifyFilter::FilterAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyFilter::FilterAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosNotifyFilter::FilterAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosNotifyFilter::FilterAdmin *
POA_CosNotifyFilter::FilterAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyFilter::FilterAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotifyFilter__TAO_FilterAdmin_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

