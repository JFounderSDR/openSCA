// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "SecurityLevel3C.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "SecurityLevel3C.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_NameType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/NameType:1.0",
    "NameType",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_NameType =
    &_tao_tc_SecurityLevel3_NameType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_NameComponent (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/NameComponent:1.0",
    "NameComponent",
    &CORBA::_tc_wstring);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_NameComponent =
    &_tao_tc_SecurityLevel3_NameComponent;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_NAMEPATH_CS_)
#define _SECURITYLEVEL3_NAMEPATH_CS_

SecurityLevel3::NamePath::NamePath (void)
{}

SecurityLevel3::NamePath::NamePath (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (max)
{}

SecurityLevel3::NamePath::NamePath (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::WChar * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
    (max, length, buffer, release)
{}

SecurityLevel3::NamePath::NamePath (
    const NamePath &seq)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (seq)
{}

SecurityLevel3::NamePath::~NamePath (void)
{}

void SecurityLevel3::NamePath::_tao_any_destructor (
    void * _tao_void_pointer)
{
  NamePath * _tao_tmp_pointer =
    static_cast<NamePath *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_NamePath_GUARD
#define _TAO_TYPECODE_SecurityLevel3_NamePath_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_NamePath_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_NameComponent,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_NamePath_0 =
        &SecurityLevel3_NamePath_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_NamePath_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_NamePath (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/NamePath:1.0",
    "NamePath",
    &TAO::TypeCode::tc_SecurityLevel3_NamePath_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_NamePath =
    &_tao_tc_SecurityLevel3_NamePath;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_NameValue (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/NameValue:1.0",
    "NameValue",
    &SecurityLevel3::_tc_NamePath);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_NameValue =
    &_tao_tc_SecurityLevel3_NameValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_SecurityLevel3_PrincipalName[] =
      {
        { "the_type", &SecurityLevel3::_tc_NameType },
        { "the_name", &SecurityLevel3::_tc_NameValue }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_PrincipalName (
  ::CORBA::tk_struct,
  "IDL:adiron.com/SecurityLevel3/PrincipalName:1.0",
  "PrincipalName",
  _tao_fields_SecurityLevel3_PrincipalName,
  2);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrincipalName =
    &_tao_tc_SecurityLevel3_PrincipalName;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
SecurityLevel3::PrincipalName::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PrincipalName *_tao_tmp_pointer =
    static_cast<PrincipalName *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_PRINCIPALNAMELIST_CS_)
#define _SECURITYLEVEL3_PRINCIPALNAMELIST_CS_

SecurityLevel3::PrincipalNameList::PrincipalNameList (void)
{}

SecurityLevel3::PrincipalNameList::PrincipalNameList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PrincipalName
      > (max)
{}

SecurityLevel3::PrincipalNameList::PrincipalNameList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::PrincipalName * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PrincipalName
      >
    (max, length, buffer, release)
{}

SecurityLevel3::PrincipalNameList::PrincipalNameList (
    const PrincipalNameList &seq)
  : ::TAO::unbounded_value_sequence<
        PrincipalName
      > (seq)
{}

SecurityLevel3::PrincipalNameList::~PrincipalNameList (void)
{}

void SecurityLevel3::PrincipalNameList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PrincipalNameList * _tao_tmp_pointer =
    static_cast<PrincipalNameList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_PrincipalNameList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_PrincipalNameList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_PrincipalNameList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_PrincipalName,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_PrincipalNameList_0 =
        &SecurityLevel3_PrincipalNameList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_PrincipalNameList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrincipalNameList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/PrincipalNameList:1.0",
    "PrincipalNameList",
    &TAO::TypeCode::tc_SecurityLevel3_PrincipalNameList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrincipalNameList =
    &_tao_tc_SecurityLevel3_PrincipalNameList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrinAttributeType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/PrinAttributeType:1.0",
    "PrinAttributeType",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrinAttributeType =
    &_tao_tc_SecurityLevel3_PrinAttributeType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrinAttributeValue (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/PrinAttributeValue:1.0",
    "PrinAttributeValue",
    &CORBA::_tc_wstring);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrinAttributeValue =
    &_tao_tc_SecurityLevel3_PrinAttributeValue;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_SecurityLevel3_PrinAttribute[] =
      {
        { "the_type", &SecurityLevel3::_tc_PrinAttributeType },
        { "the_value", &SecurityLevel3::_tc_PrinAttributeValue }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_PrinAttribute (
  ::CORBA::tk_struct,
  "IDL:adiron.com/SecurityLevel3/PrinAttribute:1.0",
  "PrinAttribute",
  _tao_fields_SecurityLevel3_PrinAttribute,
  2);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrinAttribute =
    &_tao_tc_SecurityLevel3_PrinAttribute;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
SecurityLevel3::PrinAttribute::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PrinAttribute *_tao_tmp_pointer =
    static_cast<PrinAttribute *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_PRINATTRIBUTELIST_CS_)
#define _SECURITYLEVEL3_PRINATTRIBUTELIST_CS_

SecurityLevel3::PrinAttributeList::PrinAttributeList (void)
{}

SecurityLevel3::PrinAttributeList::PrinAttributeList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PrinAttribute
      > (max)
{}

SecurityLevel3::PrinAttributeList::PrinAttributeList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::PrinAttribute * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PrinAttribute
      >
    (max, length, buffer, release)
{}

SecurityLevel3::PrinAttributeList::PrinAttributeList (
    const PrinAttributeList &seq)
  : ::TAO::unbounded_value_sequence<
        PrinAttribute
      > (seq)
{}

SecurityLevel3::PrinAttributeList::~PrinAttributeList (void)
{}

void SecurityLevel3::PrinAttributeList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PrinAttributeList * _tao_tmp_pointer =
    static_cast<PrinAttributeList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_PrinAttributeList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_PrinAttributeList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_PrinAttributeList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_PrinAttribute,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_PrinAttributeList_0 =
        &SecurityLevel3_PrinAttributeList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_PrinAttributeList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrinAttributeList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/PrinAttributeList:1.0",
    "PrinAttributeList",
    &TAO::TypeCode::tc_SecurityLevel3_PrinAttributeList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrinAttributeList =
    &_tao_tc_SecurityLevel3_PrinAttributeList;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_RESOURCENAMECOMPONENTS_CS_)
#define _SECURITYLEVEL3_RESOURCENAMECOMPONENTS_CS_

SecurityLevel3::ResourceNameComponents::ResourceNameComponents (void)
{}

SecurityLevel3::ResourceNameComponents::ResourceNameComponents (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

SecurityLevel3::ResourceNameComponents::ResourceNameComponents (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

SecurityLevel3::ResourceNameComponents::ResourceNameComponents (
    const ResourceNameComponents &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

SecurityLevel3::ResourceNameComponents::~ResourceNameComponents (void)
{}

void SecurityLevel3::ResourceNameComponents::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ResourceNameComponents * _tao_tmp_pointer =
    static_cast<ResourceNameComponents *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_ResourceNameComponents_GUARD
#define _TAO_TYPECODE_SecurityLevel3_ResourceNameComponents_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_ResourceNameComponents_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_ResourceNameComponents_0 =
        &SecurityLevel3_ResourceNameComponents_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_ResourceNameComponents_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ResourceNameComponents (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/ResourceNameComponents:1.0",
    "ResourceNameComponents",
    &TAO::TypeCode::tc_SecurityLevel3_ResourceNameComponents_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ResourceNameComponents =
    &_tao_tc_SecurityLevel3_ResourceNameComponents;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_SecurityLevel3_ResourceName[] =
      {
        { "components", &SecurityLevel3::_tc_ResourceNameComponents }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_ResourceName (
  ::CORBA::tk_struct,
  "IDL:adiron.com/SecurityLevel3/ResourceName:1.0",
  "ResourceName",
  _tao_fields_SecurityLevel3_ResourceName,
  1);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ResourceName =
    &_tao_tc_SecurityLevel3_ResourceName;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
SecurityLevel3::ResourceName::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ResourceName *_tao_tmp_pointer =
    static_cast<ResourceName *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_RESOURCENAMELIST_CS_)
#define _SECURITYLEVEL3_RESOURCENAMELIST_CS_

SecurityLevel3::ResourceNameList::ResourceNameList (void)
{}

SecurityLevel3::ResourceNameList::ResourceNameList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ResourceName
      > (max)
{}

SecurityLevel3::ResourceNameList::ResourceNameList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::ResourceName * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ResourceName
      >
    (max, length, buffer, release)
{}

SecurityLevel3::ResourceNameList::ResourceNameList (
    const ResourceNameList &seq)
  : ::TAO::unbounded_value_sequence<
        ResourceName
      > (seq)
{}

SecurityLevel3::ResourceNameList::~ResourceNameList (void)
{}

void SecurityLevel3::ResourceNameList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ResourceNameList * _tao_tmp_pointer =
    static_cast<ResourceNameList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_ResourceNameList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_ResourceNameList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_ResourceNameList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_ResourceName,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_ResourceNameList_0 =
        &SecurityLevel3_ResourceNameList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_ResourceNameList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ResourceNameList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/ResourceNameList:1.0",
    "ResourceNameList",
    &TAO::TypeCode::tc_SecurityLevel3_ResourceNameList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ResourceNameList =
    &_tao_tc_SecurityLevel3_ResourceNameList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_SecurityLevel3_ScopedPrivileges[] =
      {
        { "privilege_authority", &SecurityLevel3::_tc_PrincipalName },
        { "privileges", &SecurityLevel3::_tc_PrinAttributeList }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_ScopedPrivileges (
  ::CORBA::tk_struct,
  "IDL:adiron.com/SecurityLevel3/ScopedPrivileges:1.0",
  "ScopedPrivileges",
  _tao_fields_SecurityLevel3_ScopedPrivileges,
  2);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ScopedPrivileges =
    &_tao_tc_SecurityLevel3_ScopedPrivileges;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
SecurityLevel3::ScopedPrivileges::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ScopedPrivileges *_tao_tmp_pointer =
    static_cast<ScopedPrivileges *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_SCOPEDPRIVILEGESLIST_CS_)
#define _SECURITYLEVEL3_SCOPEDPRIVILEGESLIST_CS_

SecurityLevel3::ScopedPrivilegesList::ScopedPrivilegesList (void)
{}

SecurityLevel3::ScopedPrivilegesList::ScopedPrivilegesList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ScopedPrivileges
      > (max)
{}

SecurityLevel3::ScopedPrivilegesList::ScopedPrivilegesList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::ScopedPrivileges * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ScopedPrivileges
      >
    (max, length, buffer, release)
{}

SecurityLevel3::ScopedPrivilegesList::ScopedPrivilegesList (
    const ScopedPrivilegesList &seq)
  : ::TAO::unbounded_value_sequence<
        ScopedPrivileges
      > (seq)
{}

SecurityLevel3::ScopedPrivilegesList::~ScopedPrivilegesList (void)
{}

void SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ScopedPrivilegesList * _tao_tmp_pointer =
    static_cast<ScopedPrivilegesList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_ScopedPrivilegesList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_ScopedPrivilegesList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_ScopedPrivilegesList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_ScopedPrivileges,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_ScopedPrivilegesList_0 =
        &SecurityLevel3_ScopedPrivilegesList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_ScopedPrivilegesList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ScopedPrivilegesList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/ScopedPrivilegesList:1.0",
    "ScopedPrivilegesList",
    &TAO::TypeCode::tc_SecurityLevel3_ScopedPrivilegesList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ScopedPrivilegesList =
    &_tao_tc_SecurityLevel3_ScopedPrivilegesList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrincipalType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/PrincipalType:1.0",
    "PrincipalType",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrincipalType =
    &_tao_tc_SecurityLevel3_PrincipalType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_Principal[] =
  {
    { "the_type", &SecurityLevel3::_tc_PrincipalType, ::CORBA::PUBLIC_MEMBER },
    { "the_name", &SecurityLevel3::_tc_PrincipalName, ::CORBA::PUBLIC_MEMBER },
    { "environmental_attributes", &SecurityLevel3::_tc_PrinAttributeList, ::CORBA::PUBLIC_MEMBER },
    { "with_privileges", &SecurityLevel3::_tc_ScopedPrivilegesList, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_Principal (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/Principal:1.0",
    "Principal",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_SecurityLevel3_Principal,
    4);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_Principal =
    &_tao_tc_SecurityLevel3_Principal;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::Principal>::add_ref (
    SecurityLevel3::Principal * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::Principal>::remove_ref (
    SecurityLevel3::Principal * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::Principal>::release (
    SecurityLevel3::Principal * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::Principal *
SecurityLevel3::Principal::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::Principal * > (v);
}

const char *
SecurityLevel3::Principal::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::Principal::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::Principal::_tao_any_destructor (void *_tao_void_pointer)
{
  Principal *_tao_tmp_pointer =
    static_cast<Principal *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::Principal::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_Principal;
}

SecurityLevel3::Principal::~Principal (void)
{}

::CORBA::Boolean 
SecurityLevel3::Principal::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_Principal (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::Principal::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_Principal (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::Principal::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::Principal::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::Principal::_tao_unmarshal (
    TAO_InputCDR &strm,
    Principal *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Principal::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Principal::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_init_cs.cpp:75

SecurityLevel3::Principal_init::Principal_init (void)
{
}

SecurityLevel3::Principal_init::~Principal_init (void)
{
}

SecurityLevel3::Principal_init *
SecurityLevel3::Principal_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::SecurityLevel3::Principal_init * > (v);
}

const char* 
SecurityLevel3::Principal_init::tao_repository_id (void)
{
  return ::SecurityLevel3::Principal::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
SecurityLevel3::Principal_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_SecurityLevel3::Principal,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_PRINCIPALLIST_CS_)
#define _SECURITYLEVEL3_PRINCIPALLIST_CS_

SecurityLevel3::PrincipalList::PrincipalList (void)
{}

SecurityLevel3::PrincipalList::PrincipalList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_valuetype_sequence<
        Principal,
        Principal_var
      > (max)
{}

SecurityLevel3::PrincipalList::PrincipalList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::Principal * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_valuetype_sequence<
        Principal,
        Principal_var
      >
    (max, length, buffer, release)
{}

SecurityLevel3::PrincipalList::PrincipalList (
    const PrincipalList &seq)
  : ::TAO::unbounded_valuetype_sequence<
        Principal,
        Principal_var
      > (seq)
{}

SecurityLevel3::PrincipalList::~PrincipalList (void)
{}

void SecurityLevel3::PrincipalList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PrincipalList * _tao_tmp_pointer =
    static_cast<PrincipalList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_PrincipalList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_PrincipalList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_PrincipalList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_Principal,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_PrincipalList_0 =
        &SecurityLevel3_PrincipalList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_PrincipalList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrincipalList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/PrincipalList:1.0",
    "PrincipalList",
    &TAO::TypeCode::tc_SecurityLevel3_PrincipalList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrincipalList =
    &_tao_tc_SecurityLevel3_PrincipalList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_SimplePrincipal[] =
  {
    { "authenticated", &CORBA::_tc_boolean, ::CORBA::PUBLIC_MEMBER },
    { "alternate_names", &SecurityLevel3::_tc_PrincipalNameList, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_SimplePrincipal (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/SimplePrincipal:1.0",
    "SimplePrincipal",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_Principal,
    _tao_fields_SecurityLevel3_SimplePrincipal,
    2);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_SimplePrincipal =
    &_tao_tc_SecurityLevel3_SimplePrincipal;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::SimplePrincipal>::add_ref (
    SecurityLevel3::SimplePrincipal * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::SimplePrincipal>::remove_ref (
    SecurityLevel3::SimplePrincipal * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::SimplePrincipal>::release (
    SecurityLevel3::SimplePrincipal * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::SimplePrincipal *
SecurityLevel3::SimplePrincipal::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::SimplePrincipal * > (v);
}

const char *
SecurityLevel3::SimplePrincipal::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::SimplePrincipal::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::SimplePrincipal::_tao_any_destructor (void *_tao_void_pointer)
{
  SimplePrincipal *_tao_tmp_pointer =
    static_cast<SimplePrincipal *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::SimplePrincipal::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_SimplePrincipal;
}

SecurityLevel3::SimplePrincipal::~SimplePrincipal (void)
{}

::CORBA::Boolean 
SecurityLevel3::SimplePrincipal::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_SimplePrincipal (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::SimplePrincipal::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_SimplePrincipal (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::SimplePrincipal::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::SimplePrincipal::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::SimplePrincipal::_tao_unmarshal (
    TAO_InputCDR &strm,
    SimplePrincipal *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        SimplePrincipal::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = SimplePrincipal::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_init_cs.cpp:75

SecurityLevel3::SimplePrincipal_init::SimplePrincipal_init (void)
{
}

SecurityLevel3::SimplePrincipal_init::~SimplePrincipal_init (void)
{
}

SecurityLevel3::SimplePrincipal_init *
SecurityLevel3::SimplePrincipal_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::SecurityLevel3::SimplePrincipal_init * > (v);
}

const char* 
SecurityLevel3::SimplePrincipal_init::tao_repository_id (void)
{
  return ::SecurityLevel3::SimplePrincipal::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
SecurityLevel3::SimplePrincipal_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_SecurityLevel3::SimplePrincipal,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_ProxyPrincipal[] =
  {
    { "speaking", &SecurityLevel3::_tc_Principal, ::CORBA::PUBLIC_MEMBER },
    { "speaks_for", &SecurityLevel3::_tc_Principal, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ProxyPrincipal (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/ProxyPrincipal:1.0",
    "ProxyPrincipal",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_Principal,
    _tao_fields_SecurityLevel3_ProxyPrincipal,
    2);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPrincipal =
    &_tao_tc_SecurityLevel3_ProxyPrincipal;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::ProxyPrincipal>::add_ref (
    SecurityLevel3::ProxyPrincipal * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::ProxyPrincipal>::remove_ref (
    SecurityLevel3::ProxyPrincipal * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::ProxyPrincipal>::release (
    SecurityLevel3::ProxyPrincipal * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::ProxyPrincipal *
SecurityLevel3::ProxyPrincipal::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::ProxyPrincipal * > (v);
}

const char *
SecurityLevel3::ProxyPrincipal::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::ProxyPrincipal::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::ProxyPrincipal::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPrincipal *_tao_tmp_pointer =
    static_cast<ProxyPrincipal *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::ProxyPrincipal::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_ProxyPrincipal;
}

SecurityLevel3::ProxyPrincipal::~ProxyPrincipal (void)
{}

::CORBA::Boolean 
SecurityLevel3::ProxyPrincipal::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_ProxyPrincipal (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::ProxyPrincipal::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_ProxyPrincipal (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::ProxyPrincipal::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::ProxyPrincipal::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::ProxyPrincipal::_tao_unmarshal (
    TAO_InputCDR &strm,
    ProxyPrincipal *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        ProxyPrincipal::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = ProxyPrincipal::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_init_cs.cpp:75

SecurityLevel3::ProxyPrincipal_init::ProxyPrincipal_init (void)
{
}

SecurityLevel3::ProxyPrincipal_init::~ProxyPrincipal_init (void)
{
}

SecurityLevel3::ProxyPrincipal_init *
SecurityLevel3::ProxyPrincipal_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::SecurityLevel3::ProxyPrincipal_init * > (v);
}

const char* 
SecurityLevel3::ProxyPrincipal_init::tao_repository_id (void)
{
  return ::SecurityLevel3::ProxyPrincipal::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
SecurityLevel3::ProxyPrincipal_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_SecurityLevel3::ProxyPrincipal,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_QuotingPrincipal[] =
  {
    { "speaking", &SecurityLevel3::_tc_Principal, ::CORBA::PUBLIC_MEMBER },
    { "quotes_for", &SecurityLevel3::_tc_Principal, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_QuotingPrincipal (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/QuotingPrincipal:1.0",
    "QuotingPrincipal",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_Principal,
    _tao_fields_SecurityLevel3_QuotingPrincipal,
    2);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_QuotingPrincipal =
    &_tao_tc_SecurityLevel3_QuotingPrincipal;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::QuotingPrincipal>::add_ref (
    SecurityLevel3::QuotingPrincipal * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::QuotingPrincipal>::remove_ref (
    SecurityLevel3::QuotingPrincipal * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::QuotingPrincipal>::release (
    SecurityLevel3::QuotingPrincipal * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::QuotingPrincipal *
SecurityLevel3::QuotingPrincipal::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::QuotingPrincipal * > (v);
}

const char *
SecurityLevel3::QuotingPrincipal::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::QuotingPrincipal::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::QuotingPrincipal::_tao_any_destructor (void *_tao_void_pointer)
{
  QuotingPrincipal *_tao_tmp_pointer =
    static_cast<QuotingPrincipal *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::QuotingPrincipal::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_QuotingPrincipal;
}

SecurityLevel3::QuotingPrincipal::~QuotingPrincipal (void)
{}

::CORBA::Boolean 
SecurityLevel3::QuotingPrincipal::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_QuotingPrincipal (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::QuotingPrincipal::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_QuotingPrincipal (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::QuotingPrincipal::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::QuotingPrincipal::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::QuotingPrincipal::_tao_unmarshal (
    TAO_InputCDR &strm,
    QuotingPrincipal *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        QuotingPrincipal::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = QuotingPrincipal::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_init_cs.cpp:75

SecurityLevel3::QuotingPrincipal_init::QuotingPrincipal_init (void)
{
}

SecurityLevel3::QuotingPrincipal_init::~QuotingPrincipal_init (void)
{
}

SecurityLevel3::QuotingPrincipal_init *
SecurityLevel3::QuotingPrincipal_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::SecurityLevel3::QuotingPrincipal_init * > (v);
}

const char* 
SecurityLevel3::QuotingPrincipal_init::tao_repository_id (void)
{
  return ::SecurityLevel3::QuotingPrincipal::_tao_obv_static_repository_id ();
}

::CORBA::ValueBase *
SecurityLevel3::QuotingPrincipal_init::create_for_unmarshal (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
      ret_val,
      OBV_SecurityLevel3::QuotingPrincipal,
      ::CORBA::NO_MEMORY ()
    );
  return ret_val;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_StatementType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/StatementType:1.0",
    "StatementType",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_StatementType =
    &_tao_tc_SecurityLevel3_StatementType;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_ENCODING_CS_)
#define _SECURITYLEVEL3_ENCODING_CS_

SecurityLevel3::Encoding::Encoding (void)
{}

SecurityLevel3::Encoding::Encoding (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

SecurityLevel3::Encoding::Encoding (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

SecurityLevel3::Encoding::Encoding (
    const Encoding &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

SecurityLevel3::Encoding::~Encoding (void)
{}

void SecurityLevel3::Encoding::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Encoding * _tao_tmp_pointer =
    static_cast<Encoding *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_Encoding_GUARD
#define _TAO_TYPECODE_SecurityLevel3_Encoding_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_Encoding_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_Encoding_0 =
        &SecurityLevel3_Encoding_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_Encoding_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_Encoding (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/Encoding:1.0",
    "Encoding",
    &TAO::TypeCode::tc_SecurityLevel3_Encoding_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_Encoding =
    &_tao_tc_SecurityLevel3_Encoding;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_EncodingType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/EncodingType:1.0",
    "EncodingType",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_EncodingType =
    &_tao_tc_SecurityLevel3_EncodingType;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

SecurityLevel3::BadEncoding::BadEncoding (void)
  : ::CORBA::UserException (
        "IDL:adiron.com/SecurityLevel3/BadEncoding:1.0",
        "BadEncoding"
      )
{
}

SecurityLevel3::BadEncoding::~BadEncoding (void)
{
}

SecurityLevel3::BadEncoding::BadEncoding (const ::SecurityLevel3::BadEncoding &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

SecurityLevel3::BadEncoding&
SecurityLevel3::BadEncoding::operator= (const ::SecurityLevel3::BadEncoding &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void SecurityLevel3::BadEncoding::_tao_any_destructor (void *_tao_void_pointer)
{
  BadEncoding *_tao_tmp_pointer =
    static_cast<BadEncoding *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

SecurityLevel3::BadEncoding *
SecurityLevel3::BadEncoding::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<BadEncoding *> (_tao_excp);
}

const SecurityLevel3::BadEncoding *
SecurityLevel3::BadEncoding::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const BadEncoding *> (_tao_excp);
}

::CORBA::Exception *SecurityLevel3::BadEncoding::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::SecurityLevel3::BadEncoding, 0);
  return retval;
}

::CORBA::Exception *
SecurityLevel3::BadEncoding::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::SecurityLevel3::BadEncoding (*this),
      0
    );
  return result;
}

void SecurityLevel3::BadEncoding::_raise (void) const
{
  throw *this;
}

void SecurityLevel3::BadEncoding::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void SecurityLevel3::BadEncoding::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::BadEncoding::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_BadEncoding;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_SecurityLevel3_BadEncoding = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_BadEncoding (
  ::CORBA::tk_except,
  "IDL:adiron.com/SecurityLevel3/BadEncoding:1.0",
  "BadEncoding",
  _tao_fields_SecurityLevel3_BadEncoding,
  0);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_BadEncoding =
    &_tao_tc_SecurityLevel3_BadEncoding;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

SecurityLevel3::BadEncodingType::BadEncodingType (void)
  : ::CORBA::UserException (
        "IDL:adiron.com/SecurityLevel3/BadEncodingType:1.0",
        "BadEncodingType"
      )
{
}

SecurityLevel3::BadEncodingType::~BadEncodingType (void)
{
}

SecurityLevel3::BadEncodingType::BadEncodingType (const ::SecurityLevel3::BadEncodingType &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

SecurityLevel3::BadEncodingType&
SecurityLevel3::BadEncodingType::operator= (const ::SecurityLevel3::BadEncodingType &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void SecurityLevel3::BadEncodingType::_tao_any_destructor (void *_tao_void_pointer)
{
  BadEncodingType *_tao_tmp_pointer =
    static_cast<BadEncodingType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

SecurityLevel3::BadEncodingType *
SecurityLevel3::BadEncodingType::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<BadEncodingType *> (_tao_excp);
}

const SecurityLevel3::BadEncodingType *
SecurityLevel3::BadEncodingType::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const BadEncodingType *> (_tao_excp);
}

::CORBA::Exception *SecurityLevel3::BadEncodingType::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::SecurityLevel3::BadEncodingType, 0);
  return retval;
}

::CORBA::Exception *
SecurityLevel3::BadEncodingType::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::SecurityLevel3::BadEncodingType (*this),
      0
    );
  return result;
}

void SecurityLevel3::BadEncodingType::_raise (void) const
{
  throw *this;
}

void SecurityLevel3::BadEncodingType::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void SecurityLevel3::BadEncodingType::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::BadEncodingType::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_BadEncodingType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_SecurityLevel3_BadEncodingType = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_BadEncodingType (
  ::CORBA::tk_except,
  "IDL:adiron.com/SecurityLevel3/BadEncodingType:1.0",
  "BadEncodingType",
  _tao_fields_SecurityLevel3_BadEncodingType,
  0);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_BadEncodingType =
    &_tao_tc_SecurityLevel3_BadEncodingType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_StatementLayer (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/StatementLayer:1.0",
    "StatementLayer",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_StatementLayer =
    &_tao_tc_SecurityLevel3_StatementLayer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_Statement[] =
  {
    { "the_layer", &SecurityLevel3::_tc_StatementLayer, ::CORBA::PUBLIC_MEMBER },
    { "the_type", &SecurityLevel3::_tc_StatementType, ::CORBA::PUBLIC_MEMBER },
    { "encoding_type", &SecurityLevel3::_tc_EncodingType, ::CORBA::PRIVATE_MEMBER },
    { "the_encoding", &SecurityLevel3::_tc_Encoding, ::CORBA::PRIVATE_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_Statement (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/Statement:1.0",
    "Statement",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_SecurityLevel3_Statement,
    4);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_Statement =
    &_tao_tc_SecurityLevel3_Statement;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::Statement>::add_ref (
    SecurityLevel3::Statement * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::Statement>::remove_ref (
    SecurityLevel3::Statement * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::Statement>::release (
    SecurityLevel3::Statement * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::Statement *
SecurityLevel3::Statement::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::Statement * > (v);
}

const char *
SecurityLevel3::Statement::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::Statement::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::Statement::_tao_any_destructor (void *_tao_void_pointer)
{
  Statement *_tao_tmp_pointer =
    static_cast<Statement *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::Statement::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_Statement;
}

SecurityLevel3::Statement::~Statement (void)
{}

::CORBA::Boolean 
SecurityLevel3::Statement::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_Statement (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::Statement::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_Statement (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::Statement::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::Statement::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::Statement::_tao_unmarshal (
    TAO_InputCDR &strm,
    Statement *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        Statement::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = Statement::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_init_cs.cpp:75

SecurityLevel3::Statement_init::Statement_init (void)
{
}

SecurityLevel3::Statement_init::~Statement_init (void)
{
}

SecurityLevel3::Statement_init *
SecurityLevel3::Statement_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::SecurityLevel3::Statement_init * > (v);
}

const char* 
SecurityLevel3::Statement_init::tao_repository_id (void)
{
  return ::SecurityLevel3::Statement::_tao_obv_static_repository_id ();
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_STATEMENTLIST_CS_)
#define _SECURITYLEVEL3_STATEMENTLIST_CS_

SecurityLevel3::StatementList::StatementList (void)
{}

SecurityLevel3::StatementList::StatementList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_valuetype_sequence<
        Statement,
        Statement_var
      > (max)
{}

SecurityLevel3::StatementList::StatementList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::Statement * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_valuetype_sequence<
        Statement,
        Statement_var
      >
    (max, length, buffer, release)
{}

SecurityLevel3::StatementList::StatementList (
    const StatementList &seq)
  : ::TAO::unbounded_valuetype_sequence<
        Statement,
        Statement_var
      > (seq)
{}

SecurityLevel3::StatementList::~StatementList (void)
{}

void SecurityLevel3::StatementList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  StatementList * _tao_tmp_pointer =
    static_cast<StatementList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_StatementList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_StatementList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_StatementList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_Statement,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_StatementList_0 =
        &SecurityLevel3_StatementList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_StatementList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_StatementList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/StatementList:1.0",
    "StatementList",
    &TAO::TypeCode::tc_SecurityLevel3_StatementList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_StatementList =
    &_tao_tc_SecurityLevel3_StatementList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_IdentityStatement[] =
  {
    { "interpretation_aid", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_IdentityStatement (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/IdentityStatement:1.0",
    "IdentityStatement",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_Statement,
    _tao_fields_SecurityLevel3_IdentityStatement,
    1);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_IdentityStatement =
    &_tao_tc_SecurityLevel3_IdentityStatement;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::IdentityStatement>::add_ref (
    SecurityLevel3::IdentityStatement * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::IdentityStatement>::remove_ref (
    SecurityLevel3::IdentityStatement * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::IdentityStatement>::release (
    SecurityLevel3::IdentityStatement * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::IdentityStatement *
SecurityLevel3::IdentityStatement::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::IdentityStatement * > (v);
}

const char *
SecurityLevel3::IdentityStatement::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::IdentityStatement::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::IdentityStatement::_tao_any_destructor (void *_tao_void_pointer)
{
  IdentityStatement *_tao_tmp_pointer =
    static_cast<IdentityStatement *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::IdentityStatement::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_IdentityStatement;
}

SecurityLevel3::IdentityStatement::~IdentityStatement (void)
{}

::CORBA::Boolean 
SecurityLevel3::IdentityStatement::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_IdentityStatement (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::IdentityStatement::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_IdentityStatement (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::IdentityStatement::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::IdentityStatement::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::IdentityStatement::_tao_unmarshal (
    TAO_InputCDR &strm,
    IdentityStatement *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        IdentityStatement::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = IdentityStatement::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_PrincipalIdentityStatement[] =
  {
    { "the_principal", &SecurityLevel3::_tc_Principal, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_PrincipalIdentityStatement (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/PrincipalIdentityStatement:1.0",
    "PrincipalIdentityStatement",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_IdentityStatement,
    _tao_fields_SecurityLevel3_PrincipalIdentityStatement,
    1);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_PrincipalIdentityStatement =
    &_tao_tc_SecurityLevel3_PrincipalIdentityStatement;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::PrincipalIdentityStatement>::add_ref (
    SecurityLevel3::PrincipalIdentityStatement * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::PrincipalIdentityStatement>::remove_ref (
    SecurityLevel3::PrincipalIdentityStatement * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::PrincipalIdentityStatement>::release (
    SecurityLevel3::PrincipalIdentityStatement * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::PrincipalIdentityStatement *
SecurityLevel3::PrincipalIdentityStatement::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::PrincipalIdentityStatement * > (v);
}

const char *
SecurityLevel3::PrincipalIdentityStatement::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::PrincipalIdentityStatement::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::PrincipalIdentityStatement::_tao_any_destructor (void *_tao_void_pointer)
{
  PrincipalIdentityStatement *_tao_tmp_pointer =
    static_cast<PrincipalIdentityStatement *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::PrincipalIdentityStatement::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_PrincipalIdentityStatement;
}

SecurityLevel3::PrincipalIdentityStatement::~PrincipalIdentityStatement (void)
{}

::CORBA::Boolean 
SecurityLevel3::PrincipalIdentityStatement::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_PrincipalIdentityStatement (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::PrincipalIdentityStatement::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_PrincipalIdentityStatement (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::PrincipalIdentityStatement::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::PrincipalIdentityStatement::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::PrincipalIdentityStatement::_tao_unmarshal (
    TAO_InputCDR &strm,
    PrincipalIdentityStatement *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        PrincipalIdentityStatement::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = PrincipalIdentityStatement::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const _tao_fields_SecurityLevel3_EndorsementStatement[] =
  {
    { "interpretation_aid", &CORBA::_tc_string, ::CORBA::PUBLIC_MEMBER }
    
  };
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_EndorsementStatement (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/EndorsementStatement:1.0",
    "EndorsementStatement",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_Statement,
    _tao_fields_SecurityLevel3_EndorsementStatement,
    1);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_EndorsementStatement =
    &_tao_tc_SecurityLevel3_EndorsementStatement;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::EndorsementStatement>::add_ref (
    SecurityLevel3::EndorsementStatement * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::EndorsementStatement>::remove_ref (
    SecurityLevel3::EndorsementStatement * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::EndorsementStatement>::release (
    SecurityLevel3::EndorsementStatement * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::EndorsementStatement *
SecurityLevel3::EndorsementStatement::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::EndorsementStatement * > (v);
}

const char *
SecurityLevel3::EndorsementStatement::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::EndorsementStatement::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::EndorsementStatement::_tao_any_destructor (void *_tao_void_pointer)
{
  EndorsementStatement *_tao_tmp_pointer =
    static_cast<EndorsementStatement *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::EndorsementStatement::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_EndorsementStatement;
}

SecurityLevel3::EndorsementStatement::~EndorsementStatement (void)
{}

::CORBA::Boolean 
SecurityLevel3::EndorsementStatement::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_EndorsementStatement (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::EndorsementStatement::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_EndorsementStatement (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::EndorsementStatement::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::EndorsementStatement::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::EndorsementStatement::_tao_unmarshal (
    TAO_InputCDR &strm,
    EndorsementStatement *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        EndorsementStatement::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = EndorsementStatement::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_SecurityLevel3_X509IdentityStatement = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_X509IdentityStatement (
    ::CORBA::tk_value,
    "IDL:adiron.com/SecurityLevel3/X509IdentityStatement:1.0",
    "X509IdentityStatement",
    ::CORBA::VM_NONE,
    &SecurityLevel3::_tc_PrincipalIdentityStatement,
    _tao_fields_SecurityLevel3_X509IdentityStatement,
    0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_X509IdentityStatement =
    &_tao_tc_SecurityLevel3_X509IdentityStatement;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<SecurityLevel3::X509IdentityStatement>::add_ref (
    SecurityLevel3::X509IdentityStatement * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::X509IdentityStatement>::remove_ref (
    SecurityLevel3::X509IdentityStatement * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<SecurityLevel3::X509IdentityStatement>::release (
    SecurityLevel3::X509IdentityStatement * p)
{
  ::CORBA::remove_ref (p);
}

SecurityLevel3::X509IdentityStatement *
SecurityLevel3::X509IdentityStatement::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::SecurityLevel3::X509IdentityStatement * > (v);
}

const char *
SecurityLevel3::X509IdentityStatement::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
SecurityLevel3::X509IdentityStatement::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
SecurityLevel3::X509IdentityStatement::_tao_any_destructor (void *_tao_void_pointer)
{
  X509IdentityStatement *_tao_tmp_pointer =
    static_cast<X509IdentityStatement *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr SecurityLevel3::X509IdentityStatement::_tao_type (void) const
{
  return ::SecurityLevel3::_tc_X509IdentityStatement;
}

SecurityLevel3::X509IdentityStatement::~X509IdentityStatement (void)
{}

::CORBA::Boolean 
SecurityLevel3::X509IdentityStatement::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__SecurityLevel3_X509IdentityStatement (strm, ci);
}

::CORBA::Boolean 
SecurityLevel3::X509IdentityStatement::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__SecurityLevel3_X509IdentityStatement (strm,ci);
}

::CORBA::Boolean 
SecurityLevel3::X509IdentityStatement::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (SecurityLevel3::X509IdentityStatement::_downcast);
}

::CORBA::Boolean 
SecurityLevel3::X509IdentityStatement::_tao_unmarshal (
    TAO_InputCDR &strm,
    X509IdentityStatement *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        X509IdentityStatement::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = X509IdentityStatement::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_init_cs.cpp:75

SecurityLevel3::X509IdentityStatement_init::X509IdentityStatement_init (void)
{
}

SecurityLevel3::X509IdentityStatement_init::~X509IdentityStatement_init (void)
{
}

SecurityLevel3::X509IdentityStatement_init *
SecurityLevel3::X509IdentityStatement_init::_downcast ( ::CORBA::ValueFactoryBase *v)
{
  return dynamic_cast< ::SecurityLevel3::X509IdentityStatement_init * > (v);
}

const char* 
SecurityLevel3::X509IdentityStatement_init::tao_repository_id (void)
{
  return ::SecurityLevel3::X509IdentityStatement::_tao_obv_static_repository_id ();
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_X509IDENTITYSTATEMENTLIST_CS_)
#define _SECURITYLEVEL3_X509IDENTITYSTATEMENTLIST_CS_

SecurityLevel3::X509IdentityStatementList::X509IdentityStatementList (void)
{}

SecurityLevel3::X509IdentityStatementList::X509IdentityStatementList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_valuetype_sequence<
        X509IdentityStatement,
        X509IdentityStatement_var
      > (max)
{}

SecurityLevel3::X509IdentityStatementList::X509IdentityStatementList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::X509IdentityStatement * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_valuetype_sequence<
        X509IdentityStatement,
        X509IdentityStatement_var
      >
    (max, length, buffer, release)
{}

SecurityLevel3::X509IdentityStatementList::X509IdentityStatementList (
    const X509IdentityStatementList &seq)
  : ::TAO::unbounded_valuetype_sequence<
        X509IdentityStatement,
        X509IdentityStatement_var
      > (seq)
{}

SecurityLevel3::X509IdentityStatementList::~X509IdentityStatementList (void)
{}

void SecurityLevel3::X509IdentityStatementList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  X509IdentityStatementList * _tao_tmp_pointer =
    static_cast<X509IdentityStatementList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_X509IdentityStatementList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_X509IdentityStatementList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_X509IdentityStatementList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_X509IdentityStatement,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_X509IdentityStatementList_0 =
        &SecurityLevel3_X509IdentityStatementList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_X509IdentityStatementList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_X509IdentityStatementList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/X509IdentityStatementList:1.0",
    "X509IdentityStatementList",
    &TAO::TypeCode::tc_SecurityLevel3_X509IdentityStatementList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_X509IdentityStatementList =
    &_tao_tc_SecurityLevel3_X509IdentityStatementList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredentialsType:1.0",
    "CredentialsType",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsType =
    &_tao_tc_SecurityLevel3_CredentialsType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsState (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredentialsState:1.0",
    "CredentialsState",
    &CORBA::_tc_long);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsState =
    &_tao_tc_SecurityLevel3_CredentialsState;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsId (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredentialsId:1.0",
    "CredentialsId",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsId =
    &_tao_tc_SecurityLevel3_CredentialsId;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_CREDENTIALSIDLIST_CS_)
#define _SECURITYLEVEL3_CREDENTIALSIDLIST_CS_

SecurityLevel3::CredentialsIdList::CredentialsIdList (void)
{}

SecurityLevel3::CredentialsIdList::CredentialsIdList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

SecurityLevel3::CredentialsIdList::CredentialsIdList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

SecurityLevel3::CredentialsIdList::CredentialsIdList (
    const CredentialsIdList &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

SecurityLevel3::CredentialsIdList::~CredentialsIdList (void)
{}

void SecurityLevel3::CredentialsIdList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CredentialsIdList * _tao_tmp_pointer =
    static_cast<CredentialsIdList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_CredentialsIdList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_CredentialsIdList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_CredentialsIdList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_CredentialsId,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_CredentialsIdList_0 =
        &SecurityLevel3_CredentialsIdList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_CredentialsIdList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsIdList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredentialsIdList:1.0",
    "CredentialsIdList",
    &TAO::TypeCode::tc_SecurityLevel3_CredentialsIdList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsIdList =
    &_tao_tc_SecurityLevel3_CredentialsIdList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ContextId (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/ContextId:1.0",
    "ContextId",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ContextId =
    &_tao_tc_SecurityLevel3_ContextId;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsUsage (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredentialsUsage:1.0",
    "CredentialsUsage",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsUsage =
    &_tao_tc_SecurityLevel3_CredentialsUsage;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredsDirective (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredsDirective:1.0",
    "CredsDirective",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredsDirective =
    &_tao_tc_SecurityLevel3_CredsDirective;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_FeatureDirective (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/FeatureDirective:1.0",
    "FeatureDirective",
    &CORBA::_tc_long);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_FeatureDirective =
    &_tao_tc_SecurityLevel3_FeatureDirective;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_InitiatorType (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/InitiatorType:1.0",
    "InitiatorType",
    &CORBA::_tc_ulong);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_InitiatorType =
    &_tao_tc_SecurityLevel3_InitiatorType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::CredsInitiator.

SecurityLevel3::CredsInitiator_ptr
TAO::Objref_Traits<SecurityLevel3::CredsInitiator>::duplicate (
    SecurityLevel3::CredsInitiator_ptr p)
{
  return SecurityLevel3::CredsInitiator::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::CredsInitiator>::release (
    SecurityLevel3::CredsInitiator_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::CredsInitiator_ptr
TAO::Objref_Traits<SecurityLevel3::CredsInitiator>::nil (void)
{
  return SecurityLevel3::CredsInitiator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::CredsInitiator>::marshal (
    const SecurityLevel3::CredsInitiator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::CredsInitiator::CredsInitiator (void)
{}

SecurityLevel3::CredsInitiator::~CredsInitiator (void)
{}

void 
SecurityLevel3::CredsInitiator::_tao_any_destructor (void *_tao_void_pointer)
{
  CredsInitiator *_tao_tmp_pointer =
    static_cast<CredsInitiator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::CredsInitiator_ptr
SecurityLevel3::CredsInitiator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredsInitiator::_duplicate (
      dynamic_cast<CredsInitiator_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredsInitiator_ptr
SecurityLevel3::CredsInitiator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredsInitiator::_duplicate (
      dynamic_cast<CredsInitiator_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredsInitiator_ptr
SecurityLevel3::CredsInitiator::_nil (void)
{
  return 0;
}

SecurityLevel3::CredsInitiator_ptr
SecurityLevel3::CredsInitiator::_duplicate (CredsInitiator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::CredsInitiator::_tao_release (CredsInitiator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::CredsInitiator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/CredsInitiator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::CredsInitiator::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/CredsInitiator:1.0";
}

::CORBA::Boolean
SecurityLevel3::CredsInitiator::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredsInitiator (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/CredsInitiator:1.0",
    "CredsInitiator");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredsInitiator =
    &_tao_tc_SecurityLevel3_CredsInitiator;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::CredsAcceptor.

SecurityLevel3::CredsAcceptor_ptr
TAO::Objref_Traits<SecurityLevel3::CredsAcceptor>::duplicate (
    SecurityLevel3::CredsAcceptor_ptr p)
{
  return SecurityLevel3::CredsAcceptor::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::CredsAcceptor>::release (
    SecurityLevel3::CredsAcceptor_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::CredsAcceptor_ptr
TAO::Objref_Traits<SecurityLevel3::CredsAcceptor>::nil (void)
{
  return SecurityLevel3::CredsAcceptor::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::CredsAcceptor>::marshal (
    const SecurityLevel3::CredsAcceptor_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::CredsAcceptor::CredsAcceptor (void)
{}

SecurityLevel3::CredsAcceptor::~CredsAcceptor (void)
{}

void 
SecurityLevel3::CredsAcceptor::_tao_any_destructor (void *_tao_void_pointer)
{
  CredsAcceptor *_tao_tmp_pointer =
    static_cast<CredsAcceptor *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::CredsAcceptor_ptr
SecurityLevel3::CredsAcceptor::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredsAcceptor::_duplicate (
      dynamic_cast<CredsAcceptor_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredsAcceptor_ptr
SecurityLevel3::CredsAcceptor::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredsAcceptor::_duplicate (
      dynamic_cast<CredsAcceptor_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredsAcceptor_ptr
SecurityLevel3::CredsAcceptor::_nil (void)
{
  return 0;
}

SecurityLevel3::CredsAcceptor_ptr
SecurityLevel3::CredsAcceptor::_duplicate (CredsAcceptor_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::CredsAcceptor::_tao_release (CredsAcceptor_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::CredsAcceptor::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/CredsAcceptor:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::CredsAcceptor::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/CredsAcceptor:1.0";
}

::CORBA::Boolean
SecurityLevel3::CredsAcceptor::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredsAcceptor (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/CredsAcceptor:1.0",
    "CredsAcceptor");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredsAcceptor =
    &_tao_tc_SecurityLevel3_CredsAcceptor;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ListenerId (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/ListenerId:1.0",
    "ListenerId",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ListenerId =
    &_tao_tc_SecurityLevel3_ListenerId;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::RelinquishedCredentialsListener.

SecurityLevel3::RelinquishedCredentialsListener_ptr
TAO::Objref_Traits<SecurityLevel3::RelinquishedCredentialsListener>::duplicate (
    SecurityLevel3::RelinquishedCredentialsListener_ptr p)
{
  return SecurityLevel3::RelinquishedCredentialsListener::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::RelinquishedCredentialsListener>::release (
    SecurityLevel3::RelinquishedCredentialsListener_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::RelinquishedCredentialsListener_ptr
TAO::Objref_Traits<SecurityLevel3::RelinquishedCredentialsListener>::nil (void)
{
  return SecurityLevel3::RelinquishedCredentialsListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::RelinquishedCredentialsListener>::marshal (
    const SecurityLevel3::RelinquishedCredentialsListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::RelinquishedCredentialsListener::RelinquishedCredentialsListener (void)
{}

SecurityLevel3::RelinquishedCredentialsListener::~RelinquishedCredentialsListener (void)
{}

void 
SecurityLevel3::RelinquishedCredentialsListener::_tao_any_destructor (void *_tao_void_pointer)
{
  RelinquishedCredentialsListener *_tao_tmp_pointer =
    static_cast<RelinquishedCredentialsListener *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::RelinquishedCredentialsListener_ptr
SecurityLevel3::RelinquishedCredentialsListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return RelinquishedCredentialsListener::_duplicate (
      dynamic_cast<RelinquishedCredentialsListener_ptr> (_tao_objref)
    );
}

SecurityLevel3::RelinquishedCredentialsListener_ptr
SecurityLevel3::RelinquishedCredentialsListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return RelinquishedCredentialsListener::_duplicate (
      dynamic_cast<RelinquishedCredentialsListener_ptr> (_tao_objref)
    );
}

SecurityLevel3::RelinquishedCredentialsListener_ptr
SecurityLevel3::RelinquishedCredentialsListener::_nil (void)
{
  return 0;
}

SecurityLevel3::RelinquishedCredentialsListener_ptr
SecurityLevel3::RelinquishedCredentialsListener::_duplicate (RelinquishedCredentialsListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::RelinquishedCredentialsListener::_tao_release (RelinquishedCredentialsListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::RelinquishedCredentialsListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/RelinquishedCredentialsListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::RelinquishedCredentialsListener::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/RelinquishedCredentialsListener:1.0";
}

::CORBA::Boolean
SecurityLevel3::RelinquishedCredentialsListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_RelinquishedCredentialsListener (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/RelinquishedCredentialsListener:1.0",
    "RelinquishedCredentialsListener");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_RelinquishedCredentialsListener =
    &_tao_tc_SecurityLevel3_RelinquishedCredentialsListener;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::Credentials.

SecurityLevel3::Credentials_ptr
TAO::Objref_Traits<SecurityLevel3::Credentials>::duplicate (
    SecurityLevel3::Credentials_ptr p)
{
  return SecurityLevel3::Credentials::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::Credentials>::release (
    SecurityLevel3::Credentials_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::Credentials_ptr
TAO::Objref_Traits<SecurityLevel3::Credentials>::nil (void)
{
  return SecurityLevel3::Credentials::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::Credentials>::marshal (
    const SecurityLevel3::Credentials_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::Credentials::Credentials (void)
{}

SecurityLevel3::Credentials::~Credentials (void)
{}

void 
SecurityLevel3::Credentials::_tao_any_destructor (void *_tao_void_pointer)
{
  Credentials *_tao_tmp_pointer =
    static_cast<Credentials *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::Credentials_ptr
SecurityLevel3::Credentials::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Credentials::_duplicate (
      dynamic_cast<Credentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::Credentials_ptr
SecurityLevel3::Credentials::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Credentials::_duplicate (
      dynamic_cast<Credentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::Credentials_ptr
SecurityLevel3::Credentials::_nil (void)
{
  return 0;
}

SecurityLevel3::Credentials_ptr
SecurityLevel3::Credentials::_duplicate (Credentials_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::Credentials::_tao_release (Credentials_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::Credentials::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/Credentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::Credentials::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/Credentials:1.0";
}

::CORBA::Boolean
SecurityLevel3::Credentials::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_Credentials (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/Credentials:1.0",
    "Credentials");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_Credentials =
    &_tao_tc_SecurityLevel3_Credentials;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_CREDENTIALSLIST_CS_)
#define _SECURITYLEVEL3_CREDENTIALSLIST_CS_

SecurityLevel3::CredentialsList::CredentialsList (void)
{}

SecurityLevel3::CredentialsList::CredentialsList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        Credentials,
        Credentials_var
      > (max)
{}

SecurityLevel3::CredentialsList::CredentialsList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::Credentials_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        Credentials,
        Credentials_var
      >
    (max, length, buffer, release)
{}

SecurityLevel3::CredentialsList::CredentialsList (
    const CredentialsList &seq)
  : ::TAO::unbounded_object_reference_sequence<
        Credentials,
        Credentials_var
      > (seq)
{}

SecurityLevel3::CredentialsList::~CredentialsList (void)
{}

void SecurityLevel3::CredentialsList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CredentialsList * _tao_tmp_pointer =
    static_cast<CredentialsList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_CredentialsList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_CredentialsList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_CredentialsList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_Credentials,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_CredentialsList_0 =
        &SecurityLevel3_CredentialsList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_CredentialsList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/CredentialsList:1.0",
    "CredentialsList",
    &TAO::TypeCode::tc_SecurityLevel3_CredentialsList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsList =
    &_tao_tc_SecurityLevel3_CredentialsList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::OwnCredentials.

SecurityLevel3::OwnCredentials_ptr
TAO::Objref_Traits<SecurityLevel3::OwnCredentials>::duplicate (
    SecurityLevel3::OwnCredentials_ptr p)
{
  return SecurityLevel3::OwnCredentials::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::OwnCredentials>::release (
    SecurityLevel3::OwnCredentials_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::OwnCredentials_ptr
TAO::Objref_Traits<SecurityLevel3::OwnCredentials>::nil (void)
{
  return SecurityLevel3::OwnCredentials::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::OwnCredentials>::marshal (
    const SecurityLevel3::OwnCredentials_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::OwnCredentials::OwnCredentials (void)
{}

SecurityLevel3::OwnCredentials::~OwnCredentials (void)
{}

void 
SecurityLevel3::OwnCredentials::_tao_any_destructor (void *_tao_void_pointer)
{
  OwnCredentials *_tao_tmp_pointer =
    static_cast<OwnCredentials *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::OwnCredentials_ptr
SecurityLevel3::OwnCredentials::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return OwnCredentials::_duplicate (
      dynamic_cast<OwnCredentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::OwnCredentials_ptr
SecurityLevel3::OwnCredentials::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return OwnCredentials::_duplicate (
      dynamic_cast<OwnCredentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::OwnCredentials_ptr
SecurityLevel3::OwnCredentials::_nil (void)
{
  return 0;
}

SecurityLevel3::OwnCredentials_ptr
SecurityLevel3::OwnCredentials::_duplicate (OwnCredentials_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::OwnCredentials::_tao_release (OwnCredentials_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::OwnCredentials::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/Credentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/OwnCredentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::OwnCredentials::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/OwnCredentials:1.0";
}

::CORBA::Boolean
SecurityLevel3::OwnCredentials::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_OwnCredentials (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/OwnCredentials:1.0",
    "OwnCredentials");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_OwnCredentials =
    &_tao_tc_SecurityLevel3_OwnCredentials;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_OWNCREDENTIALSLIST_CS_)
#define _SECURITYLEVEL3_OWNCREDENTIALSLIST_CS_

SecurityLevel3::OwnCredentialsList::OwnCredentialsList (void)
{}

SecurityLevel3::OwnCredentialsList::OwnCredentialsList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        OwnCredentials,
        OwnCredentials_var
      > (max)
{}

SecurityLevel3::OwnCredentialsList::OwnCredentialsList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    SecurityLevel3::OwnCredentials_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        OwnCredentials,
        OwnCredentials_var
      >
    (max, length, buffer, release)
{}

SecurityLevel3::OwnCredentialsList::OwnCredentialsList (
    const OwnCredentialsList &seq)
  : ::TAO::unbounded_object_reference_sequence<
        OwnCredentials,
        OwnCredentials_var
      > (seq)
{}

SecurityLevel3::OwnCredentialsList::~OwnCredentialsList (void)
{}

void SecurityLevel3::OwnCredentialsList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  OwnCredentialsList * _tao_tmp_pointer =
    static_cast<OwnCredentialsList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_OwnCredentialsList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_OwnCredentialsList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_OwnCredentialsList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_OwnCredentials,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_OwnCredentialsList_0 =
        &SecurityLevel3_OwnCredentialsList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_OwnCredentialsList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_OwnCredentialsList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/OwnCredentialsList:1.0",
    "OwnCredentialsList",
    &TAO::TypeCode::tc_SecurityLevel3_OwnCredentialsList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_OwnCredentialsList =
    &_tao_tc_SecurityLevel3_OwnCredentialsList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::ClientCredentials.

SecurityLevel3::ClientCredentials_ptr
TAO::Objref_Traits<SecurityLevel3::ClientCredentials>::duplicate (
    SecurityLevel3::ClientCredentials_ptr p)
{
  return SecurityLevel3::ClientCredentials::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::ClientCredentials>::release (
    SecurityLevel3::ClientCredentials_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::ClientCredentials_ptr
TAO::Objref_Traits<SecurityLevel3::ClientCredentials>::nil (void)
{
  return SecurityLevel3::ClientCredentials::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::ClientCredentials>::marshal (
    const SecurityLevel3::ClientCredentials_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::ClientCredentials::ClientCredentials (void)
{}

SecurityLevel3::ClientCredentials::~ClientCredentials (void)
{}

void 
SecurityLevel3::ClientCredentials::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientCredentials *_tao_tmp_pointer =
    static_cast<ClientCredentials *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::ClientCredentials_ptr
SecurityLevel3::ClientCredentials::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ClientCredentials::_duplicate (
      dynamic_cast<ClientCredentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::ClientCredentials_ptr
SecurityLevel3::ClientCredentials::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ClientCredentials::_duplicate (
      dynamic_cast<ClientCredentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::ClientCredentials_ptr
SecurityLevel3::ClientCredentials::_nil (void)
{
  return 0;
}

SecurityLevel3::ClientCredentials_ptr
SecurityLevel3::ClientCredentials::_duplicate (ClientCredentials_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::ClientCredentials::_tao_release (ClientCredentials_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::ClientCredentials::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/Credentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/ClientCredentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::ClientCredentials::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/ClientCredentials:1.0";
}

::CORBA::Boolean
SecurityLevel3::ClientCredentials::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ClientCredentials (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/ClientCredentials:1.0",
    "ClientCredentials");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ClientCredentials =
    &_tao_tc_SecurityLevel3_ClientCredentials;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::TargetCredentials.

SecurityLevel3::TargetCredentials_ptr
TAO::Objref_Traits<SecurityLevel3::TargetCredentials>::duplicate (
    SecurityLevel3::TargetCredentials_ptr p)
{
  return SecurityLevel3::TargetCredentials::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::TargetCredentials>::release (
    SecurityLevel3::TargetCredentials_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::TargetCredentials_ptr
TAO::Objref_Traits<SecurityLevel3::TargetCredentials>::nil (void)
{
  return SecurityLevel3::TargetCredentials::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::TargetCredentials>::marshal (
    const SecurityLevel3::TargetCredentials_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::TargetCredentials::TargetCredentials (void)
{}

SecurityLevel3::TargetCredentials::~TargetCredentials (void)
{}

void 
SecurityLevel3::TargetCredentials::_tao_any_destructor (void *_tao_void_pointer)
{
  TargetCredentials *_tao_tmp_pointer =
    static_cast<TargetCredentials *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::TargetCredentials_ptr
SecurityLevel3::TargetCredentials::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return TargetCredentials::_duplicate (
      dynamic_cast<TargetCredentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::TargetCredentials_ptr
SecurityLevel3::TargetCredentials::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return TargetCredentials::_duplicate (
      dynamic_cast<TargetCredentials_ptr> (_tao_objref)
    );
}

SecurityLevel3::TargetCredentials_ptr
SecurityLevel3::TargetCredentials::_nil (void)
{
  return 0;
}

SecurityLevel3::TargetCredentials_ptr
SecurityLevel3::TargetCredentials::_duplicate (TargetCredentials_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::TargetCredentials::_tao_release (TargetCredentials_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::TargetCredentials::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/Credentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/TargetCredentials:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::TargetCredentials::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/TargetCredentials:1.0";
}

::CORBA::Boolean
SecurityLevel3::TargetCredentials::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_TargetCredentials (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/TargetCredentials:1.0",
    "TargetCredentials");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_TargetCredentials =
    &_tao_tc_SecurityLevel3_TargetCredentials;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::ContextEstablishmentPolicy.

SecurityLevel3::ContextEstablishmentPolicy_ptr
TAO::Objref_Traits<SecurityLevel3::ContextEstablishmentPolicy>::duplicate (
    SecurityLevel3::ContextEstablishmentPolicy_ptr p)
{
  return SecurityLevel3::ContextEstablishmentPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::ContextEstablishmentPolicy>::release (
    SecurityLevel3::ContextEstablishmentPolicy_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::ContextEstablishmentPolicy_ptr
TAO::Objref_Traits<SecurityLevel3::ContextEstablishmentPolicy>::nil (void)
{
  return SecurityLevel3::ContextEstablishmentPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::ContextEstablishmentPolicy>::marshal (
    const SecurityLevel3::ContextEstablishmentPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::ContextEstablishmentPolicy::ContextEstablishmentPolicy (void)
{}

SecurityLevel3::ContextEstablishmentPolicy::~ContextEstablishmentPolicy (void)
{}

void 
SecurityLevel3::ContextEstablishmentPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ContextEstablishmentPolicy *_tao_tmp_pointer =
    static_cast<ContextEstablishmentPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::ContextEstablishmentPolicy_ptr
SecurityLevel3::ContextEstablishmentPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ContextEstablishmentPolicy::_duplicate (
      dynamic_cast<ContextEstablishmentPolicy_ptr> (_tao_objref)
    );
}

SecurityLevel3::ContextEstablishmentPolicy_ptr
SecurityLevel3::ContextEstablishmentPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ContextEstablishmentPolicy::_duplicate (
      dynamic_cast<ContextEstablishmentPolicy_ptr> (_tao_objref)
    );
}

SecurityLevel3::ContextEstablishmentPolicy_ptr
SecurityLevel3::ContextEstablishmentPolicy::_nil (void)
{
  return 0;
}

SecurityLevel3::ContextEstablishmentPolicy_ptr
SecurityLevel3::ContextEstablishmentPolicy::_duplicate (ContextEstablishmentPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::ContextEstablishmentPolicy::_tao_release (ContextEstablishmentPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::ContextEstablishmentPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/ContextEstablishmentPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::ContextEstablishmentPolicy::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/ContextEstablishmentPolicy:1.0";
}

::CORBA::Boolean
SecurityLevel3::ContextEstablishmentPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ContextEstablishmentPolicy (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/ContextEstablishmentPolicy:1.0",
    "ContextEstablishmentPolicy");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ContextEstablishmentPolicy =
    &_tao_tc_SecurityLevel3_ContextEstablishmentPolicy;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_SecurityLevel3_ContextEstablishmentPolicyArgument[] =
      {
        { "creds_directive", &SecurityLevel3::_tc_CredsDirective },
        { "creds_list", &SecurityLevel3::_tc_OwnCredentialsList },
        { "use_client_auth", &SecurityLevel3::_tc_FeatureDirective },
        { "use_target_auth", &SecurityLevel3::_tc_FeatureDirective },
        { "use_confidentiality", &SecurityLevel3::_tc_FeatureDirective },
        { "use_integrity", &SecurityLevel3::_tc_FeatureDirective }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_SecurityLevel3_ContextEstablishmentPolicyArgument (
  ::CORBA::tk_struct,
  "IDL:adiron.com/SecurityLevel3/ContextEstablishmentPolicyArgument:1.0",
  "ContextEstablishmentPolicyArgument",
  _tao_fields_SecurityLevel3_ContextEstablishmentPolicyArgument,
  6);


namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ContextEstablishmentPolicyArgument =
    &_tao_tc_SecurityLevel3_ContextEstablishmentPolicyArgument;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ContextEstablishmentPolicyArgument *_tao_tmp_pointer =
    static_cast<ContextEstablishmentPolicyArgument *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::ObjectCredentialsPolicy.

SecurityLevel3::ObjectCredentialsPolicy_ptr
TAO::Objref_Traits<SecurityLevel3::ObjectCredentialsPolicy>::duplicate (
    SecurityLevel3::ObjectCredentialsPolicy_ptr p)
{
  return SecurityLevel3::ObjectCredentialsPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::ObjectCredentialsPolicy>::release (
    SecurityLevel3::ObjectCredentialsPolicy_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::ObjectCredentialsPolicy_ptr
TAO::Objref_Traits<SecurityLevel3::ObjectCredentialsPolicy>::nil (void)
{
  return SecurityLevel3::ObjectCredentialsPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::ObjectCredentialsPolicy>::marshal (
    const SecurityLevel3::ObjectCredentialsPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::ObjectCredentialsPolicy::ObjectCredentialsPolicy (void)
{}

SecurityLevel3::ObjectCredentialsPolicy::~ObjectCredentialsPolicy (void)
{}

void 
SecurityLevel3::ObjectCredentialsPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ObjectCredentialsPolicy *_tao_tmp_pointer =
    static_cast<ObjectCredentialsPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::ObjectCredentialsPolicy_ptr
SecurityLevel3::ObjectCredentialsPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ObjectCredentialsPolicy::_duplicate (
      dynamic_cast<ObjectCredentialsPolicy_ptr> (_tao_objref)
    );
}

SecurityLevel3::ObjectCredentialsPolicy_ptr
SecurityLevel3::ObjectCredentialsPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ObjectCredentialsPolicy::_duplicate (
      dynamic_cast<ObjectCredentialsPolicy_ptr> (_tao_objref)
    );
}

SecurityLevel3::ObjectCredentialsPolicy_ptr
SecurityLevel3::ObjectCredentialsPolicy::_nil (void)
{
  return 0;
}

SecurityLevel3::ObjectCredentialsPolicy_ptr
SecurityLevel3::ObjectCredentialsPolicy::_duplicate (ObjectCredentialsPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::ObjectCredentialsPolicy::_tao_release (ObjectCredentialsPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::ObjectCredentialsPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/ObjectCredentialsPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::ObjectCredentialsPolicy::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/ObjectCredentialsPolicy:1.0";
}

::CORBA::Boolean
SecurityLevel3::ObjectCredentialsPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ObjectCredentialsPolicy (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/ObjectCredentialsPolicy:1.0",
    "ObjectCredentialsPolicy");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ObjectCredentialsPolicy =
    &_tao_tc_SecurityLevel3_ObjectCredentialsPolicy;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_ObjectCredentialsPolicyArgument (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/ObjectCredentialsPolicyArgument:1.0",
    "ObjectCredentialsPolicyArgument",
    &SecurityLevel3::_tc_OwnCredentialsList);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_ObjectCredentialsPolicyArgument =
    &_tao_tc_SecurityLevel3_ObjectCredentialsPolicyArgument;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_AcquisitionMethod (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/AcquisitionMethod:1.0",
    "AcquisitionMethod",
    &CORBA::_tc_string);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_AcquisitionMethod =
    &_tao_tc_SecurityLevel3_AcquisitionMethod;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_SECURITYLEVEL3_ACQUISITIONMETHODLIST_CS_)
#define _SECURITYLEVEL3_ACQUISITIONMETHODLIST_CS_

SecurityLevel3::AcquisitionMethodList::AcquisitionMethodList (void)
{}

SecurityLevel3::AcquisitionMethodList::AcquisitionMethodList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

SecurityLevel3::AcquisitionMethodList::AcquisitionMethodList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

SecurityLevel3::AcquisitionMethodList::AcquisitionMethodList (
    const AcquisitionMethodList &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

SecurityLevel3::AcquisitionMethodList::~AcquisitionMethodList (void)
{}

void SecurityLevel3::AcquisitionMethodList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  AcquisitionMethodList * _tao_tmp_pointer =
    static_cast<AcquisitionMethodList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_SecurityLevel3_AcquisitionMethodList_GUARD
#define _TAO_TYPECODE_SecurityLevel3_AcquisitionMethodList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        SecurityLevel3_AcquisitionMethodList_0 (
          ::CORBA::tk_sequence,
          &SecurityLevel3::_tc_AcquisitionMethod,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_SecurityLevel3_AcquisitionMethodList_0 =
        &SecurityLevel3_AcquisitionMethodList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_SecurityLevel3_AcquisitionMethodList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_AcquisitionMethodList (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/AcquisitionMethodList:1.0",
    "AcquisitionMethodList",
    &TAO::TypeCode::tc_SecurityLevel3_AcquisitionMethodList_0);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_AcquisitionMethodList =
    &_tao_tc_SecurityLevel3_AcquisitionMethodList;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_AcquisitionStatus (
    ::CORBA::tk_alias,
    "IDL:adiron.com/SecurityLevel3/AcquisitionStatus:1.0",
    "AcquisitionStatus",
    &CORBA::_tc_long);
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_AcquisitionStatus =
    &_tao_tc_SecurityLevel3_AcquisitionStatus;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::CredentialsAcquirer.

SecurityLevel3::CredentialsAcquirer_ptr
TAO::Objref_Traits<SecurityLevel3::CredentialsAcquirer>::duplicate (
    SecurityLevel3::CredentialsAcquirer_ptr p)
{
  return SecurityLevel3::CredentialsAcquirer::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::CredentialsAcquirer>::release (
    SecurityLevel3::CredentialsAcquirer_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::CredentialsAcquirer_ptr
TAO::Objref_Traits<SecurityLevel3::CredentialsAcquirer>::nil (void)
{
  return SecurityLevel3::CredentialsAcquirer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::CredentialsAcquirer>::marshal (
    const SecurityLevel3::CredentialsAcquirer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::CredentialsAcquirer::CredentialsAcquirer (void)
{}

SecurityLevel3::CredentialsAcquirer::~CredentialsAcquirer (void)
{}

void 
SecurityLevel3::CredentialsAcquirer::_tao_any_destructor (void *_tao_void_pointer)
{
  CredentialsAcquirer *_tao_tmp_pointer =
    static_cast<CredentialsAcquirer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::CredentialsAcquirer_ptr
SecurityLevel3::CredentialsAcquirer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredentialsAcquirer::_duplicate (
      dynamic_cast<CredentialsAcquirer_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredentialsAcquirer_ptr
SecurityLevel3::CredentialsAcquirer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredentialsAcquirer::_duplicate (
      dynamic_cast<CredentialsAcquirer_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredentialsAcquirer_ptr
SecurityLevel3::CredentialsAcquirer::_nil (void)
{
  return 0;
}

SecurityLevel3::CredentialsAcquirer_ptr
SecurityLevel3::CredentialsAcquirer::_duplicate (CredentialsAcquirer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::CredentialsAcquirer::_tao_release (CredentialsAcquirer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::CredentialsAcquirer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/CredentialsAcquirer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::CredentialsAcquirer::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/CredentialsAcquirer:1.0";
}

::CORBA::Boolean
SecurityLevel3::CredentialsAcquirer::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsAcquirer (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/CredentialsAcquirer:1.0",
    "CredentialsAcquirer");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsAcquirer =
    &_tao_tc_SecurityLevel3_CredentialsAcquirer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::CredentialsCurator.

SecurityLevel3::CredentialsCurator_ptr
TAO::Objref_Traits<SecurityLevel3::CredentialsCurator>::duplicate (
    SecurityLevel3::CredentialsCurator_ptr p)
{
  return SecurityLevel3::CredentialsCurator::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::CredentialsCurator>::release (
    SecurityLevel3::CredentialsCurator_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::CredentialsCurator_ptr
TAO::Objref_Traits<SecurityLevel3::CredentialsCurator>::nil (void)
{
  return SecurityLevel3::CredentialsCurator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::CredentialsCurator>::marshal (
    const SecurityLevel3::CredentialsCurator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::CredentialsCurator::CredentialsCurator (void)
{}

SecurityLevel3::CredentialsCurator::~CredentialsCurator (void)
{}

void 
SecurityLevel3::CredentialsCurator::_tao_any_destructor (void *_tao_void_pointer)
{
  CredentialsCurator *_tao_tmp_pointer =
    static_cast<CredentialsCurator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::CredentialsCurator_ptr
SecurityLevel3::CredentialsCurator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredentialsCurator::_duplicate (
      dynamic_cast<CredentialsCurator_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredentialsCurator_ptr
SecurityLevel3::CredentialsCurator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CredentialsCurator::_duplicate (
      dynamic_cast<CredentialsCurator_ptr> (_tao_objref)
    );
}

SecurityLevel3::CredentialsCurator_ptr
SecurityLevel3::CredentialsCurator::_nil (void)
{
  return 0;
}

SecurityLevel3::CredentialsCurator_ptr
SecurityLevel3::CredentialsCurator::_duplicate (CredentialsCurator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::CredentialsCurator::_tao_release (CredentialsCurator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::CredentialsCurator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/CredentialsCurator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::CredentialsCurator::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/CredentialsCurator:1.0";
}

::CORBA::Boolean
SecurityLevel3::CredentialsCurator::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_CredentialsCurator (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/CredentialsCurator:1.0",
    "CredentialsCurator");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_CredentialsCurator =
    &_tao_tc_SecurityLevel3_CredentialsCurator;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::SecurityManager.

SecurityLevel3::SecurityManager_ptr
TAO::Objref_Traits<SecurityLevel3::SecurityManager>::duplicate (
    SecurityLevel3::SecurityManager_ptr p)
{
  return SecurityLevel3::SecurityManager::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::SecurityManager>::release (
    SecurityLevel3::SecurityManager_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::SecurityManager_ptr
TAO::Objref_Traits<SecurityLevel3::SecurityManager>::nil (void)
{
  return SecurityLevel3::SecurityManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::SecurityManager>::marshal (
    const SecurityLevel3::SecurityManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::SecurityManager::SecurityManager (void)
{}

SecurityLevel3::SecurityManager::~SecurityManager (void)
{}

void 
SecurityLevel3::SecurityManager::_tao_any_destructor (void *_tao_void_pointer)
{
  SecurityManager *_tao_tmp_pointer =
    static_cast<SecurityManager *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::SecurityManager_ptr
SecurityLevel3::SecurityManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SecurityManager::_duplicate (
      dynamic_cast<SecurityManager_ptr> (_tao_objref)
    );
}

SecurityLevel3::SecurityManager_ptr
SecurityLevel3::SecurityManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SecurityManager::_duplicate (
      dynamic_cast<SecurityManager_ptr> (_tao_objref)
    );
}

SecurityLevel3::SecurityManager_ptr
SecurityLevel3::SecurityManager::_nil (void)
{
  return 0;
}

SecurityLevel3::SecurityManager_ptr
SecurityLevel3::SecurityManager::_duplicate (SecurityManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::SecurityManager::_tao_release (SecurityManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::SecurityManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/SecurityManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::SecurityManager::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/SecurityManager:1.0";
}

::CORBA::Boolean
SecurityLevel3::SecurityManager::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_SecurityManager (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/SecurityManager:1.0",
    "SecurityManager");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_SecurityManager =
    &_tao_tc_SecurityLevel3_SecurityManager;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for SecurityLevel3::SecurityCurrent.

SecurityLevel3::SecurityCurrent_ptr
TAO::Objref_Traits<SecurityLevel3::SecurityCurrent>::duplicate (
    SecurityLevel3::SecurityCurrent_ptr p)
{
  return SecurityLevel3::SecurityCurrent::_duplicate (p);
}

void
TAO::Objref_Traits<SecurityLevel3::SecurityCurrent>::release (
    SecurityLevel3::SecurityCurrent_ptr p)
{
  ::CORBA::release (p);
}

SecurityLevel3::SecurityCurrent_ptr
TAO::Objref_Traits<SecurityLevel3::SecurityCurrent>::nil (void)
{
  return SecurityLevel3::SecurityCurrent::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SecurityLevel3::SecurityCurrent>::marshal (
    const SecurityLevel3::SecurityCurrent_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

SecurityLevel3::SecurityCurrent::SecurityCurrent (void)
{}

SecurityLevel3::SecurityCurrent::~SecurityCurrent (void)
{}

void 
SecurityLevel3::SecurityCurrent::_tao_any_destructor (void *_tao_void_pointer)
{
  SecurityCurrent *_tao_tmp_pointer =
    static_cast<SecurityCurrent *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SecurityLevel3::SecurityCurrent_ptr
SecurityLevel3::SecurityCurrent::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SecurityCurrent::_duplicate (
      dynamic_cast<SecurityCurrent_ptr> (_tao_objref)
    );
}

SecurityLevel3::SecurityCurrent_ptr
SecurityLevel3::SecurityCurrent::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SecurityCurrent::_duplicate (
      dynamic_cast<SecurityCurrent_ptr> (_tao_objref)
    );
}

SecurityLevel3::SecurityCurrent_ptr
SecurityLevel3::SecurityCurrent::_nil (void)
{
  return 0;
}

SecurityLevel3::SecurityCurrent_ptr
SecurityLevel3::SecurityCurrent::_duplicate (SecurityCurrent_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
SecurityLevel3::SecurityCurrent::_tao_release (SecurityCurrent_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SecurityLevel3::SecurityCurrent::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:adiron.com/SecurityLevel3/SecurityCurrent:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* SecurityLevel3::SecurityCurrent::_interface_repository_id (void) const
{
  return "IDL:adiron.com/SecurityLevel3/SecurityCurrent:1.0";
}

::CORBA::Boolean
SecurityLevel3::SecurityCurrent::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SecurityLevel3_SecurityCurrent (
    ::CORBA::tk_local_interface,
    "IDL:adiron.com/SecurityLevel3/SecurityCurrent:1.0",
    "SecurityCurrent");
  

namespace SecurityLevel3
{
  ::CORBA::TypeCode_ptr const _tc_SecurityCurrent =
    &_tao_tc_SecurityLevel3_SecurityCurrent;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::Principal::Principal (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::Principal::Principal (
    ::SecurityLevel3::PrincipalType _tao_init_the_type,
    const ::SecurityLevel3::PrincipalName & _tao_init_the_name,
    const ::SecurityLevel3::PrinAttributeList & _tao_init_environmental_attributes,
    const ::SecurityLevel3::ScopedPrivilegesList & _tao_init_with_privileges
  )
: require_truncation_ (false)
{
  the_type (_tao_init_the_type);
  the_name (_tao_init_the_name);
  environmental_attributes (_tao_init_environmental_attributes);
  with_privileges (_tao_init_with_privileges);
}

OBV_SecurityLevel3::Principal::~Principal (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::Principal::_tao_marshal__SecurityLevel3_Principal (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::Principal::_tao_unmarshal__SecurityLevel3_Principal (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:590

// Accessor to set the member.
void
OBV_SecurityLevel3::Principal::the_type (const SecurityLevel3::PrincipalType val)
{
  // Set the value.
  this->_pd_the_type = val;
}

// Retrieve the member
::SecurityLevel3::PrincipalType
OBV_SecurityLevel3::Principal::the_type (void) const
{
  return this->_pd_the_type;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:1006

// Accessor to set the member.
void
OBV_SecurityLevel3::Principal::the_name (const SecurityLevel3::PrincipalName &val)
{
  this->_pd_the_name = val;
}
// Readonly get method.
const SecurityLevel3::PrincipalName &
OBV_SecurityLevel3::Principal::the_name (void) const
{
  return this->_pd_the_name;
}
// Read/write get method.
SecurityLevel3::PrincipalName &
OBV_SecurityLevel3::Principal::the_name (void)
{
  return this->_pd_the_name;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:765

// Accessor to set the member.
void
OBV_SecurityLevel3::Principal::environmental_attributes (const SecurityLevel3::PrinAttributeList &val)
{
  this->_pd_environmental_attributes = val;
}

// Readonly get method.
const SecurityLevel3::PrinAttributeList &
OBV_SecurityLevel3::Principal::environmental_attributes (void) const
{
  return this->_pd_environmental_attributes;
}

// Read/write get method.
SecurityLevel3::PrinAttributeList &
OBV_SecurityLevel3::Principal::environmental_attributes (void)
{
  return this->_pd_environmental_attributes;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:765

// Accessor to set the member.
void
OBV_SecurityLevel3::Principal::with_privileges (const SecurityLevel3::ScopedPrivilegesList &val)
{
  this->_pd_with_privileges = val;
}

// Readonly get method.
const SecurityLevel3::ScopedPrivilegesList &
OBV_SecurityLevel3::Principal::with_privileges (void) const
{
  return this->_pd_with_privileges;
}

// Read/write get method.
SecurityLevel3::ScopedPrivilegesList &
OBV_SecurityLevel3::Principal::with_privileges (void)
{
  return this->_pd_with_privileges;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::SimplePrincipal::SimplePrincipal (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::SimplePrincipal::SimplePrincipal (
    ::SecurityLevel3::PrincipalType _tao_init_the_type,
    const ::SecurityLevel3::PrincipalName & _tao_init_the_name,
    const ::SecurityLevel3::PrinAttributeList & _tao_init_environmental_attributes,
    const ::SecurityLevel3::ScopedPrivilegesList & _tao_init_with_privileges,
    ::CORBA::Boolean _tao_init_authenticated,
    const ::SecurityLevel3::PrincipalNameList & _tao_init_alternate_names
  )
: require_truncation_ (false)
{
  the_type (_tao_init_the_type);
  the_name (_tao_init_the_name);
  environmental_attributes (_tao_init_environmental_attributes);
  with_privileges (_tao_init_with_privileges);
  authenticated (_tao_init_authenticated);
  alternate_names (_tao_init_alternate_names);
}

OBV_SecurityLevel3::SimplePrincipal::~SimplePrincipal (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::SimplePrincipal::_tao_marshal__SecurityLevel3_SimplePrincipal (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::SimplePrincipal::_tao_unmarshal__SecurityLevel3_SimplePrincipal (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:590

// Accessor to set the member.
void
OBV_SecurityLevel3::SimplePrincipal::authenticated (const CORBA::Boolean val)
{
  // Set the value.
  this->_pd_authenticated = val;
}

// Retrieve the member
::CORBA::Boolean
OBV_SecurityLevel3::SimplePrincipal::authenticated (void) const
{
  return this->_pd_authenticated;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:765

// Accessor to set the member.
void
OBV_SecurityLevel3::SimplePrincipal::alternate_names (const SecurityLevel3::PrincipalNameList &val)
{
  this->_pd_alternate_names = val;
}

// Readonly get method.
const SecurityLevel3::PrincipalNameList &
OBV_SecurityLevel3::SimplePrincipal::alternate_names (void) const
{
  return this->_pd_alternate_names;
}

// Read/write get method.
SecurityLevel3::PrincipalNameList &
OBV_SecurityLevel3::SimplePrincipal::alternate_names (void)
{
  return this->_pd_alternate_names;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::ProxyPrincipal::ProxyPrincipal (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::ProxyPrincipal::ProxyPrincipal (
    ::SecurityLevel3::PrincipalType _tao_init_the_type,
    const ::SecurityLevel3::PrincipalName & _tao_init_the_name,
    const ::SecurityLevel3::PrinAttributeList & _tao_init_environmental_attributes,
    const ::SecurityLevel3::ScopedPrivilegesList & _tao_init_with_privileges,
    ::SecurityLevel3::Principal * _tao_init_speaking,
    ::SecurityLevel3::Principal * _tao_init_speaks_for
  )
: require_truncation_ (false)
{
  the_type (_tao_init_the_type);
  the_name (_tao_init_the_name);
  environmental_attributes (_tao_init_environmental_attributes);
  with_privileges (_tao_init_with_privileges);
  speaking (_tao_init_speaking);
  speaks_for (_tao_init_speaks_for);
}

OBV_SecurityLevel3::ProxyPrincipal::~ProxyPrincipal (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::ProxyPrincipal::_tao_marshal__SecurityLevel3_ProxyPrincipal (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::ProxyPrincipal::_tao_unmarshal__SecurityLevel3_ProxyPrincipal (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:433

/// Accessor to set the member.
void
OBV_SecurityLevel3::ProxyPrincipal::speaking (SecurityLevel3::Principal* val)
{
  ::CORBA::add_ref (val);
  this->_pd_speaking = val;
}

/// Retrieve the member
SecurityLevel3::Principal *
OBV_SecurityLevel3::ProxyPrincipal::speaking () const
{
  return this->_pd_speaking.in ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:433

/// Accessor to set the member.
void
OBV_SecurityLevel3::ProxyPrincipal::speaks_for (SecurityLevel3::Principal* val)
{
  ::CORBA::add_ref (val);
  this->_pd_speaks_for = val;
}

/// Retrieve the member
SecurityLevel3::Principal *
OBV_SecurityLevel3::ProxyPrincipal::speaks_for () const
{
  return this->_pd_speaks_for.in ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::QuotingPrincipal::QuotingPrincipal (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::QuotingPrincipal::QuotingPrincipal (
    ::SecurityLevel3::PrincipalType _tao_init_the_type,
    const ::SecurityLevel3::PrincipalName & _tao_init_the_name,
    const ::SecurityLevel3::PrinAttributeList & _tao_init_environmental_attributes,
    const ::SecurityLevel3::ScopedPrivilegesList & _tao_init_with_privileges,
    ::SecurityLevel3::Principal * _tao_init_speaking,
    ::SecurityLevel3::Principal * _tao_init_quotes_for
  )
: require_truncation_ (false)
{
  the_type (_tao_init_the_type);
  the_name (_tao_init_the_name);
  environmental_attributes (_tao_init_environmental_attributes);
  with_privileges (_tao_init_with_privileges);
  speaking (_tao_init_speaking);
  quotes_for (_tao_init_quotes_for);
}

OBV_SecurityLevel3::QuotingPrincipal::~QuotingPrincipal (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::QuotingPrincipal::_tao_marshal__SecurityLevel3_QuotingPrincipal (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::QuotingPrincipal::_tao_unmarshal__SecurityLevel3_QuotingPrincipal (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:433

/// Accessor to set the member.
void
OBV_SecurityLevel3::QuotingPrincipal::speaking (SecurityLevel3::Principal* val)
{
  ::CORBA::add_ref (val);
  this->_pd_speaking = val;
}

/// Retrieve the member
SecurityLevel3::Principal *
OBV_SecurityLevel3::QuotingPrincipal::speaking () const
{
  return this->_pd_speaking.in ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:433

/// Accessor to set the member.
void
OBV_SecurityLevel3::QuotingPrincipal::quotes_for (SecurityLevel3::Principal* val)
{
  ::CORBA::add_ref (val);
  this->_pd_quotes_for = val;
}

/// Retrieve the member
SecurityLevel3::Principal *
OBV_SecurityLevel3::QuotingPrincipal::quotes_for () const
{
  return this->_pd_quotes_for.in ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::Statement::Statement (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::Statement::Statement (
    ::SecurityLevel3::StatementLayer _tao_init_the_layer,
    ::SecurityLevel3::StatementType _tao_init_the_type,
    const char * _tao_init_encoding_type,
    const ::SecurityLevel3::Encoding & _tao_init_the_encoding
  )
: require_truncation_ (false)
{
  the_layer (_tao_init_the_layer);
  the_type (_tao_init_the_type);
  encoding_type (_tao_init_encoding_type);
  the_encoding (_tao_init_the_encoding);
}

OBV_SecurityLevel3::Statement::~Statement (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::Statement::_tao_marshal__SecurityLevel3_Statement (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::Statement::_tao_unmarshal__SecurityLevel3_Statement (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:590

// Accessor to set the member.
void
OBV_SecurityLevel3::Statement::the_layer (const SecurityLevel3::StatementLayer val)
{
  // Set the value.
  this->_pd_the_layer = val;
}

// Retrieve the member
::SecurityLevel3::StatementLayer
OBV_SecurityLevel3::Statement::the_layer (void) const
{
  return this->_pd_the_layer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:590

// Accessor to set the member.
void
OBV_SecurityLevel3::Statement::the_type (const SecurityLevel3::StatementType val)
{
  // Set the value.
  this->_pd_the_type = val;
}

// Retrieve the member
::SecurityLevel3::StatementType
OBV_SecurityLevel3::Statement::the_type (void) const
{
  return this->_pd_the_type;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:837

// Accessor to set the member.
void
OBV_SecurityLevel3::Statement::encoding_type (char *val)
{
  this->_pd_encoding_type = (val);
}

// Accessor to set the member.
void
OBV_SecurityLevel3::Statement::encoding_type (const char *val)
{
  // Set the value.
  this->_pd_encoding_type = ::CORBA::string_dup (val);
}

// Accessor to set the member.
void
OBV_SecurityLevel3::Statement::encoding_type (const ::CORBA::String_var &val)
{
  ::CORBA::String_var encoding_type_var = val;
  this->_pd_encoding_type = encoding_type_var._retn ();
}

const char *
OBV_SecurityLevel3::Statement::encoding_type (void) const // get method
{
  return this->_pd_encoding_type;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:765

// Accessor to set the member.
void
OBV_SecurityLevel3::Statement::the_encoding (const SecurityLevel3::Encoding &val)
{
  this->_pd_the_encoding = val;
}

// Readonly get method.
const SecurityLevel3::Encoding &
OBV_SecurityLevel3::Statement::the_encoding (void) const
{
  return this->_pd_the_encoding;
}

// Read/write get method.
SecurityLevel3::Encoding &
OBV_SecurityLevel3::Statement::the_encoding (void)
{
  return this->_pd_the_encoding;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::IdentityStatement::IdentityStatement (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::IdentityStatement::IdentityStatement (
    ::SecurityLevel3::StatementLayer _tao_init_the_layer,
    ::SecurityLevel3::StatementType _tao_init_the_type,
    const char * _tao_init_encoding_type,
    const ::SecurityLevel3::Encoding & _tao_init_the_encoding,
    const char * _tao_init_interpretation_aid
  )
: require_truncation_ (false)
{
  the_layer (_tao_init_the_layer);
  the_type (_tao_init_the_type);
  encoding_type (_tao_init_encoding_type);
  the_encoding (_tao_init_the_encoding);
  interpretation_aid (_tao_init_interpretation_aid);
}

OBV_SecurityLevel3::IdentityStatement::~IdentityStatement (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::IdentityStatement::_tao_marshal__SecurityLevel3_IdentityStatement (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::IdentityStatement::_tao_unmarshal__SecurityLevel3_IdentityStatement (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:837

// Accessor to set the member.
void
OBV_SecurityLevel3::IdentityStatement::interpretation_aid (char *val)
{
  this->_pd_interpretation_aid = (val);
}

// Accessor to set the member.
void
OBV_SecurityLevel3::IdentityStatement::interpretation_aid (const char *val)
{
  // Set the value.
  this->_pd_interpretation_aid = ::CORBA::string_dup (val);
}

// Accessor to set the member.
void
OBV_SecurityLevel3::IdentityStatement::interpretation_aid (const ::CORBA::String_var &val)
{
  ::CORBA::String_var interpretation_aid_var = val;
  this->_pd_interpretation_aid = interpretation_aid_var._retn ();
}

const char *
OBV_SecurityLevel3::IdentityStatement::interpretation_aid (void) const // get method
{
  return this->_pd_interpretation_aid;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::PrincipalIdentityStatement::PrincipalIdentityStatement (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::PrincipalIdentityStatement::PrincipalIdentityStatement (
    ::SecurityLevel3::StatementLayer _tao_init_the_layer,
    ::SecurityLevel3::StatementType _tao_init_the_type,
    const char * _tao_init_encoding_type,
    const ::SecurityLevel3::Encoding & _tao_init_the_encoding,
    const char * _tao_init_interpretation_aid,
    ::SecurityLevel3::Principal * _tao_init_the_principal
  )
: require_truncation_ (false)
{
  the_layer (_tao_init_the_layer);
  the_type (_tao_init_the_type);
  encoding_type (_tao_init_encoding_type);
  the_encoding (_tao_init_the_encoding);
  interpretation_aid (_tao_init_interpretation_aid);
  the_principal (_tao_init_the_principal);
}

OBV_SecurityLevel3::PrincipalIdentityStatement::~PrincipalIdentityStatement (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::PrincipalIdentityStatement::_tao_marshal__SecurityLevel3_PrincipalIdentityStatement (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::PrincipalIdentityStatement::_tao_unmarshal__SecurityLevel3_PrincipalIdentityStatement (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:433

/// Accessor to set the member.
void
OBV_SecurityLevel3::PrincipalIdentityStatement::the_principal (SecurityLevel3::Principal* val)
{
  ::CORBA::add_ref (val);
  this->_pd_the_principal = val;
}

/// Retrieve the member
SecurityLevel3::Principal *
OBV_SecurityLevel3::PrincipalIdentityStatement::the_principal () const
{
  return this->_pd_the_principal.in ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::EndorsementStatement::EndorsementStatement (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::EndorsementStatement::EndorsementStatement (
    ::SecurityLevel3::StatementLayer _tao_init_the_layer,
    ::SecurityLevel3::StatementType _tao_init_the_type,
    const char * _tao_init_encoding_type,
    const ::SecurityLevel3::Encoding & _tao_init_the_encoding,
    const char * _tao_init_interpretation_aid
  )
: require_truncation_ (false)
{
  the_layer (_tao_init_the_layer);
  the_type (_tao_init_the_type);
  encoding_type (_tao_init_encoding_type);
  the_encoding (_tao_init_the_encoding);
  interpretation_aid (_tao_init_interpretation_aid);
}

OBV_SecurityLevel3::EndorsementStatement::~EndorsementStatement (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::EndorsementStatement::_tao_marshal__SecurityLevel3_EndorsementStatement (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::EndorsementStatement::_tao_unmarshal__SecurityLevel3_EndorsementStatement (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/field_cs.cpp:837

// Accessor to set the member.
void
OBV_SecurityLevel3::EndorsementStatement::interpretation_aid (char *val)
{
  this->_pd_interpretation_aid = (val);
}

// Accessor to set the member.
void
OBV_SecurityLevel3::EndorsementStatement::interpretation_aid (const char *val)
{
  // Set the value.
  this->_pd_interpretation_aid = ::CORBA::string_dup (val);
}

// Accessor to set the member.
void
OBV_SecurityLevel3::EndorsementStatement::interpretation_aid (const ::CORBA::String_var &val)
{
  ::CORBA::String_var interpretation_aid_var = val;
  this->_pd_interpretation_aid = interpretation_aid_var._retn ();
}

const char *
OBV_SecurityLevel3::EndorsementStatement::interpretation_aid (void) const // get method
{
  return this->_pd_interpretation_aid;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_SecurityLevel3::X509IdentityStatement::X509IdentityStatement (void)
: require_truncation_ (false)
{}

OBV_SecurityLevel3::X509IdentityStatement::X509IdentityStatement (
    ::SecurityLevel3::StatementLayer _tao_init_the_layer,
    ::SecurityLevel3::StatementType _tao_init_the_type,
    const char * _tao_init_encoding_type,
    const ::SecurityLevel3::Encoding & _tao_init_the_encoding,
    const char * _tao_init_interpretation_aid,
    ::SecurityLevel3::Principal * _tao_init_the_principal
  )
: require_truncation_ (false)
{
  the_layer (_tao_init_the_layer);
  the_type (_tao_init_the_type);
  encoding_type (_tao_init_encoding_type);
  the_encoding (_tao_init_the_encoding);
  interpretation_aid (_tao_init_interpretation_aid);
  the_principal (_tao_init_the_principal);
}

OBV_SecurityLevel3::X509IdentityStatement::~X509IdentityStatement (void)
{}

::CORBA::Boolean
OBV_SecurityLevel3::X509IdentityStatement::_tao_marshal__SecurityLevel3_X509IdentityStatement (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_SecurityLevel3::X509IdentityStatement::_tao_unmarshal__SecurityLevel3_X509IdentityStatement (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::NamePath &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::NamePath *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::NamePath>::insert_copy (
          _tao_any,
          ::SecurityLevel3::NamePath::_tao_any_destructor,
          ::SecurityLevel3::_tc_NamePath,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::NamePath *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::NamePath>::insert (
        _tao_any,
        ::SecurityLevel3::NamePath::_tao_any_destructor,
        ::SecurityLevel3::_tc_NamePath,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::NamePath *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::NamePath *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::NamePath *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::NamePath>::extract (
          _tao_any,
          ::SecurityLevel3::NamePath::_tao_any_destructor,
          ::SecurityLevel3::_tc_NamePath,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::NamePath &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::NamePath *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::NamePath>::insert_copy (
        _tao_any,
        SecurityLevel3::NamePath::_tao_any_destructor,
        SecurityLevel3::_tc_NamePath,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::NamePath *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::NamePath>::insert (
      _tao_any,
      SecurityLevel3::NamePath::_tao_any_destructor,
      SecurityLevel3::_tc_NamePath,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::NamePath *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::NamePath *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::NamePath *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::NamePath>::extract (
        _tao_any,
        SecurityLevel3::NamePath::_tao_any_destructor,
        SecurityLevel3::_tc_NamePath,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrincipalName &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::PrincipalName *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalName>::insert_copy (
          _tao_any,
          ::SecurityLevel3::PrincipalName::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrincipalName,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      SecurityLevel3::PrincipalName *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalName>::insert (
        _tao_any,
        ::SecurityLevel3::PrincipalName::_tao_any_destructor,
        ::SecurityLevel3::_tc_PrincipalName,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrincipalName *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::PrincipalName *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrincipalName *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalName>::extract (
          _tao_any,
          ::SecurityLevel3::PrincipalName::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrincipalName,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrincipalName &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::PrincipalName *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalName>::insert_copy (
        _tao_any,
        SecurityLevel3::PrincipalName::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalName,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalName *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalName>::insert (
      _tao_any,
      SecurityLevel3::PrincipalName::_tao_any_destructor,
      SecurityLevel3::_tc_PrincipalName,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalName *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::PrincipalName *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrincipalName *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalName>::extract (
        _tao_any,
        SecurityLevel3::PrincipalName::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalName,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrincipalNameList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::PrincipalNameList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalNameList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::PrincipalNameList::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrincipalNameList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrincipalNameList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalNameList>::insert (
        _tao_any,
        ::SecurityLevel3::PrincipalNameList::_tao_any_destructor,
        ::SecurityLevel3::_tc_PrincipalNameList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrincipalNameList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::PrincipalNameList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrincipalNameList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalNameList>::extract (
          _tao_any,
          ::SecurityLevel3::PrincipalNameList::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrincipalNameList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrincipalNameList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::PrincipalNameList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalNameList>::insert_copy (
        _tao_any,
        SecurityLevel3::PrincipalNameList::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalNameList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalNameList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalNameList>::insert (
      _tao_any,
      SecurityLevel3::PrincipalNameList::_tao_any_destructor,
      SecurityLevel3::_tc_PrincipalNameList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalNameList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::PrincipalNameList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrincipalNameList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalNameList>::extract (
        _tao_any,
        SecurityLevel3::PrincipalNameList::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalNameList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrinAttribute &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::PrinAttribute *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrinAttribute>::insert_copy (
          _tao_any,
          ::SecurityLevel3::PrinAttribute::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrinAttribute,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      SecurityLevel3::PrinAttribute *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrinAttribute>::insert (
        _tao_any,
        ::SecurityLevel3::PrinAttribute::_tao_any_destructor,
        ::SecurityLevel3::_tc_PrinAttribute,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrinAttribute *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::PrinAttribute *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrinAttribute *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrinAttribute>::extract (
          _tao_any,
          ::SecurityLevel3::PrinAttribute::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrinAttribute,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrinAttribute &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::PrinAttribute *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrinAttribute>::insert_copy (
        _tao_any,
        SecurityLevel3::PrinAttribute::_tao_any_destructor,
        SecurityLevel3::_tc_PrinAttribute,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrinAttribute *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::PrinAttribute>::insert (
      _tao_any,
      SecurityLevel3::PrinAttribute::_tao_any_destructor,
      SecurityLevel3::_tc_PrinAttribute,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::PrinAttribute *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::PrinAttribute *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrinAttribute *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrinAttribute>::extract (
        _tao_any,
        SecurityLevel3::PrinAttribute::_tao_any_destructor,
        SecurityLevel3::_tc_PrinAttribute,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrinAttributeList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::PrinAttributeList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrinAttributeList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::PrinAttributeList::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrinAttributeList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrinAttributeList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrinAttributeList>::insert (
        _tao_any,
        ::SecurityLevel3::PrinAttributeList::_tao_any_destructor,
        ::SecurityLevel3::_tc_PrinAttributeList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrinAttributeList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::PrinAttributeList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrinAttributeList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrinAttributeList>::extract (
          _tao_any,
          ::SecurityLevel3::PrinAttributeList::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrinAttributeList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrinAttributeList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::PrinAttributeList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrinAttributeList>::insert_copy (
        _tao_any,
        SecurityLevel3::PrinAttributeList::_tao_any_destructor,
        SecurityLevel3::_tc_PrinAttributeList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrinAttributeList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::PrinAttributeList>::insert (
      _tao_any,
      SecurityLevel3::PrinAttributeList::_tao_any_destructor,
      SecurityLevel3::_tc_PrinAttributeList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::PrinAttributeList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::PrinAttributeList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrinAttributeList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrinAttributeList>::extract (
        _tao_any,
        SecurityLevel3::PrinAttributeList::_tao_any_destructor,
        SecurityLevel3::_tc_PrinAttributeList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ResourceNameComponents &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::ResourceNameComponents *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceNameComponents>::insert_copy (
          _tao_any,
          ::SecurityLevel3::ResourceNameComponents::_tao_any_destructor,
          ::SecurityLevel3::_tc_ResourceNameComponents,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ResourceNameComponents *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceNameComponents>::insert (
        _tao_any,
        ::SecurityLevel3::ResourceNameComponents::_tao_any_destructor,
        ::SecurityLevel3::_tc_ResourceNameComponents,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ResourceNameComponents *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::ResourceNameComponents *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ResourceNameComponents *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceNameComponents>::extract (
          _tao_any,
          ::SecurityLevel3::ResourceNameComponents::_tao_any_destructor,
          ::SecurityLevel3::_tc_ResourceNameComponents,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::ResourceNameComponents &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::ResourceNameComponents *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceNameComponents>::insert_copy (
        _tao_any,
        SecurityLevel3::ResourceNameComponents::_tao_any_destructor,
        SecurityLevel3::_tc_ResourceNameComponents,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ResourceNameComponents *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceNameComponents>::insert (
      _tao_any,
      SecurityLevel3::ResourceNameComponents::_tao_any_destructor,
      SecurityLevel3::_tc_ResourceNameComponents,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ResourceNameComponents *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::ResourceNameComponents *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::ResourceNameComponents *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceNameComponents>::extract (
        _tao_any,
        SecurityLevel3::ResourceNameComponents::_tao_any_destructor,
        SecurityLevel3::_tc_ResourceNameComponents,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ResourceName &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::ResourceName *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceName>::insert_copy (
          _tao_any,
          ::SecurityLevel3::ResourceName::_tao_any_destructor,
          ::SecurityLevel3::_tc_ResourceName,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      SecurityLevel3::ResourceName *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceName>::insert (
        _tao_any,
        ::SecurityLevel3::ResourceName::_tao_any_destructor,
        ::SecurityLevel3::_tc_ResourceName,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ResourceName *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::ResourceName *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ResourceName *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceName>::extract (
          _tao_any,
          ::SecurityLevel3::ResourceName::_tao_any_destructor,
          ::SecurityLevel3::_tc_ResourceName,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::ResourceName &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::ResourceName *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceName>::insert_copy (
        _tao_any,
        SecurityLevel3::ResourceName::_tao_any_destructor,
        SecurityLevel3::_tc_ResourceName,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ResourceName *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceName>::insert (
      _tao_any,
      SecurityLevel3::ResourceName::_tao_any_destructor,
      SecurityLevel3::_tc_ResourceName,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ResourceName *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::ResourceName *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::ResourceName *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceName>::extract (
        _tao_any,
        SecurityLevel3::ResourceName::_tao_any_destructor,
        SecurityLevel3::_tc_ResourceName,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ResourceNameList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::ResourceNameList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceNameList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::ResourceNameList::_tao_any_destructor,
          ::SecurityLevel3::_tc_ResourceNameList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ResourceNameList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceNameList>::insert (
        _tao_any,
        ::SecurityLevel3::ResourceNameList::_tao_any_destructor,
        ::SecurityLevel3::_tc_ResourceNameList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ResourceNameList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::ResourceNameList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ResourceNameList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ResourceNameList>::extract (
          _tao_any,
          ::SecurityLevel3::ResourceNameList::_tao_any_destructor,
          ::SecurityLevel3::_tc_ResourceNameList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::ResourceNameList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::ResourceNameList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceNameList>::insert_copy (
        _tao_any,
        SecurityLevel3::ResourceNameList::_tao_any_destructor,
        SecurityLevel3::_tc_ResourceNameList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ResourceNameList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceNameList>::insert (
      _tao_any,
      SecurityLevel3::ResourceNameList::_tao_any_destructor,
      SecurityLevel3::_tc_ResourceNameList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ResourceNameList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::ResourceNameList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::ResourceNameList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::ResourceNameList>::extract (
        _tao_any,
        SecurityLevel3::ResourceNameList::_tao_any_destructor,
        SecurityLevel3::_tc_ResourceNameList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ScopedPrivileges &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::ScopedPrivileges *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ScopedPrivileges>::insert_copy (
          _tao_any,
          ::SecurityLevel3::ScopedPrivileges::_tao_any_destructor,
          ::SecurityLevel3::_tc_ScopedPrivileges,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      SecurityLevel3::ScopedPrivileges *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::ScopedPrivileges>::insert (
        _tao_any,
        ::SecurityLevel3::ScopedPrivileges::_tao_any_destructor,
        ::SecurityLevel3::_tc_ScopedPrivileges,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ScopedPrivileges *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::ScopedPrivileges *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ScopedPrivileges *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ScopedPrivileges>::extract (
          _tao_any,
          ::SecurityLevel3::ScopedPrivileges::_tao_any_destructor,
          ::SecurityLevel3::_tc_ScopedPrivileges,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::ScopedPrivileges &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::ScopedPrivileges *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::ScopedPrivileges>::insert_copy (
        _tao_any,
        SecurityLevel3::ScopedPrivileges::_tao_any_destructor,
        SecurityLevel3::_tc_ScopedPrivileges,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ScopedPrivileges *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::ScopedPrivileges>::insert (
      _tao_any,
      SecurityLevel3::ScopedPrivileges::_tao_any_destructor,
      SecurityLevel3::_tc_ScopedPrivileges,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ScopedPrivileges *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::ScopedPrivileges *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::ScopedPrivileges *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::ScopedPrivileges>::extract (
        _tao_any,
        SecurityLevel3::ScopedPrivileges::_tao_any_destructor,
        SecurityLevel3::_tc_ScopedPrivileges,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ScopedPrivilegesList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::ScopedPrivilegesList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ScopedPrivilegesList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor,
          ::SecurityLevel3::_tc_ScopedPrivilegesList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ScopedPrivilegesList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::ScopedPrivilegesList>::insert (
        _tao_any,
        ::SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor,
        ::SecurityLevel3::_tc_ScopedPrivilegesList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ScopedPrivilegesList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::ScopedPrivilegesList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ScopedPrivilegesList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ScopedPrivilegesList>::extract (
          _tao_any,
          ::SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor,
          ::SecurityLevel3::_tc_ScopedPrivilegesList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::ScopedPrivilegesList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::ScopedPrivilegesList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::ScopedPrivilegesList>::insert_copy (
        _tao_any,
        SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor,
        SecurityLevel3::_tc_ScopedPrivilegesList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ScopedPrivilegesList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::ScopedPrivilegesList>::insert (
      _tao_any,
      SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor,
      SecurityLevel3::_tc_ScopedPrivilegesList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ScopedPrivilegesList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::ScopedPrivilegesList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::ScopedPrivilegesList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::ScopedPrivilegesList>::extract (
        _tao_any,
        SecurityLevel3::ScopedPrivilegesList::_tao_any_destructor,
        SecurityLevel3::_tc_ScopedPrivilegesList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::Principal>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Principal *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Principal **_tao_elem
    )
  {
    TAO::Any_Impl_T<Principal>::insert (
        _tao_any,
        Principal::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Principal *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<Principal>::extract (
          _tao_any,
          Principal::_tao_any_destructor,
          _tc_Principal,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Principal *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Principal **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::Principal>::insert (
      _tao_any,
      SecurityLevel3::Principal::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::Principal *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::Principal>::extract (
        _tao_any,
        SecurityLevel3::Principal::_tao_any_destructor,
        SecurityLevel3::_tc_Principal,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrincipalList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::PrincipalList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::PrincipalList::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrincipalList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrincipalList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalList>::insert (
        _tao_any,
        ::SecurityLevel3::PrincipalList::_tao_any_destructor,
        ::SecurityLevel3::_tc_PrincipalList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::PrincipalList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::PrincipalList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::PrincipalList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::PrincipalList>::extract (
          _tao_any,
          ::SecurityLevel3::PrincipalList::_tao_any_destructor,
          ::SecurityLevel3::_tc_PrincipalList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrincipalList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::PrincipalList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalList>::insert_copy (
        _tao_any,
        SecurityLevel3::PrincipalList::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalList>::insert (
      _tao_any,
      SecurityLevel3::PrincipalList::_tao_any_destructor,
      SecurityLevel3::_tc_PrincipalList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::PrincipalList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::PrincipalList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::PrincipalList>::extract (
        _tao_any,
        SecurityLevel3::PrincipalList::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SimplePrincipal>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SimplePrincipal *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SimplePrincipal **_tao_elem
    )
  {
    TAO::Any_Impl_T<SimplePrincipal>::insert (
        _tao_any,
        SimplePrincipal::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SimplePrincipal *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<SimplePrincipal>::extract (
          _tao_any,
          SimplePrincipal::_tao_any_destructor,
          _tc_SimplePrincipal,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::SimplePrincipal *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::SimplePrincipal **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::SimplePrincipal>::insert (
      _tao_any,
      SecurityLevel3::SimplePrincipal::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::SimplePrincipal *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::SimplePrincipal>::extract (
        _tao_any,
        SecurityLevel3::SimplePrincipal::_tao_any_destructor,
        SecurityLevel3::_tc_SimplePrincipal,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ProxyPrincipal>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPrincipal *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPrincipal **_tao_elem
    )
  {
    TAO::Any_Impl_T<ProxyPrincipal>::insert (
        _tao_any,
        ProxyPrincipal::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPrincipal *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<ProxyPrincipal>::extract (
          _tao_any,
          ProxyPrincipal::_tao_any_destructor,
          _tc_ProxyPrincipal,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ProxyPrincipal *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ProxyPrincipal **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::ProxyPrincipal>::insert (
      _tao_any,
      SecurityLevel3::ProxyPrincipal::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ProxyPrincipal *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::ProxyPrincipal>::extract (
        _tao_any,
        SecurityLevel3::ProxyPrincipal::_tao_any_destructor,
        SecurityLevel3::_tc_ProxyPrincipal,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::QuotingPrincipal>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuotingPrincipal *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QuotingPrincipal **_tao_elem
    )
  {
    TAO::Any_Impl_T<QuotingPrincipal>::insert (
        _tao_any,
        QuotingPrincipal::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      QuotingPrincipal *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<QuotingPrincipal>::extract (
          _tao_any,
          QuotingPrincipal::_tao_any_destructor,
          _tc_QuotingPrincipal,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::QuotingPrincipal *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::QuotingPrincipal **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::QuotingPrincipal>::insert (
      _tao_any,
      SecurityLevel3::QuotingPrincipal::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::QuotingPrincipal *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::QuotingPrincipal>::extract (
        _tao_any,
        SecurityLevel3::QuotingPrincipal::_tao_any_destructor,
        SecurityLevel3::_tc_QuotingPrincipal,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::Encoding &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::Encoding *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::Encoding>::insert_copy (
          _tao_any,
          ::SecurityLevel3::Encoding::_tao_any_destructor,
          ::SecurityLevel3::_tc_Encoding,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::Encoding *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::Encoding>::insert (
        _tao_any,
        ::SecurityLevel3::Encoding::_tao_any_destructor,
        ::SecurityLevel3::_tc_Encoding,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::Encoding *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::Encoding *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::Encoding *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::Encoding>::extract (
          _tao_any,
          ::SecurityLevel3::Encoding::_tao_any_destructor,
          ::SecurityLevel3::_tc_Encoding,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::Encoding &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::Encoding *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::Encoding>::insert_copy (
        _tao_any,
        SecurityLevel3::Encoding::_tao_any_destructor,
        SecurityLevel3::_tc_Encoding,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Encoding *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::Encoding>::insert (
      _tao_any,
      SecurityLevel3::Encoding::_tao_any_destructor,
      SecurityLevel3::_tc_Encoding,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::Encoding *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::Encoding *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::Encoding *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::Encoding>::extract (
        _tao_any,
        SecurityLevel3::Encoding::_tao_any_destructor,
        SecurityLevel3::_tc_Encoding,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::BadEncoding>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::BadEncoding &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::BadEncoding>::insert_copy (
        _tao_any,
        ::SecurityLevel3::BadEncoding::_tao_any_destructor,
        ::SecurityLevel3::_tc_BadEncoding,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::BadEncoding *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::BadEncoding>::insert (
        _tao_any,
        ::SecurityLevel3::BadEncoding::_tao_any_destructor,
        ::SecurityLevel3::_tc_BadEncoding,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::BadEncoding *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::BadEncoding *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::BadEncoding *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::BadEncoding>::extract (
          _tao_any,
          ::SecurityLevel3::BadEncoding::_tao_any_destructor,
          ::SecurityLevel3::_tc_BadEncoding,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::BadEncoding &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::BadEncoding>::insert_copy (
      _tao_any,
      SecurityLevel3::BadEncoding::_tao_any_destructor,
      SecurityLevel3::_tc_BadEncoding,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::BadEncoding *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::BadEncoding>::insert (
      _tao_any,
      SecurityLevel3::BadEncoding::_tao_any_destructor,
      SecurityLevel3::_tc_BadEncoding,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::BadEncoding *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::BadEncoding *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::BadEncoding *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::BadEncoding>::extract (
        _tao_any,
        SecurityLevel3::BadEncoding::_tao_any_destructor,
        SecurityLevel3::_tc_BadEncoding,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::BadEncodingType>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::BadEncodingType &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::BadEncodingType>::insert_copy (
        _tao_any,
        ::SecurityLevel3::BadEncodingType::_tao_any_destructor,
        ::SecurityLevel3::_tc_BadEncodingType,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::BadEncodingType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::BadEncodingType>::insert (
        _tao_any,
        ::SecurityLevel3::BadEncodingType::_tao_any_destructor,
        ::SecurityLevel3::_tc_BadEncodingType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::BadEncodingType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::BadEncodingType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::BadEncodingType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::BadEncodingType>::extract (
          _tao_any,
          ::SecurityLevel3::BadEncodingType::_tao_any_destructor,
          ::SecurityLevel3::_tc_BadEncodingType,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::BadEncodingType &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::BadEncodingType>::insert_copy (
      _tao_any,
      SecurityLevel3::BadEncodingType::_tao_any_destructor,
      SecurityLevel3::_tc_BadEncodingType,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::BadEncodingType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::BadEncodingType>::insert (
      _tao_any,
      SecurityLevel3::BadEncodingType::_tao_any_destructor,
      SecurityLevel3::_tc_BadEncodingType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::BadEncodingType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::BadEncodingType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::BadEncodingType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::BadEncodingType>::extract (
        _tao_any,
        SecurityLevel3::BadEncodingType::_tao_any_destructor,
        SecurityLevel3::_tc_BadEncodingType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::Statement>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Statement *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Statement **_tao_elem
    )
  {
    TAO::Any_Impl_T<Statement>::insert (
        _tao_any,
        Statement::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Statement *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<Statement>::extract (
          _tao_any,
          Statement::_tao_any_destructor,
          _tc_Statement,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Statement *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Statement **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::Statement>::insert (
      _tao_any,
      SecurityLevel3::Statement::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::Statement *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::Statement>::extract (
        _tao_any,
        SecurityLevel3::Statement::_tao_any_destructor,
        SecurityLevel3::_tc_Statement,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::StatementList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::StatementList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::StatementList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::StatementList::_tao_any_destructor,
          ::SecurityLevel3::_tc_StatementList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::StatementList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::StatementList>::insert (
        _tao_any,
        ::SecurityLevel3::StatementList::_tao_any_destructor,
        ::SecurityLevel3::_tc_StatementList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::StatementList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::StatementList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::StatementList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::StatementList>::extract (
          _tao_any,
          ::SecurityLevel3::StatementList::_tao_any_destructor,
          ::SecurityLevel3::_tc_StatementList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::StatementList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::StatementList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::StatementList>::insert_copy (
        _tao_any,
        SecurityLevel3::StatementList::_tao_any_destructor,
        SecurityLevel3::_tc_StatementList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::StatementList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::StatementList>::insert (
      _tao_any,
      SecurityLevel3::StatementList::_tao_any_destructor,
      SecurityLevel3::_tc_StatementList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::StatementList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::StatementList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::StatementList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::StatementList>::extract (
        _tao_any,
        SecurityLevel3::StatementList::_tao_any_destructor,
        SecurityLevel3::_tc_StatementList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::IdentityStatement>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IdentityStatement *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IdentityStatement **_tao_elem
    )
  {
    TAO::Any_Impl_T<IdentityStatement>::insert (
        _tao_any,
        IdentityStatement::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IdentityStatement *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<IdentityStatement>::extract (
          _tao_any,
          IdentityStatement::_tao_any_destructor,
          _tc_IdentityStatement,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::IdentityStatement *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::IdentityStatement **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::IdentityStatement>::insert (
      _tao_any,
      SecurityLevel3::IdentityStatement::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::IdentityStatement *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::IdentityStatement>::extract (
        _tao_any,
        SecurityLevel3::IdentityStatement::_tao_any_destructor,
        SecurityLevel3::_tc_IdentityStatement,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::PrincipalIdentityStatement>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PrincipalIdentityStatement *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PrincipalIdentityStatement **_tao_elem
    )
  {
    TAO::Any_Impl_T<PrincipalIdentityStatement>::insert (
        _tao_any,
        PrincipalIdentityStatement::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PrincipalIdentityStatement *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<PrincipalIdentityStatement>::extract (
          _tao_any,
          PrincipalIdentityStatement::_tao_any_destructor,
          _tc_PrincipalIdentityStatement,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalIdentityStatement *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalIdentityStatement **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::PrincipalIdentityStatement>::insert (
      _tao_any,
      SecurityLevel3::PrincipalIdentityStatement::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::PrincipalIdentityStatement *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::PrincipalIdentityStatement>::extract (
        _tao_any,
        SecurityLevel3::PrincipalIdentityStatement::_tao_any_destructor,
        SecurityLevel3::_tc_PrincipalIdentityStatement,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::EndorsementStatement>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EndorsementStatement *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EndorsementStatement **_tao_elem
    )
  {
    TAO::Any_Impl_T<EndorsementStatement>::insert (
        _tao_any,
        EndorsementStatement::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EndorsementStatement *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<EndorsementStatement>::extract (
          _tao_any,
          EndorsementStatement::_tao_any_destructor,
          _tc_EndorsementStatement,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::EndorsementStatement *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::EndorsementStatement **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::EndorsementStatement>::insert (
      _tao_any,
      SecurityLevel3::EndorsementStatement::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::EndorsementStatement *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::EndorsementStatement>::extract (
        _tao_any,
        SecurityLevel3::EndorsementStatement::_tao_any_destructor,
        SecurityLevel3::_tc_EndorsementStatement,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::X509IdentityStatement>::to_value (
      ::CORBA::ValueBase *&_tao_elem
    ) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      X509IdentityStatement *_tao_elem
    )
  {
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  }

  // Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      X509IdentityStatement **_tao_elem
    )
  {
    TAO::Any_Impl_T<X509IdentityStatement>::insert (
        _tao_any,
        X509IdentityStatement::_tao_any_destructor,
        (*_tao_elem)->_tao_type (),
        *_tao_elem
      );
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      X509IdentityStatement *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<X509IdentityStatement>::extract (
          _tao_any,
          X509IdentityStatement::_tao_any_destructor,
          _tc_X509IdentityStatement,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::X509IdentityStatement *_tao_elem
  )
{
  ::CORBA::add_ref (_tao_elem);
  _tao_any <<= &_tao_elem;
}

// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::X509IdentityStatement **_tao_elem
  )
{
  TAO::Any_Impl_T<SecurityLevel3::X509IdentityStatement>::insert (
      _tao_any,
      SecurityLevel3::X509IdentityStatement::_tao_any_destructor,
      (*_tao_elem)->_tao_type (),
      *_tao_elem
    );
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::X509IdentityStatement *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<SecurityLevel3::X509IdentityStatement>::extract (
        _tao_any,
        SecurityLevel3::X509IdentityStatement::_tao_any_destructor,
        SecurityLevel3::_tc_X509IdentityStatement,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::X509IdentityStatementList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::X509IdentityStatementList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::X509IdentityStatementList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::X509IdentityStatementList::_tao_any_destructor,
          ::SecurityLevel3::_tc_X509IdentityStatementList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::X509IdentityStatementList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::X509IdentityStatementList>::insert (
        _tao_any,
        ::SecurityLevel3::X509IdentityStatementList::_tao_any_destructor,
        ::SecurityLevel3::_tc_X509IdentityStatementList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::X509IdentityStatementList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::X509IdentityStatementList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::X509IdentityStatementList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::X509IdentityStatementList>::extract (
          _tao_any,
          ::SecurityLevel3::X509IdentityStatementList::_tao_any_destructor,
          ::SecurityLevel3::_tc_X509IdentityStatementList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::X509IdentityStatementList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::X509IdentityStatementList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::X509IdentityStatementList>::insert_copy (
        _tao_any,
        SecurityLevel3::X509IdentityStatementList::_tao_any_destructor,
        SecurityLevel3::_tc_X509IdentityStatementList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::X509IdentityStatementList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::X509IdentityStatementList>::insert (
      _tao_any,
      SecurityLevel3::X509IdentityStatementList::_tao_any_destructor,
      SecurityLevel3::_tc_X509IdentityStatementList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::X509IdentityStatementList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::X509IdentityStatementList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::X509IdentityStatementList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::X509IdentityStatementList>::extract (
        _tao_any,
        SecurityLevel3::X509IdentityStatementList::_tao_any_destructor,
        SecurityLevel3::_tc_X509IdentityStatementList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::CredentialsIdList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::CredentialsIdList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::CredentialsIdList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::CredentialsIdList::_tao_any_destructor,
          ::SecurityLevel3::_tc_CredentialsIdList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::CredentialsIdList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::CredentialsIdList>::insert (
        _tao_any,
        ::SecurityLevel3::CredentialsIdList::_tao_any_destructor,
        ::SecurityLevel3::_tc_CredentialsIdList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::CredentialsIdList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::CredentialsIdList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::CredentialsIdList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::CredentialsIdList>::extract (
          _tao_any,
          ::SecurityLevel3::CredentialsIdList::_tao_any_destructor,
          ::SecurityLevel3::_tc_CredentialsIdList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::CredentialsIdList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::CredentialsIdList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::CredentialsIdList>::insert_copy (
        _tao_any,
        SecurityLevel3::CredentialsIdList::_tao_any_destructor,
        SecurityLevel3::_tc_CredentialsIdList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsIdList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::CredentialsIdList>::insert (
      _tao_any,
      SecurityLevel3::CredentialsIdList::_tao_any_destructor,
      SecurityLevel3::_tc_CredentialsIdList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsIdList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::CredentialsIdList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::CredentialsIdList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::CredentialsIdList>::extract (
        _tao_any,
        SecurityLevel3::CredentialsIdList::_tao_any_destructor,
        SecurityLevel3::_tc_CredentialsIdList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredsInitiator>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredsInitiator>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredsInitiator>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredsInitiator_ptr _tao_elem)
  {
    CredsInitiator_ptr _tao_objptr =
      CredsInitiator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredsInitiator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CredsInitiator>::insert (
        _tao_any,
        CredsInitiator::_tao_any_destructor,
        _tc_CredsInitiator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CredsInitiator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CredsInitiator>::extract (
          _tao_any,
          CredsInitiator::_tao_any_destructor,
          _tc_CredsInitiator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredsInitiator_ptr _tao_elem)
{
  SecurityLevel3::CredsInitiator_ptr _tao_objptr =
    SecurityLevel3::CredsInitiator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredsInitiator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::CredsInitiator>::insert (
      _tao_any,
      SecurityLevel3::CredsInitiator::_tao_any_destructor,
      SecurityLevel3::_tc_CredsInitiator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::CredsInitiator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::CredsInitiator>::extract (
        _tao_any,
        SecurityLevel3::CredsInitiator::_tao_any_destructor,
        SecurityLevel3::_tc_CredsInitiator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredsAcceptor>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredsAcceptor>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredsAcceptor>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredsAcceptor_ptr _tao_elem)
  {
    CredsAcceptor_ptr _tao_objptr =
      CredsAcceptor::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredsAcceptor_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CredsAcceptor>::insert (
        _tao_any,
        CredsAcceptor::_tao_any_destructor,
        _tc_CredsAcceptor,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CredsAcceptor_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CredsAcceptor>::extract (
          _tao_any,
          CredsAcceptor::_tao_any_destructor,
          _tc_CredsAcceptor,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredsAcceptor_ptr _tao_elem)
{
  SecurityLevel3::CredsAcceptor_ptr _tao_objptr =
    SecurityLevel3::CredsAcceptor::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredsAcceptor_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::CredsAcceptor>::insert (
      _tao_any,
      SecurityLevel3::CredsAcceptor::_tao_any_destructor,
      SecurityLevel3::_tc_CredsAcceptor,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::CredsAcceptor_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::CredsAcceptor>::extract (
        _tao_any,
        SecurityLevel3::CredsAcceptor::_tao_any_destructor,
        SecurityLevel3::_tc_CredsAcceptor,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::RelinquishedCredentialsListener>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::RelinquishedCredentialsListener>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::RelinquishedCredentialsListener>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RelinquishedCredentialsListener_ptr _tao_elem)
  {
    RelinquishedCredentialsListener_ptr _tao_objptr =
      RelinquishedCredentialsListener::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RelinquishedCredentialsListener_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<RelinquishedCredentialsListener>::insert (
        _tao_any,
        RelinquishedCredentialsListener::_tao_any_destructor,
        _tc_RelinquishedCredentialsListener,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      RelinquishedCredentialsListener_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<RelinquishedCredentialsListener>::extract (
          _tao_any,
          RelinquishedCredentialsListener::_tao_any_destructor,
          _tc_RelinquishedCredentialsListener,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::RelinquishedCredentialsListener_ptr _tao_elem)
{
  SecurityLevel3::RelinquishedCredentialsListener_ptr _tao_objptr =
    SecurityLevel3::RelinquishedCredentialsListener::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::RelinquishedCredentialsListener_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::RelinquishedCredentialsListener>::insert (
      _tao_any,
      SecurityLevel3::RelinquishedCredentialsListener::_tao_any_destructor,
      SecurityLevel3::_tc_RelinquishedCredentialsListener,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::RelinquishedCredentialsListener_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::RelinquishedCredentialsListener>::extract (
        _tao_any,
        SecurityLevel3::RelinquishedCredentialsListener::_tao_any_destructor,
        SecurityLevel3::_tc_RelinquishedCredentialsListener,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::Credentials>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::Credentials>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::Credentials>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Credentials_ptr _tao_elem)
  {
    Credentials_ptr _tao_objptr =
      Credentials::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Credentials_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Credentials>::insert (
        _tao_any,
        Credentials::_tao_any_destructor,
        _tc_Credentials,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Credentials_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Credentials>::extract (
          _tao_any,
          Credentials::_tao_any_destructor,
          _tc_Credentials,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Credentials_ptr _tao_elem)
{
  SecurityLevel3::Credentials_ptr _tao_objptr =
    SecurityLevel3::Credentials::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::Credentials_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::Credentials>::insert (
      _tao_any,
      SecurityLevel3::Credentials::_tao_any_destructor,
      SecurityLevel3::_tc_Credentials,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::Credentials_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::Credentials>::extract (
        _tao_any,
        SecurityLevel3::Credentials::_tao_any_destructor,
        SecurityLevel3::_tc_Credentials,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::CredentialsList>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::CredentialsList>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::CredentialsList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::CredentialsList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::CredentialsList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::CredentialsList::_tao_any_destructor,
          ::SecurityLevel3::_tc_CredentialsList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::CredentialsList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::CredentialsList>::insert (
        _tao_any,
        ::SecurityLevel3::CredentialsList::_tao_any_destructor,
        ::SecurityLevel3::_tc_CredentialsList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::CredentialsList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::CredentialsList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::CredentialsList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::CredentialsList>::extract (
          _tao_any,
          ::SecurityLevel3::CredentialsList::_tao_any_destructor,
          ::SecurityLevel3::_tc_CredentialsList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::CredentialsList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::CredentialsList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::CredentialsList>::insert_copy (
        _tao_any,
        SecurityLevel3::CredentialsList::_tao_any_destructor,
        SecurityLevel3::_tc_CredentialsList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::CredentialsList>::insert (
      _tao_any,
      SecurityLevel3::CredentialsList::_tao_any_destructor,
      SecurityLevel3::_tc_CredentialsList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::CredentialsList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::CredentialsList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::CredentialsList>::extract (
        _tao_any,
        SecurityLevel3::CredentialsList::_tao_any_destructor,
        SecurityLevel3::_tc_CredentialsList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::OwnCredentials>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::OwnCredentials>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::OwnCredentials>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      OwnCredentials_ptr _tao_elem)
  {
    OwnCredentials_ptr _tao_objptr =
      OwnCredentials::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      OwnCredentials_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<OwnCredentials>::insert (
        _tao_any,
        OwnCredentials::_tao_any_destructor,
        _tc_OwnCredentials,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      OwnCredentials_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<OwnCredentials>::extract (
          _tao_any,
          OwnCredentials::_tao_any_destructor,
          _tc_OwnCredentials,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::OwnCredentials_ptr _tao_elem)
{
  SecurityLevel3::OwnCredentials_ptr _tao_objptr =
    SecurityLevel3::OwnCredentials::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::OwnCredentials_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::OwnCredentials>::insert (
      _tao_any,
      SecurityLevel3::OwnCredentials::_tao_any_destructor,
      SecurityLevel3::_tc_OwnCredentials,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::OwnCredentials_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::OwnCredentials>::extract (
        _tao_any,
        SecurityLevel3::OwnCredentials::_tao_any_destructor,
        SecurityLevel3::_tc_OwnCredentials,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::OwnCredentialsList>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::OwnCredentialsList>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::OwnCredentialsList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::OwnCredentialsList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::OwnCredentialsList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::OwnCredentialsList::_tao_any_destructor,
          ::SecurityLevel3::_tc_OwnCredentialsList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::OwnCredentialsList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::OwnCredentialsList>::insert (
        _tao_any,
        ::SecurityLevel3::OwnCredentialsList::_tao_any_destructor,
        ::SecurityLevel3::_tc_OwnCredentialsList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::OwnCredentialsList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::OwnCredentialsList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::OwnCredentialsList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::OwnCredentialsList>::extract (
          _tao_any,
          ::SecurityLevel3::OwnCredentialsList::_tao_any_destructor,
          ::SecurityLevel3::_tc_OwnCredentialsList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::OwnCredentialsList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::OwnCredentialsList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::OwnCredentialsList>::insert_copy (
        _tao_any,
        SecurityLevel3::OwnCredentialsList::_tao_any_destructor,
        SecurityLevel3::_tc_OwnCredentialsList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::OwnCredentialsList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::OwnCredentialsList>::insert (
      _tao_any,
      SecurityLevel3::OwnCredentialsList::_tao_any_destructor,
      SecurityLevel3::_tc_OwnCredentialsList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::OwnCredentialsList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::OwnCredentialsList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::OwnCredentialsList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::OwnCredentialsList>::extract (
        _tao_any,
        SecurityLevel3::OwnCredentialsList::_tao_any_destructor,
        SecurityLevel3::_tc_OwnCredentialsList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ClientCredentials>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ClientCredentials>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ClientCredentials>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ClientCredentials_ptr _tao_elem)
  {
    ClientCredentials_ptr _tao_objptr =
      ClientCredentials::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ClientCredentials_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ClientCredentials>::insert (
        _tao_any,
        ClientCredentials::_tao_any_destructor,
        _tc_ClientCredentials,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ClientCredentials_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ClientCredentials>::extract (
          _tao_any,
          ClientCredentials::_tao_any_destructor,
          _tc_ClientCredentials,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ClientCredentials_ptr _tao_elem)
{
  SecurityLevel3::ClientCredentials_ptr _tao_objptr =
    SecurityLevel3::ClientCredentials::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ClientCredentials_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::ClientCredentials>::insert (
      _tao_any,
      SecurityLevel3::ClientCredentials::_tao_any_destructor,
      SecurityLevel3::_tc_ClientCredentials,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ClientCredentials_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::ClientCredentials>::extract (
        _tao_any,
        SecurityLevel3::ClientCredentials::_tao_any_destructor,
        SecurityLevel3::_tc_ClientCredentials,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::TargetCredentials>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::TargetCredentials>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::TargetCredentials>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TargetCredentials_ptr _tao_elem)
  {
    TargetCredentials_ptr _tao_objptr =
      TargetCredentials::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TargetCredentials_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TargetCredentials>::insert (
        _tao_any,
        TargetCredentials::_tao_any_destructor,
        _tc_TargetCredentials,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TargetCredentials_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TargetCredentials>::extract (
          _tao_any,
          TargetCredentials::_tao_any_destructor,
          _tc_TargetCredentials,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::TargetCredentials_ptr _tao_elem)
{
  SecurityLevel3::TargetCredentials_ptr _tao_objptr =
    SecurityLevel3::TargetCredentials::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::TargetCredentials_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::TargetCredentials>::insert (
      _tao_any,
      SecurityLevel3::TargetCredentials::_tao_any_destructor,
      SecurityLevel3::_tc_TargetCredentials,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::TargetCredentials_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::TargetCredentials>::extract (
        _tao_any,
        SecurityLevel3::TargetCredentials::_tao_any_destructor,
        SecurityLevel3::_tc_TargetCredentials,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ContextEstablishmentPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ContextEstablishmentPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ContextEstablishmentPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ContextEstablishmentPolicy_ptr _tao_elem)
  {
    ContextEstablishmentPolicy_ptr _tao_objptr =
      ContextEstablishmentPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ContextEstablishmentPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ContextEstablishmentPolicy>::insert (
        _tao_any,
        ContextEstablishmentPolicy::_tao_any_destructor,
        _tc_ContextEstablishmentPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ContextEstablishmentPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ContextEstablishmentPolicy>::extract (
          _tao_any,
          ContextEstablishmentPolicy::_tao_any_destructor,
          _tc_ContextEstablishmentPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ContextEstablishmentPolicy_ptr _tao_elem)
{
  SecurityLevel3::ContextEstablishmentPolicy_ptr _tao_objptr =
    SecurityLevel3::ContextEstablishmentPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ContextEstablishmentPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::ContextEstablishmentPolicy>::insert (
      _tao_any,
      SecurityLevel3::ContextEstablishmentPolicy::_tao_any_destructor,
      SecurityLevel3::_tc_ContextEstablishmentPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ContextEstablishmentPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::ContextEstablishmentPolicy>::extract (
        _tao_any,
        SecurityLevel3::ContextEstablishmentPolicy::_tao_any_destructor,
        SecurityLevel3::_tc_ContextEstablishmentPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::ContextEstablishmentPolicyArgument>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<SecurityLevel3::ContextEstablishmentPolicyArgument>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ContextEstablishmentPolicyArgument &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::ContextEstablishmentPolicyArgument *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ContextEstablishmentPolicyArgument>::insert_copy (
          _tao_any,
          ::SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor,
          ::SecurityLevel3::_tc_ContextEstablishmentPolicyArgument,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      SecurityLevel3::ContextEstablishmentPolicyArgument *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::ContextEstablishmentPolicyArgument>::insert (
        _tao_any,
        ::SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor,
        ::SecurityLevel3::_tc_ContextEstablishmentPolicyArgument,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::ContextEstablishmentPolicyArgument *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::ContextEstablishmentPolicyArgument *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::ContextEstablishmentPolicyArgument *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::ContextEstablishmentPolicyArgument>::extract (
          _tao_any,
          ::SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor,
          ::SecurityLevel3::_tc_ContextEstablishmentPolicyArgument,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::ContextEstablishmentPolicyArgument &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::ContextEstablishmentPolicyArgument *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::ContextEstablishmentPolicyArgument>::insert_copy (
        _tao_any,
        SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor,
        SecurityLevel3::_tc_ContextEstablishmentPolicyArgument,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ContextEstablishmentPolicyArgument *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::ContextEstablishmentPolicyArgument>::insert (
      _tao_any,
      SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor,
      SecurityLevel3::_tc_ContextEstablishmentPolicyArgument,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ContextEstablishmentPolicyArgument *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::ContextEstablishmentPolicyArgument *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::ContextEstablishmentPolicyArgument *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::ContextEstablishmentPolicyArgument>::extract (
        _tao_any,
        SecurityLevel3::ContextEstablishmentPolicyArgument::_tao_any_destructor,
        SecurityLevel3::_tc_ContextEstablishmentPolicyArgument,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ObjectCredentialsPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ObjectCredentialsPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::ObjectCredentialsPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ObjectCredentialsPolicy_ptr _tao_elem)
  {
    ObjectCredentialsPolicy_ptr _tao_objptr =
      ObjectCredentialsPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ObjectCredentialsPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ObjectCredentialsPolicy>::insert (
        _tao_any,
        ObjectCredentialsPolicy::_tao_any_destructor,
        _tc_ObjectCredentialsPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ObjectCredentialsPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ObjectCredentialsPolicy>::extract (
          _tao_any,
          ObjectCredentialsPolicy::_tao_any_destructor,
          _tc_ObjectCredentialsPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ObjectCredentialsPolicy_ptr _tao_elem)
{
  SecurityLevel3::ObjectCredentialsPolicy_ptr _tao_objptr =
    SecurityLevel3::ObjectCredentialsPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::ObjectCredentialsPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::ObjectCredentialsPolicy>::insert (
      _tao_any,
      SecurityLevel3::ObjectCredentialsPolicy::_tao_any_destructor,
      SecurityLevel3::_tc_ObjectCredentialsPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::ObjectCredentialsPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::ObjectCredentialsPolicy>::extract (
        _tao_any,
        SecurityLevel3::ObjectCredentialsPolicy::_tao_any_destructor,
        SecurityLevel3::_tc_ObjectCredentialsPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::AcquisitionMethodList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::SecurityLevel3::AcquisitionMethodList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::AcquisitionMethodList>::insert_copy (
          _tao_any,
          ::SecurityLevel3::AcquisitionMethodList::_tao_any_destructor,
          ::SecurityLevel3::_tc_AcquisitionMethodList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::SecurityLevel3::AcquisitionMethodList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::SecurityLevel3::AcquisitionMethodList>::insert (
        _tao_any,
        ::SecurityLevel3::AcquisitionMethodList::_tao_any_destructor,
        ::SecurityLevel3::_tc_AcquisitionMethodList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::SecurityLevel3::AcquisitionMethodList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::SecurityLevel3::AcquisitionMethodList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::SecurityLevel3::AcquisitionMethodList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::SecurityLevel3::AcquisitionMethodList>::extract (
          _tao_any,
          ::SecurityLevel3::AcquisitionMethodList::_tao_any_destructor,
          ::SecurityLevel3::_tc_AcquisitionMethodList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const SecurityLevel3::AcquisitionMethodList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<SecurityLevel3::AcquisitionMethodList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<SecurityLevel3::AcquisitionMethodList>::insert_copy (
        _tao_any,
        SecurityLevel3::AcquisitionMethodList::_tao_any_destructor,
        SecurityLevel3::_tc_AcquisitionMethodList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::AcquisitionMethodList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<SecurityLevel3::AcquisitionMethodList>::insert (
      _tao_any,
      SecurityLevel3::AcquisitionMethodList::_tao_any_destructor,
      SecurityLevel3::_tc_AcquisitionMethodList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::AcquisitionMethodList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const SecurityLevel3::AcquisitionMethodList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const SecurityLevel3::AcquisitionMethodList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<SecurityLevel3::AcquisitionMethodList>::extract (
        _tao_any,
        SecurityLevel3::AcquisitionMethodList::_tao_any_destructor,
        SecurityLevel3::_tc_AcquisitionMethodList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredentialsAcquirer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredentialsAcquirer>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredentialsAcquirer>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredentialsAcquirer_ptr _tao_elem)
  {
    CredentialsAcquirer_ptr _tao_objptr =
      CredentialsAcquirer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredentialsAcquirer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CredentialsAcquirer>::insert (
        _tao_any,
        CredentialsAcquirer::_tao_any_destructor,
        _tc_CredentialsAcquirer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CredentialsAcquirer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CredentialsAcquirer>::extract (
          _tao_any,
          CredentialsAcquirer::_tao_any_destructor,
          _tc_CredentialsAcquirer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsAcquirer_ptr _tao_elem)
{
  SecurityLevel3::CredentialsAcquirer_ptr _tao_objptr =
    SecurityLevel3::CredentialsAcquirer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsAcquirer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::CredentialsAcquirer>::insert (
      _tao_any,
      SecurityLevel3::CredentialsAcquirer::_tao_any_destructor,
      SecurityLevel3::_tc_CredentialsAcquirer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsAcquirer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::CredentialsAcquirer>::extract (
        _tao_any,
        SecurityLevel3::CredentialsAcquirer::_tao_any_destructor,
        SecurityLevel3::_tc_CredentialsAcquirer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredentialsCurator>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredentialsCurator>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::CredentialsCurator>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredentialsCurator_ptr _tao_elem)
  {
    CredentialsCurator_ptr _tao_objptr =
      CredentialsCurator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CredentialsCurator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CredentialsCurator>::insert (
        _tao_any,
        CredentialsCurator::_tao_any_destructor,
        _tc_CredentialsCurator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CredentialsCurator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CredentialsCurator>::extract (
          _tao_any,
          CredentialsCurator::_tao_any_destructor,
          _tc_CredentialsCurator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsCurator_ptr _tao_elem)
{
  SecurityLevel3::CredentialsCurator_ptr _tao_objptr =
    SecurityLevel3::CredentialsCurator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsCurator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::CredentialsCurator>::insert (
      _tao_any,
      SecurityLevel3::CredentialsCurator::_tao_any_destructor,
      SecurityLevel3::_tc_CredentialsCurator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::CredentialsCurator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::CredentialsCurator>::extract (
        _tao_any,
        SecurityLevel3::CredentialsCurator::_tao_any_destructor,
        SecurityLevel3::_tc_CredentialsCurator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SecurityManager>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SecurityManager>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SecurityManager>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SecurityManager_ptr _tao_elem)
  {
    SecurityManager_ptr _tao_objptr =
      SecurityManager::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SecurityManager_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SecurityManager>::insert (
        _tao_any,
        SecurityManager::_tao_any_destructor,
        _tc_SecurityManager,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SecurityManager_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SecurityManager>::extract (
          _tao_any,
          SecurityManager::_tao_any_destructor,
          _tc_SecurityManager,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::SecurityManager_ptr _tao_elem)
{
  SecurityLevel3::SecurityManager_ptr _tao_objptr =
    SecurityLevel3::SecurityManager::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::SecurityManager_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::SecurityManager>::insert (
      _tao_any,
      SecurityLevel3::SecurityManager::_tao_any_destructor,
      SecurityLevel3::_tc_SecurityManager,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::SecurityManager_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::SecurityManager>::extract (
        _tao_any,
        SecurityLevel3::SecurityManager::_tao_any_destructor,
        SecurityLevel3::_tc_SecurityManager,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SecurityCurrent>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SecurityCurrent>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<SecurityLevel3::SecurityCurrent>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SecurityLevel3
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SecurityCurrent_ptr _tao_elem)
  {
    SecurityCurrent_ptr _tao_objptr =
      SecurityCurrent::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SecurityCurrent_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SecurityCurrent>::insert (
        _tao_any,
        SecurityCurrent::_tao_any_destructor,
        _tc_SecurityCurrent,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SecurityCurrent_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SecurityCurrent>::extract (
          _tao_any,
          SecurityCurrent::_tao_any_destructor,
          _tc_SecurityCurrent,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::SecurityCurrent_ptr _tao_elem)
{
  SecurityLevel3::SecurityCurrent_ptr _tao_objptr =
    SecurityLevel3::SecurityCurrent::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SecurityLevel3::SecurityCurrent_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SecurityLevel3::SecurityCurrent>::insert (
      _tao_any,
      SecurityLevel3::SecurityCurrent::_tao_any_destructor,
      SecurityLevel3::_tc_SecurityCurrent,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SecurityLevel3::SecurityCurrent_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SecurityLevel3::SecurityCurrent>::extract (
        _tao_any,
        SecurityLevel3::SecurityCurrent::_tao_any_destructor,
        SecurityLevel3::_tc_SecurityCurrent,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_NamePath_CPP_
#define _TAO_CDR_OP_SecurityLevel3_NamePath_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::NamePath &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::NamePath &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_NamePath_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::PrincipalName &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.the_type.in ()) &&
    (strm << _tao_aggregate.the_name);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::PrincipalName &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.the_type.out ()) &&
    (strm >> _tao_aggregate.the_name);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_PrincipalNameList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_PrincipalNameList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::PrincipalNameList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::PrincipalNameList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_PrincipalNameList_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::PrinAttribute &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.the_type.in ()) &&
    (strm << _tao_aggregate.the_value.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::PrinAttribute &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.the_type.out ()) &&
    (strm >> _tao_aggregate.the_value.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_PrinAttributeList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_PrinAttributeList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::PrinAttributeList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::PrinAttributeList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_PrinAttributeList_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_ResourceNameComponents_CPP_
#define _TAO_CDR_OP_SecurityLevel3_ResourceNameComponents_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::ResourceNameComponents &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::ResourceNameComponents &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_ResourceNameComponents_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::ResourceName &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.components);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::ResourceName &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.components);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_ResourceNameList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_ResourceNameList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::ResourceNameList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::ResourceNameList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_ResourceNameList_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::ScopedPrivileges &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.privilege_authority) &&
    (strm << _tao_aggregate.privileges);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::ScopedPrivileges &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.privilege_authority) &&
    (strm >> _tao_aggregate.privileges);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_ScopedPrivilegesList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_ScopedPrivilegesList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::ScopedPrivilegesList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::ScopedPrivilegesList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_ScopedPrivilegesList_CPP_ */

// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::Principal * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::Principal * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::Principal *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::Principal::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::Principal *&_tao_valuetype
  )
{
  return SecurityLevel3::Principal::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::Principal::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_the_type) &&
      (strm << _pd_the_name) &&
      (strm << _pd_environmental_attributes) &&
      (strm << _pd_with_privileges);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::Principal::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_the_type) &&
      (strm >> _pd_the_name) &&
      (strm >> _pd_environmental_attributes) &&
      (strm >> _pd_with_privileges);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::Principal::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_PrincipalList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_PrincipalList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::PrincipalList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::PrincipalList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_PrincipalList_CPP_ */

// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::SimplePrincipal * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::SimplePrincipal * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::SimplePrincipal *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::SimplePrincipal::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::SimplePrincipal *&_tao_valuetype
  )
{
  return SecurityLevel3::SimplePrincipal::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::SimplePrincipal::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_Principal (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << ::ACE_OutputCDR::from_boolean (_pd_authenticated)) &&
      (strm << _pd_alternate_names);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::SimplePrincipal::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_Principal (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> ::ACE_InputCDR::to_boolean (_pd_authenticated)) &&
      (strm >> _pd_alternate_names);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::SimplePrincipal::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::ProxyPrincipal * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::ProxyPrincipal * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::ProxyPrincipal *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::ProxyPrincipal::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::ProxyPrincipal *&_tao_valuetype
  )
{
  return SecurityLevel3::ProxyPrincipal::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::ProxyPrincipal::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_Principal (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_speaking.in ()) &&
      (strm << _pd_speaks_for.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::ProxyPrincipal::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_Principal (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_speaking.out ()) &&
      (strm >> _pd_speaks_for.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::ProxyPrincipal::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::QuotingPrincipal * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::QuotingPrincipal * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::QuotingPrincipal *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::QuotingPrincipal::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::QuotingPrincipal *&_tao_valuetype
  )
{
  return SecurityLevel3::QuotingPrincipal::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::QuotingPrincipal::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_Principal (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_speaking.in ()) &&
      (strm << _pd_quotes_for.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::QuotingPrincipal::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_Principal (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_speaking.out ()) &&
      (strm >> _pd_quotes_for.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::QuotingPrincipal::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_Encoding_CPP_
#define _TAO_CDR_OP_SecurityLevel3_Encoding_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::Encoding &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::Encoding &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_Encoding_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::BadEncoding &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    SecurityLevel3::BadEncoding&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::BadEncodingType &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    SecurityLevel3::BadEncodingType&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::Statement * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::Statement * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::Statement *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::Statement::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::Statement *&_tao_valuetype
  )
{
  return SecurityLevel3::Statement::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::Statement::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_the_layer) &&
      (strm << _pd_the_type) &&
      (strm << _pd_encoding_type.in ()) &&
      (strm << _pd_the_encoding);
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::Statement::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_the_layer) &&
      (strm >> _pd_the_type) &&
      (strm >> _pd_encoding_type.out ()) &&
      (strm >> _pd_the_encoding);
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::Statement::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_StatementList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_StatementList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::StatementList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::StatementList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_StatementList_CPP_ */

// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::IdentityStatement * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::IdentityStatement * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::IdentityStatement *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::IdentityStatement::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::IdentityStatement *&_tao_valuetype
  )
{
  return SecurityLevel3::IdentityStatement::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::IdentityStatement::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_Statement (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_interpretation_aid.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::IdentityStatement::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_Statement (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_interpretation_aid.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::IdentityStatement::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::PrincipalIdentityStatement * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::PrincipalIdentityStatement * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::PrincipalIdentityStatement *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::PrincipalIdentityStatement::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::PrincipalIdentityStatement *&_tao_valuetype
  )
{
  return SecurityLevel3::PrincipalIdentityStatement::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::PrincipalIdentityStatement::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_IdentityStatement (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_the_principal.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::PrincipalIdentityStatement::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_IdentityStatement (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_the_principal.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::PrincipalIdentityStatement::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::EndorsementStatement * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::EndorsementStatement * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::EndorsementStatement *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::EndorsementStatement::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::EndorsementStatement *&_tao_valuetype
  )
{
  return SecurityLevel3::EndorsementStatement::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::EndorsementStatement::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_Statement (strm, ci))
    {
      return false;
    }
  
  if (! ci.start_chunk (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm << _pd_interpretation_aid.in ());
  if ( ! ret) 
    return false; 
  
  if (! ci.end_chunk (strm))
    return false;
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::EndorsementStatement::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_Statement (strm, ci))
    {
      return false;
    }
  
  if (!ci.handle_chunking (strm))
    return false;
  
  CORBA::Boolean const ret = 
      (strm >> _pd_interpretation_aid.out ());
  if (!ret) 
    return false; 
  
  if (this->require_truncation_)
    return ci.skip_chunks (strm);
  
  else
    return ci.handle_chunking (strm);
  
  
}

void
OBV_SecurityLevel3::EndorsementStatement::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (SecurityLevel3::X509IdentityStatement * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (SecurityLevel3::X509IdentityStatement * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const SecurityLevel3::X509IdentityStatement *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&SecurityLevel3::X509IdentityStatement::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::X509IdentityStatement *&_tao_valuetype
  )
{
  return SecurityLevel3::X509IdentityStatement::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_SecurityLevel3::X509IdentityStatement::_tao_marshal_state (TAO_OutputCDR &strm, TAO_ChunkInfo&ci) const
{
  if (! ci.start_chunk (strm))
    return false;
  
  if (! this->_tao_marshal__SecurityLevel3_PrincipalIdentityStatement (strm, ci))
    {
      return false;
    }
  
  if (! ci.end_chunk (strm))
    return false;
  
  return true;
}

::CORBA::Boolean
OBV_SecurityLevel3::X509IdentityStatement::_tao_unmarshal_state (TAO_InputCDR &strm, TAO_ChunkInfo&ci)
{
  if (!ci.handle_chunking (strm))
    return false;
  
  if (!this->_tao_unmarshal__SecurityLevel3_PrincipalIdentityStatement (strm, ci))
    {
      return false;
    }
  
  return true;
}

void
OBV_SecurityLevel3::X509IdentityStatement::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_X509IdentityStatementList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_X509IdentityStatementList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::X509IdentityStatementList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::X509IdentityStatementList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_X509IdentityStatementList_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_CredentialsIdList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_CredentialsIdList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::CredentialsIdList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::CredentialsIdList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_CredentialsIdList_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_SecurityLevel3_AcquisitionMethodList_CPP_
#define _TAO_CDR_OP_SecurityLevel3_AcquisitionMethodList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SecurityLevel3::AcquisitionMethodList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SecurityLevel3::AcquisitionMethodList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_SecurityLevel3_AcquisitionMethodList_CPP_ */


TAO_END_VERSIONED_NAMESPACE_DECL


