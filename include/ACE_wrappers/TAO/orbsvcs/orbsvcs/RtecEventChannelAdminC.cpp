// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "RtecEventChannelAdminC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "RtecEventChannelAdminC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::AlreadyConnected::AlreadyConnected (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/AlreadyConnected:1.0",
        "AlreadyConnected"
      )
{
}

RtecEventChannelAdmin::AlreadyConnected::~AlreadyConnected (void)
{
}

RtecEventChannelAdmin::AlreadyConnected::AlreadyConnected (const ::RtecEventChannelAdmin::AlreadyConnected &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::AlreadyConnected&
RtecEventChannelAdmin::AlreadyConnected::operator= (const ::RtecEventChannelAdmin::AlreadyConnected &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor (void *_tao_void_pointer)
{
  AlreadyConnected *_tao_tmp_pointer =
    static_cast<AlreadyConnected *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::AlreadyConnected *
RtecEventChannelAdmin::AlreadyConnected::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AlreadyConnected *> (_tao_excp);
}

const RtecEventChannelAdmin::AlreadyConnected *
RtecEventChannelAdmin::AlreadyConnected::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AlreadyConnected *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::AlreadyConnected::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::AlreadyConnected, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::AlreadyConnected::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::AlreadyConnected (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::AlreadyConnected::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::AlreadyConnected::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::AlreadyConnected::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::AlreadyConnected::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::_tc_AlreadyConnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_AlreadyConnected = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_AlreadyConnected (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/AlreadyConnected:1.0",
  "AlreadyConnected",
  _tao_fields_RtecEventChannelAdmin_AlreadyConnected,
  0);


namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_AlreadyConnected =
    &_tao_tc_RtecEventChannelAdmin_AlreadyConnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecEventChannelAdmin_Dependency[] =
      {
        { "event", &RtecEventComm::_tc_Event },
        { "rt_info", &RtecBase::_tc_handle_t }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_Dependency (
  ::CORBA::tk_struct,
  "IDL:RtecEventChannelAdmin/Dependency:1.0",
  "Dependency",
  _tao_fields_RtecEventChannelAdmin_Dependency,
  2);


namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Dependency =
    &_tao_tc_RtecEventChannelAdmin_Dependency;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecEventChannelAdmin::Dependency::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Dependency *_tao_tmp_pointer =
    static_cast<Dependency *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTECEVENTCHANNELADMIN_DEPENDENCYSET_CS_)
#define _RTECEVENTCHANNELADMIN_DEPENDENCYSET_CS_

RtecEventChannelAdmin::DependencySet::DependencySet (void)
{}

RtecEventChannelAdmin::DependencySet::DependencySet (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Dependency
      > (max)
{}

RtecEventChannelAdmin::DependencySet::DependencySet (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    RtecEventChannelAdmin::Dependency * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Dependency
      >
    (max, length, buffer, release)
{}

RtecEventChannelAdmin::DependencySet::DependencySet (
    const DependencySet &seq)
  : ::TAO::unbounded_value_sequence<
        Dependency
      > (seq)
{}

RtecEventChannelAdmin::DependencySet::~DependencySet (void)
{}

void RtecEventChannelAdmin::DependencySet::_tao_any_destructor (
    void * _tao_void_pointer)
{
  DependencySet * _tao_tmp_pointer =
    static_cast<DependencySet *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_RtecEventChannelAdmin_DependencySet_GUARD
#define _TAO_TYPECODE_RtecEventChannelAdmin_DependencySet_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        RtecEventChannelAdmin_DependencySet_0 (
          ::CORBA::tk_sequence,
          &RtecEventChannelAdmin::_tc_Dependency,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_RtecEventChannelAdmin_DependencySet_0 =
        &RtecEventChannelAdmin_DependencySet_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_RtecEventChannelAdmin_DependencySet_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_DependencySet (
    ::CORBA::tk_alias,
    "IDL:RtecEventChannelAdmin/DependencySet:1.0",
    "DependencySet",
    &TAO::TypeCode::tc_RtecEventChannelAdmin_DependencySet_0);
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_DependencySet =
    &_tao_tc_RtecEventChannelAdmin_DependencySet;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecEventChannelAdmin_ConsumerQOS[] =
      {
        { "dependencies", &RtecEventChannelAdmin::_tc_DependencySet },
        { "is_gateway", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_ConsumerQOS (
  ::CORBA::tk_struct,
  "IDL:RtecEventChannelAdmin/ConsumerQOS:1.0",
  "ConsumerQOS",
  _tao_fields_RtecEventChannelAdmin_ConsumerQOS,
  2);


namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerQOS =
    &_tao_tc_RtecEventChannelAdmin_ConsumerQOS;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ConsumerQOS *_tao_tmp_pointer =
    static_cast<ConsumerQOS *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecEventChannelAdmin_Publication[] =
      {
        { "event", &RtecEventComm::_tc_Event },
        { "dependency_info", &RtecBase::_tc_Dependency_Info }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_Publication (
  ::CORBA::tk_struct,
  "IDL:RtecEventChannelAdmin/Publication:1.0",
  "Publication",
  _tao_fields_RtecEventChannelAdmin_Publication,
  2);


namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Publication =
    &_tao_tc_RtecEventChannelAdmin_Publication;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecEventChannelAdmin::Publication::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Publication *_tao_tmp_pointer =
    static_cast<Publication *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTECEVENTCHANNELADMIN_PUBLICATIONSET_CS_)
#define _RTECEVENTCHANNELADMIN_PUBLICATIONSET_CS_

RtecEventChannelAdmin::PublicationSet::PublicationSet (void)
{}

RtecEventChannelAdmin::PublicationSet::PublicationSet (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Publication
      > (max)
{}

RtecEventChannelAdmin::PublicationSet::PublicationSet (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    RtecEventChannelAdmin::Publication * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Publication
      >
    (max, length, buffer, release)
{}

RtecEventChannelAdmin::PublicationSet::PublicationSet (
    const PublicationSet &seq)
  : ::TAO::unbounded_value_sequence<
        Publication
      > (seq)
{}

RtecEventChannelAdmin::PublicationSet::~PublicationSet (void)
{}

void RtecEventChannelAdmin::PublicationSet::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PublicationSet * _tao_tmp_pointer =
    static_cast<PublicationSet *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_RtecEventChannelAdmin_PublicationSet_GUARD
#define _TAO_TYPECODE_RtecEventChannelAdmin_PublicationSet_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        RtecEventChannelAdmin_PublicationSet_0 (
          ::CORBA::tk_sequence,
          &RtecEventChannelAdmin::_tc_Publication,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_RtecEventChannelAdmin_PublicationSet_0 =
        &RtecEventChannelAdmin_PublicationSet_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_RtecEventChannelAdmin_PublicationSet_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_PublicationSet (
    ::CORBA::tk_alias,
    "IDL:RtecEventChannelAdmin/PublicationSet:1.0",
    "PublicationSet",
    &TAO::TypeCode::tc_RtecEventChannelAdmin_PublicationSet_0);
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_PublicationSet =
    &_tao_tc_RtecEventChannelAdmin_PublicationSet;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecEventChannelAdmin_SupplierQOS[] =
      {
        { "publications", &RtecEventChannelAdmin::_tc_PublicationSet },
        { "is_gateway", &CORBA::_tc_boolean }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_SupplierQOS (
  ::CORBA::tk_struct,
  "IDL:RtecEventChannelAdmin/SupplierQOS:1.0",
  "SupplierQOS",
  _tao_fields_RtecEventChannelAdmin_SupplierQOS,
  2);


namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SupplierQOS =
    &_tao_tc_RtecEventChannelAdmin_SupplierQOS;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor (
    void *_tao_void_pointer)
{
  SupplierQOS *_tao_tmp_pointer =
    static_cast<SupplierQOS *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::TypeError::TypeError (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/TypeError:1.0",
        "TypeError"
      )
{
}

RtecEventChannelAdmin::TypeError::~TypeError (void)
{
}

RtecEventChannelAdmin::TypeError::TypeError (const ::RtecEventChannelAdmin::TypeError &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::TypeError&
RtecEventChannelAdmin::TypeError::operator= (const ::RtecEventChannelAdmin::TypeError &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::TypeError::_tao_any_destructor (void *_tao_void_pointer)
{
  TypeError *_tao_tmp_pointer =
    static_cast<TypeError *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::TypeError *
RtecEventChannelAdmin::TypeError::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<TypeError *> (_tao_excp);
}

const RtecEventChannelAdmin::TypeError *
RtecEventChannelAdmin::TypeError::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const TypeError *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::TypeError::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::TypeError, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::TypeError::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::TypeError (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::TypeError::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::TypeError::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::TypeError::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::TypeError::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::_tc_TypeError;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_TypeError = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_TypeError (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/TypeError:1.0",
  "TypeError",
  _tao_fields_RtecEventChannelAdmin_TypeError,
  0);


namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_TypeError =
    &_tao_tc_RtecEventChannelAdmin_TypeError;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecEventChannelAdmin::ProxyPushSupplier.

RtecEventChannelAdmin::ProxyPushSupplier_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushSupplier>::duplicate (
    RtecEventChannelAdmin::ProxyPushSupplier_ptr p)
{
  return RtecEventChannelAdmin::ProxyPushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushSupplier>::release (
    RtecEventChannelAdmin::ProxyPushSupplier_ptr p)
{
  ::CORBA::release (p);
}

RtecEventChannelAdmin::ProxyPushSupplier_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushSupplier>::nil (void)
{
  return RtecEventChannelAdmin::ProxyPushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushSupplier>::marshal (
    const RtecEventChannelAdmin::ProxyPushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::ProxyPushSupplier::connect_push_consumer (
  ::RtecEventComm::PushConsumer_ptr push_consumer,
  const ::RtecEventChannelAdmin::ConsumerQOS & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventComm::PushConsumer>::in_arg_val _tao_push_consumer (push_consumer);
  TAO::Arg_Traits< ::RtecEventChannelAdmin::ConsumerQOS>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_consumer,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_RtecEventChannelAdmin_ProxyPushSupplier_connect_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:RtecEventChannelAdmin/AlreadyConnected:1.0",
        RtecEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:RtecEventChannelAdmin/TypeError:1.0",
        RtecEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "connect_push_consumer",
      21,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_RtecEventChannelAdmin_ProxyPushSupplier_connect_push_consumer_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::ProxyPushSupplier::suspend_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "suspend_connection",
      18,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::ProxyPushSupplier::resume_connection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushSupplier_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_ProxyPushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "resume_connection",
      17,
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

RtecEventChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (void)
 : the_TAO_ProxyPushSupplier_Proxy_Broker_ (0)
{
  this->RtecEventChannelAdmin_ProxyPushSupplier_setup_collocation ();
}

void
RtecEventChannelAdmin::ProxyPushSupplier::RtecEventChannelAdmin_ProxyPushSupplier_setup_collocation ()
{
  if (::RtecEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPushSupplier_Proxy_Broker_ =
        ::RtecEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->RtecEventComm_PushSupplier_setup_collocation ();
}

RtecEventChannelAdmin::ProxyPushSupplier::~ProxyPushSupplier (void)
{}

void 
RtecEventChannelAdmin::ProxyPushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushSupplier *_tao_tmp_pointer =
    static_cast<ProxyPushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecEventChannelAdmin::ProxyPushSupplier_ptr
RtecEventChannelAdmin::ProxyPushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushSupplier>::narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/ProxyPushSupplier:1.0",
        RtecEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::ProxyPushSupplier_ptr
RtecEventChannelAdmin::ProxyPushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/ProxyPushSupplier:1.0",
        RtecEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::ProxyPushSupplier_ptr
RtecEventChannelAdmin::ProxyPushSupplier::_nil (void)
{
  return 0;
}

RtecEventChannelAdmin::ProxyPushSupplier_ptr
RtecEventChannelAdmin::ProxyPushSupplier::_duplicate (ProxyPushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecEventChannelAdmin::ProxyPushSupplier::_tao_release (ProxyPushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecEventChannelAdmin::ProxyPushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/ProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecEventChannelAdmin::ProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:RtecEventChannelAdmin/ProxyPushSupplier:1.0";
}

::CORBA::Boolean
RtecEventChannelAdmin::ProxyPushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_ProxyPushSupplier (
    ::CORBA::tk_objref,
    "IDL:RtecEventChannelAdmin/ProxyPushSupplier:1.0",
    "ProxyPushSupplier");
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushSupplier =
    &_tao_tc_RtecEventChannelAdmin_ProxyPushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecEventChannelAdmin::ProxyPushConsumer.

RtecEventChannelAdmin::ProxyPushConsumer_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushConsumer>::duplicate (
    RtecEventChannelAdmin::ProxyPushConsumer_ptr p)
{
  return RtecEventChannelAdmin::ProxyPushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushConsumer>::release (
    RtecEventChannelAdmin::ProxyPushConsumer_ptr p)
{
  ::CORBA::release (p);
}

RtecEventChannelAdmin::ProxyPushConsumer_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushConsumer>::nil (void)
{
  return RtecEventChannelAdmin::ProxyPushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecEventChannelAdmin::ProxyPushConsumer>::marshal (
    const RtecEventChannelAdmin::ProxyPushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::ProxyPushConsumer::connect_push_supplier (
  ::RtecEventComm::PushSupplier_ptr push_supplier,
  const ::RtecEventChannelAdmin::SupplierQOS & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ProxyPushConsumer_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_ProxyPushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventComm::PushSupplier>::in_arg_val _tao_push_supplier (push_supplier);
  TAO::Arg_Traits< ::RtecEventChannelAdmin::SupplierQOS>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_supplier,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_RtecEventChannelAdmin_ProxyPushConsumer_connect_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:RtecEventChannelAdmin/AlreadyConnected:1.0",
        RtecEventChannelAdmin::AlreadyConnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::_tc_AlreadyConnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "connect_push_supplier",
      21,
      this->the_TAO_ProxyPushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_RtecEventChannelAdmin_ProxyPushConsumer_connect_push_supplier_exceptiondata,
      1
    );
}

RtecEventChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (void)
 : the_TAO_ProxyPushConsumer_Proxy_Broker_ (0)
{
  this->RtecEventChannelAdmin_ProxyPushConsumer_setup_collocation ();
}

void
RtecEventChannelAdmin::ProxyPushConsumer::RtecEventChannelAdmin_ProxyPushConsumer_setup_collocation ()
{
  if (::RtecEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ProxyPushConsumer_Proxy_Broker_ =
        ::RtecEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->RtecEventComm_PushConsumer_setup_collocation ();
}

RtecEventChannelAdmin::ProxyPushConsumer::~ProxyPushConsumer (void)
{}

void 
RtecEventChannelAdmin::ProxyPushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushConsumer *_tao_tmp_pointer =
    static_cast<ProxyPushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecEventChannelAdmin::ProxyPushConsumer_ptr
RtecEventChannelAdmin::ProxyPushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushConsumer>::narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/ProxyPushConsumer:1.0",
        RtecEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::ProxyPushConsumer_ptr
RtecEventChannelAdmin::ProxyPushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProxyPushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/ProxyPushConsumer:1.0",
        RtecEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::ProxyPushConsumer_ptr
RtecEventChannelAdmin::ProxyPushConsumer::_nil (void)
{
  return 0;
}

RtecEventChannelAdmin::ProxyPushConsumer_ptr
RtecEventChannelAdmin::ProxyPushConsumer::_duplicate (ProxyPushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecEventChannelAdmin::ProxyPushConsumer::_tao_release (ProxyPushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecEventChannelAdmin::ProxyPushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/ProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecEventChannelAdmin::ProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:RtecEventChannelAdmin/ProxyPushConsumer:1.0";
}

::CORBA::Boolean
RtecEventChannelAdmin::ProxyPushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_ProxyPushConsumer (
    ::CORBA::tk_objref,
    "IDL:RtecEventChannelAdmin/ProxyPushConsumer:1.0",
    "ProxyPushConsumer");
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushConsumer =
    &_tao_tc_RtecEventChannelAdmin_ProxyPushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecEventChannelAdmin::ConsumerAdmin.

RtecEventChannelAdmin::ConsumerAdmin_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::ConsumerAdmin>::duplicate (
    RtecEventChannelAdmin::ConsumerAdmin_ptr p)
{
  return RtecEventChannelAdmin::ConsumerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<RtecEventChannelAdmin::ConsumerAdmin>::release (
    RtecEventChannelAdmin::ConsumerAdmin_ptr p)
{
  ::CORBA::release (p);
}

RtecEventChannelAdmin::ConsumerAdmin_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::ConsumerAdmin>::nil (void)
{
  return RtecEventChannelAdmin::ConsumerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecEventChannelAdmin::ConsumerAdmin>::marshal (
    const RtecEventChannelAdmin::ConsumerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::RtecEventChannelAdmin::ProxyPushSupplier_ptr
RtecEventChannelAdmin::ConsumerAdmin::obtain_push_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::RtecEventChannelAdmin::ProxyPushSupplier>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "obtain_push_supplier",
      20,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

RtecEventChannelAdmin::ConsumerAdmin::ConsumerAdmin (void)
 : the_TAO_ConsumerAdmin_Proxy_Broker_ (0)
{
  this->RtecEventChannelAdmin_ConsumerAdmin_setup_collocation ();
}

void
RtecEventChannelAdmin::ConsumerAdmin::RtecEventChannelAdmin_ConsumerAdmin_setup_collocation ()
{
  if (::RtecEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ConsumerAdmin_Proxy_Broker_ =
        ::RtecEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
}

RtecEventChannelAdmin::ConsumerAdmin::~ConsumerAdmin (void)
{}

void 
RtecEventChannelAdmin::ConsumerAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  ConsumerAdmin *_tao_tmp_pointer =
    static_cast<ConsumerAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecEventChannelAdmin::ConsumerAdmin_ptr
RtecEventChannelAdmin::ConsumerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/ConsumerAdmin:1.0",
        RtecEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::ConsumerAdmin_ptr
RtecEventChannelAdmin::ConsumerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/ConsumerAdmin:1.0",
        RtecEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::ConsumerAdmin_ptr
RtecEventChannelAdmin::ConsumerAdmin::_nil (void)
{
  return 0;
}

RtecEventChannelAdmin::ConsumerAdmin_ptr
RtecEventChannelAdmin::ConsumerAdmin::_duplicate (ConsumerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecEventChannelAdmin::ConsumerAdmin::_tao_release (ConsumerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecEventChannelAdmin::ConsumerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecEventChannelAdmin::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:RtecEventChannelAdmin/ConsumerAdmin:1.0";
}

::CORBA::Boolean
RtecEventChannelAdmin::ConsumerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_ConsumerAdmin (
    ::CORBA::tk_objref,
    "IDL:RtecEventChannelAdmin/ConsumerAdmin:1.0",
    "ConsumerAdmin");
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerAdmin =
    &_tao_tc_RtecEventChannelAdmin_ConsumerAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecEventChannelAdmin::SupplierAdmin.

RtecEventChannelAdmin::SupplierAdmin_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::SupplierAdmin>::duplicate (
    RtecEventChannelAdmin::SupplierAdmin_ptr p)
{
  return RtecEventChannelAdmin::SupplierAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<RtecEventChannelAdmin::SupplierAdmin>::release (
    RtecEventChannelAdmin::SupplierAdmin_ptr p)
{
  ::CORBA::release (p);
}

RtecEventChannelAdmin::SupplierAdmin_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::SupplierAdmin>::nil (void)
{
  return RtecEventChannelAdmin::SupplierAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecEventChannelAdmin::SupplierAdmin>::marshal (
    const RtecEventChannelAdmin::SupplierAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::RtecEventChannelAdmin::ProxyPushConsumer_ptr
RtecEventChannelAdmin::SupplierAdmin::obtain_push_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::RtecEventChannelAdmin::ProxyPushConsumer>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "obtain_push_consumer",
      20,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

RtecEventChannelAdmin::SupplierAdmin::SupplierAdmin (void)
 : the_TAO_SupplierAdmin_Proxy_Broker_ (0)
{
  this->RtecEventChannelAdmin_SupplierAdmin_setup_collocation ();
}

void
RtecEventChannelAdmin::SupplierAdmin::RtecEventChannelAdmin_SupplierAdmin_setup_collocation ()
{
  if (::RtecEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SupplierAdmin_Proxy_Broker_ =
        ::RtecEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
}

RtecEventChannelAdmin::SupplierAdmin::~SupplierAdmin (void)
{}

void 
RtecEventChannelAdmin::SupplierAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  SupplierAdmin *_tao_tmp_pointer =
    static_cast<SupplierAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecEventChannelAdmin::SupplierAdmin_ptr
RtecEventChannelAdmin::SupplierAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/SupplierAdmin:1.0",
        RtecEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::SupplierAdmin_ptr
RtecEventChannelAdmin::SupplierAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/SupplierAdmin:1.0",
        RtecEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::SupplierAdmin_ptr
RtecEventChannelAdmin::SupplierAdmin::_nil (void)
{
  return 0;
}

RtecEventChannelAdmin::SupplierAdmin_ptr
RtecEventChannelAdmin::SupplierAdmin::_duplicate (SupplierAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecEventChannelAdmin::SupplierAdmin::_tao_release (SupplierAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecEventChannelAdmin::SupplierAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecEventChannelAdmin::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:RtecEventChannelAdmin/SupplierAdmin:1.0";
}

::CORBA::Boolean
RtecEventChannelAdmin::SupplierAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_SupplierAdmin (
    ::CORBA::tk_objref,
    "IDL:RtecEventChannelAdmin/SupplierAdmin:1.0",
    "SupplierAdmin");
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SupplierAdmin =
    &_tao_tc_RtecEventChannelAdmin_SupplierAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecEventChannelAdmin::Observer.

RtecEventChannelAdmin::Observer_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::Observer>::duplicate (
    RtecEventChannelAdmin::Observer_ptr p)
{
  return RtecEventChannelAdmin::Observer::_duplicate (p);
}

void
TAO::Objref_Traits<RtecEventChannelAdmin::Observer>::release (
    RtecEventChannelAdmin::Observer_ptr p)
{
  ::CORBA::release (p);
}

RtecEventChannelAdmin::Observer_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::Observer>::nil (void)
{
  return RtecEventChannelAdmin::Observer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecEventChannelAdmin::Observer>::marshal (
    const RtecEventChannelAdmin::Observer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecEventChannelAdmin__TAO_Observer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::Observer::update_consumer (
  const ::RtecEventChannelAdmin::ConsumerQOS & sub)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Observer_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_Observer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventChannelAdmin::ConsumerQOS>::in_arg_val _tao_sub (sub);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_sub
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "update_consumer",
      15,
      this->the_TAO_Observer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::Observer::update_supplier (
  const ::RtecEventChannelAdmin::SupplierQOS & pub)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Observer_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_Observer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventChannelAdmin::SupplierQOS>::in_arg_val _tao_pub (pub);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_pub
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "update_supplier",
      15,
      this->the_TAO_Observer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

RtecEventChannelAdmin::Observer::Observer (void)
 : the_TAO_Observer_Proxy_Broker_ (0)
{
  this->RtecEventChannelAdmin_Observer_setup_collocation ();
}

void
RtecEventChannelAdmin::Observer::RtecEventChannelAdmin_Observer_setup_collocation ()
{
  if (::RtecEventChannelAdmin__TAO_Observer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Observer_Proxy_Broker_ =
        ::RtecEventChannelAdmin__TAO_Observer_Proxy_Broker_Factory_function_pointer (this);
    }
}

RtecEventChannelAdmin::Observer::~Observer (void)
{}

void 
RtecEventChannelAdmin::Observer::_tao_any_destructor (void *_tao_void_pointer)
{
  Observer *_tao_tmp_pointer =
    static_cast<Observer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecEventChannelAdmin::Observer_ptr
RtecEventChannelAdmin::Observer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Observer>::narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/Observer:1.0",
        RtecEventChannelAdmin__TAO_Observer_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::Observer_ptr
RtecEventChannelAdmin::Observer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Observer>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/Observer:1.0",
        RtecEventChannelAdmin__TAO_Observer_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::Observer_ptr
RtecEventChannelAdmin::Observer::_nil (void)
{
  return 0;
}

RtecEventChannelAdmin::Observer_ptr
RtecEventChannelAdmin::Observer::_duplicate (Observer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecEventChannelAdmin::Observer::_tao_release (Observer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecEventChannelAdmin::Observer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/Observer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecEventChannelAdmin::Observer::_interface_repository_id (void) const
{
  return "IDL:RtecEventChannelAdmin/Observer:1.0";
}

::CORBA::Boolean
RtecEventChannelAdmin::Observer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_Observer (
    ::CORBA::tk_objref,
    "IDL:RtecEventChannelAdmin/Observer:1.0",
    "Observer");
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Observer =
    &_tao_tc_RtecEventChannelAdmin_Observer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_Observer_Handle (
    ::CORBA::tk_alias,
    "IDL:RtecEventChannelAdmin/Observer_Handle:1.0",
    "Observer_Handle",
    &CORBA::_tc_ulong);
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Observer_Handle =
    &_tao_tc_RtecEventChannelAdmin_Observer_Handle;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RtecEventChannelAdmin::EventChannel.

RtecEventChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::EventChannel>::duplicate (
    RtecEventChannelAdmin::EventChannel_ptr p)
{
  return RtecEventChannelAdmin::EventChannel::_duplicate (p);
}

void
TAO::Objref_Traits<RtecEventChannelAdmin::EventChannel>::release (
    RtecEventChannelAdmin::EventChannel_ptr p)
{
  ::CORBA::release (p);
}

RtecEventChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<RtecEventChannelAdmin::EventChannel>::nil (void)
{
  return RtecEventChannelAdmin::EventChannel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RtecEventChannelAdmin::EventChannel>::marshal (
    const RtecEventChannelAdmin::EventChannel_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*RtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::SYNCHRONIZATION_ERROR (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/SYNCHRONIZATION_ERROR:1.0",
        "SYNCHRONIZATION_ERROR"
      )
{
}

RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::~SYNCHRONIZATION_ERROR (void)
{
}

RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::SYNCHRONIZATION_ERROR (const ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR&
RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::operator= (const ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor (void *_tao_void_pointer)
{
  SYNCHRONIZATION_ERROR *_tao_tmp_pointer =
    static_cast<SYNCHRONIZATION_ERROR *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *
RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<SYNCHRONIZATION_ERROR *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *
RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const SYNCHRONIZATION_ERROR *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_SYNCHRONIZATION_ERROR = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_SYNCHRONIZATION_ERROR (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/SYNCHRONIZATION_ERROR:1.0",
  "SYNCHRONIZATION_ERROR",
  _tao_fields_RtecEventChannelAdmin_EventChannel_SYNCHRONIZATION_ERROR,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_SYNCHRONIZATION_ERROR;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::CANT_APPEND_OBSERVER (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/CANT_APPEND_OBSERVER:1.0",
        "CANT_APPEND_OBSERVER"
      )
{
}

RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::~CANT_APPEND_OBSERVER (void)
{
}

RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::CANT_APPEND_OBSERVER (const ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER&
RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::operator= (const ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor (void *_tao_void_pointer)
{
  CANT_APPEND_OBSERVER *_tao_tmp_pointer =
    static_cast<CANT_APPEND_OBSERVER *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *
RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CANT_APPEND_OBSERVER *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *
RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CANT_APPEND_OBSERVER *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_CANT_APPEND_OBSERVER = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_CANT_APPEND_OBSERVER (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/CANT_APPEND_OBSERVER:1.0",
  "CANT_APPEND_OBSERVER",
  _tao_fields_RtecEventChannelAdmin_EventChannel_CANT_APPEND_OBSERVER,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_CANT_APPEND_OBSERVER;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::CANT_REMOVE_OBSERVER (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/CANT_REMOVE_OBSERVER:1.0",
        "CANT_REMOVE_OBSERVER"
      )
{
}

RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::~CANT_REMOVE_OBSERVER (void)
{
}

RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::CANT_REMOVE_OBSERVER (const ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER&
RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::operator= (const ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor (void *_tao_void_pointer)
{
  CANT_REMOVE_OBSERVER *_tao_tmp_pointer =
    static_cast<CANT_REMOVE_OBSERVER *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *
RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CANT_REMOVE_OBSERVER *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *
RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CANT_REMOVE_OBSERVER *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_CANT_REMOVE_OBSERVER = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_CANT_REMOVE_OBSERVER (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/CANT_REMOVE_OBSERVER:1.0",
  "CANT_REMOVE_OBSERVER",
  _tao_fields_RtecEventChannelAdmin_EventChannel_CANT_REMOVE_OBSERVER,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_CANT_REMOVE_OBSERVER;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::QOS_ERROR::QOS_ERROR (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/QOS_ERROR:1.0",
        "QOS_ERROR"
      )
{
}

RtecEventChannelAdmin::EventChannel::QOS_ERROR::~QOS_ERROR (void)
{
}

RtecEventChannelAdmin::EventChannel::QOS_ERROR::QOS_ERROR (const ::RtecEventChannelAdmin::EventChannel::QOS_ERROR &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::QOS_ERROR&
RtecEventChannelAdmin::EventChannel::QOS_ERROR::operator= (const ::RtecEventChannelAdmin::EventChannel::QOS_ERROR &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor (void *_tao_void_pointer)
{
  QOS_ERROR *_tao_tmp_pointer =
    static_cast<QOS_ERROR *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::QOS_ERROR *
RtecEventChannelAdmin::EventChannel::QOS_ERROR::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<QOS_ERROR *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::QOS_ERROR *
RtecEventChannelAdmin::EventChannel::QOS_ERROR::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const QOS_ERROR *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::QOS_ERROR::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::QOS_ERROR, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::QOS_ERROR (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::QOS_ERROR::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_QOS_ERROR = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_QOS_ERROR (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/QOS_ERROR:1.0",
  "QOS_ERROR",
  _tao_fields_RtecEventChannelAdmin_EventChannel_QOS_ERROR,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_QOS_ERROR;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::SUBSCRIPTION_ERROR (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/SUBSCRIPTION_ERROR:1.0",
        "SUBSCRIPTION_ERROR"
      )
{
}

RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::~SUBSCRIPTION_ERROR (void)
{
}

RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::SUBSCRIPTION_ERROR (const ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR&
RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::operator= (const ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor (void *_tao_void_pointer)
{
  SUBSCRIPTION_ERROR *_tao_tmp_pointer =
    static_cast<SUBSCRIPTION_ERROR *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *
RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<SUBSCRIPTION_ERROR *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *
RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const SUBSCRIPTION_ERROR *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_SUBSCRIPTION_ERROR = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_SUBSCRIPTION_ERROR (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/SUBSCRIPTION_ERROR:1.0",
  "SUBSCRIPTION_ERROR",
  _tao_fields_RtecEventChannelAdmin_EventChannel_SUBSCRIPTION_ERROR,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_SUBSCRIPTION_ERROR;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::CORRELATION_ERROR (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/CORRELATION_ERROR:1.0",
        "CORRELATION_ERROR"
      )
{
}

RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::~CORRELATION_ERROR (void)
{
}

RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::CORRELATION_ERROR (const ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR&
RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::operator= (const ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor (void *_tao_void_pointer)
{
  CORRELATION_ERROR *_tao_tmp_pointer =
    static_cast<CORRELATION_ERROR *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *
RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CORRELATION_ERROR *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *
RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CORRELATION_ERROR *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_CORRELATION_ERROR = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_CORRELATION_ERROR (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/CORRELATION_ERROR:1.0",
  "CORRELATION_ERROR",
  _tao_fields_RtecEventChannelAdmin_EventChannel_CORRELATION_ERROR,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_CORRELATION_ERROR;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::DISPATCH_ERROR (void)
  : ::CORBA::UserException (
        "IDL:RtecEventChannelAdmin/EventChannel/DISPATCH_ERROR:1.0",
        "DISPATCH_ERROR"
      )
{
}

RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::~DISPATCH_ERROR (void)
{
}

RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::DISPATCH_ERROR (const ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR&
RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::operator= (const ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor (void *_tao_void_pointer)
{
  DISPATCH_ERROR *_tao_tmp_pointer =
    static_cast<DISPATCH_ERROR *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *
RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<DISPATCH_ERROR *> (_tao_excp);
}

const RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *
RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const DISPATCH_ERROR *> (_tao_excp);
}

::CORBA::Exception *RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR, 0);
  return retval;
}

::CORBA::Exception *
RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR (*this),
      0
    );
  return result;
}

void RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_raise (void) const
{
  throw *this;
}

void RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_type (void) const
{
  return ::RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RtecEventChannelAdmin_EventChannel_DISPATCH_ERROR = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecEventChannelAdmin_EventChannel_DISPATCH_ERROR (
  ::CORBA::tk_except,
  "IDL:RtecEventChannelAdmin/EventChannel/DISPATCH_ERROR:1.0",
  "DISPATCH_ERROR",
  _tao_fields_RtecEventChannelAdmin_EventChannel_DISPATCH_ERROR,
  0);

::CORBA::TypeCode_ptr const RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR =
  &_tao_tc_RtecEventChannelAdmin_EventChannel_DISPATCH_ERROR;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::RtecEventChannelAdmin::ConsumerAdmin_ptr
RtecEventChannelAdmin::EventChannel::for_consumers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::RtecEventChannelAdmin::ConsumerAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "for_consumers",
      13,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::RtecEventChannelAdmin::SupplierAdmin_ptr
RtecEventChannelAdmin::EventChannel::for_suppliers (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::RtecEventChannelAdmin::SupplierAdmin>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "for_suppliers",
      13,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::EventChannel::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::RtecEventChannelAdmin::Observer_Handle
RtecEventChannelAdmin::EventChannel::append_observer (
  ::RtecEventChannelAdmin::Observer_ptr gw)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULong>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventChannelAdmin::Observer>::in_arg_val _tao_gw (gw);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_gw
    };

  static TAO::Exception_Data
  _tao_RtecEventChannelAdmin_EventChannel_append_observer_exceptiondata [] = 
    {
      {
        "IDL:RtecEventChannelAdmin/EventChannel/SYNCHRONIZATION_ERROR:1.0",
        RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:RtecEventChannelAdmin/EventChannel/CANT_APPEND_OBSERVER:1.0",
        RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "append_observer",
      15,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_RtecEventChannelAdmin_EventChannel_append_observer_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
RtecEventChannelAdmin::EventChannel::remove_observer (
  ::RtecEventChannelAdmin::Observer_Handle gw)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannel_Proxy_Broker_ == 0)
    {
      RtecEventChannelAdmin_EventChannel_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULong>::in_arg_val _tao_gw (gw);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_gw
    };

  static TAO::Exception_Data
  _tao_RtecEventChannelAdmin_EventChannel_remove_observer_exceptiondata [] = 
    {
      {
        "IDL:RtecEventChannelAdmin/EventChannel/SYNCHRONIZATION_ERROR:1.0",
        RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:RtecEventChannelAdmin/EventChannel/CANT_REMOVE_OBSERVER:1.0",
        RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "remove_observer",
      15,
      this->the_TAO_EventChannel_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_RtecEventChannelAdmin_EventChannel_remove_observer_exceptiondata,
      2
    );
}

RtecEventChannelAdmin::EventChannel::EventChannel (void)
 : the_TAO_EventChannel_Proxy_Broker_ (0)
{
  this->RtecEventChannelAdmin_EventChannel_setup_collocation ();
}

void
RtecEventChannelAdmin::EventChannel::RtecEventChannelAdmin_EventChannel_setup_collocation ()
{
  if (::RtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannel_Proxy_Broker_ =
        ::RtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer (this);
    }
}

RtecEventChannelAdmin::EventChannel::~EventChannel (void)
{}

void 
RtecEventChannelAdmin::EventChannel::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannel *_tao_tmp_pointer =
    static_cast<EventChannel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RtecEventChannelAdmin::EventChannel_ptr
RtecEventChannelAdmin::EventChannel::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/EventChannel:1.0",
        RtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::EventChannel_ptr
RtecEventChannelAdmin::EventChannel::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::unchecked_narrow (
        _tao_objref,
        "IDL:RtecEventChannelAdmin/EventChannel:1.0",
        RtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

RtecEventChannelAdmin::EventChannel_ptr
RtecEventChannelAdmin::EventChannel::_nil (void)
{
  return 0;
}

RtecEventChannelAdmin::EventChannel_ptr
RtecEventChannelAdmin::EventChannel::_duplicate (EventChannel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RtecEventChannelAdmin::EventChannel::_tao_release (EventChannel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RtecEventChannelAdmin::EventChannel::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* RtecEventChannelAdmin::EventChannel::_interface_repository_id (void) const
{
  return "IDL:RtecEventChannelAdmin/EventChannel:1.0";
}

::CORBA::Boolean
RtecEventChannelAdmin::EventChannel::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RtecEventChannelAdmin_EventChannel (
    ::CORBA::tk_objref,
    "IDL:RtecEventChannelAdmin/EventChannel:1.0",
    "EventChannel");
  

namespace RtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannel =
    &_tao_tc_RtecEventChannelAdmin_EventChannel;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::AlreadyConnected>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::AlreadyConnected &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::AlreadyConnected>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_AlreadyConnected,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::AlreadyConnected *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::AlreadyConnected>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_AlreadyConnected,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::AlreadyConnected *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::AlreadyConnected *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::AlreadyConnected *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::AlreadyConnected>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_AlreadyConnected,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::AlreadyConnected &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::AlreadyConnected>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_AlreadyConnected,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::AlreadyConnected *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::AlreadyConnected>::insert (
      _tao_any,
      RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_AlreadyConnected,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::AlreadyConnected *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::AlreadyConnected *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::AlreadyConnected *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::AlreadyConnected>::extract (
        _tao_any,
        RtecEventChannelAdmin::AlreadyConnected::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_AlreadyConnected,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::Dependency &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecEventChannelAdmin::Dependency *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::Dependency>::insert_copy (
          _tao_any,
          ::RtecEventChannelAdmin::Dependency::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_Dependency,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecEventChannelAdmin::Dependency *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::Dependency>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::Dependency::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_Dependency,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::Dependency *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::Dependency *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::Dependency *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::Dependency>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::Dependency::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_Dependency,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::Dependency &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventChannelAdmin::Dependency *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::Dependency>::insert_copy (
        _tao_any,
        RtecEventChannelAdmin::Dependency::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_Dependency,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Dependency *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::Dependency>::insert (
      _tao_any,
      RtecEventChannelAdmin::Dependency::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_Dependency,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Dependency *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::Dependency *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::Dependency *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::Dependency>::extract (
        _tao_any,
        RtecEventChannelAdmin::Dependency::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_Dependency,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::DependencySet &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecEventChannelAdmin::DependencySet *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::DependencySet>::insert_copy (
          _tao_any,
          ::RtecEventChannelAdmin::DependencySet::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_DependencySet,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::DependencySet *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::DependencySet>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::DependencySet::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_DependencySet,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::DependencySet *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::DependencySet *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::DependencySet *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::DependencySet>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::DependencySet::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_DependencySet,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::DependencySet &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventChannelAdmin::DependencySet *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::DependencySet>::insert_copy (
        _tao_any,
        RtecEventChannelAdmin::DependencySet::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_DependencySet,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::DependencySet *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::DependencySet>::insert (
      _tao_any,
      RtecEventChannelAdmin::DependencySet::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_DependencySet,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::DependencySet *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::DependencySet *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::DependencySet *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::DependencySet>::extract (
        _tao_any,
        RtecEventChannelAdmin::DependencySet::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_DependencySet,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::ConsumerQOS &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecEventChannelAdmin::ConsumerQOS *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::ConsumerQOS>::insert_copy (
          _tao_any,
          ::RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_ConsumerQOS,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecEventChannelAdmin::ConsumerQOS *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::ConsumerQOS>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_ConsumerQOS,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::ConsumerQOS *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::ConsumerQOS *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::ConsumerQOS *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::ConsumerQOS>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_ConsumerQOS,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::ConsumerQOS &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventChannelAdmin::ConsumerQOS *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::ConsumerQOS>::insert_copy (
        _tao_any,
        RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_ConsumerQOS,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ConsumerQOS *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::ConsumerQOS>::insert (
      _tao_any,
      RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_ConsumerQOS,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ConsumerQOS *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::ConsumerQOS *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::ConsumerQOS *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::ConsumerQOS>::extract (
        _tao_any,
        RtecEventChannelAdmin::ConsumerQOS::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_ConsumerQOS,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::Publication &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecEventChannelAdmin::Publication *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::Publication>::insert_copy (
          _tao_any,
          ::RtecEventChannelAdmin::Publication::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_Publication,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecEventChannelAdmin::Publication *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::Publication>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::Publication::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_Publication,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::Publication *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::Publication *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::Publication *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::Publication>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::Publication::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_Publication,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::Publication &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventChannelAdmin::Publication *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::Publication>::insert_copy (
        _tao_any,
        RtecEventChannelAdmin::Publication::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_Publication,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Publication *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::Publication>::insert (
      _tao_any,
      RtecEventChannelAdmin::Publication::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_Publication,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Publication *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::Publication *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::Publication *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::Publication>::extract (
        _tao_any,
        RtecEventChannelAdmin::Publication::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_Publication,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::PublicationSet &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecEventChannelAdmin::PublicationSet *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::PublicationSet>::insert_copy (
          _tao_any,
          ::RtecEventChannelAdmin::PublicationSet::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_PublicationSet,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::PublicationSet *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::PublicationSet>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::PublicationSet::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_PublicationSet,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::PublicationSet *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::PublicationSet *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::PublicationSet *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::PublicationSet>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::PublicationSet::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_PublicationSet,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::PublicationSet &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventChannelAdmin::PublicationSet *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::PublicationSet>::insert_copy (
        _tao_any,
        RtecEventChannelAdmin::PublicationSet::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_PublicationSet,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::PublicationSet *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::PublicationSet>::insert (
      _tao_any,
      RtecEventChannelAdmin::PublicationSet::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_PublicationSet,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::PublicationSet *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::PublicationSet *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::PublicationSet *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::PublicationSet>::extract (
        _tao_any,
        RtecEventChannelAdmin::PublicationSet::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_PublicationSet,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::SupplierQOS &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecEventChannelAdmin::SupplierQOS *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::SupplierQOS>::insert_copy (
          _tao_any,
          ::RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_SupplierQOS,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecEventChannelAdmin::SupplierQOS *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::SupplierQOS>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_SupplierQOS,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::SupplierQOS *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::SupplierQOS *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::SupplierQOS *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::SupplierQOS>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_SupplierQOS,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::SupplierQOS &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecEventChannelAdmin::SupplierQOS *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::SupplierQOS>::insert_copy (
        _tao_any,
        RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_SupplierQOS,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::SupplierQOS *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::SupplierQOS>::insert (
      _tao_any,
      RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_SupplierQOS,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::SupplierQOS *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::SupplierQOS *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::SupplierQOS *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::SupplierQOS>::extract (
        _tao_any,
        RtecEventChannelAdmin::SupplierQOS::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_SupplierQOS,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::TypeError>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::TypeError &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::TypeError>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::TypeError::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_TypeError,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::TypeError *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::TypeError>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::TypeError::_tao_any_destructor,
        ::RtecEventChannelAdmin::_tc_TypeError,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::TypeError *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::TypeError *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::TypeError *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::TypeError>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::TypeError::_tao_any_destructor,
          ::RtecEventChannelAdmin::_tc_TypeError,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::TypeError &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::TypeError>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::TypeError::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_TypeError,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::TypeError *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::TypeError>::insert (
      _tao_any,
      RtecEventChannelAdmin::TypeError::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_TypeError,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::TypeError *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::TypeError *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::TypeError *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::TypeError>::extract (
        _tao_any,
        RtecEventChannelAdmin::TypeError::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_TypeError,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecEventChannelAdmin::ProxyPushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr _tao_elem)
  {
    ProxyPushSupplier_ptr _tao_objptr =
      ProxyPushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPushSupplier>::insert (
        _tao_any,
        ProxyPushSupplier::_tao_any_destructor,
        _tc_ProxyPushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPushSupplier>::extract (
          _tao_any,
          ProxyPushSupplier::_tao_any_destructor,
          _tc_ProxyPushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ProxyPushSupplier_ptr _tao_elem)
{
  RtecEventChannelAdmin::ProxyPushSupplier_ptr _tao_objptr =
    RtecEventChannelAdmin::ProxyPushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ProxyPushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecEventChannelAdmin::ProxyPushSupplier>::insert (
      _tao_any,
      RtecEventChannelAdmin::ProxyPushSupplier::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_ProxyPushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ProxyPushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecEventChannelAdmin::ProxyPushSupplier>::extract (
        _tao_any,
        RtecEventChannelAdmin::ProxyPushSupplier::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_ProxyPushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecEventChannelAdmin::ProxyPushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr _tao_elem)
  {
    ProxyPushConsumer_ptr _tao_objptr =
      ProxyPushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ProxyPushConsumer>::insert (
        _tao_any,
        ProxyPushConsumer::_tao_any_destructor,
        _tc_ProxyPushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ProxyPushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ProxyPushConsumer>::extract (
          _tao_any,
          ProxyPushConsumer::_tao_any_destructor,
          _tc_ProxyPushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ProxyPushConsumer_ptr _tao_elem)
{
  RtecEventChannelAdmin::ProxyPushConsumer_ptr _tao_objptr =
    RtecEventChannelAdmin::ProxyPushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ProxyPushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecEventChannelAdmin::ProxyPushConsumer>::insert (
      _tao_any,
      RtecEventChannelAdmin::ProxyPushConsumer::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_ProxyPushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ProxyPushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecEventChannelAdmin::ProxyPushConsumer>::extract (
        _tao_any,
        RtecEventChannelAdmin::ProxyPushConsumer::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_ProxyPushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecEventChannelAdmin::ConsumerAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr _tao_elem)
  {
    ConsumerAdmin_ptr _tao_objptr =
      ConsumerAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ConsumerAdmin>::insert (
        _tao_any,
        ConsumerAdmin::_tao_any_destructor,
        _tc_ConsumerAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ConsumerAdmin>::extract (
          _tao_any,
          ConsumerAdmin::_tao_any_destructor,
          _tc_ConsumerAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ConsumerAdmin_ptr _tao_elem)
{
  RtecEventChannelAdmin::ConsumerAdmin_ptr _tao_objptr =
    RtecEventChannelAdmin::ConsumerAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ConsumerAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecEventChannelAdmin::ConsumerAdmin>::insert (
      _tao_any,
      RtecEventChannelAdmin::ConsumerAdmin::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_ConsumerAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::ConsumerAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecEventChannelAdmin::ConsumerAdmin>::extract (
        _tao_any,
        RtecEventChannelAdmin::ConsumerAdmin::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_ConsumerAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecEventChannelAdmin::SupplierAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr _tao_elem)
  {
    SupplierAdmin_ptr _tao_objptr =
      SupplierAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SupplierAdmin>::insert (
        _tao_any,
        SupplierAdmin::_tao_any_destructor,
        _tc_SupplierAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SupplierAdmin>::extract (
          _tao_any,
          SupplierAdmin::_tao_any_destructor,
          _tc_SupplierAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::SupplierAdmin_ptr _tao_elem)
{
  RtecEventChannelAdmin::SupplierAdmin_ptr _tao_objptr =
    RtecEventChannelAdmin::SupplierAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::SupplierAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecEventChannelAdmin::SupplierAdmin>::insert (
      _tao_any,
      RtecEventChannelAdmin::SupplierAdmin::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_SupplierAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::SupplierAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecEventChannelAdmin::SupplierAdmin>::extract (
        _tao_any,
        RtecEventChannelAdmin::SupplierAdmin::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_SupplierAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecEventChannelAdmin::Observer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Observer_ptr _tao_elem)
  {
    Observer_ptr _tao_objptr =
      Observer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Observer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Observer>::insert (
        _tao_any,
        Observer::_tao_any_destructor,
        _tc_Observer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Observer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Observer>::extract (
          _tao_any,
          Observer::_tao_any_destructor,
          _tc_Observer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Observer_ptr _tao_elem)
{
  RtecEventChannelAdmin::Observer_ptr _tao_objptr =
    RtecEventChannelAdmin::Observer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Observer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecEventChannelAdmin::Observer>::insert (
      _tao_any,
      RtecEventChannelAdmin::Observer::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_Observer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::Observer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecEventChannelAdmin::Observer>::extract (
        _tao_any,
        RtecEventChannelAdmin::Observer::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_Observer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RtecEventChannelAdmin::EventChannel>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr _tao_elem)
  {
    EventChannel_ptr _tao_objptr =
      EventChannel::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannel>::insert (
        _tao_any,
        EventChannel::_tao_any_destructor,
        _tc_EventChannel,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannel_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannel>::extract (
          _tao_any,
          EventChannel::_tao_any_destructor,
          _tc_EventChannel,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel_ptr _tao_elem)
{
  RtecEventChannelAdmin::EventChannel_ptr _tao_objptr =
    RtecEventChannelAdmin::EventChannel::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RtecEventChannelAdmin::EventChannel>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::_tao_any_destructor,
      RtecEventChannelAdmin::_tc_EventChannel,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RtecEventChannelAdmin::EventChannel>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::_tao_any_destructor,
        RtecEventChannelAdmin::_tc_EventChannel,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_SYNCHRONIZATION_ERROR,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_CANT_APPEND_OBSERVER,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_CANT_REMOVE_OBSERVER,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::QOS_ERROR>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::QOS_ERROR &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::QOS_ERROR>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::QOS_ERROR *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::QOS_ERROR>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::QOS_ERROR *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::QOS_ERROR *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::QOS_ERROR *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::QOS_ERROR>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::QOS_ERROR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::QOS_ERROR>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::QOS_ERROR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::QOS_ERROR>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::QOS_ERROR *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::QOS_ERROR *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::QOS_ERROR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::QOS_ERROR>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::QOS_ERROR::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_QOS_ERROR,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_SUBSCRIPTION_ERROR,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_CORRELATION_ERROR,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::insert_copy (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::insert (
        _tao_any,
        ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor,
        ::RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::extract (
          _tao_any,
          ::RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor,
          ::RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::insert_copy (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::insert (
      _tao_any,
      RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor,
      RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR>::extract (
        _tao_any,
        RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR::_tao_any_destructor,
        RtecEventChannelAdmin::EventChannel::_tc_DISPATCH_ERROR,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::AlreadyConnected &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::AlreadyConnected&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::Dependency &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.event) &&
    (strm << _tao_aggregate.rt_info);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::Dependency &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.event) &&
    (strm >> _tao_aggregate.rt_info);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_RtecEventChannelAdmin_DependencySet_CPP_
#define _TAO_CDR_OP_RtecEventChannelAdmin_DependencySet_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::DependencySet &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::DependencySet &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_RtecEventChannelAdmin_DependencySet_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::ConsumerQOS &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dependencies) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.is_gateway));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::ConsumerQOS &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dependencies) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.is_gateway));
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::Publication &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.event) &&
    (strm << _tao_aggregate.dependency_info);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::Publication &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.event) &&
    (strm >> _tao_aggregate.dependency_info);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_RtecEventChannelAdmin_PublicationSet_CPP_
#define _TAO_CDR_OP_RtecEventChannelAdmin_PublicationSet_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::PublicationSet &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::PublicationSet &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_RtecEventChannelAdmin_PublicationSet_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::SupplierQOS &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.publications) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.is_gateway));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::SupplierQOS &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.publications) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.is_gateway));
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::TypeError &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::TypeError&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::ProxyPushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::ProxyPushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecEventChannelAdmin::ProxyPushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecEventChannelAdmin__TAO_ProxyPushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::ProxyPushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::ProxyPushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecEventChannelAdmin::ProxyPushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecEventChannelAdmin__TAO_ProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::ConsumerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::ConsumerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecEventChannelAdmin::ConsumerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecEventChannelAdmin__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::SupplierAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::SupplierAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecEventChannelAdmin::SupplierAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecEventChannelAdmin__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::Observer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::Observer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecEventChannelAdmin::Observer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecEventChannelAdmin__TAO_Observer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::SYNCHRONIZATION_ERROR&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::CANT_APPEND_OBSERVER&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::CANT_REMOVE_OBSERVER&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::QOS_ERROR &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::QOS_ERROR&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::SUBSCRIPTION_ERROR&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::CORRELATION_ERROR&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    RtecEventChannelAdmin::EventChannel::DISPATCH_ERROR&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecEventChannelAdmin::EventChannel_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecEventChannelAdmin::EventChannel_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::RtecEventChannelAdmin::EventChannel RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        RtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


