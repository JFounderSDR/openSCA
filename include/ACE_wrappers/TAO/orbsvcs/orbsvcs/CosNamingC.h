// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_COSNAMINGC_XOSN9D_H_
#define _TAO_IDL_COSNAMINGC_XOSN9D_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Naming/naming_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Naming_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace CosNaming
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * Istring;
  typedef ::CORBA::String_var Istring_var;
  typedef ::CORBA::String_out Istring_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_Istring;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct NameComponent;

  typedef
    ::TAO_Var_Var_T<
        NameComponent
      >
    NameComponent_var;
  
  typedef
    ::TAO_Out_T<
        NameComponent
      >
    NameComponent_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Naming_Export NameComponent
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef NameComponent_var _var_type;
    typedef NameComponent_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager id;
    ::TAO::String_Manager kind;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_NameComponent;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSNAMING_NAME_CH_)
#define _COSNAMING_NAME_CH_

  class Name;

  typedef
    ::TAO_VarSeq_Var_T<
        Name
      >
    Name_var;

  typedef
    ::TAO_Seq_Out_T<
        Name
      >
    Name_out;

  class TAO_Naming_Export Name
    : public
        ::TAO::unbounded_value_sequence<
            NameComponent
          >
  {
  public:
    Name (void);
    Name ( ::CORBA::ULong max);
    Name (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      NameComponent* buffer, 
      ::CORBA::Boolean release = false);
    Name (const Name &);
    virtual ~Name (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Name_var _var_type;
    typedef Name_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_Name;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum BindingType
  {
    nobject,
    ncontext
  };

  typedef BindingType &BindingType_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_BindingType;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Binding;

  typedef
    ::TAO_Var_Var_T<
        Binding
      >
    Binding_var;
  
  typedef
    ::TAO_Out_T<
        Binding
      >
    Binding_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Naming_Export Binding
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Binding_var _var_type;
    typedef Binding_out _out_type;

    static void _tao_any_destructor (void *);
    
    CosNaming::Name binding_name;
    CosNaming::BindingType binding_type;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_Binding;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_COSNAMING_BINDINGLIST_CH_)
#define _COSNAMING_BINDINGLIST_CH_

  class BindingList;

  typedef
    ::TAO_VarSeq_Var_T<
        BindingList
      >
    BindingList_var;

  typedef
    ::TAO_Seq_Out_T<
        BindingList
      >
    BindingList_out;

  class TAO_Naming_Export BindingList
    : public
        ::TAO::unbounded_value_sequence<
            Binding
          >
  {
  public:
    BindingList (void);
    BindingList ( ::CORBA::ULong max);
    BindingList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Binding* buffer, 
      ::CORBA::Boolean release = false);
    BindingList (const BindingList &);
    virtual ~BindingList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef BindingList_var _var_type;
    typedef BindingList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_BindingList;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSNAMING_BINDINGITERATOR__VAR_OUT_CH_)
#define _COSNAMING_BINDINGITERATOR__VAR_OUT_CH_

  class BindingIterator;
  typedef BindingIterator *BindingIterator_ptr;

  typedef
    TAO_Objref_Var_T<
        BindingIterator
      >
    BindingIterator_var;
  
  typedef
    TAO_Objref_Out_T<
        BindingIterator
      >
    BindingIterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSNAMING_NAMINGCONTEXT__VAR_OUT_CH_)
#define _COSNAMING_NAMINGCONTEXT__VAR_OUT_CH_

  class NamingContext;
  typedef NamingContext *NamingContext_ptr;

  typedef
    TAO_Objref_Var_T<
        NamingContext
      >
    NamingContext_var;
  
  typedef
    TAO_Objref_Out_T<
        NamingContext
      >
    NamingContext_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Naming_Export NamingContext
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<NamingContext>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef NamingContext_ptr _ptr_type;
    typedef NamingContext_var _var_type;
    typedef NamingContext_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static NamingContext_ptr _duplicate (NamingContext_ptr obj);

    static void _tao_release (NamingContext_ptr obj);

    static NamingContext_ptr _narrow (::CORBA::Object_ptr obj);
    static NamingContext_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NamingContext_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

    enum NotFoundReason
    {
      missing_node,
      not_context,
      not_object
    };

    typedef NotFoundReason &NotFoundReason_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_NotFoundReason;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Naming_Export NotFound : public ::CORBA::UserException
    {
    public:
      
      CosNaming::NamingContext::NotFoundReason why;
      CosNaming::Name rest_of_name;
      NotFound (void);
      NotFound (const NotFound &);
      ~NotFound (void);

      NotFound &operator= (const NotFound &);

      static void _tao_any_destructor (void *);

      static NotFound *_downcast ( ::CORBA::Exception *);
      static const NotFound *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      NotFound (
          CosNaming::NamingContext::NotFoundReason _tao_why,
          const CosNaming::Name & _tao_rest_of_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_NotFound;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Naming_Export CannotProceed : public ::CORBA::UserException
    {
    public:
      
      CosNaming::NamingContext_var cxt;
      CosNaming::Name rest_of_name;
      CannotProceed (void);
      CannotProceed (const CannotProceed &);
      ~CannotProceed (void);

      CannotProceed &operator= (const CannotProceed &);

      static void _tao_any_destructor (void *);

      static CannotProceed *_downcast ( ::CORBA::Exception *);
      static const CannotProceed *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

      CannotProceed (
          const CosNaming::NamingContext_ptr _tao_cxt,
          const CosNaming::Name & _tao_rest_of_name);

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_CannotProceed;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Naming_Export InvalidName : public ::CORBA::UserException
    {
    public:
      
      InvalidName (void);
      InvalidName (const InvalidName &);
      ~InvalidName (void);

      InvalidName &operator= (const InvalidName &);

      static void _tao_any_destructor (void *);

      static InvalidName *_downcast ( ::CORBA::Exception *);
      static const InvalidName *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_InvalidName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Naming_Export AlreadyBound : public ::CORBA::UserException
    {
    public:
      
      AlreadyBound (void);
      AlreadyBound (const AlreadyBound &);
      ~AlreadyBound (void);

      AlreadyBound &operator= (const AlreadyBound &);

      static void _tao_any_destructor (void *);

      static AlreadyBound *_downcast ( ::CORBA::Exception *);
      static const AlreadyBound *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_AlreadyBound;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Naming_Export NotEmpty : public ::CORBA::UserException
    {
    public:
      
      NotEmpty (void);
      NotEmpty (const NotEmpty &);
      ~NotEmpty (void);

      NotEmpty &operator= (const NotEmpty &);

      static void _tao_any_destructor (void *);

      static NotEmpty *_downcast ( ::CORBA::Exception *);
      static const NotEmpty *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_NotEmpty;

    virtual void bind (
      const ::CosNaming::Name & n,
      ::CORBA::Object_ptr obj);

    virtual void rebind (
      const ::CosNaming::Name & n,
      ::CORBA::Object_ptr obj);

    virtual void bind_context (
      const ::CosNaming::Name & n,
      ::CosNaming::NamingContext_ptr nc);

    virtual void rebind_context (
      const ::CosNaming::Name & n,
      ::CosNaming::NamingContext_ptr nc);

    virtual ::CORBA::Object_ptr resolve (
      const ::CosNaming::Name & n);

    virtual void unbind (
      const ::CosNaming::Name & n);

    virtual ::CosNaming::NamingContext_ptr new_context (
      void);

    virtual ::CosNaming::NamingContext_ptr bind_new_context (
      const ::CosNaming::Name & n);

    virtual void destroy (
      void);

    virtual void list (
      ::CORBA::ULong how_many,
      ::CosNaming::BindingList_out bl,
      ::CosNaming::BindingIterator_out bi);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_NamingContext_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    NamingContext (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosNaming_NamingContext_setup_collocation (void);

    // Concrete non-local interface only.
    NamingContext (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    NamingContext (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~NamingContext (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NamingContext (const NamingContext &);

    void operator= (const NamingContext &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_NamingContext;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Naming_Export BindingIterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<BindingIterator>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef BindingIterator_ptr _ptr_type;
    typedef BindingIterator_var _var_type;
    typedef BindingIterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static BindingIterator_ptr _duplicate (BindingIterator_ptr obj);

    static void _tao_release (BindingIterator_ptr obj);

    static BindingIterator_ptr _narrow (::CORBA::Object_ptr obj);
    static BindingIterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static BindingIterator_ptr _nil (void);

    virtual ::CORBA::Boolean next_one (
      ::CosNaming::Binding_out b);

    virtual ::CORBA::Boolean next_n (
      ::CORBA::ULong how_many,
      ::CosNaming::BindingList_out bl);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_BindingIterator_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    BindingIterator (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosNaming_BindingIterator_setup_collocation (void);

    // Concrete non-local interface only.
    BindingIterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    BindingIterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~BindingIterator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    BindingIterator (const BindingIterator &);

    void operator= (const BindingIterator &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_BindingIterator;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSNAMING_NAMINGCONTEXTEXT__VAR_OUT_CH_)
#define _COSNAMING_NAMINGCONTEXTEXT__VAR_OUT_CH_

  class NamingContextExt;
  typedef NamingContextExt *NamingContextExt_ptr;

  typedef
    TAO_Objref_Var_T<
        NamingContextExt
      >
    NamingContextExt_var;
  
  typedef
    TAO_Objref_Out_T<
        NamingContextExt
      >
    NamingContextExt_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Naming_Export NamingContextExt
    : public virtual ::CosNaming::NamingContext
  
  {
  public:
    friend class TAO::Narrow_Utils<NamingContextExt>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef NamingContextExt_ptr _ptr_type;
    typedef NamingContextExt_var _var_type;
    typedef NamingContextExt_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static NamingContextExt_ptr _duplicate (NamingContextExt_ptr obj);

    static void _tao_release (NamingContextExt_ptr obj);

    static NamingContextExt_ptr _narrow (::CORBA::Object_ptr obj);
    static NamingContextExt_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NamingContextExt_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

    typedef char * StringName;
    typedef ::CORBA::String_var StringName_var;
    typedef ::CORBA::String_out StringName_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_StringName;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

    typedef char * Address;
    typedef ::CORBA::String_var Address_var;
    typedef ::CORBA::String_out Address_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_Address;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

    typedef char * URLString;
    typedef ::CORBA::String_var URLString_var;
    typedef ::CORBA::String_out URLString_out;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_URLString;

    virtual char * to_string (
      const ::CosNaming::Name & n);

    virtual ::CosNaming::Name * to_name (
      const char * sn);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_Naming_Export InvalidAddress : public ::CORBA::UserException
    {
    public:
      
      InvalidAddress (void);
      InvalidAddress (const InvalidAddress &);
      ~InvalidAddress (void);

      InvalidAddress &operator= (const InvalidAddress &);

      static void _tao_any_destructor (void *);

      static InvalidAddress *_downcast ( ::CORBA::Exception *);
      static const InvalidAddress *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_InvalidAddress;

    virtual char * to_url (
      const char * addr,
      const char * sn);

    virtual ::CORBA::Object_ptr resolve_str (
      const char * n);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_NamingContextExt_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    NamingContextExt (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosNaming_NamingContextExt_setup_collocation (void);

    // Concrete non-local interface only.
    NamingContextExt (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    NamingContextExt (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~NamingContextExt (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NamingContextExt (const NamingContextExt &);

    void operator= (const NamingContextExt &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Naming_Export ::CORBA::TypeCode_ptr const _tc_NamingContextExt;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module CosNaming

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosNaming::NameComponent>
    : public
        Var_Size_Arg_Traits_T<
            ::CosNaming::NameComponent,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosNaming::Name>
    : public
        Var_Size_Arg_Traits_T<
            ::CosNaming::Name,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::CosNaming::BindingType>
    : public
        Basic_Arg_Traits_T<
            ::CosNaming::BindingType,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::CosNaming::Binding>
    : public
        Var_Size_Arg_Traits_T<
            ::CosNaming::Binding,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::CosNaming::BindingList>
    : public
        Var_Size_Arg_Traits_T<
            ::CosNaming::BindingList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSNAMING_BINDINGITERATOR__ARG_TRAITS_)
#define _COSNAMING_BINDINGITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosNaming::BindingIterator>
    : public
        Object_Arg_Traits_T<
            ::CosNaming::BindingIterator_ptr,
            ::CosNaming::BindingIterator_var,
            ::CosNaming::BindingIterator_out,
            TAO::Objref_Traits<CosNaming::BindingIterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSNAMING_NAMINGCONTEXT__ARG_TRAITS_)
#define _COSNAMING_NAMINGCONTEXT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosNaming::NamingContext>
    : public
        Object_Arg_Traits_T<
            ::CosNaming::NamingContext_ptr,
            ::CosNaming::NamingContext_var,
            ::CosNaming::NamingContext_out,
            TAO::Objref_Traits<CosNaming::NamingContext>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::CosNaming::NamingContext::NotFoundReason>
    : public
        Basic_Arg_Traits_T<
            ::CosNaming::NamingContext::NotFoundReason,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSNAMING_NAMINGCONTEXTEXT__ARG_TRAITS_)
#define _COSNAMING_NAMINGCONTEXTEXT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosNaming::NamingContextExt>
    : public
        Object_Arg_Traits_T<
            ::CosNaming::NamingContextExt_ptr,
            ::CosNaming::NamingContextExt_var,
            ::CosNaming::NamingContextExt_out,
            TAO::Objref_Traits<CosNaming::NamingContextExt>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_Naming_Export
TAO::Collocation_Proxy_Broker *
(*CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Naming_Export
TAO::Collocation_Proxy_Broker *
(*CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Naming_Export
TAO::Collocation_Proxy_Broker *
(*CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COSNAMING_NAMINGCONTEXT__TRAITS_)
#define _COSNAMING_NAMINGCONTEXT__TRAITS_

  template<>
  struct TAO_Naming_Export Objref_Traits< ::CosNaming::NamingContext>
  {
    static ::CosNaming::NamingContext_ptr duplicate (
        ::CosNaming::NamingContext_ptr p);
    static void release (
        ::CosNaming::NamingContext_ptr p);
    static ::CosNaming::NamingContext_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosNaming::NamingContext_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSNAMING_BINDINGITERATOR__TRAITS_)
#define _COSNAMING_BINDINGITERATOR__TRAITS_

  template<>
  struct TAO_Naming_Export Objref_Traits< ::CosNaming::BindingIterator>
  {
    static ::CosNaming::BindingIterator_ptr duplicate (
        ::CosNaming::BindingIterator_ptr p);
    static void release (
        ::CosNaming::BindingIterator_ptr p);
    static ::CosNaming::BindingIterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosNaming::BindingIterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSNAMING_NAMINGCONTEXTEXT__TRAITS_)
#define _COSNAMING_NAMINGCONTEXTEXT__TRAITS_

  template<>
  struct TAO_Naming_Export Objref_Traits< ::CosNaming::NamingContextExt>
  {
    static ::CosNaming::NamingContextExt_ptr duplicate (
        ::CosNaming::NamingContextExt_ptr p);
    static void release (
        ::CosNaming::NamingContextExt_ptr p);
    static ::CosNaming::NamingContextExt_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosNaming::NamingContextExt_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NameComponent &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NameComponent*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NameComponent *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NameComponent *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NameComponent &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NameComponent*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NameComponent *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NameComponent *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, const ::CosNaming::Name &); // copying version
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, ::CosNaming::Name*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::Name *&); // deprecated
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::Name *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= ( ::CORBA::Any &, const CosNaming::Name &); // copying version
TAO_Naming_Export void operator<<= ( ::CORBA::Any &, CosNaming::Name*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::Name *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::Name *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::BindingType);
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::BindingType &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::BindingType);
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::BindingType &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::Binding &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::Binding*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::Binding *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::Binding *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::Binding &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::Binding*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::Binding *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::Binding *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, const ::CosNaming::BindingList &); // copying version
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, ::CosNaming::BindingList*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::BindingList *&); // deprecated
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::BindingList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= ( ::CORBA::Any &, const CosNaming::BindingList &); // copying version
TAO_Naming_Export void operator<<= ( ::CORBA::Any &, CosNaming::BindingList*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::BindingList *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::BindingList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, NamingContext_ptr); // copying
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, NamingContext_ptr *); // non-copying
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NamingContext_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext_ptr); // copying
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext_ptr *); // non-copying
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContext::NotFoundReason);
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContext::NotFoundReason &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext::NotFoundReason);
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext::NotFoundReason &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NamingContext::NotFound &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContext::NotFound*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContext::NotFound *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NamingContext::NotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NamingContext::NotFound &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext::NotFound*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext::NotFound *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NamingContext::NotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NamingContext::CannotProceed &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContext::CannotProceed*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContext::CannotProceed *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NamingContext::CannotProceed *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NamingContext::CannotProceed &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext::CannotProceed*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext::CannotProceed *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NamingContext::CannotProceed *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NamingContext::InvalidName &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContext::InvalidName*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContext::InvalidName *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NamingContext::InvalidName *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NamingContext::InvalidName &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext::InvalidName*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext::InvalidName *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NamingContext::InvalidName *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NamingContext::AlreadyBound &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContext::AlreadyBound*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContext::AlreadyBound *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NamingContext::AlreadyBound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NamingContext::AlreadyBound &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext::AlreadyBound*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext::AlreadyBound *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NamingContext::AlreadyBound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NamingContext::NotEmpty &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContext::NotEmpty*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContext::NotEmpty *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NamingContext::NotEmpty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NamingContext::NotEmpty &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContext::NotEmpty*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContext::NotEmpty *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NamingContext::NotEmpty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, BindingIterator_ptr); // copying
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, BindingIterator_ptr *); // non-copying
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BindingIterator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::BindingIterator_ptr); // copying
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::BindingIterator_ptr *); // non-copying
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::BindingIterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, NamingContextExt_ptr); // copying
  TAO_Naming_Export void operator<<= ( ::CORBA::Any &, NamingContextExt_ptr *); // non-copying
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NamingContextExt_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContextExt_ptr); // copying
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContextExt_ptr *); // non-copying
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContextExt_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNaming
{
  

  TAO_Naming_Export void operator<<= (::CORBA::Any &, const ::CosNaming::NamingContextExt::InvalidAddress &); // copying version
  TAO_Naming_Export void operator<<= (::CORBA::Any &, ::CosNaming::NamingContextExt::InvalidAddress*); // noncopying version
  TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosNaming::NamingContextExt::InvalidAddress *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosNaming::NamingContextExt::InvalidAddress *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export void operator<<= (::CORBA::Any &, const CosNaming::NamingContextExt::InvalidAddress &); // copying version
TAO_Naming_Export void operator<<= (::CORBA::Any &, CosNaming::NamingContextExt::InvalidAddress*); // noncopying version
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosNaming::NamingContextExt::InvalidAddress *&); // deprecated
TAO_Naming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosNaming::NamingContextExt::InvalidAddress *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NameComponent &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NameComponent &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosNaming_Name_H_
#define _TAO_CDR_OP_CosNaming_Name_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Naming_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::Name &_tao_sequence);
TAO_Naming_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::Name &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosNaming_Name_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNaming::BindingType _tao_enumerator);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNaming::BindingType &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::Binding &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::Binding &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_CosNaming_BindingList_H_
#define _TAO_CDR_OP_CosNaming_BindingList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Naming_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNaming::BindingList &_tao_sequence);
TAO_Naming_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNaming::BindingList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_CosNaming_BindingList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContext_ptr );
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContext_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNaming::NamingContext::NotFoundReason _tao_enumerator);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNaming::NamingContext::NotFoundReason &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContext::NotFound &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContext::NotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContext::CannotProceed &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContext::CannotProceed &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContext::InvalidName &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContext::InvalidName &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContext::AlreadyBound &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContext::AlreadyBound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContext::NotEmpty &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContext::NotEmpty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::BindingIterator_ptr );
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::BindingIterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContextExt_ptr );
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContextExt_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Naming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosNaming::NamingContextExt::InvalidAddress &);
TAO_Naming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosNaming::NamingContextExt::InvalidAddress &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "CosNamingC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

