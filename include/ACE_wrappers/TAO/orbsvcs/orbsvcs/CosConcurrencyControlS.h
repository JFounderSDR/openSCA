// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:460

#ifndef _TAO_IDL_COSCONCURRENCYCONTROLS_GJEVHA_H_
#define _TAO_IDL_COSCONCURRENCYCONTROLS_GJEVHA_H_


#include "CosConcurrencyControlC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

#include /**/ "orbsvcs/Concurrency/concurrency_skel_export.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Concurrency_Skel_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class SArg_Traits< ::CosConcurrencyControl::lock_mode>
    : public
        Basic_SArg_Traits_T<
            ::CosConcurrencyControl::lock_mode,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSCONCURRENCYCONTROL_LOCKSET__SARG_TRAITS_)
#define _COSCONCURRENCYCONTROL_LOCKSET__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::CosConcurrencyControl::LockSet>
    : public
        Object_SArg_Traits_T<
            ::CosConcurrencyControl::LockSet_ptr,
            ::CosConcurrencyControl::LockSet_var,
            ::CosConcurrencyControl::LockSet_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSCONCURRENCYCONTROL_LOCKSETFACTORY__SARG_TRAITS_)
#define _COSCONCURRENCYCONTROL_LOCKSETFACTORY__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::CosConcurrencyControl::LockSetFactory>
    : public
        Object_SArg_Traits_T<
            ::CosConcurrencyControl::LockSetFactory_ptr,
            ::CosConcurrencyControl::LockSetFactory_var,
            ::CosConcurrencyControl::LockSetFactory_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_sh.cpp:41

namespace POA_CosConcurrencyControl
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:78

  class LockSet;
  typedef LockSet *LockSet_ptr;

  class TAO_Concurrency_Skel_Export LockSet
    : public virtual PortableServer::ServantBase
  {
  protected:
    LockSet (void);
  
  public:
    /// Useful for template programming.
    typedef ::CosConcurrencyControl::LockSet _stub_type;
    typedef ::CosConcurrencyControl::LockSet_ptr _stub_ptr_type;
    typedef ::CosConcurrencyControl::LockSet_var _stub_var_type;

    LockSet (const LockSet& rhs);
    virtual ~LockSet (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::CosConcurrencyControl::LockSet *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual void lock (
      ::CosConcurrencyControl::lock_mode mode) = 0;

    static void lock_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::CORBA::Boolean try_lock (
      ::CosConcurrencyControl::lock_mode mode) = 0;

    static void try_lock_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual void unlock (
      ::CosConcurrencyControl::lock_mode mode) = 0;

    static void unlock_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual void change_mode (
      ::CosConcurrencyControl::lock_mode held_mode,
      ::CosConcurrencyControl::lock_mode new_mode) = 0;

    static void change_mode_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:78

  class LockSetFactory;
  typedef LockSetFactory *LockSetFactory_ptr;

  class TAO_Concurrency_Skel_Export LockSetFactory
    : public virtual PortableServer::ServantBase
  {
  protected:
    LockSetFactory (void);
  
  public:
    /// Useful for template programming.
    typedef ::CosConcurrencyControl::LockSetFactory _stub_type;
    typedef ::CosConcurrencyControl::LockSetFactory_ptr _stub_ptr_type;
    typedef ::CosConcurrencyControl::LockSetFactory_var _stub_var_type;

    LockSetFactory (const LockSetFactory& rhs);
    virtual ~LockSetFactory (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::CosConcurrencyControl::LockSetFactory *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::CosConcurrencyControl::LockSet_ptr create (
      void) = 0;

    static void create_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::CosConcurrencyControl::LockSet_ptr create_related (
      ::CosConcurrencyControl::LockSet_ptr which) = 0;

    static void create_related_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_sh.cpp:72

} // module CosConcurrencyControl

TAO_END_VERSIONED_NAMESPACE_DECL


#if defined (__ACE_INLINE__)
#include "CosConcurrencyControlS.inl"
#endif /* defined INLINE */

#endif /* ifndef */

