// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosEventCommC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosEventCommC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosEventComm::Disconnected::Disconnected (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosEventComm/Disconnected:1.0",
        "Disconnected"
      )
{
}

CosEventComm::Disconnected::~Disconnected (void)
{
}

CosEventComm::Disconnected::Disconnected (const ::CosEventComm::Disconnected &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosEventComm::Disconnected&
CosEventComm::Disconnected::operator= (const ::CosEventComm::Disconnected &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosEventComm::Disconnected::_tao_any_destructor (void *_tao_void_pointer)
{
  Disconnected *_tao_tmp_pointer =
    static_cast<Disconnected *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosEventComm::Disconnected *
CosEventComm::Disconnected::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Disconnected *> (_tao_excp);
}

const CosEventComm::Disconnected *
CosEventComm::Disconnected::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Disconnected *> (_tao_excp);
}

::CORBA::Exception *CosEventComm::Disconnected::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosEventComm::Disconnected, 0);
  return retval;
}

::CORBA::Exception *
CosEventComm::Disconnected::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosEventComm::Disconnected (*this),
      0
    );
  return result;
}

void CosEventComm::Disconnected::_raise (void) const
{
  throw *this;
}

void CosEventComm::Disconnected::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosEventComm::Disconnected::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosEventComm::Disconnected::_tao_type (void) const
{
  return ::CosEventComm::_tc_Disconnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosEventComm_Disconnected = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosEventComm_Disconnected (
  ::CORBA::tk_except,
  "IDL:omg.org/CosEventComm/Disconnected:1.0",
  "Disconnected",
  _tao_fields_CosEventComm_Disconnected,
  0);


namespace CosEventComm
{
  ::CORBA::TypeCode_ptr const _tc_Disconnected =
    &_tao_tc_CosEventComm_Disconnected;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventComm::PushConsumer.

CosEventComm::PushConsumer_ptr
TAO::Objref_Traits<CosEventComm::PushConsumer>::duplicate (
    CosEventComm::PushConsumer_ptr p)
{
  return CosEventComm::PushConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventComm::PushConsumer>::release (
    CosEventComm::PushConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosEventComm::PushConsumer_ptr
TAO::Objref_Traits<CosEventComm::PushConsumer>::nil (void)
{
  return CosEventComm::PushConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventComm::PushConsumer>::marshal (
    const CosEventComm::PushConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventComm::PushConsumer::push (
  const ::CORBA::Any & data)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PushConsumer_Proxy_Broker_ == 0)
    {
      CosEventComm_PushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Any>::in_arg_val _tao_data (data);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_data
    };

  static TAO::Exception_Data
  _tao_CosEventComm_PushConsumer_push_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventComm/Disconnected:1.0",
        CosEventComm::Disconnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventComm::_tc_Disconnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "push",
      4,
      this->the_TAO_PushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventComm_PushConsumer_push_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventComm::PushConsumer::disconnect_push_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PushConsumer_Proxy_Broker_ == 0)
    {
      CosEventComm_PushConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_push_consumer",
      24,
      this->the_TAO_PushConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosEventComm::PushConsumer::PushConsumer (void)
 : the_TAO_PushConsumer_Proxy_Broker_ (0)
{
  this->CosEventComm_PushConsumer_setup_collocation ();
}

void
CosEventComm::PushConsumer::CosEventComm_PushConsumer_setup_collocation ()
{
  if (::CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PushConsumer_Proxy_Broker_ =
        ::CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventComm::PushConsumer::~PushConsumer (void)
{}

void 
CosEventComm::PushConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  PushConsumer *_tao_tmp_pointer =
    static_cast<PushConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventComm::PushConsumer_ptr
CosEventComm::PushConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PushConsumer:1.0",
        CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PushConsumer_ptr
CosEventComm::PushConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PushConsumer:1.0",
        CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PushConsumer_ptr
CosEventComm::PushConsumer::_nil (void)
{
  return 0;
}

CosEventComm::PushConsumer_ptr
CosEventComm::PushConsumer::_duplicate (PushConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventComm::PushConsumer::_tao_release (PushConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventComm::PushConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventComm::PushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventComm/PushConsumer:1.0";
}

::CORBA::Boolean
CosEventComm::PushConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventComm_PushConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventComm/PushConsumer:1.0",
    "PushConsumer");
  

namespace CosEventComm
{
  ::CORBA::TypeCode_ptr const _tc_PushConsumer =
    &_tao_tc_CosEventComm_PushConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventComm::PushSupplier.

CosEventComm::PushSupplier_ptr
TAO::Objref_Traits<CosEventComm::PushSupplier>::duplicate (
    CosEventComm::PushSupplier_ptr p)
{
  return CosEventComm::PushSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventComm::PushSupplier>::release (
    CosEventComm::PushSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosEventComm::PushSupplier_ptr
TAO::Objref_Traits<CosEventComm::PushSupplier>::nil (void)
{
  return CosEventComm::PushSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventComm::PushSupplier>::marshal (
    const CosEventComm::PushSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventComm::PushSupplier::disconnect_push_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PushSupplier_Proxy_Broker_ == 0)
    {
      CosEventComm_PushSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_push_supplier",
      24,
      this->the_TAO_PushSupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosEventComm::PushSupplier::PushSupplier (void)
 : the_TAO_PushSupplier_Proxy_Broker_ (0)
{
  this->CosEventComm_PushSupplier_setup_collocation ();
}

void
CosEventComm::PushSupplier::CosEventComm_PushSupplier_setup_collocation ()
{
  if (::CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PushSupplier_Proxy_Broker_ =
        ::CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventComm::PushSupplier::~PushSupplier (void)
{}

void 
CosEventComm::PushSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  PushSupplier *_tao_tmp_pointer =
    static_cast<PushSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventComm::PushSupplier_ptr
CosEventComm::PushSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PushSupplier:1.0",
        CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PushSupplier_ptr
CosEventComm::PushSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PushSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PushSupplier:1.0",
        CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PushSupplier_ptr
CosEventComm::PushSupplier::_nil (void)
{
  return 0;
}

CosEventComm::PushSupplier_ptr
CosEventComm::PushSupplier::_duplicate (PushSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventComm::PushSupplier::_tao_release (PushSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventComm::PushSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventComm::PushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventComm/PushSupplier:1.0";
}

::CORBA::Boolean
CosEventComm::PushSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventComm_PushSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventComm/PushSupplier:1.0",
    "PushSupplier");
  

namespace CosEventComm
{
  ::CORBA::TypeCode_ptr const _tc_PushSupplier =
    &_tao_tc_CosEventComm_PushSupplier;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventComm::PullConsumer.

CosEventComm::PullConsumer_ptr
TAO::Objref_Traits<CosEventComm::PullConsumer>::duplicate (
    CosEventComm::PullConsumer_ptr p)
{
  return CosEventComm::PullConsumer::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventComm::PullConsumer>::release (
    CosEventComm::PullConsumer_ptr p)
{
  ::CORBA::release (p);
}

CosEventComm::PullConsumer_ptr
TAO::Objref_Traits<CosEventComm::PullConsumer>::nil (void)
{
  return CosEventComm::PullConsumer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventComm::PullConsumer>::marshal (
    const CosEventComm::PullConsumer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventComm::PullConsumer::disconnect_pull_consumer (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PullConsumer_Proxy_Broker_ == 0)
    {
      CosEventComm_PullConsumer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_pull_consumer",
      24,
      this->the_TAO_PullConsumer_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosEventComm::PullConsumer::PullConsumer (void)
 : the_TAO_PullConsumer_Proxy_Broker_ (0)
{
  this->CosEventComm_PullConsumer_setup_collocation ();
}

void
CosEventComm::PullConsumer::CosEventComm_PullConsumer_setup_collocation ()
{
  if (::CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PullConsumer_Proxy_Broker_ =
        ::CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventComm::PullConsumer::~PullConsumer (void)
{}

void 
CosEventComm::PullConsumer::_tao_any_destructor (void *_tao_void_pointer)
{
  PullConsumer *_tao_tmp_pointer =
    static_cast<PullConsumer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventComm::PullConsumer_ptr
CosEventComm::PullConsumer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PullConsumer>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PullConsumer:1.0",
        CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PullConsumer_ptr
CosEventComm::PullConsumer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PullConsumer>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PullConsumer:1.0",
        CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PullConsumer_ptr
CosEventComm::PullConsumer::_nil (void)
{
  return 0;
}

CosEventComm::PullConsumer_ptr
CosEventComm::PullConsumer::_duplicate (PullConsumer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventComm::PullConsumer::_tao_release (PullConsumer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventComm::PullConsumer::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PullConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventComm::PullConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventComm/PullConsumer:1.0";
}

::CORBA::Boolean
CosEventComm::PullConsumer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventComm_PullConsumer (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventComm/PullConsumer:1.0",
    "PullConsumer");
  

namespace CosEventComm
{
  ::CORBA::TypeCode_ptr const _tc_PullConsumer =
    &_tao_tc_CosEventComm_PullConsumer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosEventComm::PullSupplier.

CosEventComm::PullSupplier_ptr
TAO::Objref_Traits<CosEventComm::PullSupplier>::duplicate (
    CosEventComm::PullSupplier_ptr p)
{
  return CosEventComm::PullSupplier::_duplicate (p);
}

void
TAO::Objref_Traits<CosEventComm::PullSupplier>::release (
    CosEventComm::PullSupplier_ptr p)
{
  ::CORBA::release (p);
}

CosEventComm::PullSupplier_ptr
TAO::Objref_Traits<CosEventComm::PullSupplier>::nil (void)
{
  return CosEventComm::PullSupplier::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosEventComm::PullSupplier>::marshal (
    const CosEventComm::PullSupplier_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Any *
CosEventComm::PullSupplier::pull (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PullSupplier_Proxy_Broker_ == 0)
    {
      CosEventComm_PullSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosEventComm_PullSupplier_pull_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventComm/Disconnected:1.0",
        CosEventComm::Disconnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventComm::_tc_Disconnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "pull",
      4,
      this->the_TAO_PullSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventComm_PullSupplier_pull_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Any *
CosEventComm::PullSupplier::try_pull (
  ::CORBA::Boolean_out has_event)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PullSupplier_Proxy_Broker_ == 0)
    {
      CosEventComm_PullSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Any>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::out_arg_val _tao_has_event (has_event);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_has_event
    };

  static TAO::Exception_Data
  _tao_CosEventComm_PullSupplier_try_pull_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosEventComm/Disconnected:1.0",
        CosEventComm::Disconnected::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosEventComm::_tc_Disconnected
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "try_pull",
      8,
      this->the_TAO_PullSupplier_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosEventComm_PullSupplier_try_pull_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosEventComm::PullSupplier::disconnect_pull_supplier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_PullSupplier_Proxy_Broker_ == 0)
    {
      CosEventComm_PullSupplier_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disconnect_pull_supplier",
      24,
      this->the_TAO_PullSupplier_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

CosEventComm::PullSupplier::PullSupplier (void)
 : the_TAO_PullSupplier_Proxy_Broker_ (0)
{
  this->CosEventComm_PullSupplier_setup_collocation ();
}

void
CosEventComm::PullSupplier::CosEventComm_PullSupplier_setup_collocation ()
{
  if (::CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_PullSupplier_Proxy_Broker_ =
        ::CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosEventComm::PullSupplier::~PullSupplier (void)
{}

void 
CosEventComm::PullSupplier::_tao_any_destructor (void *_tao_void_pointer)
{
  PullSupplier *_tao_tmp_pointer =
    static_cast<PullSupplier *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosEventComm::PullSupplier_ptr
CosEventComm::PullSupplier::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PullSupplier>::narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PullSupplier:1.0",
        CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PullSupplier_ptr
CosEventComm::PullSupplier::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<PullSupplier>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosEventComm/PullSupplier:1.0",
        CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

CosEventComm::PullSupplier_ptr
CosEventComm::PullSupplier::_nil (void)
{
  return 0;
}

CosEventComm::PullSupplier_ptr
CosEventComm::PullSupplier::_duplicate (PullSupplier_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosEventComm::PullSupplier::_tao_release (PullSupplier_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosEventComm::PullSupplier::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosEventComm::PullSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosEventComm/PullSupplier:1.0";
}

::CORBA::Boolean
CosEventComm::PullSupplier::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosEventComm_PullSupplier (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosEventComm/PullSupplier:1.0",
    "PullSupplier");
  

namespace CosEventComm
{
  ::CORBA::TypeCode_ptr const _tc_PullSupplier =
    &_tao_tc_CosEventComm_PullSupplier;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosEventComm::Disconnected>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosEventComm::Disconnected &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosEventComm::Disconnected>::insert_copy (
        _tao_any,
        ::CosEventComm::Disconnected::_tao_any_destructor,
        ::CosEventComm::_tc_Disconnected,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosEventComm::Disconnected *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosEventComm::Disconnected>::insert (
        _tao_any,
        ::CosEventComm::Disconnected::_tao_any_destructor,
        ::CosEventComm::_tc_Disconnected,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosEventComm::Disconnected *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosEventComm::Disconnected *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosEventComm::Disconnected *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosEventComm::Disconnected>::extract (
          _tao_any,
          ::CosEventComm::Disconnected::_tao_any_destructor,
          ::CosEventComm::_tc_Disconnected,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosEventComm::Disconnected &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosEventComm::Disconnected>::insert_copy (
      _tao_any,
      CosEventComm::Disconnected::_tao_any_destructor,
      CosEventComm::_tc_Disconnected,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::Disconnected *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosEventComm::Disconnected>::insert (
      _tao_any,
      CosEventComm::Disconnected::_tao_any_destructor,
      CosEventComm::_tc_Disconnected,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventComm::Disconnected *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosEventComm::Disconnected *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosEventComm::Disconnected *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosEventComm::Disconnected>::extract (
        _tao_any,
        CosEventComm::Disconnected::_tao_any_destructor,
        CosEventComm::_tc_Disconnected,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventComm::PushConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushConsumer_ptr _tao_elem)
  {
    PushConsumer_ptr _tao_objptr =
      PushConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PushConsumer>::insert (
        _tao_any,
        PushConsumer::_tao_any_destructor,
        _tc_PushConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PushConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PushConsumer>::extract (
          _tao_any,
          PushConsumer::_tao_any_destructor,
          _tc_PushConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PushConsumer_ptr _tao_elem)
{
  CosEventComm::PushConsumer_ptr _tao_objptr =
    CosEventComm::PushConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PushConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventComm::PushConsumer>::insert (
      _tao_any,
      CosEventComm::PushConsumer::_tao_any_destructor,
      CosEventComm::_tc_PushConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventComm::PushConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventComm::PushConsumer>::extract (
        _tao_any,
        CosEventComm::PushConsumer::_tao_any_destructor,
        CosEventComm::_tc_PushConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventComm::PushSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushSupplier_ptr _tao_elem)
  {
    PushSupplier_ptr _tao_objptr =
      PushSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PushSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PushSupplier>::insert (
        _tao_any,
        PushSupplier::_tao_any_destructor,
        _tc_PushSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PushSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PushSupplier>::extract (
          _tao_any,
          PushSupplier::_tao_any_destructor,
          _tc_PushSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PushSupplier_ptr _tao_elem)
{
  CosEventComm::PushSupplier_ptr _tao_objptr =
    CosEventComm::PushSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PushSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventComm::PushSupplier>::insert (
      _tao_any,
      CosEventComm::PushSupplier::_tao_any_destructor,
      CosEventComm::_tc_PushSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventComm::PushSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventComm::PushSupplier>::extract (
        _tao_any,
        CosEventComm::PushSupplier::_tao_any_destructor,
        CosEventComm::_tc_PushSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventComm::PullConsumer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PullConsumer_ptr _tao_elem)
  {
    PullConsumer_ptr _tao_objptr =
      PullConsumer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PullConsumer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PullConsumer>::insert (
        _tao_any,
        PullConsumer::_tao_any_destructor,
        _tc_PullConsumer,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PullConsumer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PullConsumer>::extract (
          _tao_any,
          PullConsumer::_tao_any_destructor,
          _tc_PullConsumer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PullConsumer_ptr _tao_elem)
{
  CosEventComm::PullConsumer_ptr _tao_objptr =
    CosEventComm::PullConsumer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PullConsumer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventComm::PullConsumer>::insert (
      _tao_any,
      CosEventComm::PullConsumer::_tao_any_destructor,
      CosEventComm::_tc_PullConsumer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventComm::PullConsumer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventComm::PullConsumer>::extract (
        _tao_any,
        CosEventComm::PullConsumer::_tao_any_destructor,
        CosEventComm::_tc_PullConsumer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosEventComm::PullSupplier>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PullSupplier_ptr _tao_elem)
  {
    PullSupplier_ptr _tao_objptr =
      PullSupplier::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PullSupplier_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PullSupplier>::insert (
        _tao_any,
        PullSupplier::_tao_any_destructor,
        _tc_PullSupplier,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PullSupplier_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PullSupplier>::extract (
          _tao_any,
          PullSupplier::_tao_any_destructor,
          _tc_PullSupplier,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PullSupplier_ptr _tao_elem)
{
  CosEventComm::PullSupplier_ptr _tao_objptr =
    CosEventComm::PullSupplier::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosEventComm::PullSupplier_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosEventComm::PullSupplier>::insert (
      _tao_any,
      CosEventComm::PullSupplier::_tao_any_destructor,
      CosEventComm::_tc_PullSupplier,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosEventComm::PullSupplier_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosEventComm::PullSupplier>::extract (
        _tao_any,
        CosEventComm::PullSupplier::_tao_any_destructor,
        CosEventComm::_tc_PullSupplier,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventComm::Disconnected &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosEventComm::Disconnected&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventComm::PushConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventComm::PushConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventComm::PushConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventComm::PushSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventComm::PushSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventComm::PushSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventComm::PullConsumer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventComm::PullConsumer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventComm::PullConsumer RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosEventComm::PullSupplier_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosEventComm::PullSupplier_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosEventComm::PullSupplier RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


