// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FTRTC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FTRTC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FTRT_TransactionDepth (
    ::CORBA::tk_alias,
    "IDL:FTRT/TransactionDepth:1.0",
    "TransactionDepth",
    &CORBA::_tc_long);
  

namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_TransactionDepth =
    &_tao_tc_FTRT_TransactionDepth;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FTRT_SequenceNumber (
    ::CORBA::tk_alias,
    "IDL:FTRT/SequenceNumber:1.0",
    "SequenceNumber",
    &CORBA::_tc_ulong);
  

namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_SequenceNumber =
    &_tao_tc_FTRT_SequenceNumber;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FTRT_FTTransactionDepthServiceContext[] =
      {
        { "transaction_depth", &FTRT::_tc_TransactionDepth }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FTRT_FTTransactionDepthServiceContext (
  ::CORBA::tk_struct,
  "IDL:FTRT/FTTransactionDepthServiceContext:1.0",
  "FTTransactionDepthServiceContext",
  _tao_fields_FTRT_FTTransactionDepthServiceContext,
  1);


namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_FTTransactionDepthServiceContext =
    &_tao_tc_FTRT_FTTransactionDepthServiceContext;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FTRT::FTTransactionDepthServiceContext::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FTTransactionDepthServiceContext *_tao_tmp_pointer =
    static_cast<FTTransactionDepthServiceContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FTRT_FTSequenceNumberServiceContext[] =
      {
        { "sequence_number", &FTRT::_tc_SequenceNumber }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FTRT_FTSequenceNumberServiceContext (
  ::CORBA::tk_struct,
  "IDL:FTRT/FTSequenceNumberServiceContext:1.0",
  "FTSequenceNumberServiceContext",
  _tao_fields_FTRT_FTSequenceNumberServiceContext,
  1);


namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_FTSequenceNumberServiceContext =
    &_tao_tc_FTRT_FTSequenceNumberServiceContext;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FTRT::FTSequenceNumberServiceContext::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FTSequenceNumberServiceContext *_tao_tmp_pointer =
    static_cast<FTSequenceNumberServiceContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FTRT_FTForwardServiceContext[] =
      {
        { "forward", &CORBA::_tc_Object }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FTRT_FTForwardServiceContext (
  ::CORBA::tk_struct,
  "IDL:FTRT/FTForwardServiceContext:1.0",
  "FTForwardServiceContext",
  _tao_fields_FTRT_FTForwardServiceContext,
  1);


namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_FTForwardServiceContext =
    &_tao_tc_FTRT_FTForwardServiceContext;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FTRT::FTForwardServiceContext::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FTForwardServiceContext *_tao_tmp_pointer =
    static_cast<FTForwardServiceContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

FTRT::OutOfSequence::OutOfSequence (
    ::FTRT::SequenceNumber _tao_current)
  : ::CORBA::UserException (
        "IDL:FTRT/OutOfSequence:1.0",
        "OutOfSequence"
      )
{
  this->current = _tao_current;
}



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FTRT::OutOfSequence::OutOfSequence (void)
  : ::CORBA::UserException (
        "IDL:FTRT/OutOfSequence:1.0",
        "OutOfSequence"
      )
{
}

FTRT::OutOfSequence::~OutOfSequence (void)
{
}

FTRT::OutOfSequence::OutOfSequence (const ::FTRT::OutOfSequence &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->current = _tao_excp.current;
}

FTRT::OutOfSequence&
FTRT::OutOfSequence::operator= (const ::FTRT::OutOfSequence &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->current = _tao_excp.current;
  return *this;
}

void FTRT::OutOfSequence::_tao_any_destructor (void *_tao_void_pointer)
{
  OutOfSequence *_tao_tmp_pointer =
    static_cast<OutOfSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FTRT::OutOfSequence *
FTRT::OutOfSequence::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<OutOfSequence *> (_tao_excp);
}

const FTRT::OutOfSequence *
FTRT::OutOfSequence::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const OutOfSequence *> (_tao_excp);
}

::CORBA::Exception *FTRT::OutOfSequence::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FTRT::OutOfSequence, 0);
  return retval;
}

::CORBA::Exception *
FTRT::OutOfSequence::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FTRT::OutOfSequence (*this),
      0
    );
  return result;
}

void FTRT::OutOfSequence::_raise (void) const
{
  throw *this;
}

void FTRT::OutOfSequence::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FTRT::OutOfSequence::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FTRT::OutOfSequence::_tao_type (void) const
{
  return ::FTRT::_tc_OutOfSequence;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FTRT_OutOfSequence[] =
      {
        { "current", &FTRT::_tc_SequenceNumber }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FTRT_OutOfSequence (
  ::CORBA::tk_except,
  "IDL:FTRT/OutOfSequence:1.0",
  "OutOfSequence",
  _tao_fields_FTRT_OutOfSequence,
  1);


namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_OutOfSequence =
    &_tao_tc_FTRT_OutOfSequence;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FTRT::TransactionDepthTooHigh::TransactionDepthTooHigh (void)
  : ::CORBA::UserException (
        "IDL:FTRT/TransactionDepthTooHigh:1.0",
        "TransactionDepthTooHigh"
      )
{
}

FTRT::TransactionDepthTooHigh::~TransactionDepthTooHigh (void)
{
}

FTRT::TransactionDepthTooHigh::TransactionDepthTooHigh (const ::FTRT::TransactionDepthTooHigh &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FTRT::TransactionDepthTooHigh&
FTRT::TransactionDepthTooHigh::operator= (const ::FTRT::TransactionDepthTooHigh &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FTRT::TransactionDepthTooHigh::_tao_any_destructor (void *_tao_void_pointer)
{
  TransactionDepthTooHigh *_tao_tmp_pointer =
    static_cast<TransactionDepthTooHigh *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FTRT::TransactionDepthTooHigh *
FTRT::TransactionDepthTooHigh::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<TransactionDepthTooHigh *> (_tao_excp);
}

const FTRT::TransactionDepthTooHigh *
FTRT::TransactionDepthTooHigh::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const TransactionDepthTooHigh *> (_tao_excp);
}

::CORBA::Exception *FTRT::TransactionDepthTooHigh::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FTRT::TransactionDepthTooHigh, 0);
  return retval;
}

::CORBA::Exception *
FTRT::TransactionDepthTooHigh::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FTRT::TransactionDepthTooHigh (*this),
      0
    );
  return result;
}

void FTRT::TransactionDepthTooHigh::_raise (void) const
{
  throw *this;
}

void FTRT::TransactionDepthTooHigh::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FTRT::TransactionDepthTooHigh::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FTRT::TransactionDepthTooHigh::_tao_type (void) const
{
  return ::FTRT::_tc_TransactionDepthTooHigh;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FTRT_TransactionDepthTooHigh = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FTRT_TransactionDepthTooHigh (
  ::CORBA::tk_except,
  "IDL:FTRT/TransactionDepthTooHigh:1.0",
  "TransactionDepthTooHigh",
  _tao_fields_FTRT_TransactionDepthTooHigh,
  0);


namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_TransactionDepthTooHigh =
    &_tao_tc_FTRT_TransactionDepthTooHigh;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FTRT_STATE_CS_)
#define _FTRT_STATE_CS_

FTRT::State::State (void)
{}

FTRT::State::State (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

FTRT::State::State (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

FTRT::State::State (
    const State &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

FTRT::State::~State (void)
{}

void FTRT::State::_tao_any_destructor (
    void * _tao_void_pointer)
{
  State * _tao_tmp_pointer =
    static_cast<State *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FTRT_State_GUARD
#define _TAO_TYPECODE_FTRT_State_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FTRT_State_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FTRT_State_0 =
        &FTRT_State_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FTRT_State_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FTRT_State (
    ::CORBA::tk_alias,
    "IDL:FTRT/State:1.0",
    "State",
    &TAO::TypeCode::tc_FTRT_State_0);
  

namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_State =
    &_tao_tc_FTRT_State;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FTRT::InvalidUpdate::InvalidUpdate (void)
  : ::CORBA::UserException (
        "IDL:FTRT/InvalidUpdate:1.0",
        "InvalidUpdate"
      )
{
}

FTRT::InvalidUpdate::~InvalidUpdate (void)
{
}

FTRT::InvalidUpdate::InvalidUpdate (const ::FTRT::InvalidUpdate &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FTRT::InvalidUpdate&
FTRT::InvalidUpdate::operator= (const ::FTRT::InvalidUpdate &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FTRT::InvalidUpdate::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidUpdate *_tao_tmp_pointer =
    static_cast<InvalidUpdate *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FTRT::InvalidUpdate *
FTRT::InvalidUpdate::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidUpdate *> (_tao_excp);
}

const FTRT::InvalidUpdate *
FTRT::InvalidUpdate::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidUpdate *> (_tao_excp);
}

::CORBA::Exception *FTRT::InvalidUpdate::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FTRT::InvalidUpdate, 0);
  return retval;
}

::CORBA::Exception *
FTRT::InvalidUpdate::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FTRT::InvalidUpdate (*this),
      0
    );
  return result;
}

void FTRT::InvalidUpdate::_raise (void) const
{
  throw *this;
}

void FTRT::InvalidUpdate::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FTRT::InvalidUpdate::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FTRT::InvalidUpdate::_tao_type (void) const
{
  return ::FTRT::_tc_InvalidUpdate;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FTRT_InvalidUpdate = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FTRT_InvalidUpdate (
  ::CORBA::tk_except,
  "IDL:FTRT/InvalidUpdate:1.0",
  "InvalidUpdate",
  _tao_fields_FTRT_InvalidUpdate,
  0);


namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_InvalidUpdate =
    &_tao_tc_FTRT_InvalidUpdate;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FTRT::Updateable.

FTRT::Updateable_ptr
TAO::Objref_Traits<FTRT::Updateable>::duplicate (
    FTRT::Updateable_ptr p)
{
  return FTRT::Updateable::_duplicate (p);
}

void
TAO::Objref_Traits<FTRT::Updateable>::release (
    FTRT::Updateable_ptr p)
{
  ::CORBA::release (p);
}

FTRT::Updateable_ptr
TAO::Objref_Traits<FTRT::Updateable>::nil (void)
{
  return FTRT::Updateable::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FTRT::Updateable>::marshal (
    const FTRT::Updateable_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FTRT__TAO_Updateable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FTRT::Updateable::set_update (
  const ::FTRT::State & s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Updateable_Proxy_Broker_ == 0)
    {
      FTRT_Updateable_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FTRT::State>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  static TAO::Exception_Data
  _tao_FTRT_Updateable_set_update_exceptiondata [] = 
    {
      {
        "IDL:FTRT/InvalidUpdate:1.0",
        FTRT::InvalidUpdate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_InvalidUpdate
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:FTRT/OutOfSequence:1.0",
        FTRT::OutOfSequence::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_OutOfSequence
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:FTRT/TransactionDepthTooHigh:1.0",
        FTRT::TransactionDepthTooHigh::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_TransactionDepthTooHigh
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_update",
      10,
      this->the_TAO_Updateable_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FTRT_Updateable_set_update_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FTRT::Updateable::oneway_set_update (
  const ::FTRT::State & s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Updateable_Proxy_Broker_ == 0)
    {
      FTRT_Updateable_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FTRT::State>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_s
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "oneway_set_update",
      17,
      this->the_TAO_Updateable_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/ami_cs.cpp:61

void
FTRT::Updateable::sendc_set_update (
  ::FTRT::AMI_UpdateableHandler_ptr ami_handler,
  const ::FTRT::State & s)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Updateable_Proxy_Broker_ == 0)
    {
      FTRT_Updateable_setup_collocation ();
    }
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FTRT::State>::in_arg_val _tao_s (s);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_s
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_update",
      10,
      this->the_TAO_Updateable_Proxy_Broker_
    );

  _tao_call.invoke (
      ami_handler,
      &FTRT::AMI_UpdateableHandler::set_update_reply_stub
    );
}

FTRT::Updateable::Updateable (void)
 : the_TAO_Updateable_Proxy_Broker_ (0)
{
  this->FTRT_Updateable_setup_collocation ();
}

void
FTRT::Updateable::FTRT_Updateable_setup_collocation ()
{
  if (::FTRT__TAO_Updateable_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Updateable_Proxy_Broker_ =
        ::FTRT__TAO_Updateable_Proxy_Broker_Factory_function_pointer (this);
    }
}

FTRT::Updateable::~Updateable (void)
{}

void 
FTRT::Updateable::_tao_any_destructor (void *_tao_void_pointer)
{
  Updateable *_tao_tmp_pointer =
    static_cast<Updateable *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FTRT::Updateable_ptr
FTRT::Updateable::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Updateable>::narrow (
        _tao_objref,
        "IDL:FTRT/Updateable:1.0",
        FTRT__TAO_Updateable_Proxy_Broker_Factory_function_pointer
      );
}

FTRT::Updateable_ptr
FTRT::Updateable::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Updateable>::unchecked_narrow (
        _tao_objref,
        "IDL:FTRT/Updateable:1.0",
        FTRT__TAO_Updateable_Proxy_Broker_Factory_function_pointer
      );
}

FTRT::Updateable_ptr
FTRT::Updateable::_nil (void)
{
  return 0;
}

FTRT::Updateable_ptr
FTRT::Updateable::_duplicate (Updateable_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FTRT::Updateable::_tao_release (Updateable_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FTRT::Updateable::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:FTRT/Updateable:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FTRT::Updateable::_interface_repository_id (void) const
{
  return "IDL:FTRT/Updateable:1.0";
}

::CORBA::Boolean
FTRT::Updateable::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FTRT_Updateable (
    ::CORBA::tk_objref,
    "IDL:FTRT/Updateable:1.0",
    "Updateable");
  

namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_Updateable =
    &_tao_tc_FTRT_Updateable;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FTRT::AMI_UpdateableHandler.

FTRT::AMI_UpdateableHandler_ptr
TAO::Objref_Traits<FTRT::AMI_UpdateableHandler>::duplicate (
    FTRT::AMI_UpdateableHandler_ptr p)
{
  return FTRT::AMI_UpdateableHandler::_duplicate (p);
}

void
TAO::Objref_Traits<FTRT::AMI_UpdateableHandler>::release (
    FTRT::AMI_UpdateableHandler_ptr p)
{
  ::CORBA::release (p);
}

FTRT::AMI_UpdateableHandler_ptr
TAO::Objref_Traits<FTRT::AMI_UpdateableHandler>::nil (void)
{
  return FTRT::AMI_UpdateableHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FTRT::AMI_UpdateableHandler>::marshal (
    const FTRT::AMI_UpdateableHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FTRT__TAO_AMI_UpdateableHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FTRT::AMI_UpdateableHandler::set_update (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AMI_UpdateableHandler_Proxy_Broker_ == 0)
    {
      FTRT_AMI_UpdateableHandler_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_FTRT_AMI_UpdateableHandler_set_update_exceptiondata [] = 
    {
      {
        "IDL:FTRT/InvalidUpdate:1.0",
        FTRT::InvalidUpdate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_InvalidUpdate
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:FTRT/OutOfSequence:1.0",
        FTRT::OutOfSequence::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_OutOfSequence
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:FTRT/TransactionDepthTooHigh:1.0",
        FTRT::TransactionDepthTooHigh::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_TransactionDepthTooHigh
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_update",
      10,
      this->the_TAO_AMI_UpdateableHandler_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FTRT_AMI_UpdateableHandler_set_update_exceptiondata,
      3
    );
}

void
FTRT::AMI_UpdateableHandler::set_update_reply_stub (
  TAO_InputCDR &_tao_in, 
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FTRT::AMI_UpdateableHandler_var _tao_reply_handler_object =
    FTRT::AMI_UpdateableHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_update (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] = 
      {
        {
          "IDL:FTRT/InvalidUpdate:1.0",
          FTRT::InvalidUpdate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , FTRT::_tc_InvalidUpdate
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:FTRT/OutOfSequence:1.0",
          FTRT::OutOfSequence::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , FTRT::_tc_OutOfSequence
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:FTRT/TransactionDepthTooHigh:1.0",
          FTRT::TransactionDepthTooHigh::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , FTRT::_tc_TransactionDepthTooHigh
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 3;

      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0
        );
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ())
          );
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_update_excep (
          exception_holder_var
        );
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FTRT::AMI_UpdateableHandler::set_update_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AMI_UpdateableHandler_Proxy_Broker_ == 0)
    {
      FTRT_AMI_UpdateableHandler_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_FTRT_AMI_UpdateableHandler_set_update_excep_exceptiondata [] = 
    {
      {
        "IDL:FTRT/InvalidUpdate:1.0",
        FTRT::InvalidUpdate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_InvalidUpdate
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:FTRT/OutOfSequence:1.0",
        FTRT::OutOfSequence::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_OutOfSequence
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:FTRT/TransactionDepthTooHigh:1.0",
        FTRT::TransactionDepthTooHigh::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FTRT::_tc_TransactionDepthTooHigh
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_update_excep",
      16,
      this->the_TAO_AMI_UpdateableHandler_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FTRT_AMI_UpdateableHandler_set_update_excep_exceptiondata,
      3
    );
}

FTRT::AMI_UpdateableHandler::AMI_UpdateableHandler (void)
 : the_TAO_AMI_UpdateableHandler_Proxy_Broker_ (0)
{
  this->FTRT_AMI_UpdateableHandler_setup_collocation ();
}

void
FTRT::AMI_UpdateableHandler::FTRT_AMI_UpdateableHandler_setup_collocation ()
{
  if (::FTRT__TAO_AMI_UpdateableHandler_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_AMI_UpdateableHandler_Proxy_Broker_ =
        ::FTRT__TAO_AMI_UpdateableHandler_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->Messaging_ReplyHandler_setup_collocation ();
}

FTRT::AMI_UpdateableHandler::~AMI_UpdateableHandler (void)
{}

void 
FTRT::AMI_UpdateableHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_UpdateableHandler *_tao_tmp_pointer =
    static_cast<AMI_UpdateableHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FTRT::AMI_UpdateableHandler_ptr
FTRT::AMI_UpdateableHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_UpdateableHandler>::narrow (
        _tao_objref,
        "IDL:FTRT/AMI_UpdateableHandler:1.0",
        FTRT__TAO_AMI_UpdateableHandler_Proxy_Broker_Factory_function_pointer
      );
}

FTRT::AMI_UpdateableHandler_ptr
FTRT::AMI_UpdateableHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_UpdateableHandler>::unchecked_narrow (
        _tao_objref,
        "IDL:FTRT/AMI_UpdateableHandler:1.0",
        FTRT__TAO_AMI_UpdateableHandler_Proxy_Broker_Factory_function_pointer
      );
}

FTRT::AMI_UpdateableHandler_ptr
FTRT::AMI_UpdateableHandler::_nil (void)
{
  return 0;
}

FTRT::AMI_UpdateableHandler_ptr
FTRT::AMI_UpdateableHandler::_duplicate (AMI_UpdateableHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FTRT::AMI_UpdateableHandler::_tao_release (AMI_UpdateableHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FTRT::AMI_UpdateableHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FTRT/AMI_UpdateableHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FTRT::AMI_UpdateableHandler::_interface_repository_id (void) const
{
  return "IDL:FTRT/AMI_UpdateableHandler:1.0";
}

::CORBA::Boolean
FTRT::AMI_UpdateableHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FTRT_AMI_UpdateableHandler (
    ::CORBA::tk_objref,
    "IDL:FTRT/AMI_UpdateableHandler:1.0",
    "AMI_UpdateableHandler");
  

namespace FTRT
{
  ::CORBA::TypeCode_ptr const _tc_AMI_UpdateableHandler =
    &_tao_tc_FTRT_AMI_UpdateableHandler;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::FTTransactionDepthServiceContext &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FTRT::FTTransactionDepthServiceContext *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FTRT::FTTransactionDepthServiceContext>::insert_copy (
          _tao_any,
          ::FTRT::FTTransactionDepthServiceContext::_tao_any_destructor,
          ::FTRT::_tc_FTTransactionDepthServiceContext,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FTRT::FTTransactionDepthServiceContext *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::FTTransactionDepthServiceContext>::insert (
        _tao_any,
        ::FTRT::FTTransactionDepthServiceContext::_tao_any_destructor,
        ::FTRT::_tc_FTTransactionDepthServiceContext,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::FTTransactionDepthServiceContext *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::FTTransactionDepthServiceContext *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::FTTransactionDepthServiceContext *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::FTTransactionDepthServiceContext>::extract (
          _tao_any,
          ::FTRT::FTTransactionDepthServiceContext::_tao_any_destructor,
          ::FTRT::_tc_FTTransactionDepthServiceContext,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::FTTransactionDepthServiceContext &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FTRT::FTTransactionDepthServiceContext *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FTRT::FTTransactionDepthServiceContext>::insert_copy (
        _tao_any,
        FTRT::FTTransactionDepthServiceContext::_tao_any_destructor,
        FTRT::_tc_FTTransactionDepthServiceContext,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::FTTransactionDepthServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::FTTransactionDepthServiceContext>::insert (
      _tao_any,
      FTRT::FTTransactionDepthServiceContext::_tao_any_destructor,
      FTRT::_tc_FTTransactionDepthServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::FTTransactionDepthServiceContext *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::FTTransactionDepthServiceContext *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::FTTransactionDepthServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::FTTransactionDepthServiceContext>::extract (
        _tao_any,
        FTRT::FTTransactionDepthServiceContext::_tao_any_destructor,
        FTRT::_tc_FTTransactionDepthServiceContext,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::FTSequenceNumberServiceContext &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FTRT::FTSequenceNumberServiceContext *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FTRT::FTSequenceNumberServiceContext>::insert_copy (
          _tao_any,
          ::FTRT::FTSequenceNumberServiceContext::_tao_any_destructor,
          ::FTRT::_tc_FTSequenceNumberServiceContext,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FTRT::FTSequenceNumberServiceContext *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::FTSequenceNumberServiceContext>::insert (
        _tao_any,
        ::FTRT::FTSequenceNumberServiceContext::_tao_any_destructor,
        ::FTRT::_tc_FTSequenceNumberServiceContext,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::FTSequenceNumberServiceContext *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::FTSequenceNumberServiceContext *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::FTSequenceNumberServiceContext *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::FTSequenceNumberServiceContext>::extract (
          _tao_any,
          ::FTRT::FTSequenceNumberServiceContext::_tao_any_destructor,
          ::FTRT::_tc_FTSequenceNumberServiceContext,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::FTSequenceNumberServiceContext &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FTRT::FTSequenceNumberServiceContext *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FTRT::FTSequenceNumberServiceContext>::insert_copy (
        _tao_any,
        FTRT::FTSequenceNumberServiceContext::_tao_any_destructor,
        FTRT::_tc_FTSequenceNumberServiceContext,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::FTSequenceNumberServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::FTSequenceNumberServiceContext>::insert (
      _tao_any,
      FTRT::FTSequenceNumberServiceContext::_tao_any_destructor,
      FTRT::_tc_FTSequenceNumberServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::FTSequenceNumberServiceContext *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::FTSequenceNumberServiceContext *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::FTSequenceNumberServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::FTSequenceNumberServiceContext>::extract (
        _tao_any,
        FTRT::FTSequenceNumberServiceContext::_tao_any_destructor,
        FTRT::_tc_FTSequenceNumberServiceContext,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::FTForwardServiceContext &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FTRT::FTForwardServiceContext *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FTRT::FTForwardServiceContext>::insert_copy (
          _tao_any,
          ::FTRT::FTForwardServiceContext::_tao_any_destructor,
          ::FTRT::_tc_FTForwardServiceContext,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FTRT::FTForwardServiceContext *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::FTForwardServiceContext>::insert (
        _tao_any,
        ::FTRT::FTForwardServiceContext::_tao_any_destructor,
        ::FTRT::_tc_FTForwardServiceContext,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::FTForwardServiceContext *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::FTForwardServiceContext *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::FTForwardServiceContext *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::FTForwardServiceContext>::extract (
          _tao_any,
          ::FTRT::FTForwardServiceContext::_tao_any_destructor,
          ::FTRT::_tc_FTForwardServiceContext,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::FTForwardServiceContext &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FTRT::FTForwardServiceContext *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FTRT::FTForwardServiceContext>::insert_copy (
        _tao_any,
        FTRT::FTForwardServiceContext::_tao_any_destructor,
        FTRT::_tc_FTForwardServiceContext,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::FTForwardServiceContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::FTForwardServiceContext>::insert (
      _tao_any,
      FTRT::FTForwardServiceContext::_tao_any_destructor,
      FTRT::_tc_FTForwardServiceContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::FTForwardServiceContext *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::FTForwardServiceContext *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::FTForwardServiceContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::FTForwardServiceContext>::extract (
        _tao_any,
        FTRT::FTForwardServiceContext::_tao_any_destructor,
        FTRT::_tc_FTForwardServiceContext,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FTRT::OutOfSequence>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::OutOfSequence &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::OutOfSequence>::insert_copy (
        _tao_any,
        ::FTRT::OutOfSequence::_tao_any_destructor,
        ::FTRT::_tc_OutOfSequence,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FTRT::OutOfSequence *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::OutOfSequence>::insert (
        _tao_any,
        ::FTRT::OutOfSequence::_tao_any_destructor,
        ::FTRT::_tc_OutOfSequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::OutOfSequence *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::OutOfSequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::OutOfSequence *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::OutOfSequence>::extract (
          _tao_any,
          ::FTRT::OutOfSequence::_tao_any_destructor,
          ::FTRT::_tc_OutOfSequence,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::OutOfSequence &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::OutOfSequence>::insert_copy (
      _tao_any,
      FTRT::OutOfSequence::_tao_any_destructor,
      FTRT::_tc_OutOfSequence,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::OutOfSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::OutOfSequence>::insert (
      _tao_any,
      FTRT::OutOfSequence::_tao_any_destructor,
      FTRT::_tc_OutOfSequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::OutOfSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::OutOfSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::OutOfSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::OutOfSequence>::extract (
        _tao_any,
        FTRT::OutOfSequence::_tao_any_destructor,
        FTRT::_tc_OutOfSequence,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FTRT::TransactionDepthTooHigh>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::TransactionDepthTooHigh &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::TransactionDepthTooHigh>::insert_copy (
        _tao_any,
        ::FTRT::TransactionDepthTooHigh::_tao_any_destructor,
        ::FTRT::_tc_TransactionDepthTooHigh,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FTRT::TransactionDepthTooHigh *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::TransactionDepthTooHigh>::insert (
        _tao_any,
        ::FTRT::TransactionDepthTooHigh::_tao_any_destructor,
        ::FTRT::_tc_TransactionDepthTooHigh,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::TransactionDepthTooHigh *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::TransactionDepthTooHigh *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::TransactionDepthTooHigh *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::TransactionDepthTooHigh>::extract (
          _tao_any,
          ::FTRT::TransactionDepthTooHigh::_tao_any_destructor,
          ::FTRT::_tc_TransactionDepthTooHigh,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::TransactionDepthTooHigh &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::TransactionDepthTooHigh>::insert_copy (
      _tao_any,
      FTRT::TransactionDepthTooHigh::_tao_any_destructor,
      FTRT::_tc_TransactionDepthTooHigh,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::TransactionDepthTooHigh *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::TransactionDepthTooHigh>::insert (
      _tao_any,
      FTRT::TransactionDepthTooHigh::_tao_any_destructor,
      FTRT::_tc_TransactionDepthTooHigh,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::TransactionDepthTooHigh *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::TransactionDepthTooHigh *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::TransactionDepthTooHigh *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::TransactionDepthTooHigh>::extract (
        _tao_any,
        FTRT::TransactionDepthTooHigh::_tao_any_destructor,
        FTRT::_tc_TransactionDepthTooHigh,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::State &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FTRT::State *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FTRT::State>::insert_copy (
          _tao_any,
          ::FTRT::State::_tao_any_destructor,
          ::FTRT::_tc_State,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FTRT::State *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::State>::insert (
        _tao_any,
        ::FTRT::State::_tao_any_destructor,
        ::FTRT::_tc_State,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::State *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::State *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::State *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::State>::extract (
          _tao_any,
          ::FTRT::State::_tao_any_destructor,
          ::FTRT::_tc_State,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::State &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FTRT::State *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FTRT::State>::insert_copy (
        _tao_any,
        FTRT::State::_tao_any_destructor,
        FTRT::_tc_State,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::State *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::State>::insert (
      _tao_any,
      FTRT::State::_tao_any_destructor,
      FTRT::_tc_State,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::State *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::State *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::State *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::State>::extract (
        _tao_any,
        FTRT::State::_tao_any_destructor,
        FTRT::_tc_State,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FTRT::InvalidUpdate>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FTRT::InvalidUpdate &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::InvalidUpdate>::insert_copy (
        _tao_any,
        ::FTRT::InvalidUpdate::_tao_any_destructor,
        ::FTRT::_tc_InvalidUpdate,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FTRT::InvalidUpdate *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FTRT::InvalidUpdate>::insert (
        _tao_any,
        ::FTRT::InvalidUpdate::_tao_any_destructor,
        ::FTRT::_tc_InvalidUpdate,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FTRT::InvalidUpdate *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FTRT::InvalidUpdate *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FTRT::InvalidUpdate *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FTRT::InvalidUpdate>::extract (
          _tao_any,
          ::FTRT::InvalidUpdate::_tao_any_destructor,
          ::FTRT::_tc_InvalidUpdate,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FTRT::InvalidUpdate &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::InvalidUpdate>::insert_copy (
      _tao_any,
      FTRT::InvalidUpdate::_tao_any_destructor,
      FTRT::_tc_InvalidUpdate,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::InvalidUpdate *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FTRT::InvalidUpdate>::insert (
      _tao_any,
      FTRT::InvalidUpdate::_tao_any_destructor,
      FTRT::_tc_InvalidUpdate,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::InvalidUpdate *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FTRT::InvalidUpdate *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FTRT::InvalidUpdate *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FTRT::InvalidUpdate>::extract (
        _tao_any,
        FTRT::InvalidUpdate::_tao_any_destructor,
        FTRT::_tc_InvalidUpdate,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FTRT::Updateable>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Updateable_ptr _tao_elem)
  {
    Updateable_ptr _tao_objptr =
      Updateable::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Updateable_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Updateable>::insert (
        _tao_any,
        Updateable::_tao_any_destructor,
        _tc_Updateable,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Updateable_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Updateable>::extract (
          _tao_any,
          Updateable::_tao_any_destructor,
          _tc_Updateable,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::Updateable_ptr _tao_elem)
{
  FTRT::Updateable_ptr _tao_objptr =
    FTRT::Updateable::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::Updateable_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FTRT::Updateable>::insert (
      _tao_any,
      FTRT::Updateable::_tao_any_destructor,
      FTRT::_tc_Updateable,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::Updateable_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FTRT::Updateable>::extract (
        _tao_any,
        FTRT::Updateable::_tao_any_destructor,
        FTRT::_tc_Updateable,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FTRT::AMI_UpdateableHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FTRT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_UpdateableHandler_ptr _tao_elem)
  {
    AMI_UpdateableHandler_ptr _tao_objptr =
      AMI_UpdateableHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_UpdateableHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_UpdateableHandler>::insert (
        _tao_any,
        AMI_UpdateableHandler::_tao_any_destructor,
        _tc_AMI_UpdateableHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_UpdateableHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_UpdateableHandler>::extract (
          _tao_any,
          AMI_UpdateableHandler::_tao_any_destructor,
          _tc_AMI_UpdateableHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::AMI_UpdateableHandler_ptr _tao_elem)
{
  FTRT::AMI_UpdateableHandler_ptr _tao_objptr =
    FTRT::AMI_UpdateableHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FTRT::AMI_UpdateableHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FTRT::AMI_UpdateableHandler>::insert (
      _tao_any,
      FTRT::AMI_UpdateableHandler::_tao_any_destructor,
      FTRT::_tc_AMI_UpdateableHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FTRT::AMI_UpdateableHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FTRT::AMI_UpdateableHandler>::extract (
        _tao_any,
        FTRT::AMI_UpdateableHandler::_tao_any_destructor,
        FTRT::_tc_AMI_UpdateableHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::FTTransactionDepthServiceContext &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.transaction_depth);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::FTTransactionDepthServiceContext &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.transaction_depth);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::FTSequenceNumberServiceContext &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.sequence_number);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::FTSequenceNumberServiceContext &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.sequence_number);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::FTForwardServiceContext &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.forward.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::FTForwardServiceContext &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.forward.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::OutOfSequence &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.current)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::OutOfSequence &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.current)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::TransactionDepthTooHigh &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FTRT::TransactionDepthTooHigh&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FTRT_State_CPP_
#define _TAO_CDR_OP_FTRT_State_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::State &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::State &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FTRT_State_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::InvalidUpdate &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FTRT::InvalidUpdate&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::Updateable_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::Updateable_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FTRT::Updateable RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FTRT__TAO_Updateable_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FTRT::AMI_UpdateableHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FTRT::AMI_UpdateableHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FTRT::AMI_UpdateableHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FTRT__TAO_AMI_UpdateableHandler_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


