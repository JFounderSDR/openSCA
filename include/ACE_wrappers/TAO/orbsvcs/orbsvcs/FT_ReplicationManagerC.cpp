// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FT_ReplicationManagerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FT_ReplicationManagerC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FT::InterfaceNotFound::InterfaceNotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/FT/InterfaceNotFound:1.0",
        "InterfaceNotFound"
      )
{
}

FT::InterfaceNotFound::~InterfaceNotFound (void)
{
}

FT::InterfaceNotFound::InterfaceNotFound (const ::FT::InterfaceNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FT::InterfaceNotFound&
FT::InterfaceNotFound::operator= (const ::FT::InterfaceNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FT::InterfaceNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  InterfaceNotFound *_tao_tmp_pointer =
    static_cast<InterfaceNotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FT::InterfaceNotFound *
FT::InterfaceNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InterfaceNotFound *> (_tao_excp);
}

const FT::InterfaceNotFound *
FT::InterfaceNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InterfaceNotFound *> (_tao_excp);
}

::CORBA::Exception *FT::InterfaceNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FT::InterfaceNotFound, 0);
  return retval;
}

::CORBA::Exception *
FT::InterfaceNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FT::InterfaceNotFound (*this),
      0
    );
  return result;
}

void FT::InterfaceNotFound::_raise (void) const
{
  throw *this;
}

void FT::InterfaceNotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FT::InterfaceNotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FT::InterfaceNotFound::_tao_type (void) const
{
  return ::FT::_tc_InterfaceNotFound;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FT_InterfaceNotFound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FT_InterfaceNotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/FT/InterfaceNotFound:1.0",
  "InterfaceNotFound",
  _tao_fields_FT_InterfaceNotFound,
  0);


namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_InterfaceNotFound =
    &_tao_tc_FT_InterfaceNotFound;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FT::ReplicationManager.

FT::ReplicationManager_ptr
TAO::Objref_Traits<FT::ReplicationManager>::duplicate (
    FT::ReplicationManager_ptr p)
{
  return FT::ReplicationManager::_duplicate (p);
}

void
TAO::Objref_Traits<FT::ReplicationManager>::release (
    FT::ReplicationManager_ptr p)
{
  ::CORBA::release (p);
}

FT::ReplicationManager_ptr
TAO::Objref_Traits<FT::ReplicationManager>::nil (void)
{
  return FT::ReplicationManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT::ReplicationManager>::marshal (
    const FT::ReplicationManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FT::ReplicationManager::register_fault_notifier (
  ::FT::FaultNotifier_ptr fault_notifier)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReplicationManager_Proxy_Broker_ == 0)
    {
      FT_ReplicationManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FT::FaultNotifier>::in_arg_val _tao_fault_notifier (fault_notifier);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_fault_notifier
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "register_fault_notifier",
      23,
      this->the_TAO_ReplicationManager_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::FT::FaultNotifier_ptr
FT::ReplicationManager::get_fault_notifier (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReplicationManager_Proxy_Broker_ == 0)
    {
      FT_ReplicationManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::FT::FaultNotifier>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_FT_ReplicationManager_get_fault_notifier_exceptiondata [] = 
    {
      {
        "IDL:omg.org/FT/InterfaceNotFound:1.0",
        FT::InterfaceNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FT::_tc_InterfaceNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_fault_notifier",
      18,
      this->the_TAO_ReplicationManager_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FT_ReplicationManager_get_fault_notifier_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::PortableGroup::FactoryRegistry_ptr
FT::ReplicationManager::get_factory_registry (
  const ::PortableGroup::Criteria & selection_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReplicationManager_Proxy_Broker_ == 0)
    {
      FT_ReplicationManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::PortableGroup::FactoryRegistry>::ret_val _tao_retval;
  TAO::Arg_Traits< ::PortableGroup::Criteria>::in_arg_val _tao_selection_criteria (selection_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_selection_criteria
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_factory_registry",
      20,
      this->the_TAO_ReplicationManager_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FT::ReplicationManager::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReplicationManager_Proxy_Broker_ == 0)
    {
      FT_ReplicationManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      this->the_TAO_ReplicationManager_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

FT::ReplicationManager::ReplicationManager (void)
 : the_TAO_ReplicationManager_Proxy_Broker_ (0)
{
  this->FT_ReplicationManager_setup_collocation ();
}

void
FT::ReplicationManager::FT_ReplicationManager_setup_collocation ()
{
  if (::FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ReplicationManager_Proxy_Broker_ =
        ::FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->PortableGroup_PropertyManager_setup_collocation ();
  this->FT_FTObjectGroupManager_setup_collocation ();
  this->PortableGroup_GenericFactory_setup_collocation ();
}

FT::ReplicationManager::~ReplicationManager (void)
{}

void 
FT::ReplicationManager::_tao_any_destructor (void *_tao_void_pointer)
{
  ReplicationManager *_tao_tmp_pointer =
    static_cast<ReplicationManager *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT::ReplicationManager_ptr
FT::ReplicationManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ReplicationManager>::narrow (
        _tao_objref,
        "IDL:omg.org/FT/ReplicationManager:1.0",
        FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer
      );
}

FT::ReplicationManager_ptr
FT::ReplicationManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ReplicationManager>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/FT/ReplicationManager:1.0",
        FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer
      );
}

FT::ReplicationManager_ptr
FT::ReplicationManager::_nil (void)
{
  return 0;
}

FT::ReplicationManager_ptr
FT::ReplicationManager::_duplicate (ReplicationManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FT::ReplicationManager::_tao_release (ReplicationManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT::ReplicationManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/PropertyManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/FTObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/GenericFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/FT/ReplicationManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT::ReplicationManager::_interface_repository_id (void) const
{
  return "IDL:omg.org/FT/ReplicationManager:1.0";
}

::CORBA::Boolean
FT::ReplicationManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_ReplicationManager (
    ::CORBA::tk_objref,
    "IDL:omg.org/FT/ReplicationManager:1.0",
    "ReplicationManager");
  

namespace FT
{
  ::CORBA::TypeCode_ptr const _tc_ReplicationManager =
    &_tao_tc_FT_ReplicationManager;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FT::InterfaceNotFound>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT::InterfaceNotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::InterfaceNotFound>::insert_copy (
        _tao_any,
        ::FT::InterfaceNotFound::_tao_any_destructor,
        ::FT::_tc_InterfaceNotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT::InterfaceNotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FT::InterfaceNotFound>::insert (
        _tao_any,
        ::FT::InterfaceNotFound::_tao_any_destructor,
        ::FT::_tc_InterfaceNotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FT::InterfaceNotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FT::InterfaceNotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT::InterfaceNotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FT::InterfaceNotFound>::extract (
          _tao_any,
          ::FT::InterfaceNotFound::_tao_any_destructor,
          ::FT::_tc_InterfaceNotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT::InterfaceNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::InterfaceNotFound>::insert_copy (
      _tao_any,
      FT::InterfaceNotFound::_tao_any_destructor,
      FT::_tc_InterfaceNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT::InterfaceNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FT::InterfaceNotFound>::insert (
      _tao_any,
      FT::InterfaceNotFound::_tao_any_destructor,
      FT::_tc_InterfaceNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::InterfaceNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FT::InterfaceNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT::InterfaceNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FT::InterfaceNotFound>::extract (
        _tao_any,
        FT::InterfaceNotFound::_tao_any_destructor,
        FT::_tc_InterfaceNotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT::ReplicationManager>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ReplicationManager_ptr _tao_elem)
  {
    ReplicationManager_ptr _tao_objptr =
      ReplicationManager::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ReplicationManager_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ReplicationManager>::insert (
        _tao_any,
        ReplicationManager::_tao_any_destructor,
        _tc_ReplicationManager,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ReplicationManager_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ReplicationManager>::extract (
          _tao_any,
          ReplicationManager::_tao_any_destructor,
          _tc_ReplicationManager,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::ReplicationManager_ptr _tao_elem)
{
  FT::ReplicationManager_ptr _tao_objptr =
    FT::ReplicationManager::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT::ReplicationManager_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT::ReplicationManager>::insert (
      _tao_any,
      FT::ReplicationManager::_tao_any_destructor,
      FT::_tc_ReplicationManager,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT::ReplicationManager_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT::ReplicationManager>::extract (
        _tao_any,
        FT::ReplicationManager::_tao_any_destructor,
        FT::_tc_ReplicationManager,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::InterfaceNotFound &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FT::InterfaceNotFound&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::ReplicationManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::ReplicationManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT::ReplicationManager RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FT__TAO_ReplicationManager_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


