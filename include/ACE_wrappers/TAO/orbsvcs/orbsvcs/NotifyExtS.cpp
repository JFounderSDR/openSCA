// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_NOTIFYEXTS_MWJZZV_CPP_
#define _TAO_IDL_NOTIFYEXTS_MWJZZV_CPP_


#include "NotifyExtS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "NotifyExtS.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyExt_ReconnectionCallback_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyExt_ReconnectionCallback_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyExt_ReconnectionCallback_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
      0,  5, 19, 19, 19,  5, 19, 19, 19, 19,
     19, 19, 19, 19,  0, 19,  0, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyExt_ReconnectionCallback_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 18,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyExt::ReconnectionCallback::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"reconnect", &POA_NotifyExt::ReconnectionCallback::reconnect_skel, 0},
      {"_component", &POA_NotifyExt::ReconnectionCallback::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_NotifyExt::ReconnectionCallback::_non_existent_skel, 0},
      {"_repository_id", &POA_NotifyExt::ReconnectionCallback::_repository_id_skel, 0},
      {"_interface", &POA_NotifyExt::ReconnectionCallback::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"is_alive", &POA_NotifyExt::ReconnectionCallback::is_alive_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_NotifyExt_ReconnectionCallback_Perfect_Hash_OpTable tao_NotifyExt_ReconnectionCallback_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer = 
    NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyExt::ReconnectionCallback::ReconnectionCallback (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyExt_ReconnectionCallback_optable;
}

POA_NotifyExt::ReconnectionCallback::ReconnectionCallback (const ReconnectionCallback& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_NotifyExt::ReconnectionCallback::~ReconnectionCallback (void)
{
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class reconnect_ReconnectionCallback
    : public TAO::Upcall_Command
  {
  public:
    inline reconnect_ReconnectionCallback (
      POA_NotifyExt::ReconnectionCallback * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->reconnect (
        arg_1);
    }
  
  private:
    POA_NotifyExt::ReconnectionCallback * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::ReconnectionCallback::reconnect_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_new_connection;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_new_connection
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);

  reconnect_ReconnectionCallback command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class is_alive_ReconnectionCallback
    : public TAO::Upcall_Command
  {
  public:
    inline is_alive_ReconnectionCallback (
      POA_NotifyExt::ReconnectionCallback * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->is_alive ();
    }
  
  private:
    POA_NotifyExt::ReconnectionCallback * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::ReconnectionCallback::is_alive_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);

  is_alive_ReconnectionCallback command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_ReconnectionCallback_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_ReconnectionCallback_Upcall_Command (
      POA_NotifyExt::ReconnectionCallback * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyExt::ReconnectionCallback * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionCallback::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);
  
  _is_a_ReconnectionCallback_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_ReconnectionCallback_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_ReconnectionCallback_Upcall_Command (
      POA_NotifyExt::ReconnectionCallback * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyExt::ReconnectionCallback * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionCallback::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);
  
  _non_existent_ReconnectionCallback_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_ReconnectionCallback_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_ReconnectionCallback_Upcall_Command (
      POA_NotifyExt::ReconnectionCallback * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyExt::ReconnectionCallback * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionCallback::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);
  
  _repository_id_ReconnectionCallback_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyExt::ReconnectionCallback::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_ReconnectionCallback_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_ReconnectionCallback_Upcall_Command (
      POA_NotifyExt::ReconnectionCallback * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyExt::ReconnectionCallback * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionCallback::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionCallback * const impl =
    static_cast<POA_NotifyExt::ReconnectionCallback *> (servant);
  
  _get_component_ReconnectionCallback_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyExt::ReconnectionCallback::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionCallback:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyExt::ReconnectionCallback::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/ReconnectionCallback:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyExt::ReconnectionCallback::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyExt::ReconnectionCallback *
POA_NotifyExt::ReconnectionCallback::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyExt::ReconnectionCallback STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyExt_ReconnectionRegistry_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyExt_ReconnectionRegistry_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyExt_ReconnectionRegistry_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20, 20,
      0,  5, 20, 20, 20,  5, 20,  0, 20, 20,
     20, 20, 20, 20,  0, 20,  0,  0, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyExt_ReconnectionRegistry_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 19,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyExt::ReconnectionRegistry::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_NotifyExt::ReconnectionRegistry::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_NotifyExt::ReconnectionRegistry::_non_existent_skel, 0},
      {"_repository_id", &POA_NotifyExt::ReconnectionRegistry::_repository_id_skel, 0},
      {"_interface", &POA_NotifyExt::ReconnectionRegistry::_interface_skel, 0},
      {"",0,0},
      {"register_callback", &POA_NotifyExt::ReconnectionRegistry::register_callback_skel, 0},
      {"is_alive", &POA_NotifyExt::ReconnectionRegistry::is_alive_skel, 0},
      {"unregister_callback", &POA_NotifyExt::ReconnectionRegistry::unregister_callback_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_NotifyExt_ReconnectionRegistry_Perfect_Hash_OpTable tao_NotifyExt_ReconnectionRegistry_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer = 
    NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyExt::ReconnectionRegistry::ReconnectionRegistry (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyExt_ReconnectionRegistry_optable;
}

POA_NotifyExt::ReconnectionRegistry::ReconnectionRegistry (const ReconnectionRegistry& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_NotifyExt::ReconnectionRegistry::~ReconnectionRegistry (void)
{
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class register_callback_ReconnectionRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline register_callback_ReconnectionRegistry (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::NotifyExt::ReconnectionCallback>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::NotifyExt::ReconnectionCallback> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->register_callback (
          arg_1);
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::ReconnectionRegistry::register_callback_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< ::NotifyExt::ReconnectionCallback>::in_arg_val _tao_reconection;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_reconection
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);

  register_callback_ReconnectionRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_callback_ReconnectionRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_callback_ReconnectionRegistry (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_callback (
        arg_1);
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::ReconnectionRegistry::unregister_callback_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);

  unregister_callback_ReconnectionRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class is_alive_ReconnectionRegistry
    : public TAO::Upcall_Command
  {
  public:
    inline is_alive_ReconnectionRegistry (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->is_alive ();
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::ReconnectionRegistry::is_alive_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);

  is_alive_ReconnectionRegistry command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_ReconnectionRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_ReconnectionRegistry_Upcall_Command (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionRegistry::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);
  
  _is_a_ReconnectionRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_ReconnectionRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_ReconnectionRegistry_Upcall_Command (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionRegistry::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);
  
  _non_existent_ReconnectionRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_ReconnectionRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_ReconnectionRegistry_Upcall_Command (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionRegistry::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);
  
  _repository_id_ReconnectionRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyExt::ReconnectionRegistry::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_ReconnectionRegistry_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_ReconnectionRegistry_Upcall_Command (
      POA_NotifyExt::ReconnectionRegistry * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyExt::ReconnectionRegistry * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ReconnectionRegistry::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ReconnectionRegistry * const impl =
    static_cast<POA_NotifyExt::ReconnectionRegistry *> (servant);
  
  _get_component_ReconnectionRegistry_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyExt::ReconnectionRegistry::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionRegistry:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyExt::ReconnectionRegistry::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/ReconnectionRegistry:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyExt::ReconnectionRegistry::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyExt::ReconnectionRegistry *
POA_NotifyExt::ReconnectionRegistry::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyExt::ReconnectionRegistry STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyExt_EventChannelFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyExt_EventChannelFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyExt_EventChannelFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25,  0, 25,  0, 25, 10,
      0,  5, 25,  0, 25, 10, 25,  0,  0, 25,
     25, 25, 25, 25,  5,  5,  0,  0, 25, 25,
     25,  0, 25, 25, 25, 25, 25, 25,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyExt_EventChannelFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 13,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 19,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 24,
      HASH_VALUE_RANGE = 20,
      DUPLICATES = 0,
      WORDLIST_SIZE = 18
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyExt::EventChannelFactory::_is_a_skel, 0},
      {"",0,0},
      {"destroy", &POA_NotifyExt::EventChannelFactory::destroy_skel, 0},
      {"",0,0},{"",0,0},
      {"_component", &POA_NotifyExt::EventChannelFactory::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_NotifyExt::EventChannelFactory::_non_existent_skel, 0},
      {"_repository_id", &POA_NotifyExt::EventChannelFactory::_repository_id_skel, 0},
      {"_interface", &POA_NotifyExt::EventChannelFactory::_interface_skel, 0},
      {"",0,0},
      {"get_event_channel", &POA_NotifyExt::EventChannelFactory::get_event_channel_skel, 0},
      {"save_topology", &POA_NotifyExt::EventChannelFactory::save_topology_skel, 0},
      {"unregister_callback", &POA_NotifyExt::EventChannelFactory::unregister_callback_skel, 0},
      {"",0,0},
      {"get_all_channels", &POA_NotifyExt::EventChannelFactory::get_all_channels_skel, 0},
      {"register_callback", &POA_NotifyExt::EventChannelFactory::register_callback_skel, 0},
      {"is_alive", &POA_NotifyExt::EventChannelFactory::is_alive_skel, 0},
      {"create_channel", &POA_NotifyExt::EventChannelFactory::create_channel_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_NotifyExt_EventChannelFactory_Perfect_Hash_OpTable tao_NotifyExt_EventChannelFactory_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer = 
    NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyExt::EventChannelFactory::EventChannelFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyExt_EventChannelFactory_optable;
}

POA_NotifyExt::EventChannelFactory::EventChannelFactory (const EventChannelFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotifyChannelAdmin::EventChannelFactory (rhs),
    POA_NotifyExt::ReconnectionRegistry (rhs)
{
}

POA_NotifyExt::EventChannelFactory::~EventChannelFactory (void)
{
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_EventChannelFactory
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_EventChannelFactory (
      POA_NotifyExt::EventChannelFactory * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_NotifyExt::EventChannelFactory * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::EventChannelFactory::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);

  destroy_EventChannelFactory command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class save_topology_EventChannelFactory
    : public TAO::Upcall_Command
  {
  public:
    inline save_topology_EventChannelFactory (
      POA_NotifyExt::EventChannelFactory * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->save_topology ();
    }
  
  private:
    POA_NotifyExt::EventChannelFactory * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::EventChannelFactory::save_topology_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);

  save_topology_EventChannelFactory command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_EventChannelFactory_Upcall_Command (
      POA_NotifyExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::EventChannelFactory::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);
  
  _is_a_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_EventChannelFactory_Upcall_Command (
      POA_NotifyExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::EventChannelFactory::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);
  
  _non_existent_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_EventChannelFactory_Upcall_Command (
      POA_NotifyExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::EventChannelFactory::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);
  
  _repository_id_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyExt::EventChannelFactory::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_EventChannelFactory_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_EventChannelFactory_Upcall_Command (
      POA_NotifyExt::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyExt::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::EventChannelFactory::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::EventChannelFactory * const impl =
    static_cast<POA_NotifyExt::EventChannelFactory *> (servant);
  
  _get_component_EventChannelFactory_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyExt::EventChannelFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionRegistry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/EventChannelFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyExt::EventChannelFactory::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/EventChannelFactory:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyExt::EventChannelFactory::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyExt::EventChannelFactory *
POA_NotifyExt::EventChannelFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyExt::EventChannelFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyExt_ConsumerAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyExt_ConsumerAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyExt_ConsumerAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48,  0, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48,  0, 48, 18, 48, 48,
      0, 26, 48, 25, 48, 48, 48, 48, 10, 48,
     48,  5, 48, 48,  0,  0, 20, 48,  0, 48,
     48, 10, 48, 48, 48, 48, 48, 48,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyExt_ConsumerAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 30,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 42,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 47,
      HASH_VALUE_RANGE = 41,
      DUPLICATES = 7,
      WORDLIST_SIZE = 37
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_NotifyExt::ConsumerAdmin::set_qos_skel, 0},
      {"_get_MyID", &POA_NotifyExt::ConsumerAdmin::_get_MyID_skel, 0},
      {"validate_qos", &POA_NotifyExt::ConsumerAdmin::validate_qos_skel, 0},
      {"remove_filter", &POA_NotifyExt::ConsumerAdmin::remove_filter_skel, 0},
      {"_repository_id", &POA_NotifyExt::ConsumerAdmin::_repository_id_skel, 0},
      {"_get_MyOperator", &POA_NotifyExt::ConsumerAdmin::_get_MyOperator_skel, 0},
      {"destroy", &POA_NotifyExt::ConsumerAdmin::destroy_skel, 0},
      {"remove_all_filters", &POA_NotifyExt::ConsumerAdmin::remove_all_filters_skel, 0},
      {"_get_pull_suppliers", &POA_NotifyExt::ConsumerAdmin::_get_pull_suppliers_skel, 0},
      {"_get_push_suppliers", &POA_NotifyExt::ConsumerAdmin::_get_push_suppliers_skel, 0},
      {"_get_priority_filter", &POA_NotifyExt::ConsumerAdmin::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_NotifyExt::ConsumerAdmin::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_NotifyExt::ConsumerAdmin::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_NotifyExt::ConsumerAdmin::_set_priority_filter_skel, 0},
      {"_is_a", &POA_NotifyExt::ConsumerAdmin::_is_a_skel, 0},
      {"_get_MyChannel", &POA_NotifyExt::ConsumerAdmin::_get_MyChannel_skel, 0},
      {"obtain_push_supplier", &POA_NotifyExt::ConsumerAdmin::obtain_push_supplier_skel, 0},
      {"obtain_pull_supplier", &POA_NotifyExt::ConsumerAdmin::obtain_pull_supplier_skel, 0},
      {"add_filter", &POA_NotifyExt::ConsumerAdmin::add_filter_skel, 0},
      {"_component", &POA_NotifyExt::ConsumerAdmin::_component_skel, 0},
      {"get_qos", &POA_NotifyExt::ConsumerAdmin::get_qos_skel, 0},
      {"_non_existent", &POA_NotifyExt::ConsumerAdmin::_non_existent_skel, 0},
      {"get_filter", &POA_NotifyExt::ConsumerAdmin::get_filter_skel, 0},
      {"_interface", &POA_NotifyExt::ConsumerAdmin::_interface_skel, 0},
      {"obtain_notification_pull_supplier", &POA_NotifyExt::ConsumerAdmin::obtain_notification_pull_supplier_skel, 0},
      {"obtain_notification_push_supplier", &POA_NotifyExt::ConsumerAdmin::obtain_notification_push_supplier_skel, 0},
      {"get_all_filters", &POA_NotifyExt::ConsumerAdmin::get_all_filters_skel, 0},
      {"get_proxy_supplier", &POA_NotifyExt::ConsumerAdmin::get_proxy_supplier_skel, 0},
      {"subscription_change", &POA_NotifyExt::ConsumerAdmin::subscription_change_skel, 0},
      {"obtain_notification_push_supplier_with_qos", &POA_NotifyExt::ConsumerAdmin::obtain_notification_push_supplier_with_qos_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1, -15,  -2,   7,  -1,   8, -17,  -4,   9,  10, 
       11,  12,  -1,  13,  14, -61, -57, -23,  -2,  21,  22, -51, -31,  -2, 
       25,  -1,  26,  -1,  27,  28,  -1,  29,  30,  -1, -59,  -1,  33,  -1, 
       -1,  34,  -1,  35,  -1,  36, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_NotifyExt_ConsumerAdmin_Perfect_Hash_OpTable tao_NotifyExt_ConsumerAdmin_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer = 
    NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyExt::ConsumerAdmin::ConsumerAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyExt_ConsumerAdmin_optable;
}

POA_NotifyExt::ConsumerAdmin::ConsumerAdmin (const ConsumerAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosEventChannelAdmin::ConsumerAdmin (rhs),
    POA_CosNotifyChannelAdmin::ConsumerAdmin (rhs)
{
}

POA_NotifyExt::ConsumerAdmin::~ConsumerAdmin (void)
{
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_notification_push_supplier_with_qos_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_notification_push_supplier_with_qos_ConsumerAdmin (
      POA_NotifyExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxySupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::QoSProperties> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->obtain_notification_push_supplier_with_qos (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_NotifyExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::ConsumerAdmin::obtain_notification_push_supplier_with_qos_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
      CosNotification::_tc_UnsupportedQoS
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;
  TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_initial_qos
    };
  
  static size_t const nargs = 4;

  POA_NotifyExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyExt::ConsumerAdmin *> (servant);

  obtain_notification_push_supplier_with_qos_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_ConsumerAdmin_Upcall_Command (
      POA_NotifyExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ConsumerAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyExt::ConsumerAdmin *> (servant);
  
  _is_a_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_ConsumerAdmin_Upcall_Command (
      POA_NotifyExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ConsumerAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyExt::ConsumerAdmin *> (servant);
  
  _non_existent_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_ConsumerAdmin_Upcall_Command (
      POA_NotifyExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ConsumerAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyExt::ConsumerAdmin *> (servant);
  
  _repository_id_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyExt::ConsumerAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyExt::ConsumerAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_ConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_ConsumerAdmin_Upcall_Command (
      POA_NotifyExt::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyExt::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::ConsumerAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::ConsumerAdmin * const impl =
    static_cast<POA_NotifyExt::ConsumerAdmin *> (servant);
  
  _get_component_ConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyExt::ConsumerAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ConsumerAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyExt::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/ConsumerAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyExt::ConsumerAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyExt::ConsumerAdmin *
POA_NotifyExt::ConsumerAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyExt::ConsumerAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_NotifyExt_SupplierAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_NotifyExt_SupplierAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_NotifyExt_SupplierAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43,  0, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
     43, 43, 43, 43, 43,  0, 43,  1, 43, 43,
      0,  0, 43, 20, 43, 43, 43, 43, 10, 43,
     43,  0, 43, 43,  0,  0, 15, 43,  5, 43,
     43, 15, 43, 43, 43, 43, 43, 43,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_NotifyExt_SupplierAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 26,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 42,
      MIN_HASH_VALUE = 6,
      MAX_HASH_VALUE = 42,
      HASH_VALUE_RANGE = 37,
      DUPLICATES = 4,
      WORDLIST_SIZE = 32
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_NotifyExt::SupplierAdmin::_is_a_skel, 0},
      {"set_qos", &POA_NotifyExt::SupplierAdmin::set_qos_skel, 0},
      {"_get_MyID", &POA_NotifyExt::SupplierAdmin::_get_MyID_skel, 0},
      {"_interface", &POA_NotifyExt::SupplierAdmin::_interface_skel, 0},
      {"add_filter", &POA_NotifyExt::SupplierAdmin::add_filter_skel, 0},
      {"offer_change", &POA_NotifyExt::SupplierAdmin::offer_change_skel, 0},
      {"remove_filter", &POA_NotifyExt::SupplierAdmin::remove_filter_skel, 0},
      {"_repository_id", &POA_NotifyExt::SupplierAdmin::_repository_id_skel, 0},
      {"_get_MyOperator", &POA_NotifyExt::SupplierAdmin::_get_MyOperator_skel, 0},
      {"validate_qos", &POA_NotifyExt::SupplierAdmin::validate_qos_skel, 0},
      {"remove_all_filters", &POA_NotifyExt::SupplierAdmin::remove_all_filters_skel, 0},
      {"_get_pull_consumers", &POA_NotifyExt::SupplierAdmin::_get_pull_consumers_skel, 0},
      {"_get_push_consumers", &POA_NotifyExt::SupplierAdmin::_get_push_consumers_skel, 0},
      {"obtain_push_consumer", &POA_NotifyExt::SupplierAdmin::obtain_push_consumer_skel, 0},
      {"obtain_pull_consumer", &POA_NotifyExt::SupplierAdmin::obtain_pull_consumer_skel, 0},
      {"destroy", &POA_NotifyExt::SupplierAdmin::destroy_skel, 0},
      {"_get_MyChannel", &POA_NotifyExt::SupplierAdmin::_get_MyChannel_skel, 0},
      {"_component", &POA_NotifyExt::SupplierAdmin::_component_skel, 0},
      {"get_qos", &POA_NotifyExt::SupplierAdmin::get_qos_skel, 0},
      {"_non_existent", &POA_NotifyExt::SupplierAdmin::_non_existent_skel, 0},
      {"get_filter", &POA_NotifyExt::SupplierAdmin::get_filter_skel, 0},
      {"obtain_notification_pull_consumer", &POA_NotifyExt::SupplierAdmin::obtain_notification_pull_consumer_skel, 0},
      {"obtain_notification_push_consumer", &POA_NotifyExt::SupplierAdmin::obtain_notification_push_consumer_skel, 0},
      {"get_all_filters", &POA_NotifyExt::SupplierAdmin::get_all_filters_skel, 0},
      {"get_proxy_consumer", &POA_NotifyExt::SupplierAdmin::get_proxy_consumer_skel, 0},
      {"obtain_notification_push_consumer_with_qos", &POA_NotifyExt::SupplierAdmin::obtain_notification_push_consumer_with_qos_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1, -17,  -2, -19,  -2,   6,   7,  -1,   8,   9,  10,  11,  12, 
       13,  14,  -1,  15,  16, -59, -58,  -1,  21,  -1,  22,  23,  -1,  24, 
       25,  -1,  26, -27,  -2, -44,  -1,  29,  -1,  -1,  30,  -1,  -1,  -1, 
       31, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_NotifyExt_SupplierAdmin_Perfect_Hash_OpTable tao_NotifyExt_SupplierAdmin_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer = 
    NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_NotifyExt::SupplierAdmin::SupplierAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_NotifyExt_SupplierAdmin_optable;
}

POA_NotifyExt::SupplierAdmin::SupplierAdmin (const SupplierAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyComm::NotifyPublish (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosEventChannelAdmin::SupplierAdmin (rhs),
    POA_CosNotifyChannelAdmin::SupplierAdmin (rhs)
{
}

POA_NotifyExt::SupplierAdmin::~SupplierAdmin (void)
{
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_notification_push_consumer_with_qos_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_notification_push_consumer_with_qos_SupplierAdmin (
      POA_NotifyExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::QoSProperties> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->obtain_notification_push_consumer_with_qos (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_NotifyExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_NotifyExt::SupplierAdmin::obtain_notification_push_consumer_with_qos_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded,
      CosNotification::_tc_UnsupportedQoS
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;
  TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_initial_qos
    };
  
  static size_t const nargs = 4;

  POA_NotifyExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyExt::SupplierAdmin *> (servant);

  obtain_notification_push_consumer_with_qos_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_SupplierAdmin_Upcall_Command (
      POA_NotifyExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_NotifyExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::SupplierAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_NotifyExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyExt::SupplierAdmin *> (servant);
  
  _is_a_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_SupplierAdmin_Upcall_Command (
      POA_NotifyExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_NotifyExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::SupplierAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyExt::SupplierAdmin *> (servant);
  
  _non_existent_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_SupplierAdmin_Upcall_Command (
      POA_NotifyExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_NotifyExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::SupplierAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyExt::SupplierAdmin *> (servant);
  
  _repository_id_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_NotifyExt::SupplierAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_NotifyExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyExt::SupplierAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_NotifyExt
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_SupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_SupplierAdmin_Upcall_Command (
      POA_NotifyExt::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_NotifyExt::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_NotifyExt::SupplierAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_NotifyExt::SupplierAdmin * const impl =
    static_cast<POA_NotifyExt::SupplierAdmin *> (servant);
  
  _get_component_SupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_NotifyExt::SupplierAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/SupplierAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_NotifyExt::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/SupplierAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_NotifyExt::SupplierAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

NotifyExt::SupplierAdmin *
POA_NotifyExt::SupplierAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::NotifyExt::SupplierAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

