// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_DSLOGADMINC_D6H86U_H_
#define _TAO_IDL_DSLOGADMINC_D6H86U_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Log/log_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/TimeBaseA.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/TimeBaseC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Log_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace DsLogAdmin
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidParam : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager details;
    InvalidParam (void);
    InvalidParam (const InvalidParam &);
    ~InvalidParam (void);

    InvalidParam &operator= (const InvalidParam &);

    static void _tao_any_destructor (void *);

    static InvalidParam *_downcast ( ::CORBA::Exception *);
    static const InvalidParam *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    InvalidParam (
        const char * _tao_details);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidParam;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidThreshold : public ::CORBA::UserException
  {
  public:
    
    InvalidThreshold (void);
    InvalidThreshold (const InvalidThreshold &);
    ~InvalidThreshold (void);

    InvalidThreshold &operator= (const InvalidThreshold &);

    static void _tao_any_destructor (void *);

    static InvalidThreshold *_downcast ( ::CORBA::Exception *);
    static const InvalidThreshold *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidThreshold;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidTime : public ::CORBA::UserException
  {
  public:
    
    InvalidTime (void);
    InvalidTime (const InvalidTime &);
    ~InvalidTime (void);

    InvalidTime &operator= (const InvalidTime &);

    static void _tao_any_destructor (void *);

    static InvalidTime *_downcast ( ::CORBA::Exception *);
    static const InvalidTime *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidTime;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidTimeInterval : public ::CORBA::UserException
  {
  public:
    
    InvalidTimeInterval (void);
    InvalidTimeInterval (const InvalidTimeInterval &);
    ~InvalidTimeInterval (void);

    InvalidTimeInterval &operator= (const InvalidTimeInterval &);

    static void _tao_any_destructor (void *);

    static InvalidTimeInterval *_downcast ( ::CORBA::Exception *);
    static const InvalidTimeInterval *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidTimeInterval;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidMask : public ::CORBA::UserException
  {
  public:
    
    InvalidMask (void);
    InvalidMask (const InvalidMask &);
    ~InvalidMask (void);

    InvalidMask &operator= (const InvalidMask &);

    static void _tao_any_destructor (void *);

    static InvalidMask *_downcast ( ::CORBA::Exception *);
    static const InvalidMask *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidMask;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export LogIdAlreadyExists : public ::CORBA::UserException
  {
  public:
    
    LogIdAlreadyExists (void);
    LogIdAlreadyExists (const LogIdAlreadyExists &);
    ~LogIdAlreadyExists (void);

    LogIdAlreadyExists &operator= (const LogIdAlreadyExists &);

    static void _tao_any_destructor (void *);

    static LogIdAlreadyExists *_downcast ( ::CORBA::Exception *);
    static const LogIdAlreadyExists *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogIdAlreadyExists;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidGrammar : public ::CORBA::UserException
  {
  public:
    
    InvalidGrammar (void);
    InvalidGrammar (const InvalidGrammar &);
    ~InvalidGrammar (void);

    InvalidGrammar &operator= (const InvalidGrammar &);

    static void _tao_any_destructor (void *);

    static InvalidGrammar *_downcast ( ::CORBA::Exception *);
    static const InvalidGrammar *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidGrammar;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidConstraint : public ::CORBA::UserException
  {
  public:
    
    InvalidConstraint (void);
    InvalidConstraint (const InvalidConstraint &);
    ~InvalidConstraint (void);

    InvalidConstraint &operator= (const InvalidConstraint &);

    static void _tao_any_destructor (void *);

    static InvalidConstraint *_downcast ( ::CORBA::Exception *);
    static const InvalidConstraint *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidConstraint;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export LogFull : public ::CORBA::UserException
  {
  public:
    
    ::CORBA::Short n_records_written;
    LogFull (void);
    LogFull (const LogFull &);
    ~LogFull (void);

    LogFull &operator= (const LogFull &);

    static void _tao_any_destructor (void *);

    static LogFull *_downcast ( ::CORBA::Exception *);
    static const LogFull *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    LogFull (
        ::CORBA::Short _tao_n_records_written);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogFull;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export LogOffDuty : public ::CORBA::UserException
  {
  public:
    
    LogOffDuty (void);
    LogOffDuty (const LogOffDuty &);
    ~LogOffDuty (void);

    LogOffDuty &operator= (const LogOffDuty &);

    static void _tao_any_destructor (void *);

    static LogOffDuty *_downcast ( ::CORBA::Exception *);
    static const LogOffDuty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogOffDuty;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export LogLocked : public ::CORBA::UserException
  {
  public:
    
    LogLocked (void);
    LogLocked (const LogLocked &);
    ~LogLocked (void);

    LogLocked &operator= (const LogLocked &);

    static void _tao_any_destructor (void *);

    static LogLocked *_downcast ( ::CORBA::Exception *);
    static const LogLocked *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogLocked;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export LogDisabled : public ::CORBA::UserException
  {
  public:
    
    LogDisabled (void);
    LogDisabled (const LogDisabled &);
    ~LogDisabled (void);

    LogDisabled &operator= (const LogDisabled &);

    static void _tao_any_destructor (void *);

    static LogDisabled *_downcast ( ::CORBA::Exception *);
    static const LogDisabled *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogDisabled;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidRecordId : public ::CORBA::UserException
  {
  public:
    
    InvalidRecordId (void);
    InvalidRecordId (const InvalidRecordId &);
    ~InvalidRecordId (void);

    InvalidRecordId &operator= (const InvalidRecordId &);

    static void _tao_any_destructor (void *);

    static InvalidRecordId *_downcast ( ::CORBA::Exception *);
    static const InvalidRecordId *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidRecordId;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidAttribute : public ::CORBA::UserException
  {
  public:
    
    ::TAO::String_Manager attr_name;
    ::CORBA::Any value;
    InvalidAttribute (void);
    InvalidAttribute (const InvalidAttribute &);
    ~InvalidAttribute (void);

    InvalidAttribute &operator= (const InvalidAttribute &);

    static void _tao_any_destructor (void *);

    static InvalidAttribute *_downcast ( ::CORBA::Exception *);
    static const InvalidAttribute *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    InvalidAttribute (
        const char * _tao_attr_name,
        const ::CORBA::Any & _tao_value);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidAttribute;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export InvalidLogFullAction : public ::CORBA::UserException
  {
  public:
    
    InvalidLogFullAction (void);
    InvalidLogFullAction (const InvalidLogFullAction &);
    ~InvalidLogFullAction (void);

    InvalidLogFullAction &operator= (const InvalidLogFullAction &);

    static void _tao_any_destructor (void *);

    static InvalidLogFullAction *_downcast ( ::CORBA::Exception *);
    static const InvalidLogFullAction *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_InvalidLogFullAction;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::ULong LogId;
  typedef ::CORBA::ULong_out LogId_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogId;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::ULongLong RecordId;
  typedef ::CORBA::ULongLong_out RecordId_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_RecordId;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_RECORDIDLIST_CH_)
#define _DSLOGADMIN_RECORDIDLIST_CH_

  class RecordIdList;

  typedef
    ::TAO_FixedSeq_Var_T<
        RecordIdList
      >
    RecordIdList_var;

  typedef
    ::TAO_Seq_Out_T<
        RecordIdList
      >
    RecordIdList_out;

  class TAO_Log_Export RecordIdList
    : public
        ::TAO::unbounded_value_sequence<
            RecordId
          >
  {
  public:
    RecordIdList (void);
    RecordIdList ( ::CORBA::ULong max);
    RecordIdList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULongLong* buffer, 
      ::CORBA::Boolean release = false);
    RecordIdList (const RecordIdList &);
    virtual ~RecordIdList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RecordIdList_var _var_type;
    typedef RecordIdList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_RecordIdList;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const default_grammar = "EXTENDED_TCL";

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * Constraint;
  typedef ::CORBA::String_var Constraint_var;
  typedef ::CORBA::String_out Constraint_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Constraint;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef TimeBase::TimeT TimeT;
  typedef TimeBase::TimeT_out TimeT_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_TimeT;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct NVPair;

  typedef
    ::TAO_Var_Var_T<
        NVPair
      >
    NVPair_var;
  
  typedef
    ::TAO_Out_T<
        NVPair
      >
    NVPair_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export NVPair
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef NVPair_var _var_type;
    typedef NVPair_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager name;
    ::CORBA::Any value;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_NVPair;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_NVLIST_CH_)
#define _DSLOGADMIN_NVLIST_CH_

  class NVList;

  typedef
    ::TAO_VarSeq_Var_T<
        NVList
      >
    NVList_var;

  typedef
    ::TAO_Seq_Out_T<
        NVList
      >
    NVList_out;

  class TAO_Log_Export NVList
    : public
        ::TAO::unbounded_value_sequence<
            NVPair
          >
  {
  public:
    NVList (void);
    NVList ( ::CORBA::ULong max);
    NVList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      NVPair* buffer, 
      ::CORBA::Boolean release = false);
    NVList (const NVList &);
    virtual ~NVList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef NVList_var _var_type;
    typedef NVList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_NVList;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct TimeInterval;

  typedef
    ::TAO_Fixed_Var_T<
        TimeInterval
      >
    TimeInterval_var;
  
  typedef
    TimeInterval &
    TimeInterval_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export TimeInterval
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef TimeInterval_var _var_type;
    typedef TimeInterval_out _out_type;

    static void _tao_any_destructor (void *);
    
    DsLogAdmin::TimeT start;
    DsLogAdmin::TimeT stop;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_TimeInterval;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_TIMEINTERVALSEQ_CH_)
#define _DSLOGADMIN_TIMEINTERVALSEQ_CH_

  class TimeIntervalSeq;

  typedef
    ::TAO_FixedSeq_Var_T<
        TimeIntervalSeq
      >
    TimeIntervalSeq_var;

  typedef
    ::TAO_Seq_Out_T<
        TimeIntervalSeq
      >
    TimeIntervalSeq_out;

  class TAO_Log_Export TimeIntervalSeq
    : public
        ::TAO::unbounded_value_sequence<
            TimeInterval
          >
  {
  public:
    TimeIntervalSeq (void);
    TimeIntervalSeq ( ::CORBA::ULong max);
    TimeIntervalSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      TimeInterval* buffer, 
      ::CORBA::Boolean release = false);
    TimeIntervalSeq (const TimeIntervalSeq &);
    virtual ~TimeIntervalSeq (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef TimeIntervalSeq_var _var_type;
    typedef TimeIntervalSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_TimeIntervalSeq;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct LogRecord;

  typedef
    ::TAO_Var_Var_T<
        LogRecord
      >
    LogRecord_var;
  
  typedef
    ::TAO_Out_T<
        LogRecord
      >
    LogRecord_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export LogRecord
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LogRecord_var _var_type;
    typedef LogRecord_out _out_type;

    static void _tao_any_destructor (void *);
    
    DsLogAdmin::RecordId id;
    DsLogAdmin::TimeT time;
    DsLogAdmin::NVList attr_list;
    ::CORBA::Any info;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogRecord;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_RECORDLIST_CH_)
#define _DSLOGADMIN_RECORDLIST_CH_

  class RecordList;

  typedef
    ::TAO_VarSeq_Var_T<
        RecordList
      >
    RecordList_var;

  typedef
    ::TAO_Seq_Out_T<
        RecordList
      >
    RecordList_out;

  class TAO_Log_Export RecordList
    : public
        ::TAO::unbounded_value_sequence<
            LogRecord
          >
  {
  public:
    RecordList (void);
    RecordList ( ::CORBA::ULong max);
    RecordList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      LogRecord* buffer, 
      ::CORBA::Boolean release = false);
    RecordList (const RecordList &);
    virtual ~RecordList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RecordList_var _var_type;
    typedef RecordList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_RecordList;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_ANYS_CH_)
#define _DSLOGADMIN_ANYS_CH_

  class Anys;

  typedef
    ::TAO_VarSeq_Var_T<
        Anys
      >
    Anys_var;

  typedef
    ::TAO_Seq_Out_T<
        Anys
      >
    Anys_out;

  class TAO_Log_Export Anys
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Any
          >
  {
  public:
    Anys (void);
    Anys ( ::CORBA::ULong max);
    Anys (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Any* buffer, 
      ::CORBA::Boolean release = false);
    Anys (const Anys &);
    virtual ~Anys (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Anys_var _var_type;
    typedef Anys_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Anys;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_DSLOGADMIN_ITERATOR__VAR_OUT_CH_)
#define _DSLOGADMIN_ITERATOR__VAR_OUT_CH_

  class Iterator;
  typedef Iterator *Iterator_ptr;

  typedef
    TAO_Objref_Var_T<
        Iterator
      >
    Iterator_var;
  
  typedef
    TAO_Objref_Out_T<
        Iterator
      >
    Iterator_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Log_Export Iterator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Iterator>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Iterator_ptr _ptr_type;
    typedef Iterator_var _var_type;
    typedef Iterator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Iterator_ptr _duplicate (Iterator_ptr obj);

    static void _tao_release (Iterator_ptr obj);

    static Iterator_ptr _narrow (::CORBA::Object_ptr obj);
    static Iterator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Iterator_ptr _nil (void);

    virtual ::DsLogAdmin::RecordList * get (
      ::CORBA::ULong position,
      ::CORBA::ULong how_many);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Iterator_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Iterator (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void DsLogAdmin_Iterator_setup_collocation (void);

    // Concrete non-local interface only.
    Iterator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Iterator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Iterator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Iterator (const Iterator &);

    void operator= (const Iterator &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Iterator;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct AvailabilityStatus;

  typedef
    ::TAO_Fixed_Var_T<
        AvailabilityStatus
      >
    AvailabilityStatus_var;
  
  typedef
    AvailabilityStatus &
    AvailabilityStatus_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export AvailabilityStatus
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AvailabilityStatus_var _var_type;
    typedef AvailabilityStatus_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Boolean off_duty;
    ::CORBA::Boolean log_full;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_AvailabilityStatus;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::UShort LogFullActionType;
  typedef ::CORBA::UShort_out LogFullActionType_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogFullActionType;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort wrap = 0U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort halt = 1U;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Time24;

  typedef
    ::TAO_Fixed_Var_T<
        Time24
      >
    Time24_var;
  
  typedef
    Time24 &
    Time24_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export Time24
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Time24_var _var_type;
    typedef Time24_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::UShort hour;
    ::CORBA::UShort minute;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Time24;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Time24Interval;

  typedef
    ::TAO_Fixed_Var_T<
        Time24Interval
      >
    Time24Interval_var;
  
  typedef
    Time24Interval &
    Time24Interval_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export Time24Interval
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Time24Interval_var _var_type;
    typedef Time24Interval_out _out_type;

    static void _tao_any_destructor (void *);
    
    DsLogAdmin::Time24 start;
    DsLogAdmin::Time24 stop;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Time24Interval;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_INTERVALSOFDAY_CH_)
#define _DSLOGADMIN_INTERVALSOFDAY_CH_

  class IntervalsOfDay;

  typedef
    ::TAO_FixedSeq_Var_T<
        IntervalsOfDay
      >
    IntervalsOfDay_var;

  typedef
    ::TAO_Seq_Out_T<
        IntervalsOfDay
      >
    IntervalsOfDay_out;

  class TAO_Log_Export IntervalsOfDay
    : public
        ::TAO::unbounded_value_sequence<
            Time24Interval
          >
  {
  public:
    IntervalsOfDay (void);
    IntervalsOfDay ( ::CORBA::ULong max);
    IntervalsOfDay (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Time24Interval* buffer, 
      ::CORBA::Boolean release = false);
    IntervalsOfDay (const IntervalsOfDay &);
    virtual ~IntervalsOfDay (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef IntervalsOfDay_var _var_type;
    typedef IntervalsOfDay_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_IntervalsOfDay;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Sunday = 1U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Monday = 2U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Tuesday = 4U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Wednesday = 8U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Thursday = 16U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Friday = 32U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort Saturday = 64U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::UShort DaysOfWeek;
  typedef ::CORBA::UShort_out DaysOfWeek_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_DaysOfWeek;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct WeekMaskItem;

  typedef
    ::TAO_Var_Var_T<
        WeekMaskItem
      >
    WeekMaskItem_var;
  
  typedef
    ::TAO_Out_T<
        WeekMaskItem
      >
    WeekMaskItem_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_Log_Export WeekMaskItem
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef WeekMaskItem_var _var_type;
    typedef WeekMaskItem_out _out_type;

    static void _tao_any_destructor (void *);
    
    DsLogAdmin::DaysOfWeek days;
    DsLogAdmin::IntervalsOfDay intervals;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_WeekMaskItem;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_WEEKMASK_CH_)
#define _DSLOGADMIN_WEEKMASK_CH_

  class WeekMask;

  typedef
    ::TAO_VarSeq_Var_T<
        WeekMask
      >
    WeekMask_var;

  typedef
    ::TAO_Seq_Out_T<
        WeekMask
      >
    WeekMask_out;

  class TAO_Log_Export WeekMask
    : public
        ::TAO::unbounded_value_sequence<
            WeekMaskItem
          >
  {
  public:
    WeekMask (void);
    WeekMask ( ::CORBA::ULong max);
    WeekMask (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      WeekMaskItem* buffer, 
      ::CORBA::Boolean release = false);
    WeekMask (const WeekMask &);
    virtual ~WeekMask (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef WeekMask_var _var_type;
    typedef WeekMask_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_WeekMask;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::UShort Threshold;
  typedef ::CORBA::UShort_out Threshold_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Threshold;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_CAPACITYALARMTHRESHOLDLIST_CH_)
#define _DSLOGADMIN_CAPACITYALARMTHRESHOLDLIST_CH_

  class CapacityAlarmThresholdList;

  typedef
    ::TAO_FixedSeq_Var_T<
        CapacityAlarmThresholdList
      >
    CapacityAlarmThresholdList_var;

  typedef
    ::TAO_Seq_Out_T<
        CapacityAlarmThresholdList
      >
    CapacityAlarmThresholdList_out;

  class TAO_Log_Export CapacityAlarmThresholdList
    : public
        ::TAO::unbounded_value_sequence<
            Threshold
          >
  {
  public:
    CapacityAlarmThresholdList (void);
    CapacityAlarmThresholdList ( ::CORBA::ULong max);
    CapacityAlarmThresholdList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer, 
      ::CORBA::Boolean release = false);
    CapacityAlarmThresholdList (const CapacityAlarmThresholdList &);
    virtual ~CapacityAlarmThresholdList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef CapacityAlarmThresholdList_var _var_type;
    typedef CapacityAlarmThresholdList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_CapacityAlarmThresholdList;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_DSLOGADMIN_LOGMGR__VAR_OUT_CH_)
#define _DSLOGADMIN_LOGMGR__VAR_OUT_CH_

  class LogMgr;
  typedef LogMgr *LogMgr_ptr;

  typedef
    TAO_Objref_Var_T<
        LogMgr
      >
    LogMgr_var;
  
  typedef
    TAO_Objref_Out_T<
        LogMgr
      >
    LogMgr_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum OperationalState
  {
    disabled,
    enabled
  };

  typedef OperationalState &OperationalState_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_OperationalState;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum AdministrativeState
  {
    locked,
    unlocked
  };

  typedef AdministrativeState &AdministrativeState_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_AdministrativeState;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum ForwardingState
  {
    on,
    off
  };

  typedef ForwardingState &ForwardingState_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_ForwardingState;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::UShort QoSType;
  typedef ::CORBA::UShort_out QoSType_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_QoSType;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_QOSLIST_CH_)
#define _DSLOGADMIN_QOSLIST_CH_

  class QoSList;

  typedef
    ::TAO_FixedSeq_Var_T<
        QoSList
      >
    QoSList_var;

  typedef
    ::TAO_Seq_Out_T<
        QoSList
      >
    QoSList_out;

  class TAO_Log_Export QoSList
    : public
        ::TAO::unbounded_value_sequence<
            QoSType
          >
  {
  public:
    QoSList (void);
    QoSList ( ::CORBA::ULong max);
    QoSList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::UShort* buffer, 
      ::CORBA::Boolean release = false);
    QoSList (const QoSList &);
    virtual ~QoSList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef QoSList_var _var_type;
    typedef QoSList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_QoSList;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Log_Export UnsupportedQoS : public ::CORBA::UserException
  {
  public:
    
    DsLogAdmin::QoSList denied;
    UnsupportedQoS (void);
    UnsupportedQoS (const UnsupportedQoS &);
    ~UnsupportedQoS (void);

    UnsupportedQoS &operator= (const UnsupportedQoS &);

    static void _tao_any_destructor (void *);

    static UnsupportedQoS *_downcast ( ::CORBA::Exception *);
    static const UnsupportedQoS *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    UnsupportedQoS (
        const DsLogAdmin::QoSList & _tao_denied);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_UnsupportedQoS;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort QoSNone = 0U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort QoSFlush = 1U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::UShort QoSReliability = 2U;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_DSLOGADMIN_LOG__VAR_OUT_CH_)
#define _DSLOGADMIN_LOG__VAR_OUT_CH_

  class Log;
  typedef Log *Log_ptr;

  typedef
    TAO_Objref_Var_T<
        Log
      >
    Log_var;
  
  typedef
    TAO_Objref_Out_T<
        Log
      >
    Log_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Log_Export Log
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Log>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Log_ptr _ptr_type;
    typedef Log_var _var_type;
    typedef Log_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Log_ptr _duplicate (Log_ptr obj);

    static void _tao_release (Log_ptr obj);

    static Log_ptr _narrow (::CORBA::Object_ptr obj);
    static Log_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Log_ptr _nil (void);

    virtual ::DsLogAdmin::LogMgr_ptr my_factory (
      void);

    virtual ::DsLogAdmin::LogId id (
      void);

    virtual ::DsLogAdmin::QoSList * get_log_qos (
      void);

    virtual void set_log_qos (
      const ::DsLogAdmin::QoSList & qos);

    virtual ::CORBA::ULong get_max_record_life (
      void);

    virtual void set_max_record_life (
      ::CORBA::ULong life);

    virtual ::CORBA::ULongLong get_max_size (
      void);

    virtual void set_max_size (
      ::CORBA::ULongLong size);

    virtual ::CORBA::ULongLong get_current_size (
      void);

    virtual ::CORBA::ULongLong get_n_records (
      void);

    virtual ::DsLogAdmin::LogFullActionType get_log_full_action (
      void);

    virtual void set_log_full_action (
      ::DsLogAdmin::LogFullActionType action);

    virtual ::DsLogAdmin::AdministrativeState get_administrative_state (
      void);

    virtual void set_administrative_state (
      ::DsLogAdmin::AdministrativeState state);

    virtual ::DsLogAdmin::ForwardingState get_forwarding_state (
      void);

    virtual void set_forwarding_state (
      ::DsLogAdmin::ForwardingState state);

    virtual ::DsLogAdmin::OperationalState get_operational_state (
      void);

    virtual ::DsLogAdmin::TimeInterval get_interval (
      void);

    virtual void set_interval (
      const ::DsLogAdmin::TimeInterval & interval);

    virtual ::DsLogAdmin::AvailabilityStatus get_availability_status (
      void);

    virtual ::DsLogAdmin::CapacityAlarmThresholdList * get_capacity_alarm_thresholds (
      void);

    virtual void set_capacity_alarm_thresholds (
      const ::DsLogAdmin::CapacityAlarmThresholdList & threshs);

    virtual ::DsLogAdmin::WeekMask * get_week_mask (
      void);

    virtual void set_week_mask (
      const ::DsLogAdmin::WeekMask & masks);

    virtual ::DsLogAdmin::RecordList * query (
      const char * grammar,
      const char * c,
      ::DsLogAdmin::Iterator_out i);

    virtual ::DsLogAdmin::RecordList * retrieve (
      ::DsLogAdmin::TimeT from_time,
      ::CORBA::Long how_many,
      ::DsLogAdmin::Iterator_out i);

    virtual ::CORBA::ULong match (
      const char * grammar,
      const char * c);

    virtual ::CORBA::ULong delete_records (
      const char * grammar,
      const char * c);

    virtual ::CORBA::ULong delete_records_by_id (
      const ::DsLogAdmin::RecordIdList & ids);

    virtual void write_records (
      const ::DsLogAdmin::Anys & records);

    virtual void write_recordlist (
      const ::DsLogAdmin::RecordList & list);

    virtual void set_record_attribute (
      ::DsLogAdmin::RecordId id,
      const ::DsLogAdmin::NVList & attr_list);

    virtual ::CORBA::ULong set_records_attribute (
      const char * grammar,
      const char * c,
      const ::DsLogAdmin::NVList & attr_list);

    virtual ::DsLogAdmin::NVList * get_record_attribute (
      ::DsLogAdmin::RecordId id);

    virtual ::DsLogAdmin::Log_ptr copy (
      ::DsLogAdmin::LogId_out id);

    virtual ::DsLogAdmin::Log_ptr copy_with_id (
      ::DsLogAdmin::LogId id);

    virtual void flush (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Log_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Log (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void DsLogAdmin_Log_setup_collocation (void);

    // Concrete non-local interface only.
    Log (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Log (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Log (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Log (const Log &);

    void operator= (const Log &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_Log;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_DSLOGADMIN_BASICLOG__VAR_OUT_CH_)
#define _DSLOGADMIN_BASICLOG__VAR_OUT_CH_

  class BasicLog;
  typedef BasicLog *BasicLog_ptr;

  typedef
    TAO_Objref_Var_T<
        BasicLog
      >
    BasicLog_var;
  
  typedef
    TAO_Objref_Out_T<
        BasicLog
      >
    BasicLog_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Log_Export BasicLog
    : public virtual ::DsLogAdmin::Log
  
  {
  public:
    friend class TAO::Narrow_Utils<BasicLog>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef BasicLog_ptr _ptr_type;
    typedef BasicLog_var _var_type;
    typedef BasicLog_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static BasicLog_ptr _duplicate (BasicLog_ptr obj);

    static void _tao_release (BasicLog_ptr obj);

    static BasicLog_ptr _narrow (::CORBA::Object_ptr obj);
    static BasicLog_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static BasicLog_ptr _nil (void);

    virtual void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_BasicLog_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    BasicLog (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void DsLogAdmin_BasicLog_setup_collocation (void);

    // Concrete non-local interface only.
    BasicLog (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    BasicLog (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~BasicLog (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    BasicLog (const BasicLog &);

    void operator= (const BasicLog &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_BasicLog;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_LOGLIST_CH_)
#define _DSLOGADMIN_LOGLIST_CH_

  class LogList;

  typedef
    ::TAO_VarSeq_Var_T<
        LogList
      >
    LogList_var;

  typedef
    ::TAO_Seq_Out_T<
        LogList
      >
    LogList_out;

  class TAO_Log_Export LogList
    : public
        ::TAO::unbounded_object_reference_sequence<
            Log,
            Log_var
          >
  {
  public:
    LogList (void);
    LogList ( ::CORBA::ULong max);
    LogList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Log_ptr* buffer, 
      ::CORBA::Boolean release = false);
    LogList (const LogList &);
    virtual ~LogList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LogList_var _var_type;
    typedef LogList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogList;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_DSLOGADMIN_LOGIDLIST_CH_)
#define _DSLOGADMIN_LOGIDLIST_CH_

  class LogIdList;

  typedef
    ::TAO_FixedSeq_Var_T<
        LogIdList
      >
    LogIdList_var;

  typedef
    ::TAO_Seq_Out_T<
        LogIdList
      >
    LogIdList_out;

  class TAO_Log_Export LogIdList
    : public
        ::TAO::unbounded_value_sequence<
            LogId
          >
  {
  public:
    LogIdList (void);
    LogIdList ( ::CORBA::ULong max);
    LogIdList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::ULong* buffer, 
      ::CORBA::Boolean release = false);
    LogIdList (const LogIdList &);
    virtual ~LogIdList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LogIdList_var _var_type;
    typedef LogIdList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogIdList;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Log_Export LogMgr
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<LogMgr>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef LogMgr_ptr _ptr_type;
    typedef LogMgr_var _var_type;
    typedef LogMgr_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static LogMgr_ptr _duplicate (LogMgr_ptr obj);

    static void _tao_release (LogMgr_ptr obj);

    static LogMgr_ptr _narrow (::CORBA::Object_ptr obj);
    static LogMgr_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static LogMgr_ptr _nil (void);

    virtual ::DsLogAdmin::LogList * list_logs (
      void);

    virtual ::DsLogAdmin::Log_ptr find_log (
      ::DsLogAdmin::LogId id);

    virtual ::DsLogAdmin::LogIdList * list_logs_by_id (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_LogMgr_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    LogMgr (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void DsLogAdmin_LogMgr_setup_collocation (void);

    // Concrete non-local interface only.
    LogMgr (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    LogMgr (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~LogMgr (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    LogMgr (const LogMgr &);

    void operator= (const LogMgr &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_LogMgr;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_DSLOGADMIN_BASICLOGFACTORY__VAR_OUT_CH_)
#define _DSLOGADMIN_BASICLOGFACTORY__VAR_OUT_CH_

  class BasicLogFactory;
  typedef BasicLogFactory *BasicLogFactory_ptr;

  typedef
    TAO_Objref_Var_T<
        BasicLogFactory
      >
    BasicLogFactory_var;
  
  typedef
    TAO_Objref_Out_T<
        BasicLogFactory
      >
    BasicLogFactory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Log_Export BasicLogFactory
    : public virtual ::DsLogAdmin::LogMgr
  
  {
  public:
    friend class TAO::Narrow_Utils<BasicLogFactory>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef BasicLogFactory_ptr _ptr_type;
    typedef BasicLogFactory_var _var_type;
    typedef BasicLogFactory_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static BasicLogFactory_ptr _duplicate (BasicLogFactory_ptr obj);

    static void _tao_release (BasicLogFactory_ptr obj);

    static BasicLogFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static BasicLogFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static BasicLogFactory_ptr _nil (void);

    virtual ::DsLogAdmin::BasicLog_ptr create (
      ::DsLogAdmin::LogFullActionType full_action,
      ::CORBA::ULongLong max_size,
      ::DsLogAdmin::LogId_out id);

    virtual ::DsLogAdmin::BasicLog_ptr create_with_id (
      ::DsLogAdmin::LogId id,
      ::DsLogAdmin::LogFullActionType full_action,
      ::CORBA::ULongLong max_size);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_BasicLogFactory_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    BasicLogFactory (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void DsLogAdmin_BasicLogFactory_setup_collocation (void);

    // Concrete non-local interface only.
    BasicLogFactory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    BasicLogFactory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~BasicLogFactory (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    BasicLogFactory (const BasicLogFactory &);

    void operator= (const BasicLogFactory &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Log_Export ::CORBA::TypeCode_ptr const _tc_BasicLogFactory;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module DsLogAdmin

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::RecordIdList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::RecordIdList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::NVPair>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::NVPair,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::NVList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::NVList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::TimeInterval>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DsLogAdmin::TimeInterval,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::TimeIntervalSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::TimeIntervalSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::LogRecord>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::LogRecord,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::RecordList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::RecordList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::Anys>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::Anys,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_DSLOGADMIN_ITERATOR__ARG_TRAITS_)
#define _DSLOGADMIN_ITERATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::DsLogAdmin::Iterator>
    : public
        Object_Arg_Traits_T<
            ::DsLogAdmin::Iterator_ptr,
            ::DsLogAdmin::Iterator_var,
            ::DsLogAdmin::Iterator_out,
            TAO::Objref_Traits<DsLogAdmin::Iterator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::AvailabilityStatus>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DsLogAdmin::AvailabilityStatus,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::Time24>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DsLogAdmin::Time24,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::Time24Interval>
    : public
        Fixed_Size_Arg_Traits_T<
            ::DsLogAdmin::Time24Interval,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::IntervalsOfDay>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::IntervalsOfDay,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::DsLogAdmin::WeekMaskItem>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::WeekMaskItem,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::WeekMask>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::WeekMask,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::CapacityAlarmThresholdList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::CapacityAlarmThresholdList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_DSLOGADMIN_LOGMGR__ARG_TRAITS_)
#define _DSLOGADMIN_LOGMGR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::DsLogAdmin::LogMgr>
    : public
        Object_Arg_Traits_T<
            ::DsLogAdmin::LogMgr_ptr,
            ::DsLogAdmin::LogMgr_var,
            ::DsLogAdmin::LogMgr_out,
            TAO::Objref_Traits<DsLogAdmin::LogMgr>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::DsLogAdmin::OperationalState>
    : public
        Basic_Arg_Traits_T<
            ::DsLogAdmin::OperationalState,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::DsLogAdmin::AdministrativeState>
    : public
        Basic_Arg_Traits_T<
            ::DsLogAdmin::AdministrativeState,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::DsLogAdmin::ForwardingState>
    : public
        Basic_Arg_Traits_T<
            ::DsLogAdmin::ForwardingState,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::QoSList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::QoSList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_DSLOGADMIN_LOG__ARG_TRAITS_)
#define _DSLOGADMIN_LOG__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::DsLogAdmin::Log>
    : public
        Object_Arg_Traits_T<
            ::DsLogAdmin::Log_ptr,
            ::DsLogAdmin::Log_var,
            ::DsLogAdmin::Log_out,
            TAO::Objref_Traits<DsLogAdmin::Log>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_DSLOGADMIN_BASICLOG__ARG_TRAITS_)
#define _DSLOGADMIN_BASICLOG__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::DsLogAdmin::BasicLog>
    : public
        Object_Arg_Traits_T<
            ::DsLogAdmin::BasicLog_ptr,
            ::DsLogAdmin::BasicLog_var,
            ::DsLogAdmin::BasicLog_out,
            TAO::Objref_Traits<DsLogAdmin::BasicLog>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::LogList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::LogList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::DsLogAdmin::LogIdList>
    : public
        Var_Size_Arg_Traits_T<
            ::DsLogAdmin::LogIdList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_DSLOGADMIN_BASICLOGFACTORY__ARG_TRAITS_)
#define _DSLOGADMIN_BASICLOGFACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::DsLogAdmin::BasicLogFactory>
    : public
        Object_Arg_Traits_T<
            ::DsLogAdmin::BasicLogFactory_ptr,
            ::DsLogAdmin::BasicLogFactory_var,
            ::DsLogAdmin::BasicLogFactory_out,
            TAO::Objref_Traits<DsLogAdmin::BasicLogFactory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_Log_Export
TAO::Collocation_Proxy_Broker *
(*DsLogAdmin__TAO_Iterator_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Log_Export
TAO::Collocation_Proxy_Broker *
(*DsLogAdmin__TAO_Log_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Log_Export
TAO::Collocation_Proxy_Broker *
(*DsLogAdmin__TAO_BasicLog_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Log_Export
TAO::Collocation_Proxy_Broker *
(*DsLogAdmin__TAO_LogMgr_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Log_Export
TAO::Collocation_Proxy_Broker *
(*DsLogAdmin__TAO_BasicLogFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_DSLOGADMIN_ITERATOR__TRAITS_)
#define _DSLOGADMIN_ITERATOR__TRAITS_

  template<>
  struct TAO_Log_Export Objref_Traits< ::DsLogAdmin::Iterator>
  {
    static ::DsLogAdmin::Iterator_ptr duplicate (
        ::DsLogAdmin::Iterator_ptr p);
    static void release (
        ::DsLogAdmin::Iterator_ptr p);
    static ::DsLogAdmin::Iterator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::DsLogAdmin::Iterator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DSLOGADMIN_LOG__TRAITS_)
#define _DSLOGADMIN_LOG__TRAITS_

  template<>
  struct TAO_Log_Export Objref_Traits< ::DsLogAdmin::Log>
  {
    static ::DsLogAdmin::Log_ptr duplicate (
        ::DsLogAdmin::Log_ptr p);
    static void release (
        ::DsLogAdmin::Log_ptr p);
    static ::DsLogAdmin::Log_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::DsLogAdmin::Log_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DSLOGADMIN_BASICLOG__TRAITS_)
#define _DSLOGADMIN_BASICLOG__TRAITS_

  template<>
  struct TAO_Log_Export Objref_Traits< ::DsLogAdmin::BasicLog>
  {
    static ::DsLogAdmin::BasicLog_ptr duplicate (
        ::DsLogAdmin::BasicLog_ptr p);
    static void release (
        ::DsLogAdmin::BasicLog_ptr p);
    static ::DsLogAdmin::BasicLog_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::DsLogAdmin::BasicLog_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DSLOGADMIN_LOGMGR__TRAITS_)
#define _DSLOGADMIN_LOGMGR__TRAITS_

  template<>
  struct TAO_Log_Export Objref_Traits< ::DsLogAdmin::LogMgr>
  {
    static ::DsLogAdmin::LogMgr_ptr duplicate (
        ::DsLogAdmin::LogMgr_ptr p);
    static void release (
        ::DsLogAdmin::LogMgr_ptr p);
    static ::DsLogAdmin::LogMgr_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::DsLogAdmin::LogMgr_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_DSLOGADMIN_BASICLOGFACTORY__TRAITS_)
#define _DSLOGADMIN_BASICLOGFACTORY__TRAITS_

  template<>
  struct TAO_Log_Export Objref_Traits< ::DsLogAdmin::BasicLogFactory>
  {
    static ::DsLogAdmin::BasicLogFactory_ptr duplicate (
        ::DsLogAdmin::BasicLogFactory_ptr p);
    static void release (
        ::DsLogAdmin::BasicLogFactory_ptr p);
    static ::DsLogAdmin::BasicLogFactory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::DsLogAdmin::BasicLogFactory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidParam &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidParam*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidParam *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidParam *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidParam &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidParam*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidParam *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidParam *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidThreshold &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidThreshold*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidThreshold *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidThreshold *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidThreshold &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidThreshold*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidThreshold *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidThreshold *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidTime &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidTime*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidTime *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidTime *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidTime &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidTime*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidTime *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidTime *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidTimeInterval &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidTimeInterval*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidTimeInterval *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidTimeInterval *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidTimeInterval &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidTimeInterval*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidTimeInterval *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidTimeInterval *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidMask &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidMask*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidMask *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidMask *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidMask &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidMask*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidMask *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidMask *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::LogIdAlreadyExists &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::LogIdAlreadyExists*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogIdAlreadyExists *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogIdAlreadyExists *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::LogIdAlreadyExists &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogIdAlreadyExists*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogIdAlreadyExists *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogIdAlreadyExists *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidGrammar &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidGrammar*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidGrammar *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidGrammar *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidGrammar &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidGrammar*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidGrammar *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidGrammar *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidConstraint &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidConstraint*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidConstraint *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidConstraint *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidConstraint &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidConstraint*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidConstraint *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidConstraint *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::LogFull &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::LogFull*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogFull *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogFull *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::LogFull &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogFull*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogFull *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogFull *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::LogOffDuty &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::LogOffDuty*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogOffDuty *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogOffDuty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::LogOffDuty &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogOffDuty*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogOffDuty *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogOffDuty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::LogLocked &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::LogLocked*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogLocked *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogLocked *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::LogLocked &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogLocked*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogLocked *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogLocked *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::LogDisabled &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::LogDisabled*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogDisabled *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogDisabled *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::LogDisabled &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogDisabled*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogDisabled *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogDisabled *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidRecordId &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidRecordId*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidRecordId *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidRecordId *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidRecordId &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidRecordId*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidRecordId *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidRecordId *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidAttribute &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidAttribute*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidAttribute *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidAttribute *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidAttribute &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidAttribute*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidAttribute *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidAttribute *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::InvalidLogFullAction &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::InvalidLogFullAction*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::InvalidLogFullAction *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::InvalidLogFullAction *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::InvalidLogFullAction &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::InvalidLogFullAction*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::InvalidLogFullAction *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::InvalidLogFullAction *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::RecordIdList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::RecordIdList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::RecordIdList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::RecordIdList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::RecordIdList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::RecordIdList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::RecordIdList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::RecordIdList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::NVPair &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::NVPair*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::NVPair *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::NVPair *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::NVPair &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::NVPair*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::NVPair *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::NVPair *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::NVList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::NVList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::NVList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::NVList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::NVList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::NVList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::NVList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::NVList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::TimeInterval &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::TimeInterval*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::TimeInterval *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::TimeInterval *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::TimeInterval &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::TimeInterval*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::TimeInterval *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::TimeInterval *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::TimeIntervalSeq &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::TimeIntervalSeq*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::TimeIntervalSeq *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::TimeIntervalSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::TimeIntervalSeq &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::TimeIntervalSeq*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::TimeIntervalSeq *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::TimeIntervalSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::LogRecord &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::LogRecord*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogRecord *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogRecord *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::LogRecord &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogRecord*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogRecord *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogRecord *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::RecordList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::RecordList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::RecordList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::RecordList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::RecordList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::RecordList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::RecordList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::RecordList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::Anys &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::Anys*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::Anys *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::Anys *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::Anys &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::Anys*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::Anys *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::Anys *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, Iterator_ptr); // copying
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, Iterator_ptr *); // non-copying
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Iterator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::Iterator_ptr); // copying
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::Iterator_ptr *); // non-copying
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::Iterator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::AvailabilityStatus &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::AvailabilityStatus*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::AvailabilityStatus *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::AvailabilityStatus *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::AvailabilityStatus &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::AvailabilityStatus*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::AvailabilityStatus *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::AvailabilityStatus *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::Time24 &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::Time24*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::Time24 *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::Time24 *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::Time24 &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::Time24*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::Time24 *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::Time24 *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::Time24Interval &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::Time24Interval*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::Time24Interval *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::Time24Interval *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::Time24Interval &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::Time24Interval*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::Time24Interval *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::Time24Interval *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::IntervalsOfDay &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::IntervalsOfDay*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::IntervalsOfDay *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::IntervalsOfDay *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::IntervalsOfDay &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::IntervalsOfDay*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::IntervalsOfDay *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::IntervalsOfDay *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::WeekMaskItem &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::WeekMaskItem*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::WeekMaskItem *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::WeekMaskItem *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::WeekMaskItem &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::WeekMaskItem*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::WeekMaskItem *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::WeekMaskItem *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::WeekMask &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::WeekMask*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::WeekMask *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::WeekMask *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::WeekMask &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::WeekMask*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::WeekMask *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::WeekMask *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::CapacityAlarmThresholdList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::CapacityAlarmThresholdList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::CapacityAlarmThresholdList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::CapacityAlarmThresholdList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::CapacityAlarmThresholdList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::CapacityAlarmThresholdList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::CapacityAlarmThresholdList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::CapacityAlarmThresholdList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::OperationalState);
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::OperationalState &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::OperationalState);
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::OperationalState &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::AdministrativeState);
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::AdministrativeState &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::AdministrativeState);
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::AdministrativeState &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::ForwardingState);
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::ForwardingState &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::ForwardingState);
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::ForwardingState &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::QoSList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::QoSList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::QoSList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::QoSList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::QoSList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::QoSList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::QoSList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::QoSList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  

  TAO_Log_Export void operator<<= (::CORBA::Any &, const ::DsLogAdmin::UnsupportedQoS &); // copying version
  TAO_Log_Export void operator<<= (::CORBA::Any &, ::DsLogAdmin::UnsupportedQoS*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::UnsupportedQoS *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::UnsupportedQoS *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export void operator<<= (::CORBA::Any &, const DsLogAdmin::UnsupportedQoS &); // copying version
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::UnsupportedQoS*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::UnsupportedQoS *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::UnsupportedQoS *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, Log_ptr); // copying
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, Log_ptr *); // non-copying
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Log_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::Log_ptr); // copying
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::Log_ptr *); // non-copying
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::Log_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, BasicLog_ptr); // copying
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, BasicLog_ptr *); // non-copying
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BasicLog_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::BasicLog_ptr); // copying
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::BasicLog_ptr *); // non-copying
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::BasicLog_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::LogList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::LogList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::LogList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::LogList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, const ::DsLogAdmin::LogIdList &); // copying version
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, ::DsLogAdmin::LogIdList*); // noncopying version
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::DsLogAdmin::LogIdList *&); // deprecated
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::DsLogAdmin::LogIdList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= ( ::CORBA::Any &, const DsLogAdmin::LogIdList &); // copying version
TAO_Log_Export void operator<<= ( ::CORBA::Any &, DsLogAdmin::LogIdList*); // noncopying version
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogIdList *&); // deprecated
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DsLogAdmin::LogIdList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, LogMgr_ptr); // copying
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, LogMgr_ptr *); // non-copying
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, LogMgr_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogMgr_ptr); // copying
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::LogMgr_ptr *); // non-copying
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::LogMgr_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace DsLogAdmin
{
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, BasicLogFactory_ptr); // copying
  TAO_Log_Export void operator<<= ( ::CORBA::Any &, BasicLogFactory_ptr *); // non-copying
  TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, BasicLogFactory_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::BasicLogFactory_ptr); // copying
TAO_Log_Export void operator<<= (::CORBA::Any &, DsLogAdmin::BasicLogFactory_ptr *); // non-copying
TAO_Log_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DsLogAdmin::BasicLogFactory_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidParam &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidParam &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidThreshold &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidThreshold &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidTime &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidTime &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidTimeInterval &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidTimeInterval &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidMask &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidMask &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogIdAlreadyExists &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogIdAlreadyExists &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidGrammar &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidGrammar &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidConstraint &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidConstraint &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogFull &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogFull &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogOffDuty &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogOffDuty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogLocked &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogLocked &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogDisabled &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogDisabled &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidRecordId &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidRecordId &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidAttribute &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidAttribute &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::InvalidLogFullAction &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::InvalidLogFullAction &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_RecordIdList_H_
#define _TAO_CDR_OP_DsLogAdmin_RecordIdList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::RecordIdList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::RecordIdList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_RecordIdList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::NVPair &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::NVPair &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_NVList_H_
#define _TAO_CDR_OP_DsLogAdmin_NVList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::NVList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::NVList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_NVList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::TimeInterval &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::TimeInterval &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_TimeIntervalSeq_H_
#define _TAO_CDR_OP_DsLogAdmin_TimeIntervalSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::TimeIntervalSeq &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::TimeIntervalSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_TimeIntervalSeq_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogRecord &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogRecord &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_RecordList_H_
#define _TAO_CDR_OP_DsLogAdmin_RecordList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::RecordList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::RecordList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_RecordList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_Anys_H_
#define _TAO_CDR_OP_DsLogAdmin_Anys_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::Anys &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::Anys &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_Anys_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::Iterator_ptr );
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::Iterator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::AvailabilityStatus &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::AvailabilityStatus &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::Time24 &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::Time24 &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::Time24Interval &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::Time24Interval &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_IntervalsOfDay_H_
#define _TAO_CDR_OP_DsLogAdmin_IntervalsOfDay_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::IntervalsOfDay &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::IntervalsOfDay &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_IntervalsOfDay_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::WeekMaskItem &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::WeekMaskItem &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_WeekMask_H_
#define _TAO_CDR_OP_DsLogAdmin_WeekMask_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::WeekMask &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::WeekMask &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_WeekMask_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_CapacityAlarmThresholdList_H_
#define _TAO_CDR_OP_DsLogAdmin_CapacityAlarmThresholdList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::CapacityAlarmThresholdList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::CapacityAlarmThresholdList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_CapacityAlarmThresholdList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DsLogAdmin::OperationalState _tao_enumerator);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, DsLogAdmin::OperationalState &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DsLogAdmin::AdministrativeState _tao_enumerator);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, DsLogAdmin::AdministrativeState &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, DsLogAdmin::ForwardingState _tao_enumerator);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, DsLogAdmin::ForwardingState &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_QoSList_H_
#define _TAO_CDR_OP_DsLogAdmin_QoSList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::QoSList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::QoSList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_QoSList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::UnsupportedQoS &);
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::UnsupportedQoS &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::Log_ptr );
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::Log_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::BasicLog_ptr );
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::BasicLog_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_LogList_H_
#define _TAO_CDR_OP_DsLogAdmin_LogList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::LogList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::LogList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_LogList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_DsLogAdmin_LogIdList_H_
#define _TAO_CDR_OP_DsLogAdmin_LogIdList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_Log_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DsLogAdmin::LogIdList &_tao_sequence);
TAO_Log_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DsLogAdmin::LogIdList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_DsLogAdmin_LogIdList_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::LogMgr_ptr );
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::LogMgr_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Log_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const DsLogAdmin::BasicLogFactory_ptr );
TAO_Log_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, DsLogAdmin::BasicLogFactory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "DsLogAdminC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

