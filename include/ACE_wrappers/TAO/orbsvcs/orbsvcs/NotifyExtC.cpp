// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "NotifyExtC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "NotifyExtC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_Priority (
    ::CORBA::tk_alias,
    "IDL:NotifyExt/Priority:1.0",
    "Priority",
    &CORBA::_tc_short);
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_Priority =
    &_tao_tc_NotifyExt_Priority;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_NotifyExt_PriorityModel[] =
  {
    "CLIENT_PROPAGATED",
    "SERVER_DECLARED"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_PriorityModel (
    "IDL:NotifyExt/PriorityModel:1.0",
    "PriorityModel",
    _tao_enumerators_NotifyExt_PriorityModel,
    2);
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_PriorityModel =
    &_tao_tc_NotifyExt_PriorityModel;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_NotifyExt_ThreadPoolParams[] =
      {
        { "priority_model", &NotifyExt::_tc_PriorityModel },
        { "server_priority", &NotifyExt::_tc_Priority },
        { "stacksize", &CORBA::_tc_ulong },
        { "static_threads", &CORBA::_tc_ulong },
        { "dynamic_threads", &CORBA::_tc_ulong },
        { "default_priority", &NotifyExt::_tc_Priority },
        { "allow_request_buffering", &CORBA::_tc_boolean },
        { "max_buffered_requests", &CORBA::_tc_ulong },
        { "max_request_buffer_size", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_NotifyExt_ThreadPoolParams (
  ::CORBA::tk_struct,
  "IDL:NotifyExt/ThreadPoolParams:1.0",
  "ThreadPoolParams",
  _tao_fields_NotifyExt_ThreadPoolParams,
  9);


namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ThreadPoolParams =
    &_tao_tc_NotifyExt_ThreadPoolParams;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
NotifyExt::ThreadPoolParams::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ThreadPoolParams *_tao_tmp_pointer =
    static_cast<ThreadPoolParams *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_NotifyExt_ThreadPoolLane[] =
      {
        { "priority_model", &NotifyExt::_tc_PriorityModel },
        { "server_priority", &NotifyExt::_tc_Priority },
        { "lane_priority", &NotifyExt::_tc_Priority },
        { "static_threads", &CORBA::_tc_ulong },
        { "dynamic_threads", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_NotifyExt_ThreadPoolLane (
  ::CORBA::tk_struct,
  "IDL:NotifyExt/ThreadPoolLane:1.0",
  "ThreadPoolLane",
  _tao_fields_NotifyExt_ThreadPoolLane,
  5);


namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ThreadPoolLane =
    &_tao_tc_NotifyExt_ThreadPoolLane;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
NotifyExt::ThreadPoolLane::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ThreadPoolLane *_tao_tmp_pointer =
    static_cast<ThreadPoolLane *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_NOTIFYEXT_THREADPOOLLANES_LIST_CS_)
#define _NOTIFYEXT_THREADPOOLLANES_LIST_CS_

NotifyExt::ThreadPoolLanes_List::ThreadPoolLanes_List (void)
{}

NotifyExt::ThreadPoolLanes_List::ThreadPoolLanes_List (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ThreadPoolLane
      > (max)
{}

NotifyExt::ThreadPoolLanes_List::ThreadPoolLanes_List (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    NotifyExt::ThreadPoolLane * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ThreadPoolLane
      >
    (max, length, buffer, release)
{}

NotifyExt::ThreadPoolLanes_List::ThreadPoolLanes_List (
    const ThreadPoolLanes_List &seq)
  : ::TAO::unbounded_value_sequence<
        ThreadPoolLane
      > (seq)
{}

NotifyExt::ThreadPoolLanes_List::~ThreadPoolLanes_List (void)
{}

void NotifyExt::ThreadPoolLanes_List::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ThreadPoolLanes_List * _tao_tmp_pointer =
    static_cast<ThreadPoolLanes_List *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_NotifyExt_ThreadPoolLanes_List_GUARD
#define _TAO_TYPECODE_NotifyExt_ThreadPoolLanes_List_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        NotifyExt_ThreadPoolLanes_List_0 (
          ::CORBA::tk_sequence,
          &NotifyExt::_tc_ThreadPoolLane,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_NotifyExt_ThreadPoolLanes_List_0 =
        &NotifyExt_ThreadPoolLanes_List_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_NotifyExt_ThreadPoolLanes_List_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_ThreadPoolLanes_List (
    ::CORBA::tk_alias,
    "IDL:NotifyExt/ThreadPoolLanes_List:1.0",
    "ThreadPoolLanes_List",
    &TAO::TypeCode::tc_NotifyExt_ThreadPoolLanes_List_0);
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ThreadPoolLanes_List =
    &_tao_tc_NotifyExt_ThreadPoolLanes_List;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_NotifyExt_ThreadPoolLanesParams[] =
      {
        { "priority_model", &NotifyExt::_tc_PriorityModel },
        { "server_priority", &NotifyExt::_tc_Priority },
        { "stacksize", &CORBA::_tc_ulong },
        { "lanes", &NotifyExt::_tc_ThreadPoolLanes_List },
        { "allow_borrowing", &CORBA::_tc_boolean },
        { "allow_request_buffering", &CORBA::_tc_boolean },
        { "max_buffered_requests", &CORBA::_tc_ulong },
        { "max_request_buffer_size", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_NotifyExt_ThreadPoolLanesParams (
  ::CORBA::tk_struct,
  "IDL:NotifyExt/ThreadPoolLanesParams:1.0",
  "ThreadPoolLanesParams",
  _tao_fields_NotifyExt_ThreadPoolLanesParams,
  8);


namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ThreadPoolLanesParams =
    &_tao_tc_NotifyExt_ThreadPoolLanesParams;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
NotifyExt::ThreadPoolLanesParams::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ThreadPoolLanesParams *_tao_tmp_pointer =
    static_cast<ThreadPoolLanesParams *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyExt::ReconnectionCallback.

NotifyExt::ReconnectionCallback_ptr
TAO::Objref_Traits<NotifyExt::ReconnectionCallback>::duplicate (
    NotifyExt::ReconnectionCallback_ptr p)
{
  return NotifyExt::ReconnectionCallback::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyExt::ReconnectionCallback>::release (
    NotifyExt::ReconnectionCallback_ptr p)
{
  ::CORBA::release (p);
}

NotifyExt::ReconnectionCallback_ptr
TAO::Objref_Traits<NotifyExt::ReconnectionCallback>::nil (void)
{
  return NotifyExt::ReconnectionCallback::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyExt::ReconnectionCallback>::marshal (
    const NotifyExt::ReconnectionCallback_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
NotifyExt::ReconnectionCallback::reconnect (
  ::CORBA::Object_ptr new_connection)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReconnectionCallback_Proxy_Broker_ == 0)
    {
      NotifyExt_ReconnectionCallback_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_new_connection (new_connection);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_new_connection
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "reconnect",
      9,
      this->the_TAO_ReconnectionCallback_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
NotifyExt::ReconnectionCallback::is_alive (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReconnectionCallback_Proxy_Broker_ == 0)
    {
      NotifyExt_ReconnectionCallback_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "is_alive",
      8,
      this->the_TAO_ReconnectionCallback_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

NotifyExt::ReconnectionCallback::ReconnectionCallback (void)
 : the_TAO_ReconnectionCallback_Proxy_Broker_ (0)
{
  this->NotifyExt_ReconnectionCallback_setup_collocation ();
}

void
NotifyExt::ReconnectionCallback::NotifyExt_ReconnectionCallback_setup_collocation ()
{
  if (::NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ReconnectionCallback_Proxy_Broker_ =
        ::NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer (this);
    }
}

NotifyExt::ReconnectionCallback::~ReconnectionCallback (void)
{}

void 
NotifyExt::ReconnectionCallback::_tao_any_destructor (void *_tao_void_pointer)
{
  ReconnectionCallback *_tao_tmp_pointer =
    static_cast<ReconnectionCallback *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyExt::ReconnectionCallback_ptr
NotifyExt::ReconnectionCallback::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ReconnectionCallback>::narrow (
        _tao_objref,
        "IDL:NotifyExt/ReconnectionCallback:1.0",
        NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::ReconnectionCallback_ptr
NotifyExt::ReconnectionCallback::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ReconnectionCallback>::unchecked_narrow (
        _tao_objref,
        "IDL:NotifyExt/ReconnectionCallback:1.0",
        NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::ReconnectionCallback_ptr
NotifyExt::ReconnectionCallback::_nil (void)
{
  return 0;
}

NotifyExt::ReconnectionCallback_ptr
NotifyExt::ReconnectionCallback::_duplicate (ReconnectionCallback_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyExt::ReconnectionCallback::_tao_release (ReconnectionCallback_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyExt::ReconnectionCallback::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionCallback:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyExt::ReconnectionCallback::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/ReconnectionCallback:1.0";
}

::CORBA::Boolean
NotifyExt::ReconnectionCallback::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_ReconnectionCallback (
    ::CORBA::tk_objref,
    "IDL:NotifyExt/ReconnectionCallback:1.0",
    "ReconnectionCallback");
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ReconnectionCallback =
    &_tao_tc_NotifyExt_ReconnectionCallback;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyExt::ReconnectionRegistry.

NotifyExt::ReconnectionRegistry_ptr
TAO::Objref_Traits<NotifyExt::ReconnectionRegistry>::duplicate (
    NotifyExt::ReconnectionRegistry_ptr p)
{
  return NotifyExt::ReconnectionRegistry::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyExt::ReconnectionRegistry>::release (
    NotifyExt::ReconnectionRegistry_ptr p)
{
  ::CORBA::release (p);
}

NotifyExt::ReconnectionRegistry_ptr
TAO::Objref_Traits<NotifyExt::ReconnectionRegistry>::nil (void)
{
  return NotifyExt::ReconnectionRegistry::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyExt::ReconnectionRegistry>::marshal (
    const NotifyExt::ReconnectionRegistry_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_ReconnectionRegistry_ReconnectionID (
    ::CORBA::tk_alias,
    "IDL:NotifyExt/ReconnectionRegistry/ReconnectionID:1.0",
    "ReconnectionID",
    &CORBA::_tc_long);
  
::CORBA::TypeCode_ptr const NotifyExt::ReconnectionRegistry::_tc_ReconnectionID =
  &_tao_tc_NotifyExt_ReconnectionRegistry_ReconnectionID;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::NotifyExt::ReconnectionRegistry::ReconnectionID
NotifyExt::ReconnectionRegistry::register_callback (
  ::NotifyExt::ReconnectionCallback_ptr reconection)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReconnectionRegistry_Proxy_Broker_ == 0)
    {
      NotifyExt_ReconnectionRegistry_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< ::NotifyExt::ReconnectionCallback>::in_arg_val _tao_reconection (reconection);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_reconection
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "register_callback",
      17,
      this->the_TAO_ReconnectionRegistry_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
NotifyExt::ReconnectionRegistry::unregister_callback (
  ::NotifyExt::ReconnectionRegistry::ReconnectionID id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReconnectionRegistry_Proxy_Broker_ == 0)
    {
      NotifyExt_ReconnectionRegistry_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_id (id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_id
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "unregister_callback",
      19,
      this->the_TAO_ReconnectionRegistry_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CORBA::Boolean
NotifyExt::ReconnectionRegistry::is_alive (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ReconnectionRegistry_Proxy_Broker_ == 0)
    {
      NotifyExt_ReconnectionRegistry_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "is_alive",
      8,
      this->the_TAO_ReconnectionRegistry_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

NotifyExt::ReconnectionRegistry::ReconnectionRegistry (void)
 : the_TAO_ReconnectionRegistry_Proxy_Broker_ (0)
{
  this->NotifyExt_ReconnectionRegistry_setup_collocation ();
}

void
NotifyExt::ReconnectionRegistry::NotifyExt_ReconnectionRegistry_setup_collocation ()
{
  if (::NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ReconnectionRegistry_Proxy_Broker_ =
        ::NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer (this);
    }
}

NotifyExt::ReconnectionRegistry::~ReconnectionRegistry (void)
{}

void 
NotifyExt::ReconnectionRegistry::_tao_any_destructor (void *_tao_void_pointer)
{
  ReconnectionRegistry *_tao_tmp_pointer =
    static_cast<ReconnectionRegistry *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyExt::ReconnectionRegistry_ptr
NotifyExt::ReconnectionRegistry::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ReconnectionRegistry>::narrow (
        _tao_objref,
        "IDL:NotifyExt/ReconnectionRegistry:1.0",
        NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::ReconnectionRegistry_ptr
NotifyExt::ReconnectionRegistry::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ReconnectionRegistry>::unchecked_narrow (
        _tao_objref,
        "IDL:NotifyExt/ReconnectionRegistry:1.0",
        NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::ReconnectionRegistry_ptr
NotifyExt::ReconnectionRegistry::_nil (void)
{
  return 0;
}

NotifyExt::ReconnectionRegistry_ptr
NotifyExt::ReconnectionRegistry::_duplicate (ReconnectionRegistry_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyExt::ReconnectionRegistry::_tao_release (ReconnectionRegistry_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyExt::ReconnectionRegistry::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionRegistry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyExt::ReconnectionRegistry::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/ReconnectionRegistry:1.0";
}

::CORBA::Boolean
NotifyExt::ReconnectionRegistry::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_ReconnectionRegistry (
    ::CORBA::tk_objref,
    "IDL:NotifyExt/ReconnectionRegistry:1.0",
    "ReconnectionRegistry");
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ReconnectionRegistry =
    &_tao_tc_NotifyExt_ReconnectionRegistry;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyExt::EventChannelFactory.

NotifyExt::EventChannelFactory_ptr
TAO::Objref_Traits<NotifyExt::EventChannelFactory>::duplicate (
    NotifyExt::EventChannelFactory_ptr p)
{
  return NotifyExt::EventChannelFactory::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyExt::EventChannelFactory>::release (
    NotifyExt::EventChannelFactory_ptr p)
{
  ::CORBA::release (p);
}

NotifyExt::EventChannelFactory_ptr
TAO::Objref_Traits<NotifyExt::EventChannelFactory>::nil (void)
{
  return NotifyExt::EventChannelFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyExt::EventChannelFactory>::marshal (
    const NotifyExt::EventChannelFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
NotifyExt::EventChannelFactory::destroy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFactory_Proxy_Broker_ == 0)
    {
      NotifyExt_EventChannelFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "destroy",
      7,
      this->the_TAO_EventChannelFactory_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
NotifyExt::EventChannelFactory::save_topology (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFactory_Proxy_Broker_ == 0)
    {
      NotifyExt_EventChannelFactory_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "save_topology",
      13,
      this->the_TAO_EventChannelFactory_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);
}

NotifyExt::EventChannelFactory::EventChannelFactory (void)
 : the_TAO_EventChannelFactory_Proxy_Broker_ (0)
{
  this->NotifyExt_EventChannelFactory_setup_collocation ();
}

void
NotifyExt::EventChannelFactory::NotifyExt_EventChannelFactory_setup_collocation ()
{
  if (::NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannelFactory_Proxy_Broker_ =
        ::NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_EventChannelFactory_setup_collocation ();
  this->NotifyExt_ReconnectionRegistry_setup_collocation ();
}

NotifyExt::EventChannelFactory::~EventChannelFactory (void)
{}

void 
NotifyExt::EventChannelFactory::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannelFactory *_tao_tmp_pointer =
    static_cast<EventChannelFactory *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyExt::EventChannelFactory_ptr
NotifyExt::EventChannelFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFactory>::narrow (
        _tao_objref,
        "IDL:NotifyExt/EventChannelFactory:1.0",
        NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::EventChannelFactory_ptr
NotifyExt::EventChannelFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFactory>::unchecked_narrow (
        _tao_objref,
        "IDL:NotifyExt/EventChannelFactory:1.0",
        NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::EventChannelFactory_ptr
NotifyExt::EventChannelFactory::_nil (void)
{
  return 0;
}

NotifyExt::EventChannelFactory_ptr
NotifyExt::EventChannelFactory::_duplicate (EventChannelFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyExt::EventChannelFactory::_tao_release (EventChannelFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyExt::EventChannelFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ReconnectionRegistry:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/EventChannelFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyExt::EventChannelFactory::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/EventChannelFactory:1.0";
}

::CORBA::Boolean
NotifyExt::EventChannelFactory::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_EventChannelFactory (
    ::CORBA::tk_objref,
    "IDL:NotifyExt/EventChannelFactory:1.0",
    "EventChannelFactory");
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_EventChannelFactory =
    &_tao_tc_NotifyExt_EventChannelFactory;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyExt::ConsumerAdmin.

NotifyExt::ConsumerAdmin_ptr
TAO::Objref_Traits<NotifyExt::ConsumerAdmin>::duplicate (
    NotifyExt::ConsumerAdmin_ptr p)
{
  return NotifyExt::ConsumerAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyExt::ConsumerAdmin>::release (
    NotifyExt::ConsumerAdmin_ptr p)
{
  ::CORBA::release (p);
}

NotifyExt::ConsumerAdmin_ptr
TAO::Objref_Traits<NotifyExt::ConsumerAdmin>::nil (void)
{
  return NotifyExt::ConsumerAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyExt::ConsumerAdmin>::marshal (
    const NotifyExt::ConsumerAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxySupplier_ptr
NotifyExt::ConsumerAdmin::obtain_notification_push_supplier_with_qos (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id,
  const ::CosNotification::QoSProperties & initial_qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_ConsumerAdmin_Proxy_Broker_ == 0)
    {
      NotifyExt_ConsumerAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos (initial_qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_initial_qos
    };

  static TAO::Exception_Data
  _tao_NotifyExt_ConsumerAdmin_obtain_notification_push_supplier_with_qos_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "obtain_notification_push_supplier_with_qos",
      42,
      this->the_TAO_ConsumerAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyExt_ConsumerAdmin_obtain_notification_push_supplier_with_qos_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

NotifyExt::ConsumerAdmin::ConsumerAdmin (void)
 : the_TAO_ConsumerAdmin_Proxy_Broker_ (0)
{
  this->NotifyExt_ConsumerAdmin_setup_collocation ();
}

void
NotifyExt::ConsumerAdmin::NotifyExt_ConsumerAdmin_setup_collocation ()
{
  if (::NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_ConsumerAdmin_Proxy_Broker_ =
        ::NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_ConsumerAdmin_setup_collocation ();
}

NotifyExt::ConsumerAdmin::~ConsumerAdmin (void)
{}

void 
NotifyExt::ConsumerAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  ConsumerAdmin *_tao_tmp_pointer =
    static_cast<ConsumerAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyExt::ConsumerAdmin_ptr
NotifyExt::ConsumerAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::narrow (
        _tao_objref,
        "IDL:NotifyExt/ConsumerAdmin:1.0",
        NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::ConsumerAdmin_ptr
NotifyExt::ConsumerAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ConsumerAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:NotifyExt/ConsumerAdmin:1.0",
        NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::ConsumerAdmin_ptr
NotifyExt::ConsumerAdmin::_nil (void)
{
  return 0;
}

NotifyExt::ConsumerAdmin_ptr
NotifyExt::ConsumerAdmin::_duplicate (ConsumerAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyExt::ConsumerAdmin::_tao_release (ConsumerAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyExt::ConsumerAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyExt::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/ConsumerAdmin:1.0";
}

::CORBA::Boolean
NotifyExt::ConsumerAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_ConsumerAdmin (
    ::CORBA::tk_objref,
    "IDL:NotifyExt/ConsumerAdmin:1.0",
    "ConsumerAdmin");
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerAdmin =
    &_tao_tc_NotifyExt_ConsumerAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for NotifyExt::SupplierAdmin.

NotifyExt::SupplierAdmin_ptr
TAO::Objref_Traits<NotifyExt::SupplierAdmin>::duplicate (
    NotifyExt::SupplierAdmin_ptr p)
{
  return NotifyExt::SupplierAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<NotifyExt::SupplierAdmin>::release (
    NotifyExt::SupplierAdmin_ptr p)
{
  ::CORBA::release (p);
}

NotifyExt::SupplierAdmin_ptr
TAO::Objref_Traits<NotifyExt::SupplierAdmin>::nil (void)
{
  return NotifyExt::SupplierAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<NotifyExt::SupplierAdmin>::marshal (
    const NotifyExt::SupplierAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotifyChannelAdmin::ProxyConsumer_ptr
NotifyExt::SupplierAdmin::obtain_notification_push_consumer_with_qos (
  ::CosNotifyChannelAdmin::ClientType ctype,
  ::CosNotifyChannelAdmin::ProxyID_out proxy_id,
  const ::CosNotification::QoSProperties & initial_qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_SupplierAdmin_Proxy_Broker_ == 0)
    {
      NotifyExt_SupplierAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype (ctype);
  TAO::Arg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id (proxy_id);
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos (initial_qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ctype,
      &_tao_proxy_id,
      &_tao_initial_qos
    };

  static TAO::Exception_Data
  _tao_NotifyExt_SupplierAdmin_obtain_notification_push_consumer_with_qos_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotifyChannelAdmin/AdminLimitExceeded:1.0",
        CosNotifyChannelAdmin::AdminLimitExceeded::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotifyChannelAdmin::_tc_AdminLimitExceeded
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "obtain_notification_push_consumer_with_qos",
      42,
      this->the_TAO_SupplierAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_NotifyExt_SupplierAdmin_obtain_notification_push_consumer_with_qos_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

NotifyExt::SupplierAdmin::SupplierAdmin (void)
 : the_TAO_SupplierAdmin_Proxy_Broker_ (0)
{
  this->NotifyExt_SupplierAdmin_setup_collocation ();
}

void
NotifyExt::SupplierAdmin::NotifyExt_SupplierAdmin_setup_collocation ()
{
  if (::NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_SupplierAdmin_Proxy_Broker_ =
        ::NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CosNotifyChannelAdmin_SupplierAdmin_setup_collocation ();
}

NotifyExt::SupplierAdmin::~SupplierAdmin (void)
{}

void 
NotifyExt::SupplierAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  SupplierAdmin *_tao_tmp_pointer =
    static_cast<SupplierAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

NotifyExt::SupplierAdmin_ptr
NotifyExt::SupplierAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::narrow (
        _tao_objref,
        "IDL:NotifyExt/SupplierAdmin:1.0",
        NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::SupplierAdmin_ptr
NotifyExt::SupplierAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<SupplierAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:NotifyExt/SupplierAdmin:1.0",
        NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

NotifyExt::SupplierAdmin_ptr
NotifyExt::SupplierAdmin::_nil (void)
{
  return 0;
}

NotifyExt::SupplierAdmin_ptr
NotifyExt::SupplierAdmin::_duplicate (SupplierAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
NotifyExt::SupplierAdmin::_tao_release (SupplierAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
NotifyExt::SupplierAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:NotifyExt/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* NotifyExt::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:NotifyExt/SupplierAdmin:1.0";
}

::CORBA::Boolean
NotifyExt::SupplierAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_NotifyExt_SupplierAdmin (
    ::CORBA::tk_objref,
    "IDL:NotifyExt/SupplierAdmin:1.0",
    "SupplierAdmin");
  

namespace NotifyExt
{
  ::CORBA::TypeCode_ptr const _tc_SupplierAdmin =
    &_tao_tc_NotifyExt_SupplierAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::NotifyExt::PriorityModel _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::NotifyExt::PriorityModel>::insert (
        _tao_any,
        ::NotifyExt::_tc_PriorityModel,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyExt::PriorityModel &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::NotifyExt::PriorityModel>::extract (
          _tao_any,
          ::NotifyExt::_tc_PriorityModel,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::PriorityModel _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<NotifyExt::PriorityModel>::insert (
      _tao_any,
      NotifyExt::_tc_PriorityModel,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::PriorityModel &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<NotifyExt::PriorityModel>::extract (
        _tao_any,
        NotifyExt::_tc_PriorityModel,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolParams &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::NotifyExt::ThreadPoolParams *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolParams>::insert_copy (
          _tao_any,
          ::NotifyExt::ThreadPoolParams::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolParams,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      NotifyExt::ThreadPoolParams *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolParams>::insert (
        _tao_any,
        ::NotifyExt::ThreadPoolParams::_tao_any_destructor,
        ::NotifyExt::_tc_ThreadPoolParams,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyExt::ThreadPoolParams *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::NotifyExt::ThreadPoolParams *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolParams *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolParams>::extract (
          _tao_any,
          ::NotifyExt::ThreadPoolParams::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolParams,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolParams &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<NotifyExt::ThreadPoolParams *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolParams>::insert_copy (
        _tao_any,
        NotifyExt::ThreadPoolParams::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolParams,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolParams *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolParams>::insert (
      _tao_any,
      NotifyExt::ThreadPoolParams::_tao_any_destructor,
      NotifyExt::_tc_ThreadPoolParams,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolParams *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const NotifyExt::ThreadPoolParams *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolParams *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolParams>::extract (
        _tao_any,
        NotifyExt::ThreadPoolParams::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolParams,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolLane &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::NotifyExt::ThreadPoolLane *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLane>::insert_copy (
          _tao_any,
          ::NotifyExt::ThreadPoolLane::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolLane,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      NotifyExt::ThreadPoolLane *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLane>::insert (
        _tao_any,
        ::NotifyExt::ThreadPoolLane::_tao_any_destructor,
        ::NotifyExt::_tc_ThreadPoolLane,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyExt::ThreadPoolLane *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::NotifyExt::ThreadPoolLane *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolLane *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLane>::extract (
          _tao_any,
          ::NotifyExt::ThreadPoolLane::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolLane,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolLane &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<NotifyExt::ThreadPoolLane *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLane>::insert_copy (
        _tao_any,
        NotifyExt::ThreadPoolLane::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolLane,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolLane *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLane>::insert (
      _tao_any,
      NotifyExt::ThreadPoolLane::_tao_any_destructor,
      NotifyExt::_tc_ThreadPoolLane,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolLane *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const NotifyExt::ThreadPoolLane *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolLane *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLane>::extract (
        _tao_any,
        NotifyExt::ThreadPoolLane::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolLane,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolLanes_List &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::NotifyExt::ThreadPoolLanes_List *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLanes_List>::insert_copy (
          _tao_any,
          ::NotifyExt::ThreadPoolLanes_List::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolLanes_List,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::NotifyExt::ThreadPoolLanes_List *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLanes_List>::insert (
        _tao_any,
        ::NotifyExt::ThreadPoolLanes_List::_tao_any_destructor,
        ::NotifyExt::_tc_ThreadPoolLanes_List,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyExt::ThreadPoolLanes_List *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::NotifyExt::ThreadPoolLanes_List *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolLanes_List *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLanes_List>::extract (
          _tao_any,
          ::NotifyExt::ThreadPoolLanes_List::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolLanes_List,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolLanes_List &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<NotifyExt::ThreadPoolLanes_List *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLanes_List>::insert_copy (
        _tao_any,
        NotifyExt::ThreadPoolLanes_List::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolLanes_List,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolLanes_List *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLanes_List>::insert (
      _tao_any,
      NotifyExt::ThreadPoolLanes_List::_tao_any_destructor,
      NotifyExt::_tc_ThreadPoolLanes_List,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolLanes_List *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const NotifyExt::ThreadPoolLanes_List *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolLanes_List *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLanes_List>::extract (
        _tao_any,
        NotifyExt::ThreadPoolLanes_List::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolLanes_List,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolLanesParams &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::NotifyExt::ThreadPoolLanesParams *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLanesParams>::insert_copy (
          _tao_any,
          ::NotifyExt::ThreadPoolLanesParams::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolLanesParams,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      NotifyExt::ThreadPoolLanesParams *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLanesParams>::insert (
        _tao_any,
        ::NotifyExt::ThreadPoolLanesParams::_tao_any_destructor,
        ::NotifyExt::_tc_ThreadPoolLanesParams,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::NotifyExt::ThreadPoolLanesParams *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::NotifyExt::ThreadPoolLanesParams *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::NotifyExt::ThreadPoolLanesParams *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::NotifyExt::ThreadPoolLanesParams>::extract (
          _tao_any,
          ::NotifyExt::ThreadPoolLanesParams::_tao_any_destructor,
          ::NotifyExt::_tc_ThreadPoolLanesParams,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolLanesParams &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<NotifyExt::ThreadPoolLanesParams *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLanesParams>::insert_copy (
        _tao_any,
        NotifyExt::ThreadPoolLanesParams::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolLanesParams,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolLanesParams *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLanesParams>::insert (
      _tao_any,
      NotifyExt::ThreadPoolLanesParams::_tao_any_destructor,
      NotifyExt::_tc_ThreadPoolLanesParams,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ThreadPoolLanesParams *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const NotifyExt::ThreadPoolLanesParams *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const NotifyExt::ThreadPoolLanesParams *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<NotifyExt::ThreadPoolLanesParams>::extract (
        _tao_any,
        NotifyExt::ThreadPoolLanesParams::_tao_any_destructor,
        NotifyExt::_tc_ThreadPoolLanesParams,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyExt::ReconnectionCallback>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ReconnectionCallback_ptr _tao_elem)
  {
    ReconnectionCallback_ptr _tao_objptr =
      ReconnectionCallback::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ReconnectionCallback_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ReconnectionCallback>::insert (
        _tao_any,
        ReconnectionCallback::_tao_any_destructor,
        _tc_ReconnectionCallback,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ReconnectionCallback_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ReconnectionCallback>::extract (
          _tao_any,
          ReconnectionCallback::_tao_any_destructor,
          _tc_ReconnectionCallback,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ReconnectionCallback_ptr _tao_elem)
{
  NotifyExt::ReconnectionCallback_ptr _tao_objptr =
    NotifyExt::ReconnectionCallback::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ReconnectionCallback_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyExt::ReconnectionCallback>::insert (
      _tao_any,
      NotifyExt::ReconnectionCallback::_tao_any_destructor,
      NotifyExt::_tc_ReconnectionCallback,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ReconnectionCallback_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyExt::ReconnectionCallback>::extract (
        _tao_any,
        NotifyExt::ReconnectionCallback::_tao_any_destructor,
        NotifyExt::_tc_ReconnectionCallback,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyExt::ReconnectionRegistry>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ReconnectionRegistry_ptr _tao_elem)
  {
    ReconnectionRegistry_ptr _tao_objptr =
      ReconnectionRegistry::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ReconnectionRegistry_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ReconnectionRegistry>::insert (
        _tao_any,
        ReconnectionRegistry::_tao_any_destructor,
        _tc_ReconnectionRegistry,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ReconnectionRegistry_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ReconnectionRegistry>::extract (
          _tao_any,
          ReconnectionRegistry::_tao_any_destructor,
          _tc_ReconnectionRegistry,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ReconnectionRegistry_ptr _tao_elem)
{
  NotifyExt::ReconnectionRegistry_ptr _tao_objptr =
    NotifyExt::ReconnectionRegistry::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ReconnectionRegistry_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyExt::ReconnectionRegistry>::insert (
      _tao_any,
      NotifyExt::ReconnectionRegistry::_tao_any_destructor,
      NotifyExt::_tc_ReconnectionRegistry,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ReconnectionRegistry_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyExt::ReconnectionRegistry>::extract (
        _tao_any,
        NotifyExt::ReconnectionRegistry::_tao_any_destructor,
        NotifyExt::_tc_ReconnectionRegistry,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyExt::EventChannelFactory>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr _tao_elem)
  {
    EventChannelFactory_ptr _tao_objptr =
      EventChannelFactory::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannelFactory>::insert (
        _tao_any,
        EventChannelFactory::_tao_any_destructor,
        _tc_EventChannelFactory,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannelFactory_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannelFactory>::extract (
          _tao_any,
          EventChannelFactory::_tao_any_destructor,
          _tc_EventChannelFactory,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::EventChannelFactory_ptr _tao_elem)
{
  NotifyExt::EventChannelFactory_ptr _tao_objptr =
    NotifyExt::EventChannelFactory::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::EventChannelFactory_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyExt::EventChannelFactory>::insert (
      _tao_any,
      NotifyExt::EventChannelFactory::_tao_any_destructor,
      NotifyExt::_tc_EventChannelFactory,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::EventChannelFactory_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyExt::EventChannelFactory>::extract (
        _tao_any,
        NotifyExt::EventChannelFactory::_tao_any_destructor,
        NotifyExt::_tc_EventChannelFactory,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyExt::ConsumerAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr _tao_elem)
  {
    ConsumerAdmin_ptr _tao_objptr =
      ConsumerAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ConsumerAdmin>::insert (
        _tao_any,
        ConsumerAdmin::_tao_any_destructor,
        _tc_ConsumerAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ConsumerAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ConsumerAdmin>::extract (
          _tao_any,
          ConsumerAdmin::_tao_any_destructor,
          _tc_ConsumerAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ConsumerAdmin_ptr _tao_elem)
{
  NotifyExt::ConsumerAdmin_ptr _tao_objptr =
    NotifyExt::ConsumerAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::ConsumerAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyExt::ConsumerAdmin>::insert (
      _tao_any,
      NotifyExt::ConsumerAdmin::_tao_any_destructor,
      NotifyExt::_tc_ConsumerAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::ConsumerAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyExt::ConsumerAdmin>::extract (
        _tao_any,
        NotifyExt::ConsumerAdmin::_tao_any_destructor,
        NotifyExt::_tc_ConsumerAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<NotifyExt::SupplierAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace NotifyExt
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr _tao_elem)
  {
    SupplierAdmin_ptr _tao_objptr =
      SupplierAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SupplierAdmin>::insert (
        _tao_any,
        SupplierAdmin::_tao_any_destructor,
        _tc_SupplierAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SupplierAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SupplierAdmin>::extract (
          _tao_any,
          SupplierAdmin::_tao_any_destructor,
          _tc_SupplierAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::SupplierAdmin_ptr _tao_elem)
{
  NotifyExt::SupplierAdmin_ptr _tao_objptr =
    NotifyExt::SupplierAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    NotifyExt::SupplierAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<NotifyExt::SupplierAdmin>::insert (
      _tao_any,
      NotifyExt::SupplierAdmin::_tao_any_destructor,
      NotifyExt::_tc_SupplierAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    NotifyExt::SupplierAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<NotifyExt::SupplierAdmin>::extract (
        _tao_any,
        NotifyExt::SupplierAdmin::_tao_any_destructor,
        NotifyExt::_tc_SupplierAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, NotifyExt::PriorityModel _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, NotifyExt::PriorityModel & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<NotifyExt::PriorityModel> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ThreadPoolParams &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.priority_model) &&
    (strm << _tao_aggregate.server_priority) &&
    (strm << _tao_aggregate.stacksize) &&
    (strm << _tao_aggregate.static_threads) &&
    (strm << _tao_aggregate.dynamic_threads) &&
    (strm << _tao_aggregate.default_priority) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.allow_request_buffering)) &&
    (strm << _tao_aggregate.max_buffered_requests) &&
    (strm << _tao_aggregate.max_request_buffer_size);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ThreadPoolParams &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.priority_model) &&
    (strm >> _tao_aggregate.server_priority) &&
    (strm >> _tao_aggregate.stacksize) &&
    (strm >> _tao_aggregate.static_threads) &&
    (strm >> _tao_aggregate.dynamic_threads) &&
    (strm >> _tao_aggregate.default_priority) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.allow_request_buffering)) &&
    (strm >> _tao_aggregate.max_buffered_requests) &&
    (strm >> _tao_aggregate.max_request_buffer_size);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ThreadPoolLane &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.priority_model) &&
    (strm << _tao_aggregate.server_priority) &&
    (strm << _tao_aggregate.lane_priority) &&
    (strm << _tao_aggregate.static_threads) &&
    (strm << _tao_aggregate.dynamic_threads);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ThreadPoolLane &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.priority_model) &&
    (strm >> _tao_aggregate.server_priority) &&
    (strm >> _tao_aggregate.lane_priority) &&
    (strm >> _tao_aggregate.static_threads) &&
    (strm >> _tao_aggregate.dynamic_threads);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_NotifyExt_ThreadPoolLanes_List_CPP_
#define _TAO_CDR_OP_NotifyExt_ThreadPoolLanes_List_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ThreadPoolLanes_List &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ThreadPoolLanes_List &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_NotifyExt_ThreadPoolLanes_List_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ThreadPoolLanesParams &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.priority_model) &&
    (strm << _tao_aggregate.server_priority) &&
    (strm << _tao_aggregate.stacksize) &&
    (strm << _tao_aggregate.lanes) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.allow_borrowing)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.allow_request_buffering)) &&
    (strm << _tao_aggregate.max_buffered_requests) &&
    (strm << _tao_aggregate.max_request_buffer_size);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ThreadPoolLanesParams &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.priority_model) &&
    (strm >> _tao_aggregate.server_priority) &&
    (strm >> _tao_aggregate.stacksize) &&
    (strm >> _tao_aggregate.lanes) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.allow_borrowing)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.allow_request_buffering)) &&
    (strm >> _tao_aggregate.max_buffered_requests) &&
    (strm >> _tao_aggregate.max_request_buffer_size);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ReconnectionCallback_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ReconnectionCallback_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyExt::ReconnectionCallback RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_ReconnectionCallback_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ReconnectionRegistry_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ReconnectionRegistry_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyExt::ReconnectionRegistry RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_ReconnectionRegistry_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::EventChannelFactory_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::EventChannelFactory_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyExt::EventChannelFactory RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_EventChannelFactory_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::ConsumerAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::ConsumerAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyExt::ConsumerAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_ConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const NotifyExt::SupplierAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    NotifyExt::SupplierAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::NotifyExt::SupplierAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        NotifyExt__TAO_SupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


