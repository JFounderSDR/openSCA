# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.IFRService
#
# $Id: gnu.mpd 1861 2011-08-31 16:18:08Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.IFRService
DEPENDENCY_FILE  = .depend.IFRService

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TAO_IFRService.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TAO_IFRService

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TAO_IFRService.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  IFRService/AbstractInterfaceDef_i.cpp \
  IFRService/AliasDef_i.cpp \
  IFRService/ArrayDef_i.cpp \
  IFRService/AttributeDef_i.cpp \
  IFRService/ComponentContainer_i.cpp \
  IFRService/ComponentDef_i.cpp \
  IFRService/ComponentModuleDef_i.cpp \
  IFRService/ComponentRepository_i.cpp \
  IFRService/ConstantDef_i.cpp \
  IFRService/ConsumesDef_i.cpp \
  IFRService/Contained_i.cpp \
  IFRService/Container_i.cpp \
  IFRService/EmitsDef_i.cpp \
  IFRService/EnumDef_i.cpp \
  IFRService/EventDef_i.cpp \
  IFRService/EventPortDef_i.cpp \
  IFRService/ExceptionDef_i.cpp \
  IFRService/ExtAbstractInterfaceDef_i.cpp \
  IFRService/ExtAttributeDef_i.cpp \
  IFRService/ExtInterfaceDef_i.cpp \
  IFRService/ExtLocalInterfaceDef_i.cpp \
  IFRService/ExtValueDef_i.cpp \
  IFRService/FactoryDef_i.cpp \
  IFRService/FinderDef_i.cpp \
  IFRService/FixedDef_i.cpp \
  IFRService/HomeDef_i.cpp \
  IFRService/IDLType_i.cpp \
  IFRService/InterfaceAttrExtension_i.cpp \
  IFRService/InterfaceDef_i.cpp \
  IFRService/IRObject_i.cpp \
  IFRService/LocalInterfaceDef_i.cpp \
  IFRService/ModuleDef_i.cpp \
  IFRService/NativeDef_i.cpp \
  IFRService/OperationDef_i.cpp \
  IFRService/PrimitiveDef_i.cpp \
  IFRService/ProvidesDef_i.cpp \
  IFRService/PublishesDef_i.cpp \
  IFRService/RecursDef_i.cpp \
  IFRService/Repository_i.cpp \
  IFRService/SequenceDef_i.cpp \
  IFRService/StringDef_i.cpp \
  IFRService/StructDef_i.cpp \
  IFRService/TypedefDef_i.cpp \
  IFRService/UnionDef_i.cpp \
  IFRService/UsesDef_i.cpp \
  IFRService/ValueBoxDef_i.cpp \
  IFRService/ValueDef_i.cpp \
  IFRService/ValueMemberDef_i.cpp \
  IFRService/WstringDef_i.cpp \
  IFRService/IFR_Service_Utils.cpp \
  IFRService/Options.cpp \
  IFRService/IFR_Service_Loader.cpp

VPATH = .:IFRService

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_IFR_Client_skel -lTAO_IORTable -lTAO_Svc_Utils -lTAO_PortableServer -lTAO_TypeCodeFactory -lTAO_IFR_Client -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,$(ACE_ROOT)/lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  IFRService.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)$(ACE_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT)/orbsvcs
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/IFRService
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_IFR_Client_skel TAO_IORTable TAO_Svc_Utils TAO_PortableServer TAO_TypeCodeFactory TAO_IFR_Client TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_IFR_Client_skel TAO_IORTable TAO_Svc_Utils TAO_PortableServer TAO_TypeCodeFactory TAO_IFR_Client TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(ace_for_tao),1)
ifneq ($(uses_wchar),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif

ifeq (,$(TAO_ORBSVCS))
ifneq ($(ace_for_tao),1)
ifneq ($(uses_wchar),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
ifneq ($(ace_for_tao),1)
ifneq ($(uses_wchar),1)
  ifeq (IFRService, $(findstring IFRService, $(TAO_ORBSVCS)))
  else
    LIB_CHECKED   =
    SHLIB =
  endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_IFRSERVICE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo IFRService will not be built due to the following missing library: $(LIBCHECK) >&2

ifeq ($(ace_for_tao),1)
avoids_enabled_macros += ace_for_tao
endif
ifeq ($(uses_wchar),1)
avoids_enabled_macros += uses_wchar
endif
avoid_warning:
	@echo IFRService will not be built due to the following enabled make macros: $(avoids_enabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifneq ($(ace_for_tao),1)
ifneq ($(uses_wchar),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

LIB_INST_TAGS = header_files template_files$(if $(findstring 1,$(inline)), inline_files)$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
ifneq ($(ace_for_tao),1)
ifneq ($(uses_wchar),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	$(ACE_ROOT)/bin/ace_install_pkgconfig.pl TAO_CosConcurrency.pc.in TAO_CosConcurrency_Serv.pc.in TAO_CosConcurrency_Skel.pc.in TAO_CosEvent.pc.in TAO_CosEvent_Serv.pc.in TAO_CosEvent_Skel.pc.in TAO_CosLifeCycle.pc.in TAO_CosLifeCycle_Skel.pc.in TAO_CosLoadBalancing.pc.in TAO_CosNaming.pc.in TAO_CosNaming_Serv.pc.in TAO_CosNaming_Skel.pc.in TAO_CosNotification.pc.in TAO_CosNotification_Serv.pc.in TAO_CosNotification_Skel.pc.in TAO_CosProperty.pc.in TAO_CosProperty_Serv.pc.in TAO_CosProperty_Skel.pc.in TAO_CosTime.pc.in TAO_CosTime_Serv.pc.in TAO_CosTime_Skel.pc.in TAO_CosTrading.pc.in TAO_CosTrading_Serv.pc.in TAO_CosTrading_Skel.pc.in TAO_DsEventLogAdmin.pc.in TAO_DsEventLogAdmin_Serv.pc.in TAO_DsEventLogAdmin_Skel.pc.in TAO_DsLogAdmin.pc.in TAO_DsLogAdmin_Serv.pc.in TAO_DsLogAdmin_Skel.pc.in TAO_DsNotifyLogAdmin.pc.in TAO_DsNotifyLogAdmin_Serv.pc.in TAO_DsNotifyLogAdmin_Skel.pc.in TAO_FaultTolerance.pc.in TAO_FTORB_Utils.pc.in TAO_FT_ClientORB.pc.in TAO_FT_ServerORB.pc.in TAO_PortableGroup.pc.in TAO_RTEvent.pc.in TAO_RTEventLogAdmin.pc.in TAO_RTEventLogAdmin_Serv.pc.in TAO_RTEventLogAdmin_Skel.pc.in TAO_RTEvent_Serv.pc.in TAO_RTEvent_Skel.pc.in TAO_Svc_Utils.pc.in --destdir "$(DESTDIR)" --prefix $(INSTALL_PREFIX) --libdir $(INSTALL_LIB) --libs "$(LIBS)" --version $(GNUACE_PROJECT_VERSION)
endif
endif
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#AV.mpc
#CosConcurrency.mpc
#CosEvent.mpc
#CosLifeCycle.mpc
#CosLoadBalancing.mpc
#CosNaming.mpc
#CosNaming_Serv.mpc
#CosNaming_Skel.mpc
#CosNotification.mpc
#CosProperty.mpc
#CosTime.mpc
#CosTrading.mpc
#DsEventLogAdmin.mpc
#DsLogAdmin.mpc
#DsNotifyLogAdmin.mpc
#FaultTolerance.mpc
#FTORB.mpc
#FtRtEvent.mpc
#HTIOP.mpc
#IFRService.mpc
#PortableGroup.mpc
#RTCORBAEvent.mpc
#RTEvent.mpc
#RTEventLogAdmin.mpc
#RTEvent_Serv.mpc
#RTEvent_Skel.mpc
#RTKokyuEvent.mpc
#RTSched.mpc
#RTSchedEvent.mpc
#RT_Notification.mpc
#Security.mpc
#SSLIOP.mpc
#Svc_Utils.mpc
#cosnaming_serv_persistence.mpb
#ec_typed_events.mpb
#ec_typed_events_idl.mpb
#ec_typed_events_serv.mpb
#ec_typed_events_skel.mpb
#ssliop_params_dup.mpb
#orbsvcs.mwc
#
#inline_files:
#AVStreamsC.inl
#AVStreamsS.inl
#Channel_Clients_T.inl
#CosConcurrencyControlC.inl
#CosConcurrencyControlS.inl
#CosEventChannelAdminC.inl
#CosEventChannelAdminS.inl
#CosEventCommC.inl
#CosEventCommS.inl
#CosLifeCycleC.inl
#CosLifeCycleS.inl
#CosLoadBalancingC.inl
#CosLoadBalancingS.inl
#CosNamingC.inl
#CosNamingS.inl
#CosNotificationC.inl
#CosNotificationS.inl
#CosNotifyChannelAdminC.inl
#CosNotifyChannelAdminS.inl
#CosNotifyCommC.inl
#CosNotifyCommS.inl
#CosNotifyFilterC.inl
#CosNotifyFilterS.inl
#CosPropertyC.inl
#CosPropertyS.inl
#CosTradingC.inl
#CosTradingDynamicC.inl
#CosTradingDynamicS.inl
#CosTradingReposC.inl
#CosTradingReposS.inl
#CosTradingS.inl
#CosTypedEventChannelAdminC.inl
#CosTypedEventChannelAdminS.inl
#CosTypedEventCommC.inl
#CosTypedEventCommS.inl
#CSIC.inl
#CSIIOPC.inl
#CSIIOPS.inl
#CSIS.inl
#DsEventLogAdminC.inl
#DsEventLogAdminS.inl
#DsLogAdminC.inl
#DsLogAdminS.inl
#DsLogNotificationC.inl
#DsLogNotificationS.inl
#DsNotifyLogAdminC.inl
#DsNotifyLogAdminS.inl
#Event_ForwarderC.inl
#Event_ForwarderS.inl
#Event_Utilities.inl
#FTRTC.inl
#FtRtecEventChannelAdminC.inl
#FtRtecEventChannelAdminS.inl
#FtRtecEventCommC.inl
#FtRtecEventCommS.inl
#FTRTS.inl
#FTRT_GroupManagerC.inl
#FTRT_GroupManagerS.inl
#FT_CORBAC.inl
#FT_CORBAS.inl
#FT_CORBA_ORBC.inl
#FT_CORBA_ORBS.inl
#FT_FaultDetectorFactoryC.inl
#FT_FaultDetectorFactoryS.inl
#FT_NotifierC.inl
#FT_NotifierS.inl
#FT_ReplicaC.inl
#FT_ReplicaS.inl
#FT_ReplicationManagerC.inl
#FT_ReplicationManagerS.inl
#GSSUPC.inl
#GSSUPS.inl
#LB_ORTC.inl
#LB_ORTS.inl
#LifeCycleServiceC.inl
#LifeCycleServiceS.inl
#miopC.inl
#miopS.inl
#NotifyExtC.inl
#NotifyExtS.inl
#Null_MediaCtrlC.inl
#Null_MediaCtrlS.inl
#PortableGroupC.inl
#PortableGroupS.inl
#PortableGroup_Simple_DSC.inl
#PortableGroup_Simple_DSS.inl
#RtecBaseC.inl
#RtecBaseS.inl
#RtecDefaultEventDataC.inl
#RtecDefaultEventDataS.inl
#RtecEventChannelAdminC.inl
#RtecEventChannelAdminS.inl
#RtecEventCommC.inl
#RtecEventCommS.inl
#RtecSchedulerC.inl
#RtecSchedulerS.inl
#RtecUDPAdminC.inl
#RtecUDPAdminS.inl
#RTEventLogAdminC.inl
#RTEventLogAdminS.inl
#Scheduler_Factory.inl
#Scheduler_Utilities.inl
#SecurityC.inl
#SecurityLevel1C.inl
#SecurityLevel1S.inl
#SecurityLevel2C.inl
#SecurityLevel2S.inl
#SecurityLevel3C.inl
#SecurityLevel3S.inl
#SecurityS.inl
#sfpC.inl
#sfpS.inl
#TimeBaseC.inl
#TimeBaseS.inl
#TimeServiceC.inl
#TimeServiceS.inl
#Time_Utilities.inl
#
#resource_files:
#IFRService.rc
#
#header_files:
#IFRService/AbstractInterfaceDef_i.h
#IFRService/AliasDef_i.h
#IFRService/ArrayDef_i.h
#IFRService/AttributeDef_i.h
#IFRService/ComponentContainer_i.h
#IFRService/ComponentDef_i.h
#IFRService/ComponentModuleDef_i.h
#IFRService/ComponentRepository_i.h
#IFRService/concrete_classes.h
#IFRService/ConstantDef_i.h
#IFRService/ConsumesDef_i.h
#IFRService/Contained_i.h
#IFRService/Container_i.h
#IFRService/EmitsDef_i.h
#IFRService/EnumDef_i.h
#IFRService/EventDef_i.h
#IFRService/EventPortDef_i.h
#IFRService/ExceptionDef_i.h
#IFRService/ExtAbstractInterfaceDef_i.h
#IFRService/ExtAttributeDef_i.h
#IFRService/ExtInterfaceDef_i.h
#IFRService/ExtLocalInterfaceDef_i.h
#IFRService/ExtValueDef_i.h
#IFRService/FactoryDef_i.h
#IFRService/FinderDef_i.h
#IFRService/FixedDef_i.h
#IFRService/HomeDef_i.h
#IFRService/IDLType_i.h
#IFRService/IFR_macro.h
#IFRService/ifr_service_export.h
#IFRService/IFR_Service_Loader.h
#IFRService/IFR_Service_Utils.h
#IFRService/IFR_Service_Utils_T.h
#IFRService/InterfaceAttrExtension_i.h
#IFRService/InterfaceDef_i.h
#IFRService/IRObject_i.h
#IFRService/LocalInterfaceDef_i.h
#IFRService/ModuleDef_i.h
#IFRService/NativeDef_i.h
#IFRService/OperationDef_i.h
#IFRService/Options.h
#IFRService/PrimitiveDef_i.h
#IFRService/ProvidesDef_i.h
#IFRService/PublishesDef_i.h
#IFRService/RecursDef_i.h
#IFRService/Repository_i.h
#IFRService/SequenceDef_i.h
#IFRService/StringDef_i.h
#IFRService/StructDef_i.h
#IFRService/TypedefDef_i.h
#IFRService/UnionDef_i.h
#IFRService/UsesDef_i.h
#IFRService/ValueBoxDef_i.h
#IFRService/ValueDef_i.h
#IFRService/ValueMemberDef_i.h
#IFRService/WstringDef_i.h
#
#pkgconfig_files:
#TAO_CosConcurrency.pc.in
#TAO_CosConcurrency_Serv.pc.in
#TAO_CosConcurrency_Skel.pc.in
#TAO_CosEvent.pc.in
#TAO_CosEvent_Serv.pc.in
#TAO_CosEvent_Skel.pc.in
#TAO_CosLifeCycle.pc.in
#TAO_CosLifeCycle_Skel.pc.in
#TAO_CosLoadBalancing.pc.in
#TAO_CosNaming.pc.in
#TAO_CosNaming_Serv.pc.in
#TAO_CosNaming_Skel.pc.in
#TAO_CosNotification.pc.in
#TAO_CosNotification_Serv.pc.in
#TAO_CosNotification_Skel.pc.in
#TAO_CosProperty.pc.in
#TAO_CosProperty_Serv.pc.in
#TAO_CosProperty_Skel.pc.in
#TAO_CosTime.pc.in
#TAO_CosTime_Serv.pc.in
#TAO_CosTime_Skel.pc.in
#TAO_CosTrading.pc.in
#TAO_CosTrading_Serv.pc.in
#TAO_CosTrading_Skel.pc.in
#TAO_DsEventLogAdmin.pc.in
#TAO_DsEventLogAdmin_Serv.pc.in
#TAO_DsEventLogAdmin_Skel.pc.in
#TAO_DsLogAdmin.pc.in
#TAO_DsLogAdmin_Serv.pc.in
#TAO_DsLogAdmin_Skel.pc.in
#TAO_DsNotifyLogAdmin.pc.in
#TAO_DsNotifyLogAdmin_Serv.pc.in
#TAO_DsNotifyLogAdmin_Skel.pc.in
#TAO_FaultTolerance.pc.in
#TAO_FTORB_Utils.pc.in
#TAO_FT_ClientORB.pc.in
#TAO_FT_ServerORB.pc.in
#TAO_PortableGroup.pc.in
#TAO_RTEvent.pc.in
#TAO_RTEventLogAdmin.pc.in
#TAO_RTEventLogAdmin_Serv.pc.in
#TAO_RTEventLogAdmin_Skel.pc.in
#TAO_RTEvent_Serv.pc.in
#TAO_RTEvent_Skel.pc.in
#TAO_Svc_Utils.pc.in
#
#source_files:
#IFRService/AbstractInterfaceDef_i.cpp
#IFRService/AliasDef_i.cpp
#IFRService/ArrayDef_i.cpp
#IFRService/AttributeDef_i.cpp
#IFRService/ComponentContainer_i.cpp
#IFRService/ComponentDef_i.cpp
#IFRService/ComponentModuleDef_i.cpp
#IFRService/ComponentRepository_i.cpp
#IFRService/ConstantDef_i.cpp
#IFRService/ConsumesDef_i.cpp
#IFRService/Contained_i.cpp
#IFRService/Container_i.cpp
#IFRService/EmitsDef_i.cpp
#IFRService/EnumDef_i.cpp
#IFRService/EventDef_i.cpp
#IFRService/EventPortDef_i.cpp
#IFRService/ExceptionDef_i.cpp
#IFRService/ExtAbstractInterfaceDef_i.cpp
#IFRService/ExtAttributeDef_i.cpp
#IFRService/ExtInterfaceDef_i.cpp
#IFRService/ExtLocalInterfaceDef_i.cpp
#IFRService/ExtValueDef_i.cpp
#IFRService/FactoryDef_i.cpp
#IFRService/FinderDef_i.cpp
#IFRService/FixedDef_i.cpp
#IFRService/HomeDef_i.cpp
#IFRService/IDLType_i.cpp
#IFRService/InterfaceAttrExtension_i.cpp
#IFRService/InterfaceDef_i.cpp
#IFRService/IRObject_i.cpp
#IFRService/LocalInterfaceDef_i.cpp
#IFRService/ModuleDef_i.cpp
#IFRService/NativeDef_i.cpp
#IFRService/OperationDef_i.cpp
#IFRService/PrimitiveDef_i.cpp
#IFRService/ProvidesDef_i.cpp
#IFRService/PublishesDef_i.cpp
#IFRService/RecursDef_i.cpp
#IFRService/Repository_i.cpp
#IFRService/SequenceDef_i.cpp
#IFRService/StringDef_i.cpp
#IFRService/StructDef_i.cpp
#IFRService/TypedefDef_i.cpp
#IFRService/UnionDef_i.cpp
#IFRService/UsesDef_i.cpp
#IFRService/ValueBoxDef_i.cpp
#IFRService/ValueDef_i.cpp
#IFRService/ValueMemberDef_i.cpp
#IFRService/WstringDef_i.cpp
#IFRService/IFR_Service_Utils.cpp
#IFRService/Options.cpp
#IFRService/IFR_Service_Loader.cpp
#
#template_files:
#IFRService/IFR_Service_Utils_T.cpp
#
#lib_output:
#$(ACE_ROOT)/lib TAO_IFRService

#END MPC-Generated Install Info

