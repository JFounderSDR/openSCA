// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "RtecBaseC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "RtecBaseC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_RtecBase_Dependency_Type_t[] =
  {
    "ONE_WAY_CALL",
    "TWO_WAY_CALL"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_RtecBase_Dependency_Type_t (
    "IDL:RtecBase/Dependency_Type_t:1.0",
    "Dependency_Type_t",
    _tao_enumerators_RtecBase_Dependency_Type_t,
    2);
  

namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_Dependency_Type_t =
    &_tao_tc_RtecBase_Dependency_Type_t;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecBase_handle_t (
    ::CORBA::tk_alias,
    "IDL:RtecBase/handle_t:1.0",
    "handle_t",
    &CORBA::_tc_long);
  

namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_handle_t =
    &_tao_tc_RtecBase_handle_t;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_RtecBase_Dependency_Enabled_Type_t[] =
  {
    "DEPENDENCY_DISABLED",
    "DEPENDENCY_ENABLED",
    "DEPENDENCY_NON_VOLATILE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_RtecBase_Dependency_Enabled_Type_t (
    "IDL:RtecBase/Dependency_Enabled_Type_t:1.0",
    "Dependency_Enabled_Type_t",
    _tao_enumerators_RtecBase_Dependency_Enabled_Type_t,
    3);
  

namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_Dependency_Enabled_Type_t =
    &_tao_tc_RtecBase_Dependency_Enabled_Type_t;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RtecBase_Dependency_Info[] =
      {
        { "dependency_type", &RtecBase::_tc_Dependency_Type_t },
        { "number_of_calls", &CORBA::_tc_long },
        { "rt_info", &RtecBase::_tc_handle_t },
        { "rt_info_depended_on", &RtecBase::_tc_handle_t },
        { "enabled", &RtecBase::_tc_Dependency_Enabled_Type_t }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RtecBase_Dependency_Info (
  ::CORBA::tk_struct,
  "IDL:RtecBase/Dependency_Info:1.0",
  "Dependency_Info",
  _tao_fields_RtecBase_Dependency_Info,
  5);


namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_Dependency_Info =
    &_tao_tc_RtecBase_Dependency_Info;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RtecBase::Dependency_Info::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Dependency_Info *_tao_tmp_pointer =
    static_cast<Dependency_Info *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecBase_OS_Priority (
    ::CORBA::tk_alias,
    "IDL:RtecBase/OS_Priority:1.0",
    "OS_Priority",
    &CORBA::_tc_long);
  

namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_OS_Priority =
    &_tao_tc_RtecBase_OS_Priority;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecBase_Preemption_Priority_t (
    ::CORBA::tk_alias,
    "IDL:RtecBase/Preemption_Priority_t:1.0",
    "Preemption_Priority_t",
    &CORBA::_tc_long);
  

namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_Preemption_Priority_t =
    &_tao_tc_RtecBase_Preemption_Priority_t;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RtecBase_Preemption_Subpriority_t (
    ::CORBA::tk_alias,
    "IDL:RtecBase/Preemption_Subpriority_t:1.0",
    "Preemption_Subpriority_t",
    &CORBA::_tc_long);
  

namespace RtecBase
{
  ::CORBA::TypeCode_ptr const _tc_Preemption_Subpriority_t =
    &_tao_tc_RtecBase_Preemption_Subpriority_t;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecBase
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecBase::Dependency_Type_t _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::RtecBase::Dependency_Type_t>::insert (
        _tao_any,
        ::RtecBase::_tc_Dependency_Type_t,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecBase::Dependency_Type_t &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::RtecBase::Dependency_Type_t>::extract (
          _tao_any,
          ::RtecBase::_tc_Dependency_Type_t,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecBase::Dependency_Type_t _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<RtecBase::Dependency_Type_t>::insert (
      _tao_any,
      RtecBase::_tc_Dependency_Type_t,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecBase::Dependency_Type_t &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<RtecBase::Dependency_Type_t>::extract (
        _tao_any,
        RtecBase::_tc_Dependency_Type_t,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecBase
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RtecBase::Dependency_Enabled_Type_t _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::RtecBase::Dependency_Enabled_Type_t>::insert (
        _tao_any,
        ::RtecBase::_tc_Dependency_Enabled_Type_t,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecBase::Dependency_Enabled_Type_t &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::RtecBase::Dependency_Enabled_Type_t>::extract (
          _tao_any,
          ::RtecBase::_tc_Dependency_Enabled_Type_t,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecBase::Dependency_Enabled_Type_t _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<RtecBase::Dependency_Enabled_Type_t>::insert (
      _tao_any,
      RtecBase::_tc_Dependency_Enabled_Type_t,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecBase::Dependency_Enabled_Type_t &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<RtecBase::Dependency_Enabled_Type_t>::extract (
        _tao_any,
        RtecBase::_tc_Dependency_Enabled_Type_t,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecBase
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RtecBase::Dependency_Info &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RtecBase::Dependency_Info *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RtecBase::Dependency_Info>::insert_copy (
          _tao_any,
          ::RtecBase::Dependency_Info::_tao_any_destructor,
          ::RtecBase::_tc_Dependency_Info,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RtecBase::Dependency_Info *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RtecBase::Dependency_Info>::insert (
        _tao_any,
        ::RtecBase::Dependency_Info::_tao_any_destructor,
        ::RtecBase::_tc_Dependency_Info,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RtecBase::Dependency_Info *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RtecBase::Dependency_Info *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RtecBase::Dependency_Info *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RtecBase::Dependency_Info>::extract (
          _tao_any,
          ::RtecBase::Dependency_Info::_tao_any_destructor,
          ::RtecBase::_tc_Dependency_Info,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RtecBase::Dependency_Info &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RtecBase::Dependency_Info *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RtecBase::Dependency_Info>::insert_copy (
        _tao_any,
        RtecBase::Dependency_Info::_tao_any_destructor,
        RtecBase::_tc_Dependency_Info,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RtecBase::Dependency_Info *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RtecBase::Dependency_Info>::insert (
      _tao_any,
      RtecBase::Dependency_Info::_tao_any_destructor,
      RtecBase::_tc_Dependency_Info,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RtecBase::Dependency_Info *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RtecBase::Dependency_Info *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RtecBase::Dependency_Info *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RtecBase::Dependency_Info>::extract (
        _tao_any,
        RtecBase::Dependency_Info::_tao_any_destructor,
        RtecBase::_tc_Dependency_Info,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecBase::Dependency_Type_t _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecBase::Dependency_Type_t & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<RtecBase::Dependency_Type_t> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecBase::Dependency_Enabled_Type_t _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecBase::Dependency_Enabled_Type_t & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<RtecBase::Dependency_Enabled_Type_t> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RtecBase::Dependency_Info &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dependency_type) &&
    (strm << _tao_aggregate.number_of_calls) &&
    (strm << _tao_aggregate.rt_info) &&
    (strm << _tao_aggregate.rt_info_depended_on) &&
    (strm << _tao_aggregate.enabled);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RtecBase::Dependency_Info &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dependency_type) &&
    (strm >> _tao_aggregate.number_of_calls) &&
    (strm >> _tao_aggregate.rt_info) &&
    (strm >> _tao_aggregate.rt_info_depended_on) &&
    (strm >> _tao_aggregate.enabled);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


