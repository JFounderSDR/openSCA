// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_RTECUDPADMINC_SUWEZQ_H_
#define _TAO_IDL_RTECUDPADMINC_SUWEZQ_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Event/event_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "RtecEventCommC.h"
#include "tao/OctetSeqC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_RTEvent_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

typedef CORBA::OctetSeq EventPayload;
typedef CORBA::OctetSeq_var EventPayload_var;
typedef CORBA::OctetSeq_out EventPayload_out;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace RtecUDPAdmin
{

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct UDP_Addr;

  typedef
    ::TAO_Fixed_Var_T<
        UDP_Addr
      >
    UDP_Addr_var;
  
  typedef
    UDP_Addr &
    UDP_Addr_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTEvent_Export UDP_Addr
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UDP_Addr_var _var_type;
    typedef UDP_Addr_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::ULong ipaddr;
    ::CORBA::UShort port;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTEvent_Export ::CORBA::TypeCode_ptr const _tc_UDP_Addr;

  // TAO_IDL - Generated from 
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/array_ch.cpp:56

  typedef ::CORBA::Char char16[16];
  typedef ::CORBA::Char char16_slice;
  struct char16_tag {};
  

  typedef
    TAO_FixedArray_Var_T<
        char16,
        char16_slice,
        char16_tag
      >
    char16_var;

  typedef
    char16
    char16_out;

  typedef
    TAO_Array_Forany_T<
        char16,
        char16_slice,
        char16_tag
      >
    char16_forany;

  TAO_NAMESPACE_STORAGE_CLASS char16_slice *
  char16_alloc (void);

  TAO_NAMESPACE_STORAGE_CLASS void
  char16_free (
      char16_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS char16_slice *
  char16_dup (
      const char16_slice *_tao_slice);
  
  TAO_NAMESPACE_STORAGE_CLASS void
  char16_copy (
      char16_slice *_tao_to,
      const char16_slice *_tao_from);

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTEvent_Export ::CORBA::TypeCode_ptr const _tc_char16;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct UDP_Addr_v6;

  typedef
    ::TAO_Fixed_Var_T<
        UDP_Addr_v6
      >
    UDP_Addr_v6_var;
  
  typedef
    UDP_Addr_v6 &
    UDP_Addr_v6_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTEvent_Export UDP_Addr_v6
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UDP_Addr_v6_var _var_type;
    typedef UDP_Addr_v6_out _out_type;

    static void _tao_any_destructor (void *);
    
    RtecUDPAdmin::char16 ipaddr;
    ::CORBA::UShort port;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTEvent_Export ::CORBA::TypeCode_ptr const _tc_UDP_Addr_v6;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum Address_Family
  {
    Rtec_inet,
    Rtec_inet6
  };

  typedef Address_Family &Address_Family_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTEvent_Export ::CORBA::TypeCode_ptr const _tc_Address_Family;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  class UDP_Address;

  typedef
    ::TAO_Fixed_Var_T<
        UDP_Address
      >
    UDP_Address_var;
  
  typedef
    UDP_Address &
    UDP_Address_out;

  class TAO_RTEvent_Export UDP_Address
  {
  public:
    UDP_Address (void);
    UDP_Address (const UDP_Address &);
    ~UDP_Address (void);

    UDP_Address &operator= (const UDP_Address &);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/discriminant_ch.cpp:74

    void _d (RtecUDPAdmin::Address_Family);
    RtecUDPAdmin::Address_Family _d (void) const;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UDP_Address_var _var_type;
    typedef UDP_Address_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:657

    void v4_addr (const RtecUDPAdmin::UDP_Addr &);
    const RtecUDPAdmin::UDP_Addr &v4_addr (void) const;
    RtecUDPAdmin::UDP_Addr &v4_addr (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch/public_ch.cpp:657

    void v6_addr (const RtecUDPAdmin::UDP_Addr_v6 &);
    const RtecUDPAdmin::UDP_Addr_v6 &v6_addr (void) const;
    RtecUDPAdmin::UDP_Addr_v6 &v6_addr (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_ch.cpp:127

    void _default (void);
  private:
    RtecUDPAdmin::Address_Family disc_;

    union
    {
      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:520
      RtecUDPAdmin::UDP_Addr v4_addr_;
      // TAO_IDL - Generated from
      // c:\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch/private_ch.cpp:520
      RtecUDPAdmin::UDP_Addr_v6 v6_addr_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTEvent_Export ::CORBA::TypeCode_ptr const _tc_UDP_Address;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTECUDPADMIN_ADDRSERVER__VAR_OUT_CH_)
#define _RTECUDPADMIN_ADDRSERVER__VAR_OUT_CH_

  class AddrServer;
  typedef AddrServer *AddrServer_ptr;

  typedef
    TAO_Objref_Var_T<
        AddrServer
      >
    AddrServer_var;
  
  typedef
    TAO_Objref_Out_T<
        AddrServer
      >
    AddrServer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTEvent_Export AddrServer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<AddrServer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AddrServer_ptr _ptr_type;
    typedef AddrServer_var _var_type;
    typedef AddrServer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AddrServer_ptr _duplicate (AddrServer_ptr obj);

    static void _tao_release (AddrServer_ptr obj);

    static AddrServer_ptr _narrow (::CORBA::Object_ptr obj);
    static AddrServer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AddrServer_ptr _nil (void);

    virtual void get_addr (
      const ::RtecEventComm::EventHeader & header,
      ::RtecUDPAdmin::UDP_Addr_out addr);

    virtual void get_address (
      const ::RtecEventComm::EventHeader & header,
      ::RtecUDPAdmin::UDP_Address_out addr);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AddrServer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AddrServer (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void RtecUDPAdmin_AddrServer_setup_collocation (void);

    // Concrete non-local interface only.
    AddrServer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AddrServer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AddrServer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AddrServer (const AddrServer &);

    void operator= (const AddrServer &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTEvent_Export ::CORBA::TypeCode_ptr const _tc_AddrServer;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module RtecUDPAdmin

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RtecUDPAdmin::UDP_Addr>
    : public
        Fixed_Size_Arg_Traits_T<
            ::RtecUDPAdmin::UDP_Addr,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::RtecUDPAdmin::char16_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::RtecUDPAdmin::char16_var,
            ::RtecUDPAdmin::char16_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RtecUDPAdmin::UDP_Addr_v6>
    : public
        Fixed_Size_Arg_Traits_T<
            ::RtecUDPAdmin::UDP_Addr_v6,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RtecUDPAdmin::Address_Family>
    : public
        Basic_Arg_Traits_T<
            ::RtecUDPAdmin::Address_Family,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:1052

  template<>
  class Arg_Traits< ::RtecUDPAdmin::UDP_Address>
    : public
        Fixed_Size_Arg_Traits_T<
            ::RtecUDPAdmin::UDP_Address,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_RTECUDPADMIN_ADDRSERVER__ARG_TRAITS_)
#define _RTECUDPADMIN_ADDRSERVER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::RtecUDPAdmin::AddrServer>
    : public
        Object_Arg_Traits_T<
            ::RtecUDPAdmin::AddrServer_ptr,
            ::RtecUDPAdmin::AddrServer_var,
            ::RtecUDPAdmin::AddrServer_out,
            TAO::Objref_Traits<RtecUDPAdmin::AddrServer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_RTEvent_Export
TAO::Collocation_Proxy_Broker *
(*RtecUDPAdmin__TAO_AddrServer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct TAO_RTEvent_Export Array_Traits<
      RtecUDPAdmin::char16_forany
    >
  {
    static void free (
        RtecUDPAdmin::char16_slice * _tao_slice);
    static RtecUDPAdmin::char16_slice * dup (
        const RtecUDPAdmin::char16_slice * _tao_slice);
    static void copy (
        RtecUDPAdmin::char16_slice * _tao_to,
        const RtecUDPAdmin::char16_slice * _tao_from);
    static RtecUDPAdmin::char16_slice * alloc (void);
    static void zero (
        RtecUDPAdmin::char16_slice * _tao_slice);
  };

#if !defined (_RTECUDPADMIN_ADDRSERVER__TRAITS_)
#define _RTECUDPADMIN_ADDRSERVER__TRAITS_

  template<>
  struct TAO_RTEvent_Export Objref_Traits< ::RtecUDPAdmin::AddrServer>
  {
    static ::RtecUDPAdmin::AddrServer_ptr duplicate (
        ::RtecUDPAdmin::AddrServer_ptr p);
    static void release (
        ::RtecUDPAdmin::AddrServer_ptr p);
    static ::RtecUDPAdmin::AddrServer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RtecUDPAdmin::AddrServer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const ::RtecUDPAdmin::UDP_Addr &); // copying version
  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, ::RtecUDPAdmin::UDP_Addr*); // noncopying version
  TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecUDPAdmin::UDP_Addr *&); // deprecated
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecUDPAdmin::UDP_Addr *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const RtecUDPAdmin::UDP_Addr &); // copying version
TAO_RTEvent_Export void operator<<= (::CORBA::Any &, RtecUDPAdmin::UDP_Addr*); // noncopying version
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecUDPAdmin::UDP_Addr *&); // deprecated
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecUDPAdmin::UDP_Addr *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/any_op_ch.cpp:44



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const RtecUDPAdmin::char16_forany &);
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecUDPAdmin::char16_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const ::RtecUDPAdmin::UDP_Addr_v6 &); // copying version
  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, ::RtecUDPAdmin::UDP_Addr_v6*); // noncopying version
  TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecUDPAdmin::UDP_Addr_v6 *&); // deprecated
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecUDPAdmin::UDP_Addr_v6 *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const RtecUDPAdmin::UDP_Addr_v6 &); // copying version
TAO_RTEvent_Export void operator<<= (::CORBA::Any &, RtecUDPAdmin::UDP_Addr_v6*); // noncopying version
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecUDPAdmin::UDP_Addr_v6 *&); // deprecated
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecUDPAdmin::UDP_Addr_v6 *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  

  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, ::RtecUDPAdmin::Address_Family);
  TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecUDPAdmin::Address_Family &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTEvent_Export void operator<<= (::CORBA::Any &, RtecUDPAdmin::Address_Family);
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecUDPAdmin::Address_Family &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const ::RtecUDPAdmin::UDP_Address &); // copying version
  TAO_RTEvent_Export void operator<<= (::CORBA::Any &, ::RtecUDPAdmin::UDP_Address*); // noncopying version
  TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RtecUDPAdmin::UDP_Address *&); // deprecated
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RtecUDPAdmin::UDP_Address *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export void operator<<= (::CORBA::Any &, const RtecUDPAdmin::UDP_Address &); // copying version
TAO_RTEvent_Export void operator<<= (::CORBA::Any &, RtecUDPAdmin::UDP_Address*); // noncopying version
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecUDPAdmin::UDP_Address *&); // deprecated
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RtecUDPAdmin::UDP_Address *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RtecUDPAdmin
{
  TAO_RTEvent_Export void operator<<= ( ::CORBA::Any &, AddrServer_ptr); // copying
  TAO_RTEvent_Export void operator<<= ( ::CORBA::Any &, AddrServer_ptr *); // non-copying
  TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AddrServer_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export void operator<<= (::CORBA::Any &, RtecUDPAdmin::AddrServer_ptr); // copying
TAO_RTEvent_Export void operator<<= (::CORBA::Any &, RtecUDPAdmin::AddrServer_ptr *); // non-copying
TAO_RTEvent_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RtecUDPAdmin::AddrServer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecUDPAdmin::UDP_Addr &);
TAO_RTEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecUDPAdmin::UDP_Addr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/cdr_op_ch.cpp:107



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export CORBA::Boolean operator<< (TAO_OutputCDR &strm, const RtecUDPAdmin::char16_forany &_tao_array);
TAO_RTEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecUDPAdmin::char16_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecUDPAdmin::UDP_Addr_v6 &);
TAO_RTEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecUDPAdmin::UDP_Addr_v6 &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RtecUDPAdmin::Address_Family _tao_enumerator);
TAO_RTEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RtecUDPAdmin::Address_Family &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecUDPAdmin::UDP_Address &);
TAO_RTEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecUDPAdmin::UDP_Address &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTEvent_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RtecUDPAdmin::AddrServer_ptr );
TAO_RTEvent_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RtecUDPAdmin::AddrServer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "RtecUDPAdminC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

