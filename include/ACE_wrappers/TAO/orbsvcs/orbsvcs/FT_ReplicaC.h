// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_FT_REPLICAC_E4NYYW_H_
#define _TAO_IDL_FT_REPLICAC_E4NYYW_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/FaultTolerance/fault_tol_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "FT_CORBAC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_FT_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace FT
{

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FT_PULLMONITORABLE__VAR_OUT_CH_)
#define _FT_PULLMONITORABLE__VAR_OUT_CH_

  class PullMonitorable;
  typedef PullMonitorable *PullMonitorable_ptr;

  typedef
    TAO_Objref_Var_T<
        PullMonitorable
      >
    PullMonitorable_var;
  
  typedef
    TAO_Objref_Out_T<
        PullMonitorable
      >
    PullMonitorable_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FT_Export PullMonitorable
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PullMonitorable>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PullMonitorable_ptr _ptr_type;
    typedef PullMonitorable_var _var_type;
    typedef PullMonitorable_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PullMonitorable_ptr _duplicate (PullMonitorable_ptr obj);

    static void _tao_release (PullMonitorable_ptr obj);

    static PullMonitorable_ptr _narrow (::CORBA::Object_ptr obj);
    static PullMonitorable_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PullMonitorable_ptr _nil (void);

    virtual ::CORBA::Boolean is_alive (
      void);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PullMonitorable_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PullMonitorable (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FT_PullMonitorable_setup_collocation (void);

    // Concrete non-local interface only.
    PullMonitorable (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PullMonitorable (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PullMonitorable (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PullMonitorable (const PullMonitorable &);

    void operator= (const PullMonitorable &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_PullMonitorable;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_FT_STATE_CH_)
#define _FT_STATE_CH_

  class State;

  typedef
    ::TAO_FixedSeq_Var_T<
        State
      >
    State_var;

  typedef
    ::TAO_Seq_Out_T<
        State
      >
    State_out;

  class TAO_FT_Export State
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Octet
          >
  {
  public:
    State (void);
    State ( ::CORBA::ULong max);
    State (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer, 
      ::CORBA::Boolean release = false);
    State (const State &);
    virtual ~State (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef State_var _var_type;
    typedef State_out _out_type;

    static void _tao_any_destructor (void *);

    

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    State (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_State;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_FT_Export NoStateAvailable : public ::CORBA::UserException
  {
  public:
    
    NoStateAvailable (void);
    NoStateAvailable (const NoStateAvailable &);
    ~NoStateAvailable (void);

    NoStateAvailable &operator= (const NoStateAvailable &);

    static void _tao_any_destructor (void *);

    static NoStateAvailable *_downcast ( ::CORBA::Exception *);
    static const NoStateAvailable *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_NoStateAvailable;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_FT_Export InvalidState : public ::CORBA::UserException
  {
  public:
    
    InvalidState (void);
    InvalidState (const InvalidState &);
    ~InvalidState (void);

    InvalidState &operator= (const InvalidState &);

    static void _tao_any_destructor (void *);

    static InvalidState *_downcast ( ::CORBA::Exception *);
    static const InvalidState *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_InvalidState;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_FT_Export NoUpdateAvailable : public ::CORBA::UserException
  {
  public:
    
    NoUpdateAvailable (void);
    NoUpdateAvailable (const NoUpdateAvailable &);
    ~NoUpdateAvailable (void);

    NoUpdateAvailable &operator= (const NoUpdateAvailable &);

    static void _tao_any_destructor (void *);

    static NoUpdateAvailable *_downcast ( ::CORBA::Exception *);
    static const NoUpdateAvailable *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_NoUpdateAvailable;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_FT_Export InvalidUpdate : public ::CORBA::UserException
  {
  public:
    
    InvalidUpdate (void);
    InvalidUpdate (const InvalidUpdate &);
    ~InvalidUpdate (void);

    InvalidUpdate &operator= (const InvalidUpdate &);

    static void _tao_any_destructor (void *);

    static InvalidUpdate *_downcast ( ::CORBA::Exception *);
    static const InvalidUpdate *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_InvalidUpdate;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FT_CHECKPOINTABLE__VAR_OUT_CH_)
#define _FT_CHECKPOINTABLE__VAR_OUT_CH_

  class Checkpointable;
  typedef Checkpointable *Checkpointable_ptr;

  typedef
    TAO_Objref_Var_T<
        Checkpointable
      >
    Checkpointable_var;
  
  typedef
    TAO_Objref_Out_T<
        Checkpointable
      >
    Checkpointable_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FT_Export Checkpointable
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Checkpointable>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Checkpointable_ptr _ptr_type;
    typedef Checkpointable_var _var_type;
    typedef Checkpointable_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Checkpointable_ptr _duplicate (Checkpointable_ptr obj);

    static void _tao_release (Checkpointable_ptr obj);

    static Checkpointable_ptr _narrow (::CORBA::Object_ptr obj);
    static Checkpointable_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Checkpointable_ptr _nil (void);

    virtual ::FT::State * get_state (
      void);

    virtual void set_state (
      const ::FT::State & s);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Checkpointable_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Checkpointable (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FT_Checkpointable_setup_collocation (void);

    // Concrete non-local interface only.
    Checkpointable (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Checkpointable (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Checkpointable (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Checkpointable (const Checkpointable &);

    void operator= (const Checkpointable &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_Checkpointable;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_FT_UPDATEABLE__VAR_OUT_CH_)
#define _FT_UPDATEABLE__VAR_OUT_CH_

  class Updateable;
  typedef Updateable *Updateable_ptr;

  typedef
    TAO_Objref_Var_T<
        Updateable
      >
    Updateable_var;
  
  typedef
    TAO_Objref_Out_T<
        Updateable
      >
    Updateable_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_FT_Export Updateable
    : public virtual ::FT::Checkpointable
  
  {
  public:
    friend class TAO::Narrow_Utils<Updateable>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Updateable_ptr _ptr_type;
    typedef Updateable_var _var_type;
    typedef Updateable_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Updateable_ptr _duplicate (Updateable_ptr obj);

    static void _tao_release (Updateable_ptr obj);

    static Updateable_ptr _narrow (::CORBA::Object_ptr obj);
    static Updateable_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Updateable_ptr _nil (void);

    virtual ::FT::State * get_update (
      void);

    virtual void set_update (
      const ::FT::State & s);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Updateable_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Updateable (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void FT_Updateable_setup_collocation (void);

    // Concrete non-local interface only.
    Updateable (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Updateable (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Updateable (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Updateable (const Updateable &);

    void operator= (const Updateable &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_Updateable;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module FT

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FT_PULLMONITORABLE__ARG_TRAITS_)
#define _FT_PULLMONITORABLE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT::PullMonitorable>
    : public
        Object_Arg_Traits_T<
            ::FT::PullMonitorable_ptr,
            ::FT::PullMonitorable_var,
            ::FT::PullMonitorable_out,
            TAO::Objref_Traits<FT::PullMonitorable>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::FT::State>
    : public
        Var_Size_Arg_Traits_T<
            ::FT::State,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FT_CHECKPOINTABLE__ARG_TRAITS_)
#define _FT_CHECKPOINTABLE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT::Checkpointable>
    : public
        Object_Arg_Traits_T<
            ::FT::Checkpointable_ptr,
            ::FT::Checkpointable_var,
            ::FT::Checkpointable_out,
            TAO::Objref_Traits<FT::Checkpointable>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_FT_UPDATEABLE__ARG_TRAITS_)
#define _FT_UPDATEABLE__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT::Updateable>
    : public
        Object_Arg_Traits_T<
            ::FT::Updateable_ptr,
            ::FT::Updateable_var,
            ::FT::Updateable_out,
            TAO::Objref_Traits<FT::Updateable>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_FT_Export
TAO::Collocation_Proxy_Broker *
(*FT__TAO_PullMonitorable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_FT_Export
TAO::Collocation_Proxy_Broker *
(*FT__TAO_Checkpointable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_FT_Export
TAO::Collocation_Proxy_Broker *
(*FT__TAO_Updateable_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FT_PULLMONITORABLE__TRAITS_)
#define _FT_PULLMONITORABLE__TRAITS_

  template<>
  struct TAO_FT_Export Objref_Traits< ::FT::PullMonitorable>
  {
    static ::FT::PullMonitorable_ptr duplicate (
        ::FT::PullMonitorable_ptr p);
    static void release (
        ::FT::PullMonitorable_ptr p);
    static ::FT::PullMonitorable_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT::PullMonitorable_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FT_CHECKPOINTABLE__TRAITS_)
#define _FT_CHECKPOINTABLE__TRAITS_

  template<>
  struct TAO_FT_Export Objref_Traits< ::FT::Checkpointable>
  {
    static ::FT::Checkpointable_ptr duplicate (
        ::FT::Checkpointable_ptr p);
    static void release (
        ::FT::Checkpointable_ptr p);
    static ::FT::Checkpointable_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT::Checkpointable_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FT_UPDATEABLE__TRAITS_)
#define _FT_UPDATEABLE__TRAITS_

  template<>
  struct TAO_FT_Export Objref_Traits< ::FT::Updateable>
  {
    static ::FT::Updateable_ptr duplicate (
        ::FT::Updateable_ptr p);
    static void release (
        ::FT::Updateable_ptr p);
    static ::FT::Updateable_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT::Updateable_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, PullMonitorable_ptr); // copying
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, PullMonitorable_ptr *); // non-copying
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PullMonitorable_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export void operator<<= (::CORBA::Any &, FT::PullMonitorable_ptr); // copying
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::PullMonitorable_ptr *); // non-copying
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::PullMonitorable_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, const ::FT::State &); // copying version
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, ::FT::State*); // noncopying version
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT::State *&); // deprecated
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT::State *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export void operator<<= ( ::CORBA::Any &, const FT::State &); // copying version
TAO_FT_Export void operator<<= ( ::CORBA::Any &, FT::State*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::State *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::State *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  TAO_FT_Export void operator<<= (::CORBA::Any &, const ::FT::NoStateAvailable &); // copying version
  TAO_FT_Export void operator<<= (::CORBA::Any &, ::FT::NoStateAvailable*); // noncopying version
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT::NoStateAvailable *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT::NoStateAvailable *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export void operator<<= (::CORBA::Any &, const FT::NoStateAvailable &); // copying version
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::NoStateAvailable*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::NoStateAvailable *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::NoStateAvailable *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  TAO_FT_Export void operator<<= (::CORBA::Any &, const ::FT::InvalidState &); // copying version
  TAO_FT_Export void operator<<= (::CORBA::Any &, ::FT::InvalidState*); // noncopying version
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT::InvalidState *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT::InvalidState *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export void operator<<= (::CORBA::Any &, const FT::InvalidState &); // copying version
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::InvalidState*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::InvalidState *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::InvalidState *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  TAO_FT_Export void operator<<= (::CORBA::Any &, const ::FT::NoUpdateAvailable &); // copying version
  TAO_FT_Export void operator<<= (::CORBA::Any &, ::FT::NoUpdateAvailable*); // noncopying version
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT::NoUpdateAvailable *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT::NoUpdateAvailable *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export void operator<<= (::CORBA::Any &, const FT::NoUpdateAvailable &); // copying version
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::NoUpdateAvailable*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::NoUpdateAvailable *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::NoUpdateAvailable *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  TAO_FT_Export void operator<<= (::CORBA::Any &, const ::FT::InvalidUpdate &); // copying version
  TAO_FT_Export void operator<<= (::CORBA::Any &, ::FT::InvalidUpdate*); // noncopying version
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT::InvalidUpdate *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT::InvalidUpdate *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export void operator<<= (::CORBA::Any &, const FT::InvalidUpdate &); // copying version
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::InvalidUpdate*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::InvalidUpdate *&); // deprecated
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::InvalidUpdate *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, Checkpointable_ptr); // copying
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, Checkpointable_ptr *); // non-copying
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Checkpointable_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export void operator<<= (::CORBA::Any &, FT::Checkpointable_ptr); // copying
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::Checkpointable_ptr *); // non-copying
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::Checkpointable_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, Updateable_ptr); // copying
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, Updateable_ptr *); // non-copying
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Updateable_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export void operator<<= (::CORBA::Any &, FT::Updateable_ptr); // copying
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::Updateable_ptr *); // non-copying
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::Updateable_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::PullMonitorable_ptr );
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::PullMonitorable_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_FT_State_H_
#define _TAO_CDR_OP_FT_State_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_FT_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT::State &_tao_sequence);
TAO_FT_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT::State &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_FT_State_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::NoStateAvailable &);
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::NoStateAvailable &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::InvalidState &);
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::InvalidState &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::NoUpdateAvailable &);
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::NoUpdateAvailable &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::InvalidUpdate &);
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::InvalidUpdate &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::Checkpointable_ptr );
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::Checkpointable_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::Updateable_ptr );
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::Updateable_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "FT_ReplicaC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

