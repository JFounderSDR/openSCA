// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "CosNotificationC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "CosNotificationC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_Istring (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/Istring:1.0",
    "Istring",
    &CORBA::_tc_string);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_Istring =
    &_tao_tc_CosNotification_Istring;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_PropertyName (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/PropertyName:1.0",
    "PropertyName",
    &CosNotification::_tc_Istring);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_PropertyName =
    &_tao_tc_CosNotification_PropertyName;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_PropertyValue (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/PropertyValue:1.0",
    "PropertyValue",
    &CORBA::_tc_any);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_PropertyValue =
    &_tao_tc_CosNotification_PropertyValue;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_Property[] =
      {
        { "name", &CosNotification::_tc_PropertyName },
        { "value", &CosNotification::_tc_PropertyValue }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_Property (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/Property:1.0",
  "Property",
  _tao_fields_CosNotification_Property,
  2);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_Property =
    &_tao_tc_CosNotification_Property;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::Property::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Property *_tao_tmp_pointer =
    static_cast<Property *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFICATION_PROPERTYSEQ_CS_)
#define _COSNOTIFICATION_PROPERTYSEQ_CS_

CosNotification::PropertySeq::PropertySeq (void)
{}

CosNotification::PropertySeq::PropertySeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Property
      > (max)
{}

CosNotification::PropertySeq::PropertySeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNotification::Property * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Property
      >
    (max, length, buffer, release)
{}

CosNotification::PropertySeq::PropertySeq (
    const PropertySeq &seq)
  : ::TAO::unbounded_value_sequence<
        Property
      > (seq)
{}

CosNotification::PropertySeq::~PropertySeq (void)
{}

void CosNotification::PropertySeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertySeq * _tao_tmp_pointer =
    static_cast<PropertySeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotification_PropertySeq_GUARD
#define _TAO_TYPECODE_CosNotification_PropertySeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotification_PropertySeq_0 (
          ::CORBA::tk_sequence,
          &CosNotification::_tc_Property,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotification_PropertySeq_0 =
        &CosNotification_PropertySeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotification_PropertySeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_PropertySeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/PropertySeq:1.0",
    "PropertySeq",
    &TAO::TypeCode::tc_CosNotification_PropertySeq_0);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_PropertySeq =
    &_tao_tc_CosNotification_PropertySeq;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_OptionalHeaderFields (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/OptionalHeaderFields:1.0",
    "OptionalHeaderFields",
    &CosNotification::_tc_PropertySeq);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_OptionalHeaderFields =
    &_tao_tc_CosNotification_OptionalHeaderFields;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_FilterableEventBody (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/FilterableEventBody:1.0",
    "FilterableEventBody",
    &CosNotification::_tc_PropertySeq);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_FilterableEventBody =
    &_tao_tc_CosNotification_FilterableEventBody;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_QoSProperties (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/QoSProperties:1.0",
    "QoSProperties",
    &CosNotification::_tc_PropertySeq);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_QoSProperties =
    &_tao_tc_CosNotification_QoSProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_AdminProperties (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/AdminProperties:1.0",
    "AdminProperties",
    &CosNotification::_tc_PropertySeq);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_AdminProperties =
    &_tao_tc_CosNotification_AdminProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_EventType[] =
      {
        { "domain_name", &CORBA::_tc_string },
        { "type_name", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_EventType (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/EventType:1.0",
  "EventType",
  _tao_fields_CosNotification_EventType,
  2);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_EventType =
    &_tao_tc_CosNotification_EventType;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::EventType::_tao_any_destructor (
    void *_tao_void_pointer)
{
  EventType *_tao_tmp_pointer =
    static_cast<EventType *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFICATION_EVENTTYPESEQ_CS_)
#define _COSNOTIFICATION_EVENTTYPESEQ_CS_

CosNotification::EventTypeSeq::EventTypeSeq (void)
{}

CosNotification::EventTypeSeq::EventTypeSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        EventType
      > (max)
{}

CosNotification::EventTypeSeq::EventTypeSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNotification::EventType * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        EventType
      >
    (max, length, buffer, release)
{}

CosNotification::EventTypeSeq::EventTypeSeq (
    const EventTypeSeq &seq)
  : ::TAO::unbounded_value_sequence<
        EventType
      > (seq)
{}

CosNotification::EventTypeSeq::~EventTypeSeq (void)
{}

void CosNotification::EventTypeSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  EventTypeSeq * _tao_tmp_pointer =
    static_cast<EventTypeSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotification_EventTypeSeq_GUARD
#define _TAO_TYPECODE_CosNotification_EventTypeSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotification_EventTypeSeq_0 (
          ::CORBA::tk_sequence,
          &CosNotification::_tc_EventType,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotification_EventTypeSeq_0 =
        &CosNotification_EventTypeSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotification_EventTypeSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_EventTypeSeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/EventTypeSeq:1.0",
    "EventTypeSeq",
    &TAO::TypeCode::tc_CosNotification_EventTypeSeq_0);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_EventTypeSeq =
    &_tao_tc_CosNotification_EventTypeSeq;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_PropertyRange[] =
      {
        { "low_val", &CosNotification::_tc_PropertyValue },
        { "high_val", &CosNotification::_tc_PropertyValue }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_PropertyRange (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/PropertyRange:1.0",
  "PropertyRange",
  _tao_fields_CosNotification_PropertyRange,
  2);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_PropertyRange =
    &_tao_tc_CosNotification_PropertyRange;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::PropertyRange::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PropertyRange *_tao_tmp_pointer =
    static_cast<PropertyRange *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_NamedPropertyRange[] =
      {
        { "name", &CosNotification::_tc_PropertyName },
        { "range", &CosNotification::_tc_PropertyRange }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_NamedPropertyRange (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/NamedPropertyRange:1.0",
  "NamedPropertyRange",
  _tao_fields_CosNotification_NamedPropertyRange,
  2);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_NamedPropertyRange =
    &_tao_tc_CosNotification_NamedPropertyRange;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::NamedPropertyRange::_tao_any_destructor (
    void *_tao_void_pointer)
{
  NamedPropertyRange *_tao_tmp_pointer =
    static_cast<NamedPropertyRange *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFICATION_NAMEDPROPERTYRANGESEQ_CS_)
#define _COSNOTIFICATION_NAMEDPROPERTYRANGESEQ_CS_

CosNotification::NamedPropertyRangeSeq::NamedPropertyRangeSeq (void)
{}

CosNotification::NamedPropertyRangeSeq::NamedPropertyRangeSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NamedPropertyRange
      > (max)
{}

CosNotification::NamedPropertyRangeSeq::NamedPropertyRangeSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNotification::NamedPropertyRange * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NamedPropertyRange
      >
    (max, length, buffer, release)
{}

CosNotification::NamedPropertyRangeSeq::NamedPropertyRangeSeq (
    const NamedPropertyRangeSeq &seq)
  : ::TAO::unbounded_value_sequence<
        NamedPropertyRange
      > (seq)
{}

CosNotification::NamedPropertyRangeSeq::~NamedPropertyRangeSeq (void)
{}

void CosNotification::NamedPropertyRangeSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  NamedPropertyRangeSeq * _tao_tmp_pointer =
    static_cast<NamedPropertyRangeSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotification_NamedPropertyRangeSeq_GUARD
#define _TAO_TYPECODE_CosNotification_NamedPropertyRangeSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotification_NamedPropertyRangeSeq_0 (
          ::CORBA::tk_sequence,
          &CosNotification::_tc_NamedPropertyRange,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotification_NamedPropertyRangeSeq_0 =
        &CosNotification_NamedPropertyRangeSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotification_NamedPropertyRangeSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_NamedPropertyRangeSeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/NamedPropertyRangeSeq:1.0",
    "NamedPropertyRangeSeq",
    &TAO::TypeCode::tc_CosNotification_NamedPropertyRangeSeq_0);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_NamedPropertyRangeSeq =
    &_tao_tc_CosNotification_NamedPropertyRangeSeq;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosNotification_QoSError_code[] =
  {
    "UNSUPPORTED_PROPERTY",
    "UNAVAILABLE_PROPERTY",
    "UNSUPPORTED_VALUE",
    "UNAVAILABLE_VALUE",
    "BAD_PROPERTY",
    "BAD_TYPE",
    "BAD_VALUE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_QoSError_code (
    "IDL:omg.org/CosNotification/QoSError_code:1.0",
    "QoSError_code",
    _tao_enumerators_CosNotification_QoSError_code,
    7);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_QoSError_code =
    &_tao_tc_CosNotification_QoSError_code;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_PropertyError[] =
      {
        { "code", &CosNotification::_tc_QoSError_code },
        { "name", &CosNotification::_tc_PropertyName },
        { "available_range", &CosNotification::_tc_PropertyRange }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_PropertyError (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/PropertyError:1.0",
  "PropertyError",
  _tao_fields_CosNotification_PropertyError,
  3);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_PropertyError =
    &_tao_tc_CosNotification_PropertyError;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::PropertyError::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PropertyError *_tao_tmp_pointer =
    static_cast<PropertyError *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFICATION_PROPERTYERRORSEQ_CS_)
#define _COSNOTIFICATION_PROPERTYERRORSEQ_CS_

CosNotification::PropertyErrorSeq::PropertyErrorSeq (void)
{}

CosNotification::PropertyErrorSeq::PropertyErrorSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PropertyError
      > (max)
{}

CosNotification::PropertyErrorSeq::PropertyErrorSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNotification::PropertyError * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PropertyError
      >
    (max, length, buffer, release)
{}

CosNotification::PropertyErrorSeq::PropertyErrorSeq (
    const PropertyErrorSeq &seq)
  : ::TAO::unbounded_value_sequence<
        PropertyError
      > (seq)
{}

CosNotification::PropertyErrorSeq::~PropertyErrorSeq (void)
{}

void CosNotification::PropertyErrorSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PropertyErrorSeq * _tao_tmp_pointer =
    static_cast<PropertyErrorSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotification_PropertyErrorSeq_GUARD
#define _TAO_TYPECODE_CosNotification_PropertyErrorSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotification_PropertyErrorSeq_0 (
          ::CORBA::tk_sequence,
          &CosNotification::_tc_PropertyError,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotification_PropertyErrorSeq_0 =
        &CosNotification_PropertyErrorSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotification_PropertyErrorSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_PropertyErrorSeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/PropertyErrorSeq:1.0",
    "PropertyErrorSeq",
    &TAO::TypeCode::tc_CosNotification_PropertyErrorSeq_0);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_PropertyErrorSeq =
    &_tao_tc_CosNotification_PropertyErrorSeq;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosNotification::UnsupportedQoS::UnsupportedQoS (
    const CosNotification::PropertyErrorSeq & _tao_qos_err)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        "UnsupportedQoS"
      )
{
  this->qos_err = _tao_qos_err;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotification::UnsupportedQoS::UnsupportedQoS (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        "UnsupportedQoS"
      )
{
}

CosNotification::UnsupportedQoS::~UnsupportedQoS (void)
{
}

CosNotification::UnsupportedQoS::UnsupportedQoS (const ::CosNotification::UnsupportedQoS &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->qos_err = _tao_excp.qos_err;
}

CosNotification::UnsupportedQoS&
CosNotification::UnsupportedQoS::operator= (const ::CosNotification::UnsupportedQoS &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->qos_err = _tao_excp.qos_err;
  return *this;
}

void CosNotification::UnsupportedQoS::_tao_any_destructor (void *_tao_void_pointer)
{
  UnsupportedQoS *_tao_tmp_pointer =
    static_cast<UnsupportedQoS *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotification::UnsupportedQoS *
CosNotification::UnsupportedQoS::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnsupportedQoS *> (_tao_excp);
}

const CosNotification::UnsupportedQoS *
CosNotification::UnsupportedQoS::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnsupportedQoS *> (_tao_excp);
}

::CORBA::Exception *CosNotification::UnsupportedQoS::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotification::UnsupportedQoS, 0);
  return retval;
}

::CORBA::Exception *
CosNotification::UnsupportedQoS::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotification::UnsupportedQoS (*this),
      0
    );
  return result;
}

void CosNotification::UnsupportedQoS::_raise (void) const
{
  throw *this;
}

void CosNotification::UnsupportedQoS::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotification::UnsupportedQoS::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotification::UnsupportedQoS::_tao_type (void) const
{
  return ::CosNotification::_tc_UnsupportedQoS;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_UnsupportedQoS[] =
      {
        { "qos_err", &CosNotification::_tc_PropertyErrorSeq }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_UnsupportedQoS (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
  "UnsupportedQoS",
  _tao_fields_CosNotification_UnsupportedQoS,
  1);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_UnsupportedQoS =
    &_tao_tc_CosNotification_UnsupportedQoS;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

CosNotification::UnsupportedAdmin::UnsupportedAdmin (
    const CosNotification::PropertyErrorSeq & _tao_admin_err)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotification/UnsupportedAdmin:1.0",
        "UnsupportedAdmin"
      )
{
  this->admin_err = _tao_admin_err;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosNotification::UnsupportedAdmin::UnsupportedAdmin (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosNotification/UnsupportedAdmin:1.0",
        "UnsupportedAdmin"
      )
{
}

CosNotification::UnsupportedAdmin::~UnsupportedAdmin (void)
{
}

CosNotification::UnsupportedAdmin::UnsupportedAdmin (const ::CosNotification::UnsupportedAdmin &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->admin_err = _tao_excp.admin_err;
}

CosNotification::UnsupportedAdmin&
CosNotification::UnsupportedAdmin::operator= (const ::CosNotification::UnsupportedAdmin &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->admin_err = _tao_excp.admin_err;
  return *this;
}

void CosNotification::UnsupportedAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  UnsupportedAdmin *_tao_tmp_pointer =
    static_cast<UnsupportedAdmin *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosNotification::UnsupportedAdmin *
CosNotification::UnsupportedAdmin::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnsupportedAdmin *> (_tao_excp);
}

const CosNotification::UnsupportedAdmin *
CosNotification::UnsupportedAdmin::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnsupportedAdmin *> (_tao_excp);
}

::CORBA::Exception *CosNotification::UnsupportedAdmin::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosNotification::UnsupportedAdmin, 0);
  return retval;
}

::CORBA::Exception *
CosNotification::UnsupportedAdmin::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosNotification::UnsupportedAdmin (*this),
      0
    );
  return result;
}

void CosNotification::UnsupportedAdmin::_raise (void) const
{
  throw *this;
}

void CosNotification::UnsupportedAdmin::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosNotification::UnsupportedAdmin::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosNotification::UnsupportedAdmin::_tao_type (void) const
{
  return ::CosNotification::_tc_UnsupportedAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_UnsupportedAdmin[] =
      {
        { "admin_err", &CosNotification::_tc_PropertyErrorSeq }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_UnsupportedAdmin (
  ::CORBA::tk_except,
  "IDL:omg.org/CosNotification/UnsupportedAdmin:1.0",
  "UnsupportedAdmin",
  _tao_fields_CosNotification_UnsupportedAdmin,
  1);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_UnsupportedAdmin =
    &_tao_tc_CosNotification_UnsupportedAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_FixedEventHeader[] =
      {
        { "event_type", &CosNotification::_tc_EventType },
        { "event_name", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_FixedEventHeader (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/FixedEventHeader:1.0",
  "FixedEventHeader",
  _tao_fields_CosNotification_FixedEventHeader,
  2);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_FixedEventHeader =
    &_tao_tc_CosNotification_FixedEventHeader;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::FixedEventHeader::_tao_any_destructor (
    void *_tao_void_pointer)
{
  FixedEventHeader *_tao_tmp_pointer =
    static_cast<FixedEventHeader *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_EventHeader[] =
      {
        { "fixed_header", &CosNotification::_tc_FixedEventHeader },
        { "variable_header", &CosNotification::_tc_OptionalHeaderFields }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_EventHeader (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/EventHeader:1.0",
  "EventHeader",
  _tao_fields_CosNotification_EventHeader,
  2);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_EventHeader =
    &_tao_tc_CosNotification_EventHeader;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::EventHeader::_tao_any_destructor (
    void *_tao_void_pointer)
{
  EventHeader *_tao_tmp_pointer =
    static_cast<EventHeader *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_CosNotification_StructuredEvent[] =
      {
        { "header", &CosNotification::_tc_EventHeader },
        { "filterable_data", &CosNotification::_tc_FilterableEventBody },
        { "remainder_of_body", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosNotification_StructuredEvent (
  ::CORBA::tk_struct,
  "IDL:omg.org/CosNotification/StructuredEvent:1.0",
  "StructuredEvent",
  _tao_fields_CosNotification_StructuredEvent,
  3);


namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_StructuredEvent =
    &_tao_tc_CosNotification_StructuredEvent;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
CosNotification::StructuredEvent::_tao_any_destructor (
    void *_tao_void_pointer)
{
  StructuredEvent *_tao_tmp_pointer =
    static_cast<StructuredEvent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_COSNOTIFICATION_EVENTBATCH_CS_)
#define _COSNOTIFICATION_EVENTBATCH_CS_

CosNotification::EventBatch::EventBatch (void)
{}

CosNotification::EventBatch::EventBatch (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        StructuredEvent
      > (max)
{}

CosNotification::EventBatch::EventBatch (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    CosNotification::StructuredEvent * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        StructuredEvent
      >
    (max, length, buffer, release)
{}

CosNotification::EventBatch::EventBatch (
    const EventBatch &seq)
  : ::TAO::unbounded_value_sequence<
        StructuredEvent
      > (seq)
{}

CosNotification::EventBatch::~EventBatch (void)
{}

void CosNotification::EventBatch::_tao_any_destructor (
    void * _tao_void_pointer)
{
  EventBatch * _tao_tmp_pointer =
    static_cast<EventBatch *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_CosNotification_EventBatch_GUARD
#define _TAO_TYPECODE_CosNotification_EventBatch_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        CosNotification_EventBatch_0 (
          ::CORBA::tk_sequence,
          &CosNotification::_tc_StructuredEvent,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_CosNotification_EventBatch_0 =
        &CosNotification_EventBatch_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_CosNotification_EventBatch_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_EventBatch (
    ::CORBA::tk_alias,
    "IDL:omg.org/CosNotification/EventBatch:1.0",
    "EventBatch",
    &TAO::TypeCode::tc_CosNotification_EventBatch_0);
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_EventBatch =
    &_tao_tc_CosNotification_EventBatch;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotification::QoSAdmin.

CosNotification::QoSAdmin_ptr
TAO::Objref_Traits<CosNotification::QoSAdmin>::duplicate (
    CosNotification::QoSAdmin_ptr p)
{
  return CosNotification::QoSAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotification::QoSAdmin>::release (
    CosNotification::QoSAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosNotification::QoSAdmin_ptr
TAO::Objref_Traits<CosNotification::QoSAdmin>::nil (void)
{
  return CosNotification::QoSAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotification::QoSAdmin>::marshal (
    const CosNotification::QoSAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotification__TAO_QoSAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotification::QoSProperties *
CosNotification::QoSAdmin::get_qos (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_QoSAdmin_Proxy_Broker_ == 0)
    {
      CosNotification_QoSAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_qos",
      7,
      this->the_TAO_QoSAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotification::QoSAdmin::set_qos (
  const ::CosNotification::QoSProperties & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_QoSAdmin_Proxy_Broker_ == 0)
    {
      CosNotification_QoSAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_CosNotification_QoSAdmin_set_qos_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_qos",
      7,
      this->the_TAO_QoSAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotification_QoSAdmin_set_qos_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotification::QoSAdmin::validate_qos (
  const ::CosNotification::QoSProperties & required_qos,
  ::CosNotification::NamedPropertyRangeSeq_out available_qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_QoSAdmin_Proxy_Broker_ == 0)
    {
      CosNotification_QoSAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_required_qos (required_qos);
  TAO::Arg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_val _tao_available_qos (available_qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_required_qos,
      &_tao_available_qos
    };

  static TAO::Exception_Data
  _tao_CosNotification_QoSAdmin_validate_qos_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedQoS:1.0",
        CosNotification::UnsupportedQoS::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedQoS
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "validate_qos",
      12,
      this->the_TAO_QoSAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotification_QoSAdmin_validate_qos_exceptiondata,
      1
    );
}

CosNotification::QoSAdmin::QoSAdmin (void)
 : the_TAO_QoSAdmin_Proxy_Broker_ (0)
{
  this->CosNotification_QoSAdmin_setup_collocation ();
}

void
CosNotification::QoSAdmin::CosNotification_QoSAdmin_setup_collocation ()
{
  if (::CosNotification__TAO_QoSAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_QoSAdmin_Proxy_Broker_ =
        ::CosNotification__TAO_QoSAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNotification::QoSAdmin::~QoSAdmin (void)
{}

void 
CosNotification::QoSAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  QoSAdmin *_tao_tmp_pointer =
    static_cast<QoSAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotification::QoSAdmin_ptr
CosNotification::QoSAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<QoSAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotification/QoSAdmin:1.0",
        CosNotification__TAO_QoSAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotification::QoSAdmin_ptr
CosNotification::QoSAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<QoSAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotification/QoSAdmin:1.0",
        CosNotification__TAO_QoSAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotification::QoSAdmin_ptr
CosNotification::QoSAdmin::_nil (void)
{
  return 0;
}

CosNotification::QoSAdmin_ptr
CosNotification::QoSAdmin::_duplicate (QoSAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotification::QoSAdmin::_tao_release (QoSAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotification::QoSAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotification::QoSAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotification/QoSAdmin:1.0";
}

::CORBA::Boolean
CosNotification::QoSAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_QoSAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotification/QoSAdmin:1.0",
    "QoSAdmin");
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_QoSAdmin =
    &_tao_tc_CosNotification_QoSAdmin;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosNotification::AdminPropertiesAdmin.

CosNotification::AdminPropertiesAdmin_ptr
TAO::Objref_Traits<CosNotification::AdminPropertiesAdmin>::duplicate (
    CosNotification::AdminPropertiesAdmin_ptr p)
{
  return CosNotification::AdminPropertiesAdmin::_duplicate (p);
}

void
TAO::Objref_Traits<CosNotification::AdminPropertiesAdmin>::release (
    CosNotification::AdminPropertiesAdmin_ptr p)
{
  ::CORBA::release (p);
}

CosNotification::AdminPropertiesAdmin_ptr
TAO::Objref_Traits<CosNotification::AdminPropertiesAdmin>::nil (void)
{
  return CosNotification::AdminPropertiesAdmin::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosNotification::AdminPropertiesAdmin>::marshal (
    const CosNotification::AdminPropertiesAdmin_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosNotification__TAO_AdminPropertiesAdmin_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosNotification::AdminProperties *
CosNotification::AdminPropertiesAdmin::get_admin (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AdminPropertiesAdmin_Proxy_Broker_ == 0)
    {
      CosNotification_AdminPropertiesAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosNotification::AdminProperties>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_admin",
      9,
      this->the_TAO_AdminPropertiesAdmin_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
CosNotification::AdminPropertiesAdmin::set_admin (
  const ::CosNotification::AdminProperties & admin)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_AdminPropertiesAdmin_Proxy_Broker_ == 0)
    {
      CosNotification_AdminPropertiesAdmin_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosNotification::AdminProperties>::in_arg_val _tao_admin (admin);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_admin
    };

  static TAO::Exception_Data
  _tao_CosNotification_AdminPropertiesAdmin_set_admin_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosNotification/UnsupportedAdmin:1.0",
        CosNotification::UnsupportedAdmin::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosNotification::_tc_UnsupportedAdmin
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_admin",
      9,
      this->the_TAO_AdminPropertiesAdmin_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosNotification_AdminPropertiesAdmin_set_admin_exceptiondata,
      1
    );
}

CosNotification::AdminPropertiesAdmin::AdminPropertiesAdmin (void)
 : the_TAO_AdminPropertiesAdmin_Proxy_Broker_ (0)
{
  this->CosNotification_AdminPropertiesAdmin_setup_collocation ();
}

void
CosNotification::AdminPropertiesAdmin::CosNotification_AdminPropertiesAdmin_setup_collocation ()
{
  if (::CosNotification__TAO_AdminPropertiesAdmin_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_AdminPropertiesAdmin_Proxy_Broker_ =
        ::CosNotification__TAO_AdminPropertiesAdmin_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosNotification::AdminPropertiesAdmin::~AdminPropertiesAdmin (void)
{}

void 
CosNotification::AdminPropertiesAdmin::_tao_any_destructor (void *_tao_void_pointer)
{
  AdminPropertiesAdmin *_tao_tmp_pointer =
    static_cast<AdminPropertiesAdmin *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosNotification::AdminPropertiesAdmin_ptr
CosNotification::AdminPropertiesAdmin::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AdminPropertiesAdmin>::narrow (
        _tao_objref,
        "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0",
        CosNotification__TAO_AdminPropertiesAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotification::AdminPropertiesAdmin_ptr
CosNotification::AdminPropertiesAdmin::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AdminPropertiesAdmin>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0",
        CosNotification__TAO_AdminPropertiesAdmin_Proxy_Broker_Factory_function_pointer
      );
}

CosNotification::AdminPropertiesAdmin_ptr
CosNotification::AdminPropertiesAdmin::_nil (void)
{
  return 0;
}

CosNotification::AdminPropertiesAdmin_ptr
CosNotification::AdminPropertiesAdmin::_duplicate (AdminPropertiesAdmin_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosNotification::AdminPropertiesAdmin::_tao_release (AdminPropertiesAdmin_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosNotification::AdminPropertiesAdmin::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosNotification::AdminPropertiesAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0";
}

::CORBA::Boolean
CosNotification::AdminPropertiesAdmin::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosNotification_AdminPropertiesAdmin (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0",
    "AdminPropertiesAdmin");
  

namespace CosNotification
{
  ::CORBA::TypeCode_ptr const _tc_AdminPropertiesAdmin =
    &_tao_tc_CosNotification_AdminPropertiesAdmin;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::Property &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::Property *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::Property>::insert_copy (
          _tao_any,
          ::CosNotification::Property::_tao_any_destructor,
          ::CosNotification::_tc_Property,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::Property *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::Property>::insert (
        _tao_any,
        ::CosNotification::Property::_tao_any_destructor,
        ::CosNotification::_tc_Property,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::Property *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::Property *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::Property *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::Property>::extract (
          _tao_any,
          ::CosNotification::Property::_tao_any_destructor,
          ::CosNotification::_tc_Property,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::Property &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::Property *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::Property>::insert_copy (
        _tao_any,
        CosNotification::Property::_tao_any_destructor,
        CosNotification::_tc_Property,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::Property *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::Property>::insert (
      _tao_any,
      CosNotification::Property::_tao_any_destructor,
      CosNotification::_tc_Property,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::Property *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::Property *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::Property *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::Property>::extract (
        _tao_any,
        CosNotification::Property::_tao_any_destructor,
        CosNotification::_tc_Property,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertySeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::PropertySeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertySeq>::insert_copy (
          _tao_any,
          ::CosNotification::PropertySeq::_tao_any_destructor,
          ::CosNotification::_tc_PropertySeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::PropertySeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::PropertySeq>::insert (
        _tao_any,
        ::CosNotification::PropertySeq::_tao_any_destructor,
        ::CosNotification::_tc_PropertySeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::PropertySeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::PropertySeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertySeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertySeq>::extract (
          _tao_any,
          ::CosNotification::PropertySeq::_tao_any_destructor,
          ::CosNotification::_tc_PropertySeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::PropertySeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::PropertySeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::PropertySeq>::insert_copy (
        _tao_any,
        CosNotification::PropertySeq::_tao_any_destructor,
        CosNotification::_tc_PropertySeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::PropertySeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::PropertySeq>::insert (
      _tao_any,
      CosNotification::PropertySeq::_tao_any_destructor,
      CosNotification::_tc_PropertySeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::PropertySeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::PropertySeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::PropertySeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::PropertySeq>::extract (
        _tao_any,
        CosNotification::PropertySeq::_tao_any_destructor,
        CosNotification::_tc_PropertySeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::EventType &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::EventType *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::EventType>::insert_copy (
          _tao_any,
          ::CosNotification::EventType::_tao_any_destructor,
          ::CosNotification::_tc_EventType,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::EventType *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::EventType>::insert (
        _tao_any,
        ::CosNotification::EventType::_tao_any_destructor,
        ::CosNotification::_tc_EventType,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::EventType *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::EventType *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::EventType *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::EventType>::extract (
          _tao_any,
          ::CosNotification::EventType::_tao_any_destructor,
          ::CosNotification::_tc_EventType,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::EventType &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::EventType *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::EventType>::insert_copy (
        _tao_any,
        CosNotification::EventType::_tao_any_destructor,
        CosNotification::_tc_EventType,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::EventType *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::EventType>::insert (
      _tao_any,
      CosNotification::EventType::_tao_any_destructor,
      CosNotification::_tc_EventType,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::EventType *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::EventType *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::EventType *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::EventType>::extract (
        _tao_any,
        CosNotification::EventType::_tao_any_destructor,
        CosNotification::_tc_EventType,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::EventTypeSeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::EventTypeSeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::EventTypeSeq>::insert_copy (
          _tao_any,
          ::CosNotification::EventTypeSeq::_tao_any_destructor,
          ::CosNotification::_tc_EventTypeSeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::EventTypeSeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::EventTypeSeq>::insert (
        _tao_any,
        ::CosNotification::EventTypeSeq::_tao_any_destructor,
        ::CosNotification::_tc_EventTypeSeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::EventTypeSeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::EventTypeSeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::EventTypeSeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::EventTypeSeq>::extract (
          _tao_any,
          ::CosNotification::EventTypeSeq::_tao_any_destructor,
          ::CosNotification::_tc_EventTypeSeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::EventTypeSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::EventTypeSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::EventTypeSeq>::insert_copy (
        _tao_any,
        CosNotification::EventTypeSeq::_tao_any_destructor,
        CosNotification::_tc_EventTypeSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::EventTypeSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::EventTypeSeq>::insert (
      _tao_any,
      CosNotification::EventTypeSeq::_tao_any_destructor,
      CosNotification::_tc_EventTypeSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::EventTypeSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::EventTypeSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::EventTypeSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::EventTypeSeq>::extract (
        _tao_any,
        CosNotification::EventTypeSeq::_tao_any_destructor,
        CosNotification::_tc_EventTypeSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertyRange &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::PropertyRange *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertyRange>::insert_copy (
          _tao_any,
          ::CosNotification::PropertyRange::_tao_any_destructor,
          ::CosNotification::_tc_PropertyRange,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::PropertyRange *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::PropertyRange>::insert (
        _tao_any,
        ::CosNotification::PropertyRange::_tao_any_destructor,
        ::CosNotification::_tc_PropertyRange,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::PropertyRange *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::PropertyRange *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertyRange *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertyRange>::extract (
          _tao_any,
          ::CosNotification::PropertyRange::_tao_any_destructor,
          ::CosNotification::_tc_PropertyRange,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::PropertyRange &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::PropertyRange *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::PropertyRange>::insert_copy (
        _tao_any,
        CosNotification::PropertyRange::_tao_any_destructor,
        CosNotification::_tc_PropertyRange,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::PropertyRange *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::PropertyRange>::insert (
      _tao_any,
      CosNotification::PropertyRange::_tao_any_destructor,
      CosNotification::_tc_PropertyRange,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::PropertyRange *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::PropertyRange *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::PropertyRange *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::PropertyRange>::extract (
        _tao_any,
        CosNotification::PropertyRange::_tao_any_destructor,
        CosNotification::_tc_PropertyRange,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::NamedPropertyRange &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::NamedPropertyRange *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::NamedPropertyRange>::insert_copy (
          _tao_any,
          ::CosNotification::NamedPropertyRange::_tao_any_destructor,
          ::CosNotification::_tc_NamedPropertyRange,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::NamedPropertyRange *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::NamedPropertyRange>::insert (
        _tao_any,
        ::CosNotification::NamedPropertyRange::_tao_any_destructor,
        ::CosNotification::_tc_NamedPropertyRange,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::NamedPropertyRange *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::NamedPropertyRange *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::NamedPropertyRange *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::NamedPropertyRange>::extract (
          _tao_any,
          ::CosNotification::NamedPropertyRange::_tao_any_destructor,
          ::CosNotification::_tc_NamedPropertyRange,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::NamedPropertyRange &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::NamedPropertyRange *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::NamedPropertyRange>::insert_copy (
        _tao_any,
        CosNotification::NamedPropertyRange::_tao_any_destructor,
        CosNotification::_tc_NamedPropertyRange,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::NamedPropertyRange *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::NamedPropertyRange>::insert (
      _tao_any,
      CosNotification::NamedPropertyRange::_tao_any_destructor,
      CosNotification::_tc_NamedPropertyRange,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::NamedPropertyRange *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::NamedPropertyRange *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::NamedPropertyRange *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::NamedPropertyRange>::extract (
        _tao_any,
        CosNotification::NamedPropertyRange::_tao_any_destructor,
        CosNotification::_tc_NamedPropertyRange,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::NamedPropertyRangeSeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::NamedPropertyRangeSeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::NamedPropertyRangeSeq>::insert_copy (
          _tao_any,
          ::CosNotification::NamedPropertyRangeSeq::_tao_any_destructor,
          ::CosNotification::_tc_NamedPropertyRangeSeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::NamedPropertyRangeSeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::NamedPropertyRangeSeq>::insert (
        _tao_any,
        ::CosNotification::NamedPropertyRangeSeq::_tao_any_destructor,
        ::CosNotification::_tc_NamedPropertyRangeSeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::NamedPropertyRangeSeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::NamedPropertyRangeSeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::NamedPropertyRangeSeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::NamedPropertyRangeSeq>::extract (
          _tao_any,
          ::CosNotification::NamedPropertyRangeSeq::_tao_any_destructor,
          ::CosNotification::_tc_NamedPropertyRangeSeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::NamedPropertyRangeSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::NamedPropertyRangeSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::NamedPropertyRangeSeq>::insert_copy (
        _tao_any,
        CosNotification::NamedPropertyRangeSeq::_tao_any_destructor,
        CosNotification::_tc_NamedPropertyRangeSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::NamedPropertyRangeSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::NamedPropertyRangeSeq>::insert (
      _tao_any,
      CosNotification::NamedPropertyRangeSeq::_tao_any_destructor,
      CosNotification::_tc_NamedPropertyRangeSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::NamedPropertyRangeSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::NamedPropertyRangeSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::NamedPropertyRangeSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::NamedPropertyRangeSeq>::extract (
        _tao_any,
        CosNotification::NamedPropertyRangeSeq::_tao_any_destructor,
        CosNotification::_tc_NamedPropertyRangeSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::QoSError_code _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosNotification::QoSError_code>::insert (
        _tao_any,
        ::CosNotification::_tc_QoSError_code,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::QoSError_code &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosNotification::QoSError_code>::extract (
          _tao_any,
          ::CosNotification::_tc_QoSError_code,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::QoSError_code _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosNotification::QoSError_code>::insert (
      _tao_any,
      CosNotification::_tc_QoSError_code,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::QoSError_code &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosNotification::QoSError_code>::extract (
        _tao_any,
        CosNotification::_tc_QoSError_code,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertyError &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::PropertyError *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertyError>::insert_copy (
          _tao_any,
          ::CosNotification::PropertyError::_tao_any_destructor,
          ::CosNotification::_tc_PropertyError,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::PropertyError *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::PropertyError>::insert (
        _tao_any,
        ::CosNotification::PropertyError::_tao_any_destructor,
        ::CosNotification::_tc_PropertyError,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::PropertyError *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::PropertyError *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertyError *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertyError>::extract (
          _tao_any,
          ::CosNotification::PropertyError::_tao_any_destructor,
          ::CosNotification::_tc_PropertyError,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::PropertyError &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::PropertyError *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::PropertyError>::insert_copy (
        _tao_any,
        CosNotification::PropertyError::_tao_any_destructor,
        CosNotification::_tc_PropertyError,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::PropertyError *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::PropertyError>::insert (
      _tao_any,
      CosNotification::PropertyError::_tao_any_destructor,
      CosNotification::_tc_PropertyError,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::PropertyError *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::PropertyError *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::PropertyError *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::PropertyError>::extract (
        _tao_any,
        CosNotification::PropertyError::_tao_any_destructor,
        CosNotification::_tc_PropertyError,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertyErrorSeq &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::PropertyErrorSeq *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertyErrorSeq>::insert_copy (
          _tao_any,
          ::CosNotification::PropertyErrorSeq::_tao_any_destructor,
          ::CosNotification::_tc_PropertyErrorSeq,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::PropertyErrorSeq *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::PropertyErrorSeq>::insert (
        _tao_any,
        ::CosNotification::PropertyErrorSeq::_tao_any_destructor,
        ::CosNotification::_tc_PropertyErrorSeq,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::PropertyErrorSeq *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::PropertyErrorSeq *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::PropertyErrorSeq *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::PropertyErrorSeq>::extract (
          _tao_any,
          ::CosNotification::PropertyErrorSeq::_tao_any_destructor,
          ::CosNotification::_tc_PropertyErrorSeq,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::PropertyErrorSeq &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::PropertyErrorSeq *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::PropertyErrorSeq>::insert_copy (
        _tao_any,
        CosNotification::PropertyErrorSeq::_tao_any_destructor,
        CosNotification::_tc_PropertyErrorSeq,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::PropertyErrorSeq *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::PropertyErrorSeq>::insert (
      _tao_any,
      CosNotification::PropertyErrorSeq::_tao_any_destructor,
      CosNotification::_tc_PropertyErrorSeq,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::PropertyErrorSeq *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::PropertyErrorSeq *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::PropertyErrorSeq *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::PropertyErrorSeq>::extract (
        _tao_any,
        CosNotification::PropertyErrorSeq::_tao_any_destructor,
        CosNotification::_tc_PropertyErrorSeq,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotification::UnsupportedQoS>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::UnsupportedQoS &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::UnsupportedQoS>::insert_copy (
        _tao_any,
        ::CosNotification::UnsupportedQoS::_tao_any_destructor,
        ::CosNotification::_tc_UnsupportedQoS,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::UnsupportedQoS *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::UnsupportedQoS>::insert (
        _tao_any,
        ::CosNotification::UnsupportedQoS::_tao_any_destructor,
        ::CosNotification::_tc_UnsupportedQoS,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::UnsupportedQoS *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::UnsupportedQoS *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::UnsupportedQoS *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::UnsupportedQoS>::extract (
          _tao_any,
          ::CosNotification::UnsupportedQoS::_tao_any_destructor,
          ::CosNotification::_tc_UnsupportedQoS,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::UnsupportedQoS &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::UnsupportedQoS>::insert_copy (
      _tao_any,
      CosNotification::UnsupportedQoS::_tao_any_destructor,
      CosNotification::_tc_UnsupportedQoS,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::UnsupportedQoS *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::UnsupportedQoS>::insert (
      _tao_any,
      CosNotification::UnsupportedQoS::_tao_any_destructor,
      CosNotification::_tc_UnsupportedQoS,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::UnsupportedQoS *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::UnsupportedQoS *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::UnsupportedQoS *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::UnsupportedQoS>::extract (
        _tao_any,
        CosNotification::UnsupportedQoS::_tao_any_destructor,
        CosNotification::_tc_UnsupportedQoS,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosNotification::UnsupportedAdmin>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::UnsupportedAdmin &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::UnsupportedAdmin>::insert_copy (
        _tao_any,
        ::CosNotification::UnsupportedAdmin::_tao_any_destructor,
        ::CosNotification::_tc_UnsupportedAdmin,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::UnsupportedAdmin *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::UnsupportedAdmin>::insert (
        _tao_any,
        ::CosNotification::UnsupportedAdmin::_tao_any_destructor,
        ::CosNotification::_tc_UnsupportedAdmin,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::UnsupportedAdmin *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::UnsupportedAdmin *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::UnsupportedAdmin *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::UnsupportedAdmin>::extract (
          _tao_any,
          ::CosNotification::UnsupportedAdmin::_tao_any_destructor,
          ::CosNotification::_tc_UnsupportedAdmin,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::UnsupportedAdmin &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::UnsupportedAdmin>::insert_copy (
      _tao_any,
      CosNotification::UnsupportedAdmin::_tao_any_destructor,
      CosNotification::_tc_UnsupportedAdmin,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::UnsupportedAdmin *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::UnsupportedAdmin>::insert (
      _tao_any,
      CosNotification::UnsupportedAdmin::_tao_any_destructor,
      CosNotification::_tc_UnsupportedAdmin,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::UnsupportedAdmin *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::UnsupportedAdmin *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::UnsupportedAdmin *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::UnsupportedAdmin>::extract (
        _tao_any,
        CosNotification::UnsupportedAdmin::_tao_any_destructor,
        CosNotification::_tc_UnsupportedAdmin,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::FixedEventHeader &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::FixedEventHeader *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::FixedEventHeader>::insert_copy (
          _tao_any,
          ::CosNotification::FixedEventHeader::_tao_any_destructor,
          ::CosNotification::_tc_FixedEventHeader,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::FixedEventHeader *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::FixedEventHeader>::insert (
        _tao_any,
        ::CosNotification::FixedEventHeader::_tao_any_destructor,
        ::CosNotification::_tc_FixedEventHeader,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::FixedEventHeader *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::FixedEventHeader *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::FixedEventHeader *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::FixedEventHeader>::extract (
          _tao_any,
          ::CosNotification::FixedEventHeader::_tao_any_destructor,
          ::CosNotification::_tc_FixedEventHeader,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::FixedEventHeader &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::FixedEventHeader *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::FixedEventHeader>::insert_copy (
        _tao_any,
        CosNotification::FixedEventHeader::_tao_any_destructor,
        CosNotification::_tc_FixedEventHeader,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::FixedEventHeader *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::FixedEventHeader>::insert (
      _tao_any,
      CosNotification::FixedEventHeader::_tao_any_destructor,
      CosNotification::_tc_FixedEventHeader,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::FixedEventHeader *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::FixedEventHeader *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::FixedEventHeader *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::FixedEventHeader>::extract (
        _tao_any,
        CosNotification::FixedEventHeader::_tao_any_destructor,
        CosNotification::_tc_FixedEventHeader,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::EventHeader &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::EventHeader *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::EventHeader>::insert_copy (
          _tao_any,
          ::CosNotification::EventHeader::_tao_any_destructor,
          ::CosNotification::_tc_EventHeader,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::EventHeader *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::EventHeader>::insert (
        _tao_any,
        ::CosNotification::EventHeader::_tao_any_destructor,
        ::CosNotification::_tc_EventHeader,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::EventHeader *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::EventHeader *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::EventHeader *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::EventHeader>::extract (
          _tao_any,
          ::CosNotification::EventHeader::_tao_any_destructor,
          ::CosNotification::_tc_EventHeader,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::EventHeader &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::EventHeader *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::EventHeader>::insert_copy (
        _tao_any,
        CosNotification::EventHeader::_tao_any_destructor,
        CosNotification::_tc_EventHeader,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::EventHeader *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::EventHeader>::insert (
      _tao_any,
      CosNotification::EventHeader::_tao_any_destructor,
      CosNotification::_tc_EventHeader,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::EventHeader *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::EventHeader *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::EventHeader *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::EventHeader>::extract (
        _tao_any,
        CosNotification::EventHeader::_tao_any_destructor,
        CosNotification::_tc_EventHeader,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::StructuredEvent &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::StructuredEvent *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::StructuredEvent>::insert_copy (
          _tao_any,
          ::CosNotification::StructuredEvent::_tao_any_destructor,
          ::CosNotification::_tc_StructuredEvent,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      CosNotification::StructuredEvent *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::StructuredEvent>::insert (
        _tao_any,
        ::CosNotification::StructuredEvent::_tao_any_destructor,
        ::CosNotification::_tc_StructuredEvent,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::StructuredEvent *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::StructuredEvent *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::StructuredEvent *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::StructuredEvent>::extract (
          _tao_any,
          ::CosNotification::StructuredEvent::_tao_any_destructor,
          ::CosNotification::_tc_StructuredEvent,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::StructuredEvent &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::StructuredEvent *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::StructuredEvent>::insert_copy (
        _tao_any,
        CosNotification::StructuredEvent::_tao_any_destructor,
        CosNotification::_tc_StructuredEvent,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::StructuredEvent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::StructuredEvent>::insert (
      _tao_any,
      CosNotification::StructuredEvent::_tao_any_destructor,
      CosNotification::_tc_StructuredEvent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::StructuredEvent *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::StructuredEvent *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::StructuredEvent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::StructuredEvent>::extract (
        _tao_any,
        CosNotification::StructuredEvent::_tao_any_destructor,
        CosNotification::_tc_StructuredEvent,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosNotification::EventBatch &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::CosNotification::EventBatch *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::CosNotification::EventBatch>::insert_copy (
          _tao_any,
          ::CosNotification::EventBatch::_tao_any_destructor,
          ::CosNotification::_tc_EventBatch,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosNotification::EventBatch *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosNotification::EventBatch>::insert (
        _tao_any,
        ::CosNotification::EventBatch::_tao_any_destructor,
        ::CosNotification::_tc_EventBatch,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosNotification::EventBatch *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosNotification::EventBatch *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosNotification::EventBatch *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosNotification::EventBatch>::extract (
          _tao_any,
          ::CosNotification::EventBatch::_tao_any_destructor,
          ::CosNotification::_tc_EventBatch,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosNotification::EventBatch &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<CosNotification::EventBatch *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<CosNotification::EventBatch>::insert_copy (
        _tao_any,
        CosNotification::EventBatch::_tao_any_destructor,
        CosNotification::_tc_EventBatch,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::EventBatch *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosNotification::EventBatch>::insert (
      _tao_any,
      CosNotification::EventBatch::_tao_any_destructor,
      CosNotification::_tc_EventBatch,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::EventBatch *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosNotification::EventBatch *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosNotification::EventBatch *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosNotification::EventBatch>::extract (
        _tao_any,
        CosNotification::EventBatch::_tao_any_destructor,
        CosNotification::_tc_EventBatch,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotification::QoSAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QoSAdmin_ptr _tao_elem)
  {
    QoSAdmin_ptr _tao_objptr =
      QoSAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      QoSAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<QoSAdmin>::insert (
        _tao_any,
        QoSAdmin::_tao_any_destructor,
        _tc_QoSAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      QoSAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<QoSAdmin>::extract (
          _tao_any,
          QoSAdmin::_tao_any_destructor,
          _tc_QoSAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::QoSAdmin_ptr _tao_elem)
{
  CosNotification::QoSAdmin_ptr _tao_objptr =
    CosNotification::QoSAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::QoSAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotification::QoSAdmin>::insert (
      _tao_any,
      CosNotification::QoSAdmin::_tao_any_destructor,
      CosNotification::_tc_QoSAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::QoSAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotification::QoSAdmin>::extract (
        _tao_any,
        CosNotification::QoSAdmin::_tao_any_destructor,
        CosNotification::_tc_QoSAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosNotification::AdminPropertiesAdmin>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosNotification
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AdminPropertiesAdmin_ptr _tao_elem)
  {
    AdminPropertiesAdmin_ptr _tao_objptr =
      AdminPropertiesAdmin::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AdminPropertiesAdmin_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AdminPropertiesAdmin>::insert (
        _tao_any,
        AdminPropertiesAdmin::_tao_any_destructor,
        _tc_AdminPropertiesAdmin,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AdminPropertiesAdmin_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AdminPropertiesAdmin>::extract (
          _tao_any,
          AdminPropertiesAdmin::_tao_any_destructor,
          _tc_AdminPropertiesAdmin,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::AdminPropertiesAdmin_ptr _tao_elem)
{
  CosNotification::AdminPropertiesAdmin_ptr _tao_objptr =
    CosNotification::AdminPropertiesAdmin::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosNotification::AdminPropertiesAdmin_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosNotification::AdminPropertiesAdmin>::insert (
      _tao_any,
      CosNotification::AdminPropertiesAdmin::_tao_any_destructor,
      CosNotification::_tc_AdminPropertiesAdmin,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosNotification::AdminPropertiesAdmin_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosNotification::AdminPropertiesAdmin>::extract (
        _tao_any,
        CosNotification::AdminPropertiesAdmin::_tao_any_destructor,
        CosNotification::_tc_AdminPropertiesAdmin,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::Property &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::Property &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotification_PropertySeq_CPP_
#define _TAO_CDR_OP_CosNotification_PropertySeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::PropertySeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::PropertySeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotification_PropertySeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::EventType &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.domain_name.in ()) &&
    (strm << _tao_aggregate.type_name.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::EventType &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.domain_name.out ()) &&
    (strm >> _tao_aggregate.type_name.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotification_EventTypeSeq_CPP_
#define _TAO_CDR_OP_CosNotification_EventTypeSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::EventTypeSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::EventTypeSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotification_EventTypeSeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::PropertyRange &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.low_val) &&
    (strm << _tao_aggregate.high_val);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::PropertyRange &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.low_val) &&
    (strm >> _tao_aggregate.high_val);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::NamedPropertyRange &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.range);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::NamedPropertyRange &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.range);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotification_NamedPropertyRangeSeq_CPP_
#define _TAO_CDR_OP_CosNotification_NamedPropertyRangeSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::NamedPropertyRangeSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::NamedPropertyRangeSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotification_NamedPropertyRangeSeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosNotification::QoSError_code _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosNotification::QoSError_code & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosNotification::QoSError_code> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::PropertyError &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.code) &&
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.available_range);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::PropertyError &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.code) &&
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.available_range);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotification_PropertyErrorSeq_CPP_
#define _TAO_CDR_OP_CosNotification_PropertyErrorSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::PropertyErrorSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::PropertyErrorSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotification_PropertyErrorSeq_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::UnsupportedQoS &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.qos_err)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::UnsupportedQoS &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.qos_err)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::UnsupportedAdmin &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.admin_err)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::UnsupportedAdmin &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.admin_err)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::FixedEventHeader &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.event_type) &&
    (strm << _tao_aggregate.event_name.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::FixedEventHeader &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.event_type) &&
    (strm >> _tao_aggregate.event_name.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::EventHeader &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.fixed_header) &&
    (strm << _tao_aggregate.variable_header);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::EventHeader &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.fixed_header) &&
    (strm >> _tao_aggregate.variable_header);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::StructuredEvent &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.header) &&
    (strm << _tao_aggregate.filterable_data) &&
    (strm << _tao_aggregate.remainder_of_body);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::StructuredEvent &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.header) &&
    (strm >> _tao_aggregate.filterable_data) &&
    (strm >> _tao_aggregate.remainder_of_body);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_CosNotification_EventBatch_CPP_
#define _TAO_CDR_OP_CosNotification_EventBatch_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::EventBatch &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::EventBatch &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_CosNotification_EventBatch_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::QoSAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::QoSAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotification::QoSAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotification__TAO_QoSAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosNotification::AdminPropertiesAdmin_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosNotification::AdminPropertiesAdmin_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosNotification::AdminPropertiesAdmin RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNotification__TAO_AdminPropertiesAdmin_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


