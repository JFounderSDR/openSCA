// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "TimeServiceC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TimeServiceC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosTime_TimeComparison[] =
  {
    "TCEqualTo",
    "TCLessThan",
    "TCGreaterThan",
    "TCIndeterminate"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosTime_TimeComparison (
    "IDL:omg.org/CosTime/TimeComparison:1.0",
    "TimeComparison",
    _tao_enumerators_CosTime_TimeComparison,
    4);
  

namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_TimeComparison =
    &_tao_tc_CosTime_TimeComparison;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosTime_ComparisonType[] =
  {
    "IntervalC",
    "MidC"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosTime_ComparisonType (
    "IDL:omg.org/CosTime/ComparisonType:1.0",
    "ComparisonType",
    _tao_enumerators_CosTime_ComparisonType,
    2);
  

namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_ComparisonType =
    &_tao_tc_CosTime_ComparisonType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_CosTime_OverlapType[] =
  {
    "OTContainer",
    "OTContained",
    "OTOverlap",
    "OTNoOverlap"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_CosTime_OverlapType (
    "IDL:omg.org/CosTime/OverlapType:1.0",
    "OverlapType",
    _tao_enumerators_CosTime_OverlapType,
    4);
  

namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_OverlapType =
    &_tao_tc_CosTime_OverlapType;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

CosTime::TimeUnavailable::TimeUnavailable (void)
  : ::CORBA::UserException (
        "IDL:omg.org/CosTime/TimeUnavailable:1.0",
        "TimeUnavailable"
      )
{
}

CosTime::TimeUnavailable::~TimeUnavailable (void)
{
}

CosTime::TimeUnavailable::TimeUnavailable (const ::CosTime::TimeUnavailable &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

CosTime::TimeUnavailable&
CosTime::TimeUnavailable::operator= (const ::CosTime::TimeUnavailable &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void CosTime::TimeUnavailable::_tao_any_destructor (void *_tao_void_pointer)
{
  TimeUnavailable *_tao_tmp_pointer =
    static_cast<TimeUnavailable *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

CosTime::TimeUnavailable *
CosTime::TimeUnavailable::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<TimeUnavailable *> (_tao_excp);
}

const CosTime::TimeUnavailable *
CosTime::TimeUnavailable::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const TimeUnavailable *> (_tao_excp);
}

::CORBA::Exception *CosTime::TimeUnavailable::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::CosTime::TimeUnavailable, 0);
  return retval;
}

::CORBA::Exception *
CosTime::TimeUnavailable::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::CosTime::TimeUnavailable (*this),
      0
    );
  return result;
}

void CosTime::TimeUnavailable::_raise (void) const
{
  throw *this;
}

void CosTime::TimeUnavailable::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void CosTime::TimeUnavailable::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr CosTime::TimeUnavailable::_tao_type (void) const
{
  return ::CosTime::_tc_TimeUnavailable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_CosTime_TimeUnavailable = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_CosTime_TimeUnavailable (
  ::CORBA::tk_except,
  "IDL:omg.org/CosTime/TimeUnavailable:1.0",
  "TimeUnavailable",
  _tao_fields_CosTime_TimeUnavailable,
  0);


namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_TimeUnavailable =
    &_tao_tc_CosTime_TimeUnavailable;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTime::UTO.

CosTime::UTO_ptr
TAO::Objref_Traits<CosTime::UTO>::duplicate (
    CosTime::UTO_ptr p)
{
  return CosTime::UTO::_duplicate (p);
}

void
TAO::Objref_Traits<CosTime::UTO>::release (
    CosTime::UTO_ptr p)
{
  ::CORBA::release (p);
}

CosTime::UTO_ptr
TAO::Objref_Traits<CosTime::UTO>::nil (void)
{
  return CosTime::UTO::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTime::UTO>::marshal (
    const CosTime::UTO_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTime__TAO_UTO_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::TimeBase::TimeT
CosTime::UTO::time (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_time",
      9,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::TimeBase::InaccuracyT
CosTime::UTO::inaccuracy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::ULongLong>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_inaccuracy",
      15,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::TimeBase::TdfT
CosTime::UTO::tdf (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_tdf",
      8,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::TimeBase::UtcT
CosTime::UTO::utc_time (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::TimeBase::UtcT>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_utc_time",
      13,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::UTO_ptr
CosTime::UTO::absolute_time (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::UTO>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "absolute_time",
      13,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::TimeComparison
CosTime::UTO::compare_time (
  ::CosTime::ComparisonType comparison_type,
  ::CosTime::UTO_ptr otu)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::TimeComparison>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosTime::ComparisonType>::in_arg_val _tao_comparison_type (comparison_type);
  TAO::Arg_Traits< ::CosTime::UTO>::in_arg_val _tao_otu (otu);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_comparison_type,
      &_tao_otu
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "compare_time",
      12,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::TIO_ptr
CosTime::UTO::time_to_interval (
  ::CosTime::UTO_ptr otu)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::TIO>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosTime::UTO>::in_arg_val _tao_otu (otu);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_otu
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "time_to_interval",
      16,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::TIO_ptr
CosTime::UTO::interval (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_UTO_Proxy_Broker_ == 0)
    {
      CosTime_UTO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::TIO>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "interval",
      8,
      this->the_TAO_UTO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

CosTime::UTO::UTO (void)
 : the_TAO_UTO_Proxy_Broker_ (0)
{
  this->CosTime_UTO_setup_collocation ();
}

void
CosTime::UTO::CosTime_UTO_setup_collocation ()
{
  if (::CosTime__TAO_UTO_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_UTO_Proxy_Broker_ =
        ::CosTime__TAO_UTO_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosTime::UTO::~UTO (void)
{}

void 
CosTime::UTO::_tao_any_destructor (void *_tao_void_pointer)
{
  UTO *_tao_tmp_pointer =
    static_cast<UTO *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTime::UTO_ptr
CosTime::UTO::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<UTO>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTime/UTO:1.0",
        CosTime__TAO_UTO_Proxy_Broker_Factory_function_pointer
      );
}

CosTime::UTO_ptr
CosTime::UTO::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<UTO>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTime/UTO:1.0",
        CosTime__TAO_UTO_Proxy_Broker_Factory_function_pointer
      );
}

CosTime::UTO_ptr
CosTime::UTO::_nil (void)
{
  return 0;
}

CosTime::UTO_ptr
CosTime::UTO::_duplicate (UTO_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTime::UTO::_tao_release (UTO_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTime::UTO::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTime/UTO:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTime::UTO::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTime/UTO:1.0";
}

::CORBA::Boolean
CosTime::UTO::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTime_UTO (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTime/UTO:1.0",
    "UTO");
  

namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_UTO =
    &_tao_tc_CosTime_UTO;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTime::TIO.

CosTime::TIO_ptr
TAO::Objref_Traits<CosTime::TIO>::duplicate (
    CosTime::TIO_ptr p)
{
  return CosTime::TIO::_duplicate (p);
}

void
TAO::Objref_Traits<CosTime::TIO>::release (
    CosTime::TIO_ptr p)
{
  ::CORBA::release (p);
}

CosTime::TIO_ptr
TAO::Objref_Traits<CosTime::TIO>::nil (void)
{
  return CosTime::TIO::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTime::TIO>::marshal (
    const CosTime::TIO_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTime__TAO_TIO_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::TimeBase::IntervalT
CosTime::TIO::time_interval (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TIO_Proxy_Broker_ == 0)
    {
      CosTime_TIO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::TimeBase::IntervalT>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_time_interval",
      18,
      this->the_TAO_TIO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::OverlapType
CosTime::TIO::spans (
  ::CosTime::UTO_ptr time,
  ::CosTime::TIO_out overlap)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TIO_Proxy_Broker_ == 0)
    {
      CosTime_TIO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::OverlapType>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosTime::UTO>::in_arg_val _tao_time (time);
  TAO::Arg_Traits< ::CosTime::TIO>::out_arg_val _tao_overlap (overlap);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_time,
      &_tao_overlap
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "spans",
      5,
      this->the_TAO_TIO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::OverlapType
CosTime::TIO::overlaps (
  ::CosTime::TIO_ptr interval,
  ::CosTime::TIO_out overlap)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TIO_Proxy_Broker_ == 0)
    {
      CosTime_TIO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::OverlapType>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CosTime::TIO>::in_arg_val _tao_interval (interval);
  TAO::Arg_Traits< ::CosTime::TIO>::out_arg_val _tao_overlap (overlap);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_interval,
      &_tao_overlap
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "overlaps",
      8,
      this->the_TAO_TIO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::UTO_ptr
CosTime::TIO::time (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TIO_Proxy_Broker_ == 0)
    {
      CosTime_TIO_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::UTO>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "time",
      4,
      this->the_TAO_TIO_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

CosTime::TIO::TIO (void)
 : the_TAO_TIO_Proxy_Broker_ (0)
{
  this->CosTime_TIO_setup_collocation ();
}

void
CosTime::TIO::CosTime_TIO_setup_collocation ()
{
  if (::CosTime__TAO_TIO_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TIO_Proxy_Broker_ =
        ::CosTime__TAO_TIO_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosTime::TIO::~TIO (void)
{}

void 
CosTime::TIO::_tao_any_destructor (void *_tao_void_pointer)
{
  TIO *_tao_tmp_pointer =
    static_cast<TIO *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTime::TIO_ptr
CosTime::TIO::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TIO>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTime/TIO:1.0",
        CosTime__TAO_TIO_Proxy_Broker_Factory_function_pointer
      );
}

CosTime::TIO_ptr
CosTime::TIO::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TIO>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTime/TIO:1.0",
        CosTime__TAO_TIO_Proxy_Broker_Factory_function_pointer
      );
}

CosTime::TIO_ptr
CosTime::TIO::_nil (void)
{
  return 0;
}

CosTime::TIO_ptr
CosTime::TIO::_duplicate (TIO_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTime::TIO::_tao_release (TIO_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTime::TIO::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTime/TIO:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTime::TIO::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTime/TIO:1.0";
}

::CORBA::Boolean
CosTime::TIO::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTime_TIO (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTime/TIO:1.0",
    "TIO");
  

namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_TIO =
    &_tao_tc_CosTime_TIO;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for CosTime::TimeService.

CosTime::TimeService_ptr
TAO::Objref_Traits<CosTime::TimeService>::duplicate (
    CosTime::TimeService_ptr p)
{
  return CosTime::TimeService::_duplicate (p);
}

void
TAO::Objref_Traits<CosTime::TimeService>::release (
    CosTime::TimeService_ptr p)
{
  ::CORBA::release (p);
}

CosTime::TimeService_ptr
TAO::Objref_Traits<CosTime::TimeService>::nil (void)
{
  return CosTime::TimeService::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CosTime::TimeService>::marshal (
    const CosTime::TimeService_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*CosTime__TAO_TimeService_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::UTO_ptr
CosTime::TimeService::universal_time (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TimeService_Proxy_Broker_ == 0)
    {
      CosTime_TimeService_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::UTO>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosTime_TimeService_universal_time_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosTime/TimeUnavailable:1.0",
        CosTime::TimeUnavailable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosTime::_tc_TimeUnavailable
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "universal_time",
      14,
      this->the_TAO_TimeService_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosTime_TimeService_universal_time_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::UTO_ptr
CosTime::TimeService::secure_universal_time (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TimeService_Proxy_Broker_ == 0)
    {
      CosTime_TimeService_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::UTO>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_CosTime_TimeService_secure_universal_time_exceptiondata [] = 
    {
      {
        "IDL:omg.org/CosTime/TimeUnavailable:1.0",
        CosTime::TimeUnavailable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , CosTime::_tc_TimeUnavailable
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "secure_universal_time",
      21,
      this->the_TAO_TimeService_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_CosTime_TimeService_secure_universal_time_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::UTO_ptr
CosTime::TimeService::new_universal_time (
  ::TimeBase::TimeT time,
  ::TimeBase::InaccuracyT inaccuracy,
  ::TimeBase::TdfT tdf)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TimeService_Proxy_Broker_ == 0)
    {
      CosTime_TimeService_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::UTO>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_time (time);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_inaccuracy (inaccuracy);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_tdf (tdf);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_time,
      &_tao_inaccuracy,
      &_tao_tdf
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "new_universal_time",
      18,
      this->the_TAO_TimeService_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::UTO_ptr
CosTime::TimeService::uto_from_utc (
  const ::TimeBase::UtcT & utc)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TimeService_Proxy_Broker_ == 0)
    {
      CosTime_TimeService_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::UTO>::ret_val _tao_retval;
  TAO::Arg_Traits< ::TimeBase::UtcT>::in_arg_val _tao_utc (utc);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_utc
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "uto_from_utc",
      12,
      this->the_TAO_TimeService_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::CosTime::TIO_ptr
CosTime::TimeService::new_interval (
  ::TimeBase::TimeT lower,
  ::TimeBase::TimeT upper)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TimeService_Proxy_Broker_ == 0)
    {
      CosTime_TimeService_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CosTime::TIO>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_lower (lower);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_upper (upper);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_lower,
      &_tao_upper
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "new_interval",
      12,
      this->the_TAO_TimeService_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

CosTime::TimeService::TimeService (void)
 : the_TAO_TimeService_Proxy_Broker_ (0)
{
  this->CosTime_TimeService_setup_collocation ();
}

void
CosTime::TimeService::CosTime_TimeService_setup_collocation ()
{
  if (::CosTime__TAO_TimeService_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TimeService_Proxy_Broker_ =
        ::CosTime__TAO_TimeService_Proxy_Broker_Factory_function_pointer (this);
    }
}

CosTime::TimeService::~TimeService (void)
{}

void 
CosTime::TimeService::_tao_any_destructor (void *_tao_void_pointer)
{
  TimeService *_tao_tmp_pointer =
    static_cast<TimeService *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

CosTime::TimeService_ptr
CosTime::TimeService::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TimeService>::narrow (
        _tao_objref,
        "IDL:omg.org/CosTime/TimeService:1.0",
        CosTime__TAO_TimeService_Proxy_Broker_Factory_function_pointer
      );
}

CosTime::TimeService_ptr
CosTime::TimeService::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<TimeService>::unchecked_narrow (
        _tao_objref,
        "IDL:omg.org/CosTime/TimeService:1.0",
        CosTime__TAO_TimeService_Proxy_Broker_Factory_function_pointer
      );
}

CosTime::TimeService_ptr
CosTime::TimeService::_nil (void)
{
  return 0;
}

CosTime::TimeService_ptr
CosTime::TimeService::_duplicate (TimeService_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CosTime::TimeService::_tao_release (TimeService_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CosTime::TimeService::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTime/TimeService:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CosTime::TimeService::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTime/TimeService:1.0";
}

::CORBA::Boolean
CosTime::TimeService::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_CosTime_TimeService (
    ::CORBA::tk_objref,
    "IDL:omg.org/CosTime/TimeService:1.0",
    "TimeService");
  

namespace CosTime
{
  ::CORBA::TypeCode_ptr const _tc_TimeService =
    &_tao_tc_CosTime_TimeService;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosTime::TimeComparison _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosTime::TimeComparison>::insert (
        _tao_any,
        ::CosTime::_tc_TimeComparison,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosTime::TimeComparison &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosTime::TimeComparison>::extract (
          _tao_any,
          ::CosTime::_tc_TimeComparison,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::TimeComparison _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosTime::TimeComparison>::insert (
      _tao_any,
      CosTime::_tc_TimeComparison,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::TimeComparison &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosTime::TimeComparison>::extract (
        _tao_any,
        CosTime::_tc_TimeComparison,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosTime::ComparisonType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosTime::ComparisonType>::insert (
        _tao_any,
        ::CosTime::_tc_ComparisonType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosTime::ComparisonType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosTime::ComparisonType>::extract (
          _tao_any,
          ::CosTime::_tc_ComparisonType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::ComparisonType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosTime::ComparisonType>::insert (
      _tao_any,
      CosTime::_tc_ComparisonType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::ComparisonType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosTime::ComparisonType>::extract (
        _tao_any,
        CosTime::_tc_ComparisonType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosTime::OverlapType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::CosTime::OverlapType>::insert (
        _tao_any,
        ::CosTime::_tc_OverlapType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosTime::OverlapType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::CosTime::OverlapType>::extract (
          _tao_any,
          ::CosTime::_tc_OverlapType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::OverlapType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<CosTime::OverlapType>::insert (
      _tao_any,
      CosTime::_tc_OverlapType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::OverlapType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<CosTime::OverlapType>::extract (
        _tao_any,
        CosTime::_tc_OverlapType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<CosTime::TimeUnavailable>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::CosTime::TimeUnavailable &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosTime::TimeUnavailable>::insert_copy (
        _tao_any,
        ::CosTime::TimeUnavailable::_tao_any_destructor,
        ::CosTime::_tc_TimeUnavailable,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::CosTime::TimeUnavailable *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::CosTime::TimeUnavailable>::insert (
        _tao_any,
        ::CosTime::TimeUnavailable::_tao_any_destructor,
        ::CosTime::_tc_TimeUnavailable,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::CosTime::TimeUnavailable *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::CosTime::TimeUnavailable *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::CosTime::TimeUnavailable *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::CosTime::TimeUnavailable>::extract (
          _tao_any,
          ::CosTime::TimeUnavailable::_tao_any_destructor,
          ::CosTime::_tc_TimeUnavailable,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const CosTime::TimeUnavailable &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosTime::TimeUnavailable>::insert_copy (
      _tao_any,
      CosTime::TimeUnavailable::_tao_any_destructor,
      CosTime::_tc_TimeUnavailable,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::TimeUnavailable *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<CosTime::TimeUnavailable>::insert (
      _tao_any,
      CosTime::TimeUnavailable::_tao_any_destructor,
      CosTime::_tc_TimeUnavailable,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::TimeUnavailable *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const CosTime::TimeUnavailable *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const CosTime::TimeUnavailable *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<CosTime::TimeUnavailable>::extract (
        _tao_any,
        CosTime::TimeUnavailable::_tao_any_destructor,
        CosTime::_tc_TimeUnavailable,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTime::UTO>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UTO_ptr _tao_elem)
  {
    UTO_ptr _tao_objptr =
      UTO::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UTO_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<UTO>::insert (
        _tao_any,
        UTO::_tao_any_destructor,
        _tc_UTO,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      UTO_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<UTO>::extract (
          _tao_any,
          UTO::_tao_any_destructor,
          _tc_UTO,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::UTO_ptr _tao_elem)
{
  CosTime::UTO_ptr _tao_objptr =
    CosTime::UTO::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::UTO_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTime::UTO>::insert (
      _tao_any,
      CosTime::UTO::_tao_any_destructor,
      CosTime::_tc_UTO,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::UTO_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTime::UTO>::extract (
        _tao_any,
        CosTime::UTO::_tao_any_destructor,
        CosTime::_tc_UTO,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTime::TIO>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TIO_ptr _tao_elem)
  {
    TIO_ptr _tao_objptr =
      TIO::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TIO_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TIO>::insert (
        _tao_any,
        TIO::_tao_any_destructor,
        _tc_TIO,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TIO_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TIO>::extract (
          _tao_any,
          TIO::_tao_any_destructor,
          _tc_TIO,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::TIO_ptr _tao_elem)
{
  CosTime::TIO_ptr _tao_objptr =
    CosTime::TIO::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::TIO_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTime::TIO>::insert (
      _tao_any,
      CosTime::TIO::_tao_any_destructor,
      CosTime::_tc_TIO,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::TIO_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTime::TIO>::extract (
        _tao_any,
        CosTime::TIO::_tao_any_destructor,
        CosTime::_tc_TIO,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<CosTime::TimeService>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosTime
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TimeService_ptr _tao_elem)
  {
    TimeService_ptr _tao_objptr =
      TimeService::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TimeService_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TimeService>::insert (
        _tao_any,
        TimeService::_tao_any_destructor,
        _tc_TimeService,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TimeService_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TimeService>::extract (
          _tao_any,
          TimeService::_tao_any_destructor,
          _tc_TimeService,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::TimeService_ptr _tao_elem)
{
  CosTime::TimeService_ptr _tao_objptr =
    CosTime::TimeService::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    CosTime::TimeService_ptr *_tao_elem)
{
  TAO::Any_Impl_T<CosTime::TimeService>::insert (
      _tao_any,
      CosTime::TimeService::_tao_any_destructor,
      CosTime::_tc_TimeService,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    CosTime::TimeService_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<CosTime::TimeService>::extract (
        _tao_any,
        CosTime::TimeService::_tao_any_destructor,
        CosTime::_tc_TimeService,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosTime::TimeComparison _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosTime::TimeComparison & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosTime::TimeComparison> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosTime::ComparisonType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosTime::ComparisonType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosTime::ComparisonType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CosTime::OverlapType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CosTime::OverlapType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CosTime::OverlapType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTime::TimeUnavailable &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    CosTime::TimeUnavailable&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTime::UTO_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTime::UTO_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTime::UTO RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTime__TAO_UTO_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTime::TIO_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTime::TIO_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTime::TIO RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTime__TAO_TIO_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CosTime::TimeService_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CosTime::TimeService_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CosTime::TimeService RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTime__TAO_TimeService_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


