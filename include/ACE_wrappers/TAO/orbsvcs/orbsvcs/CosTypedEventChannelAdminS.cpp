// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_COSTYPEDEVENTCHANNELADMINS_TL2ZNT_CPP_
#define _TAO_IDL_COSTYPEDEVENTCHANNELADMINS_TL2ZNT_CPP_


#include "CosTypedEventChannelAdminS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "CosTypedEventChannelAdminS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosTypedEventChannelAdmin_TypedProxyPushConsumer_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosTypedEventChannelAdmin_TypedProxyPushConsumer_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosTypedEventChannelAdmin_TypedProxyPushConsumer_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25,  0, 25,  0, 25,  0,
      0,  5, 25,  0,  0, 25, 25, 25, 25, 25,
     25, 25,  0, 25,  0, 25,  0, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosTypedEventChannelAdmin_TypedProxyPushConsumer_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 24,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 24,
      HASH_VALUE_RANGE = 21,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"push", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::push_skel, 0},
      {"_is_a", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_non_existent_skel, 0},
      {"_repository_id", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_repository_id_skel, 0},
      {"_interface", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"get_typed_consumer", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::get_typed_consumer_skel, 0},
      {"",0,0},{"",0,0},
      {"connect_push_supplier", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::connect_push_supplier_skel, 0},
      {"",0,0},{"",0,0},
      {"disconnect_push_consumer", &POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::disconnect_push_consumer_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosTypedEventChannelAdmin_TypedProxyPushConsumer_Perfect_Hash_OpTable tao_CosTypedEventChannelAdmin_TypedProxyPushConsumer_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_Initializer (size_t)
{
  CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer = 
    CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::TypedProxyPushConsumer (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosTypedEventChannelAdmin_TypedProxyPushConsumer_optable;
}

POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::TypedProxyPushConsumer (const TypedProxyPushConsumer& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosEventComm::PushConsumer (rhs),
    POA_CosEventChannelAdmin::ProxyPushConsumer (rhs),
    POA_CosTypedEventComm::TypedPushConsumer (rhs)
{
}

POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::~TypedProxyPushConsumer (void)
{
}


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_TypedProxyPushConsumer_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_TypedProxyPushConsumer_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer *> (servant);
  
  _is_a_TypedProxyPushConsumer_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_TypedProxyPushConsumer_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_TypedProxyPushConsumer_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer *> (servant);
  
  _non_existent_TypedProxyPushConsumer_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_TypedProxyPushConsumer_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_TypedProxyPushConsumer_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer *> (servant);
  
  _repository_id_TypedProxyPushConsumer_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_TypedProxyPushConsumer_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_TypedProxyPushConsumer_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer *> (servant);
  
  _get_component_TypedProxyPushConsumer_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventComm/TypedPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPushConsumer:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosTypedEventChannelAdmin::TypedProxyPushConsumer *
POA_CosTypedEventChannelAdmin::TypedProxyPushConsumer::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosTypedEventChannelAdmin::TypedProxyPushConsumer STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedProxyPushConsumer_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosTypedEventChannelAdmin_TypedProxyPullSupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosTypedEventChannelAdmin_TypedProxyPullSupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosTypedEventChannelAdmin_TypedProxyPullSupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
     25, 25, 25, 25, 25,  0, 25,  0, 25,  0,
      0,  5, 25,  0, 25, 25, 25, 25,  0, 25,
     25, 25,  0, 25,  0, 25,  0, 25, 25, 25,
     25, 25, 25, 25, 25, 25, 25, 25,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosTypedEventChannelAdmin_TypedProxyPullSupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 10,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 24,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 24,
      HASH_VALUE_RANGE = 21,
      DUPLICATES = 0,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"pull", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::pull_skel, 0},
      {"_is_a", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_is_a_skel, 0},
      {"",0,0},{"",0,0},
      {"try_pull", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::try_pull_skel, 0},
      {"",0,0},
      {"_component", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_non_existent_skel, 0},
      {"_repository_id", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_repository_id_skel, 0},
      {"_interface", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"get_typed_supplier", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::get_typed_supplier_skel, 0},
      {"",0,0},{"",0,0},
      {"connect_pull_consumer", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::connect_pull_consumer_skel, 0},
      {"",0,0},{"",0,0},
      {"disconnect_pull_supplier", &POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::disconnect_pull_supplier_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosTypedEventChannelAdmin_TypedProxyPullSupplier_Perfect_Hash_OpTable tao_CosTypedEventChannelAdmin_TypedProxyPullSupplier_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_Initializer (size_t)
{
  CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer = 
    CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::TypedProxyPullSupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosTypedEventChannelAdmin_TypedProxyPullSupplier_optable;
}

POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::TypedProxyPullSupplier (const TypedProxyPullSupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosEventComm::PullSupplier (rhs),
    POA_CosEventChannelAdmin::ProxyPullSupplier (rhs),
    POA_CosTypedEventComm::TypedPullSupplier (rhs)
{
}

POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::~TypedProxyPullSupplier (void)
{
}


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_TypedProxyPullSupplier_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_TypedProxyPullSupplier_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier *> (servant);
  
  _is_a_TypedProxyPullSupplier_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_TypedProxyPullSupplier_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_TypedProxyPullSupplier_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier *> (servant);
  
  _non_existent_TypedProxyPullSupplier_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_TypedProxyPullSupplier_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_TypedProxyPullSupplier_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier *> (servant);
  
  _repository_id_TypedProxyPullSupplier_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_TypedProxyPullSupplier_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_TypedProxyPullSupplier_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier *> (servant);
  
  _get_component_TypedProxyPullSupplier_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ProxyPullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventComm/TypedPullSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedProxyPullSupplier:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosTypedEventChannelAdmin::TypedProxyPullSupplier *
POA_CosTypedEventChannelAdmin::TypedProxyPullSupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosTypedEventChannelAdmin::TypedProxyPullSupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedProxyPullSupplier_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosTypedEventChannelAdmin_TypedSupplierAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosTypedEventChannelAdmin_TypedSupplierAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosTypedEventChannelAdmin_TypedSupplierAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27,  0, 27,  0, 27, 27,
      0,  5, 27, 27, 27, 27, 27, 27, 27, 27,
     27,  0, 27, 27,  0, 27,  0, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosTypedEventChannelAdmin_TypedSupplierAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 26,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 26,
      HASH_VALUE_RANGE = 22,
      DUPLICATES = 3,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_is_a_skel, 0},
      {"_component", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_component_skel, 0},
      {"_non_existent", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_non_existent_skel, 0},
      {"_repository_id", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_repository_id_skel, 0},
      {"_interface", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_interface_skel, 0},
      {"obtain_push_consumer", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_push_consumer_skel, 0},
      {"obtain_pull_consumer", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_pull_consumer_skel, 0},
      {"obtain_typed_push_consumer", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_typed_push_consumer_skel, 0},
      {"obtain_typed_pull_consumer", &POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_typed_pull_consumer_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,   6,  -1,  -1,   7, 
        8,   9,  -1,  -1, -10,  -2, -28,  -1,  -1,  -1, -12,  -2, -28, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosTypedEventChannelAdmin_TypedSupplierAdmin_Perfect_Hash_OpTable tao_CosTypedEventChannelAdmin_TypedSupplierAdmin_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer = 
    CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::TypedSupplierAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosTypedEventChannelAdmin_TypedSupplierAdmin_optable;
}

POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::TypedSupplierAdmin (const TypedSupplierAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosEventChannelAdmin::SupplierAdmin (rhs)
{
}

POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::~TypedSupplierAdmin (void)
{
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_typed_push_consumer_TypedSupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_typed_push_consumer_TypedSupplierAdmin (
      POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedProxyPushConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosTypedEventChannelAdmin::TypedProxyPushConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->obtain_typed_push_consumer (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_typed_push_consumer_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosTypedEventChannelAdmin::_tc_InterfaceNotSupported
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedProxyPushConsumer>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_supported_interface;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_supported_interface
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);

  obtain_typed_push_consumer_TypedSupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_typed_pull_consumer_TypedSupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_typed_pull_consumer_TypedSupplierAdmin (
      POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosEventChannelAdmin::ProxyPullConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosEventChannelAdmin::ProxyPullConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->obtain_typed_pull_consumer (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::obtain_typed_pull_consumer_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosTypedEventChannelAdmin::_tc_NoSuchImplementation
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosEventChannelAdmin::ProxyPullConsumer>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_uses_interface;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_uses_interface
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);

  obtain_typed_pull_consumer_TypedSupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_TypedSupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_TypedSupplierAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);
  
  _is_a_TypedSupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_TypedSupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_TypedSupplierAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);
  
  _non_existent_TypedSupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_TypedSupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_TypedSupplierAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);
  
  _repository_id_TypedSupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_TypedSupplierAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_TypedSupplierAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedSupplierAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedSupplierAdmin *> (servant);
  
  _get_component_TypedSupplierAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedSupplierAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosTypedEventChannelAdmin::TypedSupplierAdmin *
POA_CosTypedEventChannelAdmin::TypedSupplierAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosTypedEventChannelAdmin::TypedSupplierAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedSupplierAdmin_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosTypedEventChannelAdmin_TypedConsumerAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosTypedEventChannelAdmin_TypedConsumerAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosTypedEventChannelAdmin_TypedConsumerAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 27, 27,  0, 27,  0, 27, 27,
      0,  5, 27, 27, 27, 27, 27, 27, 27, 27,
     27,  0, 27, 27,  0, 27,  0, 27, 27, 27,
     27, 27, 27, 27, 27, 27, 27, 27,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosTypedEventChannelAdmin_TypedConsumerAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 9,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 26,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 26,
      HASH_VALUE_RANGE = 22,
      DUPLICATES = 3,
      WORDLIST_SIZE = 14
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_is_a_skel, 0},
      {"_component", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_component_skel, 0},
      {"_non_existent", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_non_existent_skel, 0},
      {"_repository_id", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_repository_id_skel, 0},
      {"_interface", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_interface_skel, 0},
      {"obtain_push_supplier", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_push_supplier_skel, 0},
      {"obtain_pull_supplier", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_pull_supplier_skel, 0},
      {"obtain_typed_pull_supplier", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_typed_pull_supplier_skel, 0},
      {"obtain_typed_push_supplier", &POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_typed_push_supplier_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,  -1,  -1,  -1,   6,  -1,  -1,   7, 
        8,   9,  -1,  -1, -10,  -2, -28,  -1,  -1,  -1, -12,  -2, -28, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosTypedEventChannelAdmin_TypedConsumerAdmin_Perfect_Hash_OpTable tao_CosTypedEventChannelAdmin_TypedConsumerAdmin_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_Initializer (size_t)
{
  CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer = 
    CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::TypedConsumerAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosTypedEventChannelAdmin_TypedConsumerAdmin_optable;
}

POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::TypedConsumerAdmin (const TypedConsumerAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosEventChannelAdmin::ConsumerAdmin (rhs)
{
}

POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::~TypedConsumerAdmin (void)
{
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_typed_pull_supplier_TypedConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_typed_pull_supplier_TypedConsumerAdmin (
      POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedProxyPullSupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosTypedEventChannelAdmin::TypedProxyPullSupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->obtain_typed_pull_supplier (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_typed_pull_supplier_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosTypedEventChannelAdmin::_tc_InterfaceNotSupported
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedProxyPullSupplier>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_supported_interface;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_supported_interface
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);

  obtain_typed_pull_supplier_TypedConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class obtain_typed_push_supplier_TypedConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_typed_push_supplier_TypedConsumerAdmin (
      POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosEventChannelAdmin::ProxyPushSupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosEventChannelAdmin::ProxyPushSupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->obtain_typed_push_supplier (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::obtain_typed_push_supplier_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosTypedEventChannelAdmin::_tc_NoSuchImplementation
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosEventChannelAdmin::ProxyPushSupplier>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_uses_interface;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_uses_interface
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);

  obtain_typed_push_supplier_TypedConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_TypedConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_TypedConsumerAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);
  
  _is_a_TypedConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_TypedConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_TypedConsumerAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);
  
  _non_existent_TypedConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_TypedConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_TypedConsumerAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);
  
  _repository_id_TypedConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_TypedConsumerAdmin_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_TypedConsumerAdmin_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedConsumerAdmin * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedConsumerAdmin *> (servant);
  
  _get_component_TypedConsumerAdmin_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedConsumerAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosTypedEventChannelAdmin::TypedConsumerAdmin *
POA_CosTypedEventChannelAdmin::TypedConsumerAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosTypedEventChannelAdmin::TypedConsumerAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedConsumerAdmin_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_CosTypedEventChannelAdmin_TypedEventChannel_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosTypedEventChannelAdmin_TypedEventChannel_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosTypedEventChannelAdmin_TypedEventChannel_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
      0,  5,  5, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0,  0, 19, 19, 19,
     19,  0, 19, 19, 19, 19, 19, 19,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_CosTypedEventChannelAdmin_TypedEventChannel_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 18,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 2,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_CosTypedEventChannelAdmin::TypedEventChannel::_is_a_skel, 0},
      {"destroy", &POA_CosTypedEventChannelAdmin::TypedEventChannel::destroy_skel, 0},
      {"_component", &POA_CosTypedEventChannelAdmin::TypedEventChannel::_component_skel, 0},
      {"_non_existent", &POA_CosTypedEventChannelAdmin::TypedEventChannel::_non_existent_skel, 0},
      {"_repository_id", &POA_CosTypedEventChannelAdmin::TypedEventChannel::_repository_id_skel, 0},
      {"_interface", &POA_CosTypedEventChannelAdmin::TypedEventChannel::_interface_skel, 0},
      {"for_consumers", &POA_CosTypedEventChannelAdmin::TypedEventChannel::for_consumers_skel, 0},
      {"for_suppliers", &POA_CosTypedEventChannelAdmin::TypedEventChannel::for_suppliers_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,   5,  -1,   6,  -1,  -1,   7,  -1,  -1,   8, 
        9,  10, -11,  -2, -20, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosTypedEventChannelAdmin_TypedEventChannel_Perfect_Hash_OpTable tao_CosTypedEventChannelAdmin_TypedEventChannel_optable;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_Initializer (size_t)
{
  CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer = 
    CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_Initializer));


// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_CosTypedEventChannelAdmin::TypedEventChannel::TypedEventChannel (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosTypedEventChannelAdmin_TypedEventChannel_optable;
}

POA_CosTypedEventChannelAdmin::TypedEventChannel::TypedEventChannel (const TypedEventChannel& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosTypedEventChannelAdmin::TypedEventChannel::~TypedEventChannel (void)
{
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class for_consumers_TypedEventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline for_consumers_TypedEventChannel (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedConsumerAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosTypedEventChannelAdmin::TypedConsumerAdmin> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->for_consumers ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedEventChannel::for_consumers_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedConsumerAdmin>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);

  for_consumers_TypedEventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class for_suppliers_TypedEventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline for_suppliers_TypedEventChannel (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedSupplierAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosTypedEventChannelAdmin::TypedSupplierAdmin> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->for_suppliers ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedEventChannel::for_suppliers_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosTypedEventChannelAdmin::TypedSupplierAdmin>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);

  for_suppliers_TypedEventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class destroy_TypedEventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_TypedEventChannel (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_CosTypedEventChannelAdmin::TypedEventChannel::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);

  destroy_TypedEventChannel command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_TypedEventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_TypedEventChannel_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedEventChannel::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);
  
  _is_a_TypedEventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_TypedEventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_TypedEventChannel_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedEventChannel::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);
  
  _non_existent_TypedEventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_TypedEventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_TypedEventChannel_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedEventChannel::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);
  
  _repository_id_TypedEventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_CosTypedEventChannelAdmin::TypedEventChannel::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_CosTypedEventChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_TypedEventChannel_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_TypedEventChannel_Upcall_Command (
      POA_CosTypedEventChannelAdmin::TypedEventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosTypedEventChannelAdmin::TypedEventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_CosTypedEventChannelAdmin::TypedEventChannel::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosTypedEventChannelAdmin::TypedEventChannel * const impl =
    static_cast<POA_CosTypedEventChannelAdmin::TypedEventChannel *> (servant);
  
  _get_component_TypedEventChannel_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosTypedEventChannelAdmin::TypedEventChannel::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosTypedEventChannelAdmin::TypedEventChannel::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosTypedEventChannelAdmin/TypedEventChannel:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_CosTypedEventChannelAdmin::TypedEventChannel::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

CosTypedEventChannelAdmin::TypedEventChannel *
POA_CosTypedEventChannelAdmin::TypedEventChannel::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosTypedEventChannelAdmin::TypedEventChannel STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosTypedEventChannelAdmin__TAO_TypedEventChannel_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

