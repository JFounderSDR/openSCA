// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_PORTABLEGROUPC_BVT1IR_H_
#define _TAO_IDL_PORTABLEGROUPC_BVT1IR_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/PortableGroup/portablegroup_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/PortableServer/PortableServer_includeA.h"
#include "tao/AnyTypeCode/OctetSeqA.h"
#include "tao/AnyTypeCode/orb_typesA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/UShortSeqA.h"
#include "tao/AnyTypeCode/IOPA.h"
#include "tao/AnyTypeCode/GIOPA.h"
#include "tao/AnyTypeCode/BooleanSeqA.h"
#include "tao/AnyTypeCode/CharSeqA.h"
#include "tao/AnyTypeCode/DoubleSeqA.h"
#include "tao/AnyTypeCode/FloatSeqA.h"
#include "tao/AnyTypeCode/LongDoubleSeqA.h"
#include "tao/AnyTypeCode/LongSeqA.h"
#include "tao/AnyTypeCode/ShortSeqA.h"
#include "tao/AnyTypeCode/StringSeqA.h"
#include "tao/AnyTypeCode/ULongSeqA.h"
#include "tao/AnyTypeCode/WCharSeqA.h"
#include "tao/AnyTypeCode/WStringSeqA.h"
#include "tao/AnyTypeCode/LongLongSeqA.h"
#include "tao/AnyTypeCode/ULongLongSeqA.h"
#include "tao/AnyTypeCode/Policy_ManagerA.h"
#include "tao/AnyTypeCode/Policy_CurrentA.h"
#include "tao/AnyTypeCode/ServicesA.h"
#include "tao/AnyTypeCode/ParameterModeA.h"
#include "tao/AnyTypeCode/Typecode_typesA.h"
#include "tao/AnyTypeCode/WrongTransactionA.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/PortableServer/PortableServer_includeC.h"
#include "tao/OctetSeqC.h"
#include "tao/orb_typesC.h"
#include "tao/PolicyC.h"
#include "tao/UShortSeqC.h"
#include "CosNamingC.h"
#include "tao/IOPC.h"
#include "tao/GIOPC.h"
#include "tao/BooleanSeqC.h"
#include "tao/CharSeqC.h"
#include "tao/DoubleSeqC.h"
#include "tao/FloatSeqC.h"
#include "tao/LongDoubleSeqC.h"
#include "tao/LongSeqC.h"
#include "tao/ShortSeqC.h"
#include "tao/StringSeqC.h"
#include "tao/ULongSeqC.h"
#include "tao/WCharSeqC.h"
#include "tao/WStringSeqC.h"
#include "tao/LongLongSeqC.h"
#include "tao/ULongLongSeqC.h"
#include "tao/Policy_ManagerC.h"
#include "tao/Policy_CurrentC.h"
#include "tao/ServicesC.h"
#include "tao/ParameterModeC.h"
#include "tao/Typecode_typesC.h"
#include "tao/WrongTransactionC.h"
#include "PortableGroup_Simple_DSC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_PortableGroup_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace PortableGroup
{

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const PG_MEMBERSHIP_STYLE = "org.omg.PortableGroup.MembershipStyle";

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const PG_INITIAL_NUMBER_MEMBERS = "org.omg.PortableGroup.InitialNumberMembers";

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const PG_MINIMUM_NUMBER_MEMBERS = "org.omg.PortableGroup.MinimumNumberMembers";

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const PG_FACTORIES = "org.omg.PortableGroup.Factories";

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEGROUP_GROUPIIOPPROFILE_CH_)
#define _PORTABLEGROUP_GROUPIIOPPROFILE_CH_

  class GroupIIOPProfile;

  typedef
    ::TAO_FixedSeq_Var_T<
        GroupIIOPProfile
      >
    GroupIIOPProfile_var;

  typedef
    ::TAO_Seq_Out_T<
        GroupIIOPProfile
      >
    GroupIIOPProfile_out;

  class TAO_PortableGroup_Export GroupIIOPProfile
    : public
        ::TAO::unbounded_value_sequence<
            ::CORBA::Octet
          >
  {
  public:
    GroupIIOPProfile (void);
    GroupIIOPProfile ( ::CORBA::ULong max);
    GroupIIOPProfile (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Octet* buffer, 
      ::CORBA::Boolean release = false);
    GroupIIOPProfile (const GroupIIOPProfile &);
    virtual ~GroupIIOPProfile (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef GroupIIOPProfile_var _var_type;
    typedef GroupIIOPProfile_out _out_type;

    static void _tao_any_destructor (void *);

    

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
    GroupIIOPProfile (
        ::CORBA::ULong length,
        const ACE_Message_Block* mb
      )
      : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_GroupIIOPProfile;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_GENERICFACTORY__VAR_OUT_CH_)
#define _PORTABLEGROUP_GENERICFACTORY__VAR_OUT_CH_

  class AMI_GenericFactoryHandler;
  typedef AMI_GenericFactoryHandler *AMI_GenericFactoryHandler_ptr;

  class GenericFactory;
  typedef GenericFactory *GenericFactory_ptr;

  typedef
    TAO_Objref_Var_T<
        GenericFactory
      >
    GenericFactory_var;
  
  typedef
    TAO_Objref_Out_T<
        GenericFactory
      >
    GenericFactory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * TypeId;
  typedef ::CORBA::String_var TypeId_var;
  typedef ::CORBA::String_out TypeId_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_TypeId;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Object ObjectGroup;
  typedef ::CORBA::Object_ptr ObjectGroup_ptr;
  typedef ::CORBA::Object_var ObjectGroup_var;
  typedef ::CORBA::Object_out ObjectGroup_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroup;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEGROUP_OBJECTGROUPS_CH_)
#define _PORTABLEGROUP_OBJECTGROUPS_CH_

  class ObjectGroups;

  typedef
    ::TAO_VarSeq_Var_T<
        ObjectGroups
      >
    ObjectGroups_var;

  typedef
    ::TAO_Seq_Out_T<
        ObjectGroups
      >
    ObjectGroups_out;

  class TAO_PortableGroup_Export ObjectGroups
    : public
        ::TAO::unbounded_object_reference_sequence<
            ObjectGroup,
            ObjectGroup_var
          >
  {
  public:
    ObjectGroups (void);
    ObjectGroups ( ::CORBA::ULong max);
    ObjectGroups (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Object_ptr* buffer, 
      ::CORBA::Boolean release = false);
    ObjectGroups (const ObjectGroups &);
    virtual ~ObjectGroups (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ObjectGroups_var _var_type;
    typedef ObjectGroups_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroups;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

  typedef CosNaming::Name Name;
  typedef CosNaming::Name_var Name_var;
  typedef CosNaming::Name_out Name_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Name;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Any Value;
  typedef ::CORBA::Any_ptr Value_ptr;
  typedef ::CORBA::Any_var Value_var;
  typedef ::CORBA::Any_out Value_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Value;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Property;

  typedef
    ::TAO_Var_Var_T<
        Property
      >
    Property_var;
  
  typedef
    ::TAO_Out_T<
        Property
      >
    Property_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_PortableGroup_Export Property
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Property_var _var_type;
    typedef Property_out _out_type;

    static void _tao_any_destructor (void *);
    
    PortableGroup::Name nam;
    PortableGroup::Value val;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Property;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEGROUP_PROPERTIES_CH_)
#define _PORTABLEGROUP_PROPERTIES_CH_

  class Properties;

  typedef
    ::TAO_VarSeq_Var_T<
        Properties
      >
    Properties_var;

  typedef
    ::TAO_Seq_Out_T<
        Properties
      >
    Properties_out;

  class TAO_PortableGroup_Export Properties
    : public
        ::TAO::unbounded_value_sequence<
            Property
          >
  {
  public:
    Properties (void);
    Properties ( ::CORBA::ULong max);
    Properties (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Property* buffer, 
      ::CORBA::Boolean release = false);
    Properties (const Properties &);
    virtual ~Properties (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Properties_var _var_type;
    typedef Properties_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Properties;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

  typedef Name Location;
  typedef Name_var Location_var;
  typedef Name_out Location_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Location;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEGROUP_LOCATIONS_CH_)
#define _PORTABLEGROUP_LOCATIONS_CH_

  class Locations;

  typedef
    ::TAO_VarSeq_Var_T<
        Locations
      >
    Locations_var;

  typedef
    ::TAO_Seq_Out_T<
        Locations
      >
    Locations_out;

  class TAO_PortableGroup_Export Locations
    : public
        ::TAO::unbounded_value_sequence<
            Location
          >
  {
  public:
    Locations (void);
    Locations ( ::CORBA::ULong max);
    Locations (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Location* buffer, 
      ::CORBA::Boolean release = false);
    Locations (const Locations &);
    virtual ~Locations (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Locations_var _var_type;
    typedef Locations_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Locations;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

  typedef Properties Criteria;
  typedef Properties_var Criteria_var;
  typedef Properties_out Criteria_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_Criteria;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct FactoryInfo;

  typedef
    ::TAO_Var_Var_T<
        FactoryInfo
      >
    FactoryInfo_var;
  
  typedef
    ::TAO_Out_T<
        FactoryInfo
      >
    FactoryInfo_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_PortableGroup_Export FactoryInfo
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef FactoryInfo_var _var_type;
    typedef FactoryInfo_out _out_type;

    static void _tao_any_destructor (void *);
    
    PortableGroup::GenericFactory_var the_factory;
    PortableGroup::Location the_location;
    PortableGroup::Criteria the_criteria;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_FactoryInfo;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEGROUP_FACTORYINFOS_CH_)
#define _PORTABLEGROUP_FACTORYINFOS_CH_

  class FactoryInfos;

  typedef
    ::TAO_VarSeq_Var_T<
        FactoryInfos
      >
    FactoryInfos_var;

  typedef
    ::TAO_Seq_Out_T<
        FactoryInfos
      >
    FactoryInfos_out;

  class TAO_PortableGroup_Export FactoryInfos
    : public
        ::TAO::unbounded_value_sequence<
            FactoryInfo
          >
  {
  public:
    FactoryInfos (void);
    FactoryInfos ( ::CORBA::ULong max);
    FactoryInfos (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      FactoryInfo* buffer, 
      ::CORBA::Boolean release = false);
    FactoryInfos (const FactoryInfos &);
    virtual ~FactoryInfos (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef FactoryInfos_var _var_type;
    typedef FactoryInfos_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_FactoryInfos;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Long MembershipStyleValue;
  typedef ::CORBA::Long_out MembershipStyleValue_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_MembershipStyleValue;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::Long MEMB_APP_CTRL = 0;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::Long MEMB_INF_CTRL = 1;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:462

  typedef FactoryInfos FactoriesValue;
  typedef FactoryInfos_var FactoriesValue_var;
  typedef FactoryInfos_out FactoriesValue_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_FactoriesValue;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::UShort InitialNumberMembersValue;
  typedef ::CORBA::UShort_out InitialNumberMembersValue_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_InitialNumberMembersValue;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::UShort MinimumNumberMembersValue;
  typedef ::CORBA::UShort_out MinimumNumberMembersValue_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_MinimumNumberMembersValue;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export InterfaceNotFound : public ::CORBA::UserException
  {
  public:
    
    InterfaceNotFound (void);
    InterfaceNotFound (const InterfaceNotFound &);
    ~InterfaceNotFound (void);

    InterfaceNotFound &operator= (const InterfaceNotFound &);

    static void _tao_any_destructor (void *);

    static InterfaceNotFound *_downcast ( ::CORBA::Exception *);
    static const InterfaceNotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_InterfaceNotFound;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export ObjectGroupNotFound : public ::CORBA::UserException
  {
  public:
    
    ObjectGroupNotFound (void);
    ObjectGroupNotFound (const ObjectGroupNotFound &);
    ~ObjectGroupNotFound (void);

    ObjectGroupNotFound &operator= (const ObjectGroupNotFound &);

    static void _tao_any_destructor (void *);

    static ObjectGroupNotFound *_downcast ( ::CORBA::Exception *);
    static const ObjectGroupNotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroupNotFound;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export MemberNotFound : public ::CORBA::UserException
  {
  public:
    
    MemberNotFound (void);
    MemberNotFound (const MemberNotFound &);
    ~MemberNotFound (void);

    MemberNotFound &operator= (const MemberNotFound &);

    static void _tao_any_destructor (void *);

    static MemberNotFound *_downcast ( ::CORBA::Exception *);
    static const MemberNotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_MemberNotFound;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export ObjectNotFound : public ::CORBA::UserException
  {
  public:
    
    ObjectNotFound (void);
    ObjectNotFound (const ObjectNotFound &);
    ~ObjectNotFound (void);

    ObjectNotFound &operator= (const ObjectNotFound &);

    static void _tao_any_destructor (void *);

    static ObjectNotFound *_downcast ( ::CORBA::Exception *);
    static const ObjectNotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectNotFound;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export MemberAlreadyPresent : public ::CORBA::UserException
  {
  public:
    
    MemberAlreadyPresent (void);
    MemberAlreadyPresent (const MemberAlreadyPresent &);
    ~MemberAlreadyPresent (void);

    MemberAlreadyPresent &operator= (const MemberAlreadyPresent &);

    static void _tao_any_destructor (void *);

    static MemberAlreadyPresent *_downcast ( ::CORBA::Exception *);
    static const MemberAlreadyPresent *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_MemberAlreadyPresent;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export ObjectNotCreated : public ::CORBA::UserException
  {
  public:
    
    ObjectNotCreated (void);
    ObjectNotCreated (const ObjectNotCreated &);
    ~ObjectNotCreated (void);

    ObjectNotCreated &operator= (const ObjectNotCreated &);

    static void _tao_any_destructor (void *);

    static ObjectNotCreated *_downcast ( ::CORBA::Exception *);
    static const ObjectNotCreated *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectNotCreated;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export ObjectNotAdded : public ::CORBA::UserException
  {
  public:
    
    ObjectNotAdded (void);
    ObjectNotAdded (const ObjectNotAdded &);
    ~ObjectNotAdded (void);

    ObjectNotAdded &operator= (const ObjectNotAdded &);

    static void _tao_any_destructor (void *);

    static ObjectNotAdded *_downcast ( ::CORBA::Exception *);
    static const ObjectNotAdded *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectNotAdded;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export TypeConflict : public ::CORBA::UserException
  {
  public:
    
    TypeConflict (void);
    TypeConflict (const TypeConflict &);
    ~TypeConflict (void);

    TypeConflict &operator= (const TypeConflict &);

    static void _tao_any_destructor (void *);

    static TypeConflict *_downcast ( ::CORBA::Exception *);
    static const TypeConflict *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_TypeConflict;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export UnsupportedProperty : public ::CORBA::UserException
  {
  public:
    
    PortableGroup::Name nam;
    PortableGroup::Value val;
    UnsupportedProperty (void);
    UnsupportedProperty (const UnsupportedProperty &);
    ~UnsupportedProperty (void);

    UnsupportedProperty &operator= (const UnsupportedProperty &);

    static void _tao_any_destructor (void *);

    static UnsupportedProperty *_downcast ( ::CORBA::Exception *);
    static const UnsupportedProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    UnsupportedProperty (
        const PortableGroup::Name & _tao_nam,
        const PortableGroup::Value & _tao_val);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_UnsupportedProperty;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export InvalidProperty : public ::CORBA::UserException
  {
  public:
    
    PortableGroup::Name nam;
    PortableGroup::Value val;
    InvalidProperty (void);
    InvalidProperty (const InvalidProperty &);
    ~InvalidProperty (void);

    InvalidProperty &operator= (const InvalidProperty &);

    static void _tao_any_destructor (void *);

    static InvalidProperty *_downcast ( ::CORBA::Exception *);
    static const InvalidProperty *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    InvalidProperty (
        const PortableGroup::Name & _tao_nam,
        const PortableGroup::Value & _tao_val);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_InvalidProperty;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export NoFactory : public ::CORBA::UserException
  {
  public:
    
    PortableGroup::Location the_location;
    ::TAO::String_Manager type_id;
    NoFactory (void);
    NoFactory (const NoFactory &);
    ~NoFactory (void);

    NoFactory &operator= (const NoFactory &);

    static void _tao_any_destructor (void *);

    static NoFactory *_downcast ( ::CORBA::Exception *);
    static const NoFactory *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    NoFactory (
        const PortableGroup::Location & _tao_the_location,
        const char * _tao_type_id);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_NoFactory;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export InvalidCriteria : public ::CORBA::UserException
  {
  public:
    
    PortableGroup::Criteria invalid_criteria;
    InvalidCriteria (void);
    InvalidCriteria (const InvalidCriteria &);
    ~InvalidCriteria (void);

    InvalidCriteria &operator= (const InvalidCriteria &);

    static void _tao_any_destructor (void *);

    static InvalidCriteria *_downcast ( ::CORBA::Exception *);
    static const InvalidCriteria *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    InvalidCriteria (
        const PortableGroup::Criteria & _tao_invalid_criteria);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_InvalidCriteria;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export CannotMeetCriteria : public ::CORBA::UserException
  {
  public:
    
    PortableGroup::Criteria unmet_criteria;
    CannotMeetCriteria (void);
    CannotMeetCriteria (const CannotMeetCriteria &);
    ~CannotMeetCriteria (void);

    CannotMeetCriteria &operator= (const CannotMeetCriteria &);

    static void _tao_any_destructor (void *);

    static CannotMeetCriteria *_downcast ( ::CORBA::Exception *);
    static const CannotMeetCriteria *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

    CannotMeetCriteria (
        const PortableGroup::Criteria & _tao_unmet_criteria);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_CannotMeetCriteria;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_PROPERTYMANAGER__VAR_OUT_CH_)
#define _PORTABLEGROUP_PROPERTYMANAGER__VAR_OUT_CH_

  class AMI_PropertyManagerHandler;
  typedef AMI_PropertyManagerHandler *AMI_PropertyManagerHandler_ptr;

  class PropertyManager;
  typedef PropertyManager *PropertyManager_ptr;

  typedef
    TAO_Objref_Var_T<
        PropertyManager
      >
    PropertyManager_var;
  
  typedef
    TAO_Objref_Out_T<
        PropertyManager
      >
    PropertyManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export PropertyManager
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PropertyManager>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PropertyManager_ptr _ptr_type;
    typedef PropertyManager_var _var_type;
    typedef PropertyManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PropertyManager_ptr _duplicate (PropertyManager_ptr obj);

    static void _tao_release (PropertyManager_ptr obj);

    static PropertyManager_ptr _narrow (::CORBA::Object_ptr obj);
    static PropertyManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PropertyManager_ptr _nil (void);

    virtual void set_default_properties (
      const ::PortableGroup::Properties & props);

    virtual ::PortableGroup::Properties * get_default_properties (
      void);

    virtual void remove_default_properties (
      const ::PortableGroup::Properties & props);

    virtual void set_type_properties (
      const char * type_id,
      const ::PortableGroup::Properties & overrides);

    virtual ::PortableGroup::Properties * get_type_properties (
      const char * type_id);

    virtual void remove_type_properties (
      const char * type_id,
      const ::PortableGroup::Properties & props);

    virtual void set_properties_dynamically (
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Properties & overrides);

    virtual ::PortableGroup::Properties * get_properties (
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual void sendc_set_default_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      const ::PortableGroup::Properties & props);

    virtual void sendc_get_default_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler);

    virtual void sendc_remove_default_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      const ::PortableGroup::Properties & props);

    virtual void sendc_set_type_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      const char * type_id,
      const ::PortableGroup::Properties & overrides);

    virtual void sendc_get_type_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      const char * type_id);

    virtual void sendc_remove_type_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      const char * type_id,
      const ::PortableGroup::Properties & props);

    virtual void sendc_set_properties_dynamically (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Properties & overrides);

    virtual void sendc_get_properties (
      ::PortableGroup::AMI_PropertyManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PropertyManager_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PropertyManager (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_PropertyManager_setup_collocation (void);

    // Concrete non-local interface only.
    PropertyManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PropertyManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PropertyManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PropertyManager (const PropertyManager &);

    void operator= (const PropertyManager &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_PropertyManager;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_AMI_PROPERTYMANAGERHANDLER__VAR_OUT_CH_)
#define _PORTABLEGROUP_AMI_PROPERTYMANAGERHANDLER__VAR_OUT_CH_

  class AMI_PropertyManagerHandler;
  typedef AMI_PropertyManagerHandler *AMI_PropertyManagerHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_PropertyManagerHandler
      >
    AMI_PropertyManagerHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_PropertyManagerHandler
      >
    AMI_PropertyManagerHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export AMI_PropertyManagerHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_PropertyManagerHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_PropertyManagerHandler_ptr _ptr_type;
    typedef AMI_PropertyManagerHandler_var _var_type;
    typedef AMI_PropertyManagerHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_PropertyManagerHandler_ptr _duplicate (AMI_PropertyManagerHandler_ptr obj);

    static void _tao_release (AMI_PropertyManagerHandler_ptr obj);

    static AMI_PropertyManagerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_PropertyManagerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_PropertyManagerHandler_ptr _nil (void);

    virtual void set_default_properties (
      void);

    static void 
    set_default_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void set_default_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_default_properties (
      const ::PortableGroup::Properties & ami_return_val);

    static void 
    get_default_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_default_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void remove_default_properties (
      void);

    static void 
    remove_default_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void remove_default_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void set_type_properties (
      void);

    static void 
    set_type_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void set_type_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_type_properties (
      const ::PortableGroup::Properties & ami_return_val);

    static void 
    get_type_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_type_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void remove_type_properties (
      void);

    static void 
    remove_type_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void remove_type_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void set_properties_dynamically (
      void);

    static void 
    set_properties_dynamically_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void set_properties_dynamically_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_properties (
      const ::PortableGroup::Properties & ami_return_val);

    static void 
    get_properties_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_properties_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_PropertyManagerHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_PropertyManagerHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_AMI_PropertyManagerHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_PropertyManagerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_PropertyManagerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_PropertyManagerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_PropertyManagerHandler (const AMI_PropertyManagerHandler &);

    void operator= (const AMI_PropertyManagerHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_AMI_PropertyManagerHandler;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_OBJECTGROUPMANAGER__VAR_OUT_CH_)
#define _PORTABLEGROUP_OBJECTGROUPMANAGER__VAR_OUT_CH_

  class AMI_ObjectGroupManagerHandler;
  typedef AMI_ObjectGroupManagerHandler *AMI_ObjectGroupManagerHandler_ptr;

  class ObjectGroupManager;
  typedef ObjectGroupManager *ObjectGroupManager_ptr;

  typedef
    TAO_Objref_Var_T<
        ObjectGroupManager
      >
    ObjectGroupManager_var;
  
  typedef
    TAO_Objref_Out_T<
        ObjectGroupManager
      >
    ObjectGroupManager_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export ObjectGroupManager
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ObjectGroupManager>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ObjectGroupManager_ptr _ptr_type;
    typedef ObjectGroupManager_var _var_type;
    typedef ObjectGroupManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ObjectGroupManager_ptr _duplicate (ObjectGroupManager_ptr obj);

    static void _tao_release (ObjectGroupManager_ptr obj);

    static ObjectGroupManager_ptr _narrow (::CORBA::Object_ptr obj);
    static ObjectGroupManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ObjectGroupManager_ptr _nil (void);

    virtual ::PortableGroup::ObjectGroup_ptr create_member (
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & the_location,
      const char * type_id,
      const ::PortableGroup::Criteria & the_criteria);

    virtual ::PortableGroup::ObjectGroup_ptr add_member (
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & the_location,
      ::CORBA::Object_ptr member);

    virtual ::PortableGroup::ObjectGroup_ptr remove_member (
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & the_location);

    virtual ::PortableGroup::Locations * locations_of_members (
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual ::PortableGroup::ObjectGroups * groups_at_location (
      const ::PortableGroup::Location & the_location);

    virtual ::PortableGroup::ObjectGroupId get_object_group_id (
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual ::PortableGroup::ObjectGroup_ptr get_object_group_ref (
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual ::CORBA::Object_ptr get_member_ref (
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & loc);

    virtual ::PortableGroup::ObjectGroup_ptr get_object_group_ref_from_id (
      ::PortableGroup::ObjectGroupId group_id);

    virtual void sendc_create_member (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & the_location,
      const char * type_id,
      const ::PortableGroup::Criteria & the_criteria);

    virtual void sendc_add_member (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & the_location,
      ::CORBA::Object_ptr member);

    virtual void sendc_remove_member (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & the_location);

    virtual void sendc_locations_of_members (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual void sendc_groups_at_location (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      const ::PortableGroup::Location & the_location);

    virtual void sendc_get_object_group_id (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual void sendc_get_object_group_ref (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group);

    virtual void sendc_get_member_ref (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroup_ptr object_group,
      const ::PortableGroup::Location & loc);

    virtual void sendc_get_object_group_ref_from_id (
      ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr ami_handler,
      ::PortableGroup::ObjectGroupId group_id);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_ObjectGroupManager_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    ObjectGroupManager (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_ObjectGroupManager_setup_collocation (void);

    // Concrete non-local interface only.
    ObjectGroupManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ObjectGroupManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~ObjectGroupManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ObjectGroupManager (const ObjectGroupManager &);

    void operator= (const ObjectGroupManager &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroupManager;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_AMI_OBJECTGROUPMANAGERHANDLER__VAR_OUT_CH_)
#define _PORTABLEGROUP_AMI_OBJECTGROUPMANAGERHANDLER__VAR_OUT_CH_

  class AMI_ObjectGroupManagerHandler;
  typedef AMI_ObjectGroupManagerHandler *AMI_ObjectGroupManagerHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_ObjectGroupManagerHandler
      >
    AMI_ObjectGroupManagerHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_ObjectGroupManagerHandler
      >
    AMI_ObjectGroupManagerHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export AMI_ObjectGroupManagerHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_ObjectGroupManagerHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_ObjectGroupManagerHandler_ptr _ptr_type;
    typedef AMI_ObjectGroupManagerHandler_var _var_type;
    typedef AMI_ObjectGroupManagerHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_ObjectGroupManagerHandler_ptr _duplicate (AMI_ObjectGroupManagerHandler_ptr obj);

    static void _tao_release (AMI_ObjectGroupManagerHandler_ptr obj);

    static AMI_ObjectGroupManagerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_ObjectGroupManagerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_ObjectGroupManagerHandler_ptr _nil (void);

    virtual void create_member (
      ::PortableGroup::ObjectGroup_ptr ami_return_val);

    static void 
    create_member_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void create_member_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void add_member (
      ::PortableGroup::ObjectGroup_ptr ami_return_val);

    static void 
    add_member_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void add_member_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void remove_member (
      ::PortableGroup::ObjectGroup_ptr ami_return_val);

    static void 
    remove_member_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void remove_member_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void locations_of_members (
      const ::PortableGroup::Locations & ami_return_val);

    static void 
    locations_of_members_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void locations_of_members_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void groups_at_location (
      const ::PortableGroup::ObjectGroups & ami_return_val);

    static void 
    groups_at_location_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void groups_at_location_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_object_group_id (
      ::PortableGroup::ObjectGroupId ami_return_val);

    static void 
    get_object_group_id_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_object_group_id_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_object_group_ref (
      ::PortableGroup::ObjectGroup_ptr ami_return_val);

    static void 
    get_object_group_ref_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_object_group_ref_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_member_ref (
      ::CORBA::Object_ptr ami_return_val);

    static void 
    get_member_ref_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_member_ref_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_object_group_ref_from_id (
      ::PortableGroup::ObjectGroup_ptr ami_return_val);

    static void 
    get_object_group_ref_from_id_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_object_group_ref_from_id_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_ObjectGroupManagerHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_AMI_ObjectGroupManagerHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_ObjectGroupManagerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_ObjectGroupManagerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_ObjectGroupManagerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_ObjectGroupManagerHandler (const AMI_ObjectGroupManagerHandler &);

    void operator= (const AMI_ObjectGroupManagerHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_AMI_ObjectGroupManagerHandler;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export GenericFactory
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<GenericFactory>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef GenericFactory_ptr _ptr_type;
    typedef GenericFactory_var _var_type;
    typedef GenericFactory_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static GenericFactory_ptr _duplicate (GenericFactory_ptr obj);

    static void _tao_release (GenericFactory_ptr obj);

    static GenericFactory_ptr _narrow (::CORBA::Object_ptr obj);
    static GenericFactory_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static GenericFactory_ptr _nil (void);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

    typedef ::CORBA::Any FactoryCreationId;
    typedef ::CORBA::Any_ptr FactoryCreationId_ptr;
    typedef ::CORBA::Any_var FactoryCreationId_var;
    typedef ::CORBA::Any_out FactoryCreationId_out;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_FactoryCreationId;

    virtual ::CORBA::Object_ptr create_object (
      const char * type_id,
      const ::PortableGroup::Criteria & the_criteria,
      ::PortableGroup::GenericFactory::FactoryCreationId_out factory_creation_id);

    virtual void delete_object (
      const ::PortableGroup::GenericFactory::FactoryCreationId & factory_creation_id);

    virtual void sendc_create_object (
      ::PortableGroup::AMI_GenericFactoryHandler_ptr ami_handler,
      const char * type_id,
      const ::PortableGroup::Criteria & the_criteria);

    virtual void sendc_delete_object (
      ::PortableGroup::AMI_GenericFactoryHandler_ptr ami_handler,
      const ::PortableGroup::GenericFactory::FactoryCreationId & factory_creation_id);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_GenericFactory_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    GenericFactory (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_GenericFactory_setup_collocation (void);

    // Concrete non-local interface only.
    GenericFactory (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    GenericFactory (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~GenericFactory (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    GenericFactory (const GenericFactory &);

    void operator= (const GenericFactory &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_GenericFactory;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_AMI_GENERICFACTORYHANDLER__VAR_OUT_CH_)
#define _PORTABLEGROUP_AMI_GENERICFACTORYHANDLER__VAR_OUT_CH_

  class AMI_GenericFactoryHandler;
  typedef AMI_GenericFactoryHandler *AMI_GenericFactoryHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_GenericFactoryHandler
      >
    AMI_GenericFactoryHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_GenericFactoryHandler
      >
    AMI_GenericFactoryHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export AMI_GenericFactoryHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_GenericFactoryHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_GenericFactoryHandler_ptr _ptr_type;
    typedef AMI_GenericFactoryHandler_var _var_type;
    typedef AMI_GenericFactoryHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_GenericFactoryHandler_ptr _duplicate (AMI_GenericFactoryHandler_ptr obj);

    static void _tao_release (AMI_GenericFactoryHandler_ptr obj);

    static AMI_GenericFactoryHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_GenericFactoryHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_GenericFactoryHandler_ptr _nil (void);

    virtual void create_object (
      ::CORBA::Object_ptr ami_return_val,
      const ::PortableGroup::GenericFactory::FactoryCreationId & factory_creation_id);

    static void 
    create_object_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void create_object_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void delete_object (
      void);

    static void 
    delete_object_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void delete_object_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_GenericFactoryHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_GenericFactoryHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_AMI_GenericFactoryHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_GenericFactoryHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_GenericFactoryHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_GenericFactoryHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_GenericFactoryHandler (const AMI_GenericFactoryHandler &);

    void operator= (const AMI_GenericFactoryHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_AMI_GenericFactoryHandler;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:403

  typedef char * RoleName;
  typedef ::CORBA::String_var RoleName_var;
  typedef ::CORBA::String_out RoleName_out;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_RoleName;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const role_criterion = "org.omg.portablegroup.Role";

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_FACTORYREGISTRY__VAR_OUT_CH_)
#define _PORTABLEGROUP_FACTORYREGISTRY__VAR_OUT_CH_

  class AMI_FactoryRegistryHandler;
  typedef AMI_FactoryRegistryHandler *AMI_FactoryRegistryHandler_ptr;

  class FactoryRegistry;
  typedef FactoryRegistry *FactoryRegistry_ptr;

  typedef
    TAO_Objref_Var_T<
        FactoryRegistry
      >
    FactoryRegistry_var;
  
  typedef
    TAO_Objref_Out_T<
        FactoryRegistry
      >
    FactoryRegistry_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export FactoryRegistry
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<FactoryRegistry>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef FactoryRegistry_ptr _ptr_type;
    typedef FactoryRegistry_var _var_type;
    typedef FactoryRegistry_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static FactoryRegistry_ptr _duplicate (FactoryRegistry_ptr obj);

    static void _tao_release (FactoryRegistry_ptr obj);

    static FactoryRegistry_ptr _narrow (::CORBA::Object_ptr obj);
    static FactoryRegistry_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static FactoryRegistry_ptr _nil (void);

    virtual void register_factory (
      const char * role,
      const char * type_id,
      const ::PortableGroup::FactoryInfo & factory_info);

    virtual void unregister_factory (
      const char * role,
      const ::PortableGroup::Location & the_location);

    virtual void unregister_factory_by_role (
      const char * role);

    virtual void unregister_factory_by_location (
      const ::PortableGroup::Location & the_location);

    virtual ::PortableGroup::FactoryInfos * list_factories_by_role (
      const char * role,
      ::CORBA::String_out type_id);

    virtual ::PortableGroup::FactoryInfos * list_factories_by_location (
      const ::PortableGroup::Location & the_location);

    virtual void sendc_register_factory (
      ::PortableGroup::AMI_FactoryRegistryHandler_ptr ami_handler,
      const char * role,
      const char * type_id,
      const ::PortableGroup::FactoryInfo & factory_info);

    virtual void sendc_unregister_factory (
      ::PortableGroup::AMI_FactoryRegistryHandler_ptr ami_handler,
      const char * role,
      const ::PortableGroup::Location & the_location);

    virtual void sendc_unregister_factory_by_role (
      ::PortableGroup::AMI_FactoryRegistryHandler_ptr ami_handler,
      const char * role);

    virtual void sendc_unregister_factory_by_location (
      ::PortableGroup::AMI_FactoryRegistryHandler_ptr ami_handler,
      const ::PortableGroup::Location & the_location);

    virtual void sendc_list_factories_by_role (
      ::PortableGroup::AMI_FactoryRegistryHandler_ptr ami_handler,
      const char * role);

    virtual void sendc_list_factories_by_location (
      ::PortableGroup::AMI_FactoryRegistryHandler_ptr ami_handler,
      const ::PortableGroup::Location & the_location);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_FactoryRegistry_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    FactoryRegistry (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_FactoryRegistry_setup_collocation (void);

    // Concrete non-local interface only.
    FactoryRegistry (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    FactoryRegistry (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~FactoryRegistry (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    FactoryRegistry (const FactoryRegistry &);

    void operator= (const FactoryRegistry &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_FactoryRegistry;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_AMI_FACTORYREGISTRYHANDLER__VAR_OUT_CH_)
#define _PORTABLEGROUP_AMI_FACTORYREGISTRYHANDLER__VAR_OUT_CH_

  class AMI_FactoryRegistryHandler;
  typedef AMI_FactoryRegistryHandler *AMI_FactoryRegistryHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_FactoryRegistryHandler
      >
    AMI_FactoryRegistryHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_FactoryRegistryHandler
      >
    AMI_FactoryRegistryHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export AMI_FactoryRegistryHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_FactoryRegistryHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_FactoryRegistryHandler_ptr _ptr_type;
    typedef AMI_FactoryRegistryHandler_var _var_type;
    typedef AMI_FactoryRegistryHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_FactoryRegistryHandler_ptr _duplicate (AMI_FactoryRegistryHandler_ptr obj);

    static void _tao_release (AMI_FactoryRegistryHandler_ptr obj);

    static AMI_FactoryRegistryHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_FactoryRegistryHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_FactoryRegistryHandler_ptr _nil (void);

    virtual void register_factory (
      void);

    static void 
    register_factory_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void register_factory_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void unregister_factory (
      void);

    static void 
    unregister_factory_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void unregister_factory_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void unregister_factory_by_role (
      void);

    static void 
    unregister_factory_by_role_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void unregister_factory_by_role_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void unregister_factory_by_location (
      void);

    static void 
    unregister_factory_by_location_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void unregister_factory_by_location_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void list_factories_by_role (
      const ::PortableGroup::FactoryInfos & ami_return_val,
      const char * type_id);

    static void 
    list_factories_by_role_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void list_factories_by_role_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void list_factories_by_location (
      const ::PortableGroup::FactoryInfos & ami_return_val);

    static void 
    list_factories_by_location_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void list_factories_by_location_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_FactoryRegistryHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_FactoryRegistryHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_AMI_FactoryRegistryHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_FactoryRegistryHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_FactoryRegistryHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_FactoryRegistryHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_FactoryRegistryHandler (const AMI_FactoryRegistryHandler &);

    void operator= (const AMI_FactoryRegistryHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_AMI_FactoryRegistryHandler;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const char *const TAO_UPDATE_OBJECT_GROUP_METHOD_NAME = "tao_update_object_group";

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_TAO_UPDATEOBJECTGROUP__VAR_OUT_CH_)
#define _PORTABLEGROUP_TAO_UPDATEOBJECTGROUP__VAR_OUT_CH_

  class AMI_TAO_UpdateObjectGroupHandler;
  typedef AMI_TAO_UpdateObjectGroupHandler *AMI_TAO_UpdateObjectGroupHandler_ptr;

  class TAO_UpdateObjectGroup;
  typedef TAO_UpdateObjectGroup *TAO_UpdateObjectGroup_ptr;

  typedef
    TAO_Objref_Var_T<
        TAO_UpdateObjectGroup
      >
    TAO_UpdateObjectGroup_var;
  
  typedef
    TAO_Objref_Out_T<
        TAO_UpdateObjectGroup
      >
    TAO_UpdateObjectGroup_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export TAO_UpdateObjectGroup
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<TAO_UpdateObjectGroup>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef TAO_UpdateObjectGroup_ptr _ptr_type;
    typedef TAO_UpdateObjectGroup_var _var_type;
    typedef TAO_UpdateObjectGroup_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static TAO_UpdateObjectGroup_ptr _duplicate (TAO_UpdateObjectGroup_ptr obj);

    static void _tao_release (TAO_UpdateObjectGroup_ptr obj);

    static TAO_UpdateObjectGroup_ptr _narrow (::CORBA::Object_ptr obj);
    static TAO_UpdateObjectGroup_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TAO_UpdateObjectGroup_ptr _nil (void);

    virtual void tao_update_object_group (
      const char * iogr,
      ::PortableGroup::ObjectGroupRefVersion version,
      ::CORBA::Boolean is_primary);

    virtual void sendc_tao_update_object_group (
      ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr ami_handler,
      const char * iogr,
      ::PortableGroup::ObjectGroupRefVersion version,
      ::CORBA::Boolean is_primary);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_TAO_UpdateObjectGroup_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    TAO_UpdateObjectGroup (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_TAO_UpdateObjectGroup_setup_collocation (void);

    // Concrete non-local interface only.
    TAO_UpdateObjectGroup (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    TAO_UpdateObjectGroup (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~TAO_UpdateObjectGroup (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TAO_UpdateObjectGroup (const TAO_UpdateObjectGroup &);

    void operator= (const TAO_UpdateObjectGroup &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_TAO_UpdateObjectGroup;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_AMI_TAO_UPDATEOBJECTGROUPHANDLER__VAR_OUT_CH_)
#define _PORTABLEGROUP_AMI_TAO_UPDATEOBJECTGROUPHANDLER__VAR_OUT_CH_

  class AMI_TAO_UpdateObjectGroupHandler;
  typedef AMI_TAO_UpdateObjectGroupHandler *AMI_TAO_UpdateObjectGroupHandler_ptr;

  typedef
    TAO_Objref_Var_T<
        AMI_TAO_UpdateObjectGroupHandler
      >
    AMI_TAO_UpdateObjectGroupHandler_var;
  
  typedef
    TAO_Objref_Out_T<
        AMI_TAO_UpdateObjectGroupHandler
      >
    AMI_TAO_UpdateObjectGroupHandler_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export AMI_TAO_UpdateObjectGroupHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_TAO_UpdateObjectGroupHandler>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef AMI_TAO_UpdateObjectGroupHandler_ptr _ptr_type;
    typedef AMI_TAO_UpdateObjectGroupHandler_var _var_type;
    typedef AMI_TAO_UpdateObjectGroupHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_TAO_UpdateObjectGroupHandler_ptr _duplicate (AMI_TAO_UpdateObjectGroupHandler_ptr obj);

    static void _tao_release (AMI_TAO_UpdateObjectGroupHandler_ptr obj);

    static AMI_TAO_UpdateObjectGroupHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_TAO_UpdateObjectGroupHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_TAO_UpdateObjectGroupHandler_ptr _nil (void);

    virtual void tao_update_object_group (
      void);

    static void 
    tao_update_object_group_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void tao_update_object_group_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    AMI_TAO_UpdateObjectGroupHandler (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void PortableGroup_AMI_TAO_UpdateObjectGroupHandler_setup_collocation (void);

    // Concrete non-local interface only.
    AMI_TAO_UpdateObjectGroupHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_TAO_UpdateObjectGroupHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_TAO_UpdateObjectGroupHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_TAO_UpdateObjectGroupHandler (const AMI_TAO_UpdateObjectGroupHandler &);

    void operator= (const AMI_TAO_UpdateObjectGroupHandler &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_AMI_TAO_UpdateObjectGroupHandler;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_PortableGroup_Export NotAGroupObject : public ::CORBA::UserException
  {
  public:
    
    NotAGroupObject (void);
    NotAGroupObject (const NotAGroupObject &);
    ~NotAGroupObject (void);

    NotAGroupObject &operator= (const NotAGroupObject &);

    static void _tao_any_destructor (void *);

    static NotAGroupObject *_downcast ( ::CORBA::Exception *);
    static const NotAGroupObject *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_NotAGroupObject;

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEGROUP_IDS_CH_)
#define _PORTABLEGROUP_IDS_CH_

  class IDs;

  typedef
    ::TAO_VarSeq_Var_T<
        IDs
      >
    IDs_var;

  typedef
    ::TAO_Seq_Out_T<
        IDs
      >
    IDs_out;

  class TAO_PortableGroup_Export IDs
    : public
        ::TAO::unbounded_value_sequence<
            PortableServer::ObjectId
          >
  {
  public:
    IDs (void);
    IDs ( ::CORBA::ULong max);
    IDs (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PortableServer::ObjectId* buffer, 
      ::CORBA::Boolean release = false);
    IDs (const IDs &);
    virtual ~IDs (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef IDs_var _var_type;
    typedef IDs_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_IDs;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_PORTABLEGROUP_GOA__VAR_OUT_CH_)
#define _PORTABLEGROUP_GOA__VAR_OUT_CH_

  class AMI_GOAHandler;
  typedef AMI_GOAHandler *AMI_GOAHandler_ptr;

  class GOA;
  typedef GOA *GOA_ptr;

  typedef
    TAO_Objref_Var_T<
        GOA
      >
    GOA_var;
  
  typedef
    TAO_Objref_Out_T<
        GOA
      >
    GOA_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_PortableGroup_Export GOA
    : public virtual ::PortableServer::POA
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef GOA_ptr _ptr_type;
    typedef GOA_var _var_type;
    typedef GOA_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static GOA_ptr _duplicate (GOA_ptr obj);

    static void _tao_release (GOA_ptr obj);

    static GOA_ptr _narrow (::CORBA::Object_ptr obj);
    static GOA_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static GOA_ptr _nil (void);

    virtual ::PortableServer::ObjectId * create_id_for_reference (
      ::CORBA::Object_ptr the_ref) = 0;

    virtual ::PortableGroup::IDs * reference_to_ids (
      ::CORBA::Object_ptr the_ref) = 0;

    virtual void associate_reference_with_id (
      ::CORBA::Object_ptr ref,
      const ::PortableServer::ObjectId & oid) = 0;

    virtual void disassociate_reference_with_id (
      ::CORBA::Object_ptr ref,
      const ::PortableServer::ObjectId & oid) = 0;

    // TAO_IDL - Generated from
    // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    GOA (void);

    

    virtual ~GOA (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    GOA (const GOA &);

    void operator= (const GOA &);
  };

  // TAO_IDL - Generated from
  // e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_PortableGroup_Export ::CORBA::TypeCode_ptr const _tc_GOA;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module PortableGroup

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:308

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableGroup::GroupIIOPProfile>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::GroupIIOPProfile,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_GENERICFACTORY__ARG_TRAITS_)
#define _PORTABLEGROUP_GENERICFACTORY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::GenericFactory>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::GenericFactory_ptr,
            ::PortableGroup::GenericFactory_var,
            ::PortableGroup::GenericFactory_out,
            TAO::Objref_Traits<PortableGroup::GenericFactory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableGroup::ObjectGroups>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::ObjectGroups,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::PortableGroup::Property>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::Property,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableGroup::Properties>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::Properties,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableGroup::Locations>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::Locations,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::PortableGroup::FactoryInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::FactoryInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableGroup::FactoryInfos>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::FactoryInfos,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_PROPERTYMANAGER__ARG_TRAITS_)
#define _PORTABLEGROUP_PROPERTYMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::PropertyManager>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::PropertyManager_ptr,
            ::PortableGroup::PropertyManager_var,
            ::PortableGroup::PropertyManager_out,
            TAO::Objref_Traits<PortableGroup::PropertyManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_AMI_PROPERTYMANAGERHANDLER__ARG_TRAITS_)
#define _PORTABLEGROUP_AMI_PROPERTYMANAGERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::AMI_PropertyManagerHandler>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::AMI_PropertyManagerHandler_ptr,
            ::PortableGroup::AMI_PropertyManagerHandler_var,
            ::PortableGroup::AMI_PropertyManagerHandler_out,
            TAO::Objref_Traits<PortableGroup::AMI_PropertyManagerHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_OBJECTGROUPMANAGER__ARG_TRAITS_)
#define _PORTABLEGROUP_OBJECTGROUPMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::ObjectGroupManager>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::ObjectGroupManager_ptr,
            ::PortableGroup::ObjectGroupManager_var,
            ::PortableGroup::ObjectGroupManager_out,
            TAO::Objref_Traits<PortableGroup::ObjectGroupManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_AMI_OBJECTGROUPMANAGERHANDLER__ARG_TRAITS_)
#define _PORTABLEGROUP_AMI_OBJECTGROUPMANAGERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::AMI_ObjectGroupManagerHandler>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr,
            ::PortableGroup::AMI_ObjectGroupManagerHandler_var,
            ::PortableGroup::AMI_ObjectGroupManagerHandler_out,
            TAO::Objref_Traits<PortableGroup::AMI_ObjectGroupManagerHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_AMI_GENERICFACTORYHANDLER__ARG_TRAITS_)
#define _PORTABLEGROUP_AMI_GENERICFACTORYHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::AMI_GenericFactoryHandler>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::AMI_GenericFactoryHandler_ptr,
            ::PortableGroup::AMI_GenericFactoryHandler_var,
            ::PortableGroup::AMI_GenericFactoryHandler_out,
            TAO::Objref_Traits<PortableGroup::AMI_GenericFactoryHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_FACTORYREGISTRY__ARG_TRAITS_)
#define _PORTABLEGROUP_FACTORYREGISTRY__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::FactoryRegistry>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::FactoryRegistry_ptr,
            ::PortableGroup::FactoryRegistry_var,
            ::PortableGroup::FactoryRegistry_out,
            TAO::Objref_Traits<PortableGroup::FactoryRegistry>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_AMI_FACTORYREGISTRYHANDLER__ARG_TRAITS_)
#define _PORTABLEGROUP_AMI_FACTORYREGISTRYHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::AMI_FactoryRegistryHandler>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::AMI_FactoryRegistryHandler_ptr,
            ::PortableGroup::AMI_FactoryRegistryHandler_var,
            ::PortableGroup::AMI_FactoryRegistryHandler_out,
            TAO::Objref_Traits<PortableGroup::AMI_FactoryRegistryHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_TAO_UPDATEOBJECTGROUP__ARG_TRAITS_)
#define _PORTABLEGROUP_TAO_UPDATEOBJECTGROUP__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::TAO_UpdateObjectGroup>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::TAO_UpdateObjectGroup_ptr,
            ::PortableGroup::TAO_UpdateObjectGroup_var,
            ::PortableGroup::TAO_UpdateObjectGroup_out,
            TAO::Objref_Traits<PortableGroup::TAO_UpdateObjectGroup>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_PORTABLEGROUP_AMI_TAO_UPDATEOBJECTGROUPHANDLER__ARG_TRAITS_)
#define _PORTABLEGROUP_AMI_TAO_UPDATEOBJECTGROUPHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler>
    : public
        Object_Arg_Traits_T<
            ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr,
            ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_var,
            ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_out,
            TAO::Objref_Traits<PortableGroup::AMI_TAO_UpdateObjectGroupHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableGroup::IDs>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableGroup::IDs,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_PropertyManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_AMI_PropertyManagerHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_ObjectGroupManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_AMI_ObjectGroupManagerHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_GenericFactory_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_AMI_GenericFactoryHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_FactoryRegistry_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_AMI_FactoryRegistryHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_TAO_UpdateObjectGroup_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_PortableGroup_Export
TAO::Collocation_Proxy_Broker *
(*PortableGroup__TAO_AMI_TAO_UpdateObjectGroupHandler_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_PORTABLEGROUP_GENERICFACTORY__TRAITS_)
#define _PORTABLEGROUP_GENERICFACTORY__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::GenericFactory>
  {
    static ::PortableGroup::GenericFactory_ptr duplicate (
        ::PortableGroup::GenericFactory_ptr p);
    static void release (
        ::PortableGroup::GenericFactory_ptr p);
    static ::PortableGroup::GenericFactory_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::GenericFactory_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_PROPERTYMANAGER__TRAITS_)
#define _PORTABLEGROUP_PROPERTYMANAGER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::PropertyManager>
  {
    static ::PortableGroup::PropertyManager_ptr duplicate (
        ::PortableGroup::PropertyManager_ptr p);
    static void release (
        ::PortableGroup::PropertyManager_ptr p);
    static ::PortableGroup::PropertyManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::PropertyManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_AMI_PROPERTYMANAGERHANDLER__TRAITS_)
#define _PORTABLEGROUP_AMI_PROPERTYMANAGERHANDLER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::AMI_PropertyManagerHandler>
  {
    static ::PortableGroup::AMI_PropertyManagerHandler_ptr duplicate (
        ::PortableGroup::AMI_PropertyManagerHandler_ptr p);
    static void release (
        ::PortableGroup::AMI_PropertyManagerHandler_ptr p);
    static ::PortableGroup::AMI_PropertyManagerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::AMI_PropertyManagerHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_OBJECTGROUPMANAGER__TRAITS_)
#define _PORTABLEGROUP_OBJECTGROUPMANAGER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::ObjectGroupManager>
  {
    static ::PortableGroup::ObjectGroupManager_ptr duplicate (
        ::PortableGroup::ObjectGroupManager_ptr p);
    static void release (
        ::PortableGroup::ObjectGroupManager_ptr p);
    static ::PortableGroup::ObjectGroupManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::ObjectGroupManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_AMI_OBJECTGROUPMANAGERHANDLER__TRAITS_)
#define _PORTABLEGROUP_AMI_OBJECTGROUPMANAGERHANDLER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::AMI_ObjectGroupManagerHandler>
  {
    static ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr duplicate (
        ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr p);
    static void release (
        ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr p);
    static ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::AMI_ObjectGroupManagerHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_AMI_GENERICFACTORYHANDLER__TRAITS_)
#define _PORTABLEGROUP_AMI_GENERICFACTORYHANDLER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::AMI_GenericFactoryHandler>
  {
    static ::PortableGroup::AMI_GenericFactoryHandler_ptr duplicate (
        ::PortableGroup::AMI_GenericFactoryHandler_ptr p);
    static void release (
        ::PortableGroup::AMI_GenericFactoryHandler_ptr p);
    static ::PortableGroup::AMI_GenericFactoryHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::AMI_GenericFactoryHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_FACTORYREGISTRY__TRAITS_)
#define _PORTABLEGROUP_FACTORYREGISTRY__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::FactoryRegistry>
  {
    static ::PortableGroup::FactoryRegistry_ptr duplicate (
        ::PortableGroup::FactoryRegistry_ptr p);
    static void release (
        ::PortableGroup::FactoryRegistry_ptr p);
    static ::PortableGroup::FactoryRegistry_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::FactoryRegistry_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_AMI_FACTORYREGISTRYHANDLER__TRAITS_)
#define _PORTABLEGROUP_AMI_FACTORYREGISTRYHANDLER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::AMI_FactoryRegistryHandler>
  {
    static ::PortableGroup::AMI_FactoryRegistryHandler_ptr duplicate (
        ::PortableGroup::AMI_FactoryRegistryHandler_ptr p);
    static void release (
        ::PortableGroup::AMI_FactoryRegistryHandler_ptr p);
    static ::PortableGroup::AMI_FactoryRegistryHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::AMI_FactoryRegistryHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_TAO_UPDATEOBJECTGROUP__TRAITS_)
#define _PORTABLEGROUP_TAO_UPDATEOBJECTGROUP__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::TAO_UpdateObjectGroup>
  {
    static ::PortableGroup::TAO_UpdateObjectGroup_ptr duplicate (
        ::PortableGroup::TAO_UpdateObjectGroup_ptr p);
    static void release (
        ::PortableGroup::TAO_UpdateObjectGroup_ptr p);
    static ::PortableGroup::TAO_UpdateObjectGroup_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::TAO_UpdateObjectGroup_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_AMI_TAO_UPDATEOBJECTGROUPHANDLER__TRAITS_)
#define _PORTABLEGROUP_AMI_TAO_UPDATEOBJECTGROUPHANDLER__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler>
  {
    static ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr duplicate (
        ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr p);
    static void release (
        ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr p);
    static ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEGROUP_GOA__TRAITS_)
#define _PORTABLEGROUP_GOA__TRAITS_

  template<>
  struct TAO_PortableGroup_Export Objref_Traits< ::PortableGroup::GOA>
  {
    static ::PortableGroup::GOA_ptr duplicate (
        ::PortableGroup::GOA_ptr p);
    static void release (
        ::PortableGroup::GOA_ptr p);
    static ::PortableGroup::GOA_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::PortableGroup::GOA_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const ::PortableGroup::GroupIIOPProfile &); // copying version
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ::PortableGroup::GroupIIOPProfile*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::GroupIIOPProfile *&); // deprecated
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::GroupIIOPProfile *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const PortableGroup::GroupIIOPProfile &); // copying version
TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PortableGroup::GroupIIOPProfile*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::GroupIIOPProfile *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::GroupIIOPProfile *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const ::PortableGroup::ObjectGroups &); // copying version
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ::PortableGroup::ObjectGroups*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::ObjectGroups *&); // deprecated
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::ObjectGroups *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const PortableGroup::ObjectGroups &); // copying version
TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PortableGroup::ObjectGroups*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::ObjectGroups *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::ObjectGroups *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::Property &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::Property*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::Property *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::Property *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::Property &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::Property*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::Property *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::Property *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const ::PortableGroup::Properties &); // copying version
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ::PortableGroup::Properties*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::Properties *&); // deprecated
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::Properties *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const PortableGroup::Properties &); // copying version
TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PortableGroup::Properties*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::Properties *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::Properties *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const ::PortableGroup::Locations &); // copying version
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ::PortableGroup::Locations*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::Locations *&); // deprecated
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::Locations *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const PortableGroup::Locations &); // copying version
TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PortableGroup::Locations*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::Locations *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::Locations *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::FactoryInfo &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::FactoryInfo*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::FactoryInfo *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::FactoryInfo *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::FactoryInfo &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::FactoryInfo*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::FactoryInfo *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::FactoryInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const ::PortableGroup::FactoryInfos &); // copying version
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ::PortableGroup::FactoryInfos*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::FactoryInfos *&); // deprecated
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::FactoryInfos *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const PortableGroup::FactoryInfos &); // copying version
TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PortableGroup::FactoryInfos*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::FactoryInfos *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::FactoryInfos *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::InterfaceNotFound &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::InterfaceNotFound*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::InterfaceNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::InterfaceNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::InterfaceNotFound &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::InterfaceNotFound*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::InterfaceNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::InterfaceNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::ObjectGroupNotFound &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::ObjectGroupNotFound*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::ObjectGroupNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::ObjectGroupNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::ObjectGroupNotFound &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::ObjectGroupNotFound*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::ObjectGroupNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::ObjectGroupNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::MemberNotFound &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::MemberNotFound*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::MemberNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::MemberNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::MemberNotFound &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::MemberNotFound*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::MemberNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::MemberNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::ObjectNotFound &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::ObjectNotFound*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::ObjectNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::ObjectNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::ObjectNotFound &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::ObjectNotFound*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::ObjectNotFound *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::ObjectNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::MemberAlreadyPresent &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::MemberAlreadyPresent*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::MemberAlreadyPresent *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::MemberAlreadyPresent *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::MemberAlreadyPresent &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::MemberAlreadyPresent*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::MemberAlreadyPresent *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::MemberAlreadyPresent *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::ObjectNotCreated &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::ObjectNotCreated*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::ObjectNotCreated *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::ObjectNotCreated *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::ObjectNotCreated &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::ObjectNotCreated*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::ObjectNotCreated *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::ObjectNotCreated *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::ObjectNotAdded &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::ObjectNotAdded*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::ObjectNotAdded *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::ObjectNotAdded *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::ObjectNotAdded &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::ObjectNotAdded*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::ObjectNotAdded *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::ObjectNotAdded *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::TypeConflict &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::TypeConflict*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::TypeConflict *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::TypeConflict *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::TypeConflict &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::TypeConflict*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::TypeConflict *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::TypeConflict *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::UnsupportedProperty &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::UnsupportedProperty*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::UnsupportedProperty *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::UnsupportedProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::UnsupportedProperty &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::UnsupportedProperty*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::UnsupportedProperty *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::UnsupportedProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::InvalidProperty &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::InvalidProperty*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::InvalidProperty *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::InvalidProperty *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::InvalidProperty &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::InvalidProperty*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::InvalidProperty *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::InvalidProperty *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::NoFactory &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::NoFactory*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::NoFactory *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::NoFactory *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::NoFactory &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::NoFactory*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::NoFactory *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::NoFactory *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::InvalidCriteria &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::InvalidCriteria*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::InvalidCriteria *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::InvalidCriteria *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::InvalidCriteria &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::InvalidCriteria*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::InvalidCriteria *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::InvalidCriteria *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::CannotMeetCriteria &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::CannotMeetCriteria*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::CannotMeetCriteria *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::CannotMeetCriteria *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::CannotMeetCriteria &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::CannotMeetCriteria*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::CannotMeetCriteria *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::CannotMeetCriteria *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PropertyManager_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PropertyManager_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PropertyManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::PropertyManager_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::PropertyManager_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::PropertyManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_PropertyManagerHandler_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_PropertyManagerHandler_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_PropertyManagerHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_PropertyManagerHandler_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_PropertyManagerHandler_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::AMI_PropertyManagerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ObjectGroupManager_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ObjectGroupManager_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ObjectGroupManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::ObjectGroupManager_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::ObjectGroupManager_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::ObjectGroupManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_ObjectGroupManagerHandler_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_ObjectGroupManagerHandler_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ObjectGroupManagerHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_ObjectGroupManagerHandler_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_ObjectGroupManagerHandler_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::AMI_ObjectGroupManagerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, GenericFactory_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, GenericFactory_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, GenericFactory_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::GenericFactory_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::GenericFactory_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::GenericFactory_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_GenericFactoryHandler_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_GenericFactoryHandler_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_GenericFactoryHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_GenericFactoryHandler_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_GenericFactoryHandler_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::AMI_GenericFactoryHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, FactoryRegistry_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, FactoryRegistry_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FactoryRegistry_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::FactoryRegistry_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::FactoryRegistry_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::FactoryRegistry_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_FactoryRegistryHandler_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_FactoryRegistryHandler_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_FactoryRegistryHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_FactoryRegistryHandler_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_FactoryRegistryHandler_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::AMI_FactoryRegistryHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, TAO_UpdateObjectGroup_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, TAO_UpdateObjectGroup_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_UpdateObjectGroup_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::TAO_UpdateObjectGroup_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::TAO_UpdateObjectGroup_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::TAO_UpdateObjectGroup_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_TAO_UpdateObjectGroupHandler_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, AMI_TAO_UpdateObjectGroupHandler_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_TAO_UpdateObjectGroupHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  

  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const ::PortableGroup::NotAGroupObject &); // copying version
  TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, ::PortableGroup::NotAGroupObject*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::NotAGroupObject *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::NotAGroupObject *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, const PortableGroup::NotAGroupObject &); // copying version
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::NotAGroupObject*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::NotAGroupObject *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::NotAGroupObject *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const ::PortableGroup::IDs &); // copying version
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, ::PortableGroup::IDs*); // noncopying version
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableGroup::IDs *&); // deprecated
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableGroup::IDs *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, const PortableGroup::IDs &); // copying version
TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, PortableGroup::IDs*); // noncopying version
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::IDs *&); // deprecated
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableGroup::IDs *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableGroup
{
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, GOA_ptr); // copying
  TAO_PortableGroup_Export void operator<<= ( ::CORBA::Any &, GOA_ptr *); // non-copying
  TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, GOA_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::GOA_ptr); // copying
TAO_PortableGroup_Export void operator<<= (::CORBA::Any &, PortableGroup::GOA_ptr *); // non-copying
TAO_PortableGroup_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableGroup::GOA_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableGroup_GroupIIOPProfile_H_
#define _TAO_CDR_OP_PortableGroup_GroupIIOPProfile_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_PortableGroup_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableGroup::GroupIIOPProfile &_tao_sequence);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableGroup::GroupIIOPProfile &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableGroup_GroupIIOPProfile_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableGroup_ObjectGroups_H_
#define _TAO_CDR_OP_PortableGroup_ObjectGroups_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_PortableGroup_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableGroup::ObjectGroups &_tao_sequence);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableGroup::ObjectGroups &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableGroup_ObjectGroups_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::Property &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::Property &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableGroup_Properties_H_
#define _TAO_CDR_OP_PortableGroup_Properties_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_PortableGroup_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableGroup::Properties &_tao_sequence);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableGroup::Properties &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableGroup_Properties_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableGroup_Locations_H_
#define _TAO_CDR_OP_PortableGroup_Locations_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_PortableGroup_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableGroup::Locations &_tao_sequence);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableGroup::Locations &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableGroup_Locations_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::FactoryInfo &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::FactoryInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableGroup_FactoryInfos_H_
#define _TAO_CDR_OP_PortableGroup_FactoryInfos_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_PortableGroup_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableGroup::FactoryInfos &_tao_sequence);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableGroup::FactoryInfos &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableGroup_FactoryInfos_H_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::InterfaceNotFound &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::InterfaceNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::ObjectGroupNotFound &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::ObjectGroupNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::MemberNotFound &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::MemberNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::ObjectNotFound &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::ObjectNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::MemberAlreadyPresent &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::MemberAlreadyPresent &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::ObjectNotCreated &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::ObjectNotCreated &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::ObjectNotAdded &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::ObjectNotAdded &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::TypeConflict &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::TypeConflict &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::UnsupportedProperty &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::UnsupportedProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::InvalidProperty &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::InvalidProperty &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::NoFactory &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::NoFactory &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::InvalidCriteria &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::InvalidCriteria &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::CannotMeetCriteria &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::CannotMeetCriteria &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::PropertyManager_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::PropertyManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::AMI_PropertyManagerHandler_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::AMI_PropertyManagerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::ObjectGroupManager_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::ObjectGroupManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::AMI_ObjectGroupManagerHandler_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::AMI_ObjectGroupManagerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::GenericFactory_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::GenericFactory_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::AMI_GenericFactoryHandler_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::AMI_GenericFactoryHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::FactoryRegistry_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::FactoryRegistry_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::AMI_FactoryRegistryHandler_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::AMI_FactoryRegistryHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::TAO_UpdateObjectGroup_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::TAO_UpdateObjectGroup_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr );
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::AMI_TAO_UpdateObjectGroupHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_PortableGroup_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableGroup::NotAGroupObject &);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableGroup::NotAGroupObject &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableGroup_IDs_H_
#define _TAO_CDR_OP_PortableGroup_IDs_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_PortableGroup_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableGroup::IDs &_tao_sequence);
TAO_PortableGroup_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableGroup::IDs &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableGroup_IDs_H_ */

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "PortableGroupC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

