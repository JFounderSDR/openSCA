// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "FtRtecEventChannelAdminC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FtRtecEventChannelAdminC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_ObjectId (
    ::CORBA::tk_alias,
    "IDL:FtRtecEventChannelAdmin/ObjectId:1.0",
    "ObjectId",
    &FtRtecEventComm::_tc_ObjectId);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ObjectId =
    &_tao_tc_FtRtecEventChannelAdmin_ObjectId;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionInfo[] =
      {
        { "push_supplier", &RtecEventComm::_tc_PushSupplier },
        { "qos", &RtecEventChannelAdmin::_tc_SupplierQOS }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionInfo (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/ProxyPushConsumerConnectionInfo:1.0",
  "ProxyPushConsumerConnectionInfo",
  _tao_fields_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionInfo,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushConsumerConnectionInfo =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionInfo;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ProxyPushConsumerConnectionInfo *_tao_tmp_pointer =
    static_cast<ProxyPushConsumerConnectionInfo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_cs.cpp:82

FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::ProxyPushConsumerConnectionParamter (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
  ACE_NEW (
    this->u_.info_,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo);
}

FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::ProxyPushConsumerConnectionParamter (const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case false:
    case true:
    {
      if (u.u_.info_ == 0)
        {
          this->u_.info_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.info_,
              FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo (*u.u_.info_)
            );
        }
    }
    break;
  }
}

FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::~ProxyPushConsumerConnectionParamter (void)
{
  // Finalize.
  this->_reset ();
}

void FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushConsumerConnectionParamter *tmp =
    static_cast<ProxyPushConsumerConnectionParamter *> (_tao_void_pointer);
  delete tmp;
}

FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &
FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::operator= (const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case false:
    case true:
    {
      if (u.u_.info_ == 0)
        {
          this->u_.info_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.info_,
              FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo (*u.u_.info_),
              *this
            );
        }
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_reset (void)
{
  switch (this->disc_)
  {
    
    case false:
    case true:
      delete this->u_.info_;
      this->u_.info_ = 0;
      break;
  }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/union_typecode.cpp:66

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionParamter__0 (false, "info", &FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionParamter[] =
  {
    &_tao_cases_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionParamter__0
    
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionParamter (
    "IDL:FtRtecEventChannelAdmin/ProxyPushConsumerConnectionParamter:1.0",
    "ProxyPushConsumerConnectionParamter",
    &CORBA::_tc_boolean,
    _tao_cases_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionParamter,
    1, -1);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushConsumerConnectionParamter =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyPushConsumerConnectionParamter;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_ProxyPushConsumerStat[] =
      {
        { "object_id", &FtRtecEventChannelAdmin::_tc_ObjectId },
        { "parameter", &FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_ProxyPushConsumerStat (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/ProxyPushConsumerStat:1.0",
  "ProxyPushConsumerStat",
  _tao_fields_FtRtecEventChannelAdmin_ProxyPushConsumerStat,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushConsumerStat =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyPushConsumerStat;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ProxyPushConsumerStat *_tao_tmp_pointer =
    static_cast<ProxyPushConsumerStat *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionInfo[] =
      {
        { "push_consumer", &RtecEventComm::_tc_PushConsumer },
        { "qos", &RtecEventChannelAdmin::_tc_ConsumerQOS }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionInfo (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/ProxyPushSupplierConnectionInfo:1.0",
  "ProxyPushSupplierConnectionInfo",
  _tao_fields_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionInfo,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushSupplierConnectionInfo =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionInfo;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ProxyPushSupplierConnectionInfo *_tao_tmp_pointer =
    static_cast<ProxyPushSupplierConnectionInfo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_cs.cpp:82

FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::ProxyPushSupplierConnectionParamter (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = false;
  ACE_NEW (
    this->u_.info_,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo);
}

FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::ProxyPushSupplierConnectionParamter (const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case false:
    case true:
    {
      if (u.u_.info_ == 0)
        {
          this->u_.info_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.info_,
              FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo (*u.u_.info_)
            );
        }
    }
    break;
  }
}

FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::~ProxyPushSupplierConnectionParamter (void)
{
  // Finalize.
  this->_reset ();
}

void FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor (void *_tao_void_pointer)
{
  ProxyPushSupplierConnectionParamter *tmp =
    static_cast<ProxyPushSupplierConnectionParamter *> (_tao_void_pointer);
  delete tmp;
}

FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &
FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::operator= (const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case false:
    case true:
    {
      if (u.u_.info_ == 0)
        {
          this->u_.info_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.info_,
              FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo (*u.u_.info_),
              *this
            );
        }
    }
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_reset (void)
{
  switch (this->disc_)
  {
    
    case false:
    case true:
      delete this->u_.info_;
      this->u_.info_ = 0;
      break;
  }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/union_typecode.cpp:66

static TAO::TypeCode::Case_T<CORBA::Boolean, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionParamter__0 (false, "info", &FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionParamter[] =
  {
    &_tao_cases_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionParamter__0
    
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionParamter (
    "IDL:FtRtecEventChannelAdmin/ProxyPushSupplierConnectionParamter:1.0",
    "ProxyPushSupplierConnectionParamter",
    &CORBA::_tc_boolean,
    _tao_cases_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionParamter,
    1, -1);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushSupplierConnectionParamter =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyPushSupplierConnectionParamter;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_ProxyPushSupplierStat[] =
      {
        { "object_id", &FtRtecEventChannelAdmin::_tc_ObjectId },
        { "suspended", &CORBA::_tc_boolean },
        { "parameter", &FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_ProxyPushSupplierStat (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/ProxyPushSupplierStat:1.0",
  "ProxyPushSupplierStat",
  _tao_fields_FtRtecEventChannelAdmin_ProxyPushSupplierStat,
  3);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyPushSupplierStat =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyPushSupplierStat;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ProxyPushSupplierStat *_tao_tmp_pointer =
    static_cast<ProxyPushSupplierStat *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FTRTECEVENTCHANNELADMIN_PROXYCONSUMERSTATES_CS_)
#define _FTRTECEVENTCHANNELADMIN_PROXYCONSUMERSTATES_CS_

FtRtecEventChannelAdmin::ProxyConsumerStates::ProxyConsumerStates (void)
{}

FtRtecEventChannelAdmin::ProxyConsumerStates::ProxyConsumerStates (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ProxyPushConsumerStat
      > (max)
{}

FtRtecEventChannelAdmin::ProxyConsumerStates::ProxyConsumerStates (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    FtRtecEventChannelAdmin::ProxyPushConsumerStat * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ProxyPushConsumerStat
      >
    (max, length, buffer, release)
{}

FtRtecEventChannelAdmin::ProxyConsumerStates::ProxyConsumerStates (
    const ProxyConsumerStates &seq)
  : ::TAO::unbounded_value_sequence<
        ProxyPushConsumerStat
      > (seq)
{}

FtRtecEventChannelAdmin::ProxyConsumerStates::~ProxyConsumerStates (void)
{}

void FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ProxyConsumerStates * _tao_tmp_pointer =
    static_cast<ProxyConsumerStates *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FtRtecEventChannelAdmin_ProxyConsumerStates_GUARD
#define _TAO_TYPECODE_FtRtecEventChannelAdmin_ProxyConsumerStates_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FtRtecEventChannelAdmin_ProxyConsumerStates_0 (
          ::CORBA::tk_sequence,
          &FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FtRtecEventChannelAdmin_ProxyConsumerStates_0 =
        &FtRtecEventChannelAdmin_ProxyConsumerStates_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FtRtecEventChannelAdmin_ProxyConsumerStates_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_ProxyConsumerStates (
    ::CORBA::tk_alias,
    "IDL:FtRtecEventChannelAdmin/ProxyConsumerStates:1.0",
    "ProxyConsumerStates",
    &TAO::TypeCode::tc_FtRtecEventChannelAdmin_ProxyConsumerStates_0);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxyConsumerStates =
    &_tao_tc_FtRtecEventChannelAdmin_ProxyConsumerStates;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FTRTECEVENTCHANNELADMIN_PROXYSUPPLIERSTATES_CS_)
#define _FTRTECEVENTCHANNELADMIN_PROXYSUPPLIERSTATES_CS_

FtRtecEventChannelAdmin::ProxySupplierStates::ProxySupplierStates (void)
{}

FtRtecEventChannelAdmin::ProxySupplierStates::ProxySupplierStates (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ProxyPushSupplierStat
      > (max)
{}

FtRtecEventChannelAdmin::ProxySupplierStates::ProxySupplierStates (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    FtRtecEventChannelAdmin::ProxyPushSupplierStat * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ProxyPushSupplierStat
      >
    (max, length, buffer, release)
{}

FtRtecEventChannelAdmin::ProxySupplierStates::ProxySupplierStates (
    const ProxySupplierStates &seq)
  : ::TAO::unbounded_value_sequence<
        ProxyPushSupplierStat
      > (seq)
{}

FtRtecEventChannelAdmin::ProxySupplierStates::~ProxySupplierStates (void)
{}

void FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ProxySupplierStates * _tao_tmp_pointer =
    static_cast<ProxySupplierStates *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FtRtecEventChannelAdmin_ProxySupplierStates_GUARD
#define _TAO_TYPECODE_FtRtecEventChannelAdmin_ProxySupplierStates_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FtRtecEventChannelAdmin_ProxySupplierStates_0 (
          ::CORBA::tk_sequence,
          &FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FtRtecEventChannelAdmin_ProxySupplierStates_0 =
        &FtRtecEventChannelAdmin_ProxySupplierStates_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FtRtecEventChannelAdmin_ProxySupplierStates_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_ProxySupplierStates (
    ::CORBA::tk_alias,
    "IDL:FtRtecEventChannelAdmin/ProxySupplierStates:1.0",
    "ProxySupplierStates",
    &TAO::TypeCode::tc_FtRtecEventChannelAdmin_ProxySupplierStates_0);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ProxySupplierStates =
    &_tao_tc_FtRtecEventChannelAdmin_ProxySupplierStates;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_ConsumerAdminState[] =
      {
        { "proxies", &FtRtecEventChannelAdmin::_tc_ProxySupplierStates }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_ConsumerAdminState (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/ConsumerAdminState:1.0",
  "ConsumerAdminState",
  _tao_fields_FtRtecEventChannelAdmin_ConsumerAdminState,
  1);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_ConsumerAdminState =
    &_tao_tc_FtRtecEventChannelAdmin_ConsumerAdminState;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ConsumerAdminState *_tao_tmp_pointer =
    static_cast<ConsumerAdminState *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_SupplierAdminState[] =
      {
        { "proxies", &FtRtecEventChannelAdmin::_tc_ProxyConsumerStates }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_SupplierAdminState (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/SupplierAdminState:1.0",
  "SupplierAdminState",
  _tao_fields_FtRtecEventChannelAdmin_SupplierAdminState,
  1);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_SupplierAdminState =
    &_tao_tc_FtRtecEventChannelAdmin_SupplierAdminState;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor (
    void *_tao_void_pointer)
{
  SupplierAdminState *_tao_tmp_pointer =
    static_cast<SupplierAdminState *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_CachedResult[] =
      {
        { "retention_id", &CORBA::_tc_long },
        { "result", &CORBA::_tc_any }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_CachedResult (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/CachedResult:1.0",
  "CachedResult",
  _tao_fields_FtRtecEventChannelAdmin_CachedResult,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_CachedResult =
    &_tao_tc_FtRtecEventChannelAdmin_CachedResult;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CachedResult *_tao_tmp_pointer =
    static_cast<CachedResult *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_CacheEntry[] =
      {
        { "client_id", &CORBA::_tc_string },
        { "cached_result", &FtRtecEventChannelAdmin::_tc_CachedResult }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_CacheEntry (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/CacheEntry:1.0",
  "CacheEntry",
  _tao_fields_FtRtecEventChannelAdmin_CacheEntry,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_CacheEntry =
    &_tao_tc_FtRtecEventChannelAdmin_CacheEntry;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CacheEntry *_tao_tmp_pointer =
    static_cast<CacheEntry *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FTRTECEVENTCHANNELADMIN_CACHEDOPTIONRESULTS_CS_)
#define _FTRTECEVENTCHANNELADMIN_CACHEDOPTIONRESULTS_CS_

FtRtecEventChannelAdmin::CachedOptionResults::CachedOptionResults (void)
{}

FtRtecEventChannelAdmin::CachedOptionResults::CachedOptionResults (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        CacheEntry
      > (max)
{}

FtRtecEventChannelAdmin::CachedOptionResults::CachedOptionResults (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    FtRtecEventChannelAdmin::CacheEntry * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        CacheEntry
      >
    (max, length, buffer, release)
{}

FtRtecEventChannelAdmin::CachedOptionResults::CachedOptionResults (
    const CachedOptionResults &seq)
  : ::TAO::unbounded_value_sequence<
        CacheEntry
      > (seq)
{}

FtRtecEventChannelAdmin::CachedOptionResults::~CachedOptionResults (void)
{}

void FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CachedOptionResults * _tao_tmp_pointer =
    static_cast<CachedOptionResults *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FtRtecEventChannelAdmin_CachedOptionResults_GUARD
#define _TAO_TYPECODE_FtRtecEventChannelAdmin_CachedOptionResults_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FtRtecEventChannelAdmin_CachedOptionResults_0 (
          ::CORBA::tk_sequence,
          &FtRtecEventChannelAdmin::_tc_CacheEntry,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FtRtecEventChannelAdmin_CachedOptionResults_0 =
        &FtRtecEventChannelAdmin_CachedOptionResults_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FtRtecEventChannelAdmin_CachedOptionResults_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_CachedOptionResults (
    ::CORBA::tk_alias,
    "IDL:FtRtecEventChannelAdmin/CachedOptionResults:1.0",
    "CachedOptionResults",
    &TAO::TypeCode::tc_FtRtecEventChannelAdmin_CachedOptionResults_0);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_CachedOptionResults =
    &_tao_tc_FtRtecEventChannelAdmin_CachedOptionResults;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_EventChannelState[] =
      {
        { "cached_operation_results", &FtRtecEventChannelAdmin::_tc_CachedOptionResults },
        { "supplier_admin_state", &FtRtecEventChannelAdmin::_tc_SupplierAdminState },
        { "consumer_admin_state", &FtRtecEventChannelAdmin::_tc_ConsumerAdminState }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_EventChannelState (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/EventChannelState:1.0",
  "EventChannelState",
  _tao_fields_FtRtecEventChannelAdmin_EventChannelState,
  3);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannelState =
    &_tao_tc_FtRtecEventChannelAdmin_EventChannelState;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor (
    void *_tao_void_pointer)
{
  EventChannelState *_tao_tmp_pointer =
    static_cast<EventChannelState *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_Connect_push_consumer_param[] =
      {
        { "push_consumer", &RtecEventComm::_tc_PushConsumer },
        { "qos", &RtecEventChannelAdmin::_tc_ConsumerQOS }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_Connect_push_consumer_param (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/Connect_push_consumer_param:1.0",
  "Connect_push_consumer_param",
  _tao_fields_FtRtecEventChannelAdmin_Connect_push_consumer_param,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Connect_push_consumer_param =
    &_tao_tc_FtRtecEventChannelAdmin_Connect_push_consumer_param;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Connect_push_consumer_param *_tao_tmp_pointer =
    static_cast<Connect_push_consumer_param *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_Connect_push_supplier_param[] =
      {
        { "push_supplier", &RtecEventComm::_tc_PushSupplier },
        { "qos", &RtecEventChannelAdmin::_tc_SupplierQOS }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_Connect_push_supplier_param (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/Connect_push_supplier_param:1.0",
  "Connect_push_supplier_param",
  _tao_fields_FtRtecEventChannelAdmin_Connect_push_supplier_param,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Connect_push_supplier_param =
    &_tao_tc_FtRtecEventChannelAdmin_Connect_push_supplier_param;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Connect_push_supplier_param *_tao_tmp_pointer =
    static_cast<Connect_push_supplier_param *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_FtRtecEventChannelAdmin_OperationType[] =
  {
    "OBTAIN_PUSH_SUPPLIER",
    "OBTAIN_PUSH_CONSUMER",
    "DISCONNECT_PUSH_SUPPLIER",
    "DISCONNECT_PUSH_CONSUMER",
    "SUSPEND_CONNECTION",
    "RESUME_CONNECTION",
    "CONNECT_PUSH_SUPPLIER",
    "CONNECT_PUSH_CONSUMER"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_OperationType (
    "IDL:FtRtecEventChannelAdmin/OperationType:1.0",
    "OperationType",
    _tao_enumerators_FtRtecEventChannelAdmin_OperationType,
    8);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_OperationType =
    &_tao_tc_FtRtecEventChannelAdmin_OperationType;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_cs.cpp:82

FtRtecEventChannelAdmin::OperationParam::OperationParam (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = FtRtecEventChannelAdmin::OBTAIN_PUSH_SUPPLIER;
}

FtRtecEventChannelAdmin::OperationParam::OperationParam (const ::FtRtecEventChannelAdmin::OperationParam &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case FtRtecEventChannelAdmin::CONNECT_PUSH_SUPPLIER:
    {
      if (u.u_.connect_supplier_param_ == 0)
        {
          this->u_.connect_supplier_param_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.connect_supplier_param_,
              FtRtecEventChannelAdmin::Connect_push_supplier_param (*u.u_.connect_supplier_param_)
            );
        }
    }
    break;
    case FtRtecEventChannelAdmin::CONNECT_PUSH_CONSUMER:
    {
      if (u.u_.connect_consumer_param_ == 0)
        {
          this->u_.connect_consumer_param_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.connect_consumer_param_,
              FtRtecEventChannelAdmin::Connect_push_consumer_param (*u.u_.connect_consumer_param_)
            );
        }
    }
    break;
    default:
    break;
  }
}

FtRtecEventChannelAdmin::OperationParam::~OperationParam (void)
{
  // Finalize.
  this->_reset ();
}

void FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor (void *_tao_void_pointer)
{
  OperationParam *tmp =
    static_cast<OperationParam *> (_tao_void_pointer);
  delete tmp;
}

FtRtecEventChannelAdmin::OperationParam &
FtRtecEventChannelAdmin::OperationParam::operator= (const ::FtRtecEventChannelAdmin::OperationParam &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case FtRtecEventChannelAdmin::CONNECT_PUSH_SUPPLIER:
    {
      if (u.u_.connect_supplier_param_ == 0)
        {
          this->u_.connect_supplier_param_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.connect_supplier_param_,
              FtRtecEventChannelAdmin::Connect_push_supplier_param (*u.u_.connect_supplier_param_),
              *this
            );
        }
    }
    break;
    case FtRtecEventChannelAdmin::CONNECT_PUSH_CONSUMER:
    {
      if (u.u_.connect_consumer_param_ == 0)
        {
          this->u_.connect_consumer_param_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.connect_consumer_param_,
              FtRtecEventChannelAdmin::Connect_push_consumer_param (*u.u_.connect_consumer_param_),
              *this
            );
        }
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void FtRtecEventChannelAdmin::OperationParam::_reset (void)
{
  switch (this->disc_)
  {
    
    case FtRtecEventChannelAdmin::CONNECT_PUSH_SUPPLIER:
      delete this->u_.connect_supplier_param_;
      this->u_.connect_supplier_param_ = 0;
      break;
    case FtRtecEventChannelAdmin::CONNECT_PUSH_CONSUMER:
      delete this->u_.connect_consumer_param_;
      this->u_.connect_consumer_param_ = 0;
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/union_typecode.cpp:66

static TAO::TypeCode::Case_T<FtRtecEventChannelAdmin::OperationType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FtRtecEventChannelAdmin_OperationParam__0 (FtRtecEventChannelAdmin::CONNECT_PUSH_SUPPLIER, "connect_supplier_param", &FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param);
static TAO::TypeCode::Case_T<FtRtecEventChannelAdmin::OperationType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_FtRtecEventChannelAdmin_OperationParam__1 (FtRtecEventChannelAdmin::CONNECT_PUSH_CONSUMER, "connect_consumer_param", &FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_FtRtecEventChannelAdmin_OperationParam[] =
  {
    &_tao_cases_FtRtecEventChannelAdmin_OperationParam__0,
    &_tao_cases_FtRtecEventChannelAdmin_OperationParam__1
    
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_OperationParam (
    "IDL:FtRtecEventChannelAdmin/OperationParam:1.0",
    "OperationParam",
    &FtRtecEventChannelAdmin::_tc_OperationType,
    _tao_cases_FtRtecEventChannelAdmin_OperationParam,
    2, -1);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_OperationParam =
    &_tao_tc_FtRtecEventChannelAdmin_OperationParam;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_FtRtecEventChannelAdmin_Operation[] =
      {
        { "object_id", &FtRtecEventChannelAdmin::_tc_ObjectId },
        { "param", &FtRtecEventChannelAdmin::_tc_OperationParam }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_Operation (
  ::CORBA::tk_struct,
  "IDL:FtRtecEventChannelAdmin/Operation:1.0",
  "Operation",
  _tao_fields_FtRtecEventChannelAdmin_Operation,
  2);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_Operation =
    &_tao_tc_FtRtecEventChannelAdmin_Operation;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
FtRtecEventChannelAdmin::Operation::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Operation *_tao_tmp_pointer =
    static_cast<Operation *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FtRtecEventChannelAdmin::EventChannelFacade.

FtRtecEventChannelAdmin::EventChannelFacade_ptr
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannelFacade>::duplicate (
    FtRtecEventChannelAdmin::EventChannelFacade_ptr p)
{
  return FtRtecEventChannelAdmin::EventChannelFacade::_duplicate (p);
}

void
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannelFacade>::release (
    FtRtecEventChannelAdmin::EventChannelFacade_ptr p)
{
  ::CORBA::release (p);
}

FtRtecEventChannelAdmin::EventChannelFacade_ptr
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannelFacade>::nil (void)
{
  return FtRtecEventChannelAdmin::EventChannelFacade::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannelFacade>::marshal (
    const FtRtecEventChannelAdmin::EventChannelFacade_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FtRtecEventChannelAdmin__TAO_EventChannelFacade_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::FtRtecEventChannelAdmin::ObjectId *
FtRtecEventChannelAdmin::EventChannelFacade::connect_push_consumer (
  ::RtecEventComm::PushConsumer_ptr push_consumer,
  const ::RtecEventChannelAdmin::ConsumerQOS & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFacade_Proxy_Broker_ == 0)
    {
      FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::FtRtecEventChannelAdmin::ObjectId>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventComm::PushConsumer>::in_arg_val _tao_push_consumer (push_consumer);
  TAO::Arg_Traits< ::RtecEventChannelAdmin::ConsumerQOS>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_consumer,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_FtRtecEventChannelAdmin_EventChannelFacade_connect_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:RtecEventChannelAdmin/TypeError:1.0",
        RtecEventChannelAdmin::TypeError::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , RtecEventChannelAdmin::_tc_TypeError
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "connect_push_consumer",
      21,
      this->the_TAO_EventChannelFacade_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventChannelAdmin_EventChannelFacade_connect_push_consumer_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::FtRtecEventChannelAdmin::ObjectId *
FtRtecEventChannelAdmin::EventChannelFacade::connect_push_supplier (
  ::RtecEventComm::PushSupplier_ptr push_supplier,
  const ::RtecEventChannelAdmin::SupplierQOS & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFacade_Proxy_Broker_ == 0)
    {
      FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::FtRtecEventChannelAdmin::ObjectId>::ret_val _tao_retval;
  TAO::Arg_Traits< ::RtecEventComm::PushSupplier>::in_arg_val _tao_push_supplier (push_supplier);
  TAO::Arg_Traits< ::RtecEventChannelAdmin::SupplierQOS>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_push_supplier,
      &_tao_qos
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "connect_push_supplier",
      21,
      this->the_TAO_EventChannelFacade_Proxy_Broker_
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventChannelAdmin::EventChannelFacade::disconnect_push_supplier (
  const ::FtRtecEventChannelAdmin::ObjectId & oid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFacade_Proxy_Broker_ == 0)
    {
      FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FtRtecEventChannelAdmin::ObjectId>::in_arg_val _tao_oid (oid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_oid
    };

  static TAO::Exception_Data
  _tao_FtRtecEventChannelAdmin_EventChannelFacade_disconnect_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "disconnect_push_supplier",
      24,
      this->the_TAO_EventChannelFacade_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventChannelAdmin_EventChannelFacade_disconnect_push_supplier_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventChannelAdmin::EventChannelFacade::disconnect_push_consumer (
  const ::FtRtecEventChannelAdmin::ObjectId & oid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFacade_Proxy_Broker_ == 0)
    {
      FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FtRtecEventChannelAdmin::ObjectId>::in_arg_val _tao_oid (oid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_oid
    };

  static TAO::Exception_Data
  _tao_FtRtecEventChannelAdmin_EventChannelFacade_disconnect_push_consumer_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "disconnect_push_consumer",
      24,
      this->the_TAO_EventChannelFacade_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventChannelAdmin_EventChannelFacade_disconnect_push_consumer_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventChannelAdmin::EventChannelFacade::suspend_push_supplier (
  const ::FtRtecEventChannelAdmin::ObjectId & oid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFacade_Proxy_Broker_ == 0)
    {
      FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FtRtecEventChannelAdmin::ObjectId>::in_arg_val _tao_oid (oid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_oid
    };

  static TAO::Exception_Data
  _tao_FtRtecEventChannelAdmin_EventChannelFacade_suspend_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "suspend_push_supplier",
      21,
      this->the_TAO_EventChannelFacade_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventChannelAdmin_EventChannelFacade_suspend_push_supplier_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
FtRtecEventChannelAdmin::EventChannelFacade::resume_push_supplier (
  const ::FtRtecEventChannelAdmin::ObjectId & oid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_EventChannelFacade_Proxy_Broker_ == 0)
    {
      FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FtRtecEventChannelAdmin::ObjectId>::in_arg_val _tao_oid (oid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_oid
    };

  static TAO::Exception_Data
  _tao_FtRtecEventChannelAdmin_EventChannelFacade_resume_push_supplier_exceptiondata [] = 
    {
      {
        "IDL:FtRtecEventComm/InvalidObjectID:1.0",
        FtRtecEventComm::InvalidObjectID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , FtRtecEventComm::_tc_InvalidObjectID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "resume_push_supplier",
      20,
      this->the_TAO_EventChannelFacade_Proxy_Broker_
    );

  _tao_call.invoke (
      _tao_FtRtecEventChannelAdmin_EventChannelFacade_resume_push_supplier_exceptiondata,
      1
    );
}

FtRtecEventChannelAdmin::EventChannelFacade::EventChannelFacade (void)
 : the_TAO_EventChannelFacade_Proxy_Broker_ (0)
{
  this->FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
}

void
FtRtecEventChannelAdmin::EventChannelFacade::FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ()
{
  if (::FtRtecEventChannelAdmin__TAO_EventChannelFacade_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannelFacade_Proxy_Broker_ =
        ::FtRtecEventChannelAdmin__TAO_EventChannelFacade_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->FtRtecEventComm_PushConsumer_setup_collocation ();
}

FtRtecEventChannelAdmin::EventChannelFacade::~EventChannelFacade (void)
{}

void 
FtRtecEventChannelAdmin::EventChannelFacade::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannelFacade *_tao_tmp_pointer =
    static_cast<EventChannelFacade *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FtRtecEventChannelAdmin::EventChannelFacade_ptr
FtRtecEventChannelAdmin::EventChannelFacade::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFacade>::narrow (
        _tao_objref,
        "IDL:FtRtecEventChannelAdmin/EventChannelFacade:1.0",
        FtRtecEventChannelAdmin__TAO_EventChannelFacade_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventChannelAdmin::EventChannelFacade_ptr
FtRtecEventChannelAdmin::EventChannelFacade::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannelFacade>::unchecked_narrow (
        _tao_objref,
        "IDL:FtRtecEventChannelAdmin/EventChannelFacade:1.0",
        FtRtecEventChannelAdmin__TAO_EventChannelFacade_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventChannelAdmin::EventChannelFacade_ptr
FtRtecEventChannelAdmin::EventChannelFacade::_nil (void)
{
  return 0;
}

FtRtecEventChannelAdmin::EventChannelFacade_ptr
FtRtecEventChannelAdmin::EventChannelFacade::_duplicate (EventChannelFacade_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FtRtecEventChannelAdmin::EventChannelFacade::_tao_release (EventChannelFacade_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FtRtecEventChannelAdmin::EventChannelFacade::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventChannelAdmin/EventChannelFacade:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FtRtecEventChannelAdmin::EventChannelFacade::_interface_repository_id (void) const
{
  return "IDL:FtRtecEventChannelAdmin/EventChannelFacade:1.0";
}

::CORBA::Boolean
FtRtecEventChannelAdmin::EventChannelFacade::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_EventChannelFacade (
    ::CORBA::tk_objref,
    "IDL:FtRtecEventChannelAdmin/EventChannelFacade:1.0",
    "EventChannelFacade");
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannelFacade =
    &_tao_tc_FtRtecEventChannelAdmin_EventChannelFacade;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

FtRtecEventChannelAdmin::InvalidState::InvalidState (void)
  : ::CORBA::UserException (
        "IDL:FtRtecEventChannelAdmin/InvalidState:1.0",
        "InvalidState"
      )
{
}

FtRtecEventChannelAdmin::InvalidState::~InvalidState (void)
{
}

FtRtecEventChannelAdmin::InvalidState::InvalidState (const ::FtRtecEventChannelAdmin::InvalidState &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

FtRtecEventChannelAdmin::InvalidState&
FtRtecEventChannelAdmin::InvalidState::operator= (const ::FtRtecEventChannelAdmin::InvalidState &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidState *_tao_tmp_pointer =
    static_cast<InvalidState *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

FtRtecEventChannelAdmin::InvalidState *
FtRtecEventChannelAdmin::InvalidState::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidState *> (_tao_excp);
}

const FtRtecEventChannelAdmin::InvalidState *
FtRtecEventChannelAdmin::InvalidState::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidState *> (_tao_excp);
}

::CORBA::Exception *FtRtecEventChannelAdmin::InvalidState::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::FtRtecEventChannelAdmin::InvalidState, 0);
  return retval;
}

::CORBA::Exception *
FtRtecEventChannelAdmin::InvalidState::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::FtRtecEventChannelAdmin::InvalidState (*this),
      0
    );
  return result;
}

void FtRtecEventChannelAdmin::InvalidState::_raise (void) const
{
  throw *this;
}

void FtRtecEventChannelAdmin::InvalidState::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void FtRtecEventChannelAdmin::InvalidState::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr FtRtecEventChannelAdmin::InvalidState::_tao_type (void) const
{
  return ::FtRtecEventChannelAdmin::_tc_InvalidState;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_FtRtecEventChannelAdmin_InvalidState = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_FtRtecEventChannelAdmin_InvalidState (
  ::CORBA::tk_except,
  "IDL:FtRtecEventChannelAdmin/InvalidState:1.0",
  "InvalidState",
  _tao_fields_FtRtecEventChannelAdmin_InvalidState,
  0);


namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_InvalidState =
    &_tao_tc_FtRtecEventChannelAdmin_InvalidState;
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for FtRtecEventChannelAdmin::EventChannel.

FtRtecEventChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannel>::duplicate (
    FtRtecEventChannelAdmin::EventChannel_ptr p)
{
  return FtRtecEventChannelAdmin::EventChannel::_duplicate (p);
}

void
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannel>::release (
    FtRtecEventChannelAdmin::EventChannel_ptr p)
{
  ::CORBA::release (p);
}

FtRtecEventChannelAdmin::EventChannel_ptr
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannel>::nil (void)
{
  return FtRtecEventChannelAdmin::EventChannel::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FtRtecEventChannelAdmin::EventChannel>::marshal (
    const FtRtecEventChannelAdmin::EventChannel_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*FtRtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

FtRtecEventChannelAdmin::EventChannel::EventChannel (void)
 : the_TAO_EventChannel_Proxy_Broker_ (0)
{
  this->FtRtecEventChannelAdmin_EventChannel_setup_collocation ();
}

void
FtRtecEventChannelAdmin::EventChannel::FtRtecEventChannelAdmin_EventChannel_setup_collocation ()
{
  if (::FtRtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_EventChannel_Proxy_Broker_ =
        ::FtRtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->RtecEventChannelAdmin_EventChannel_setup_collocation ();
  this->FtRtecEventChannelAdmin_EventChannelFacade_setup_collocation ();
  this->FTRT_Updateable_setup_collocation ();
  this->FTRT_ObjectGroupManager_setup_collocation ();
}

FtRtecEventChannelAdmin::EventChannel::~EventChannel (void)
{}

void 
FtRtecEventChannelAdmin::EventChannel::_tao_any_destructor (void *_tao_void_pointer)
{
  EventChannel *_tao_tmp_pointer =
    static_cast<EventChannel *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FtRtecEventChannelAdmin::EventChannel_ptr
FtRtecEventChannelAdmin::EventChannel::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::narrow (
        _tao_objref,
        "IDL:FtRtecEventChannelAdmin/EventChannel:1.0",
        FtRtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventChannelAdmin::EventChannel_ptr
FtRtecEventChannelAdmin::EventChannel::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<EventChannel>::unchecked_narrow (
        _tao_objref,
        "IDL:FtRtecEventChannelAdmin/EventChannel:1.0",
        FtRtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
}

FtRtecEventChannelAdmin::EventChannel_ptr
FtRtecEventChannelAdmin::EventChannel::_nil (void)
{
  return 0;
}

FtRtecEventChannelAdmin::EventChannel_ptr
FtRtecEventChannelAdmin::EventChannel::_duplicate (EventChannel_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
FtRtecEventChannelAdmin::EventChannel::_tao_release (EventChannel_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FtRtecEventChannelAdmin::EventChannel::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:RtecEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventChannelAdmin/EventChannelFacade:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FTRT/Updateable:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FTRT/FaultListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FTRT/ObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FtRtecEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FtRtecEventChannelAdmin::EventChannel::_interface_repository_id (void) const
{
  return "IDL:FtRtecEventChannelAdmin/EventChannel:1.0";
}

::CORBA::Boolean
FtRtecEventChannelAdmin::EventChannel::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_EventChannel (
    ::CORBA::tk_objref,
    "IDL:FtRtecEventChannelAdmin/EventChannel:1.0",
    "EventChannel");
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannel =
    &_tao_tc_FtRtecEventChannelAdmin_EventChannel;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FTRTECEVENTCHANNELADMIN_EVENTCHANNELLIST_CS_)
#define _FTRTECEVENTCHANNELADMIN_EVENTCHANNELLIST_CS_

FtRtecEventChannelAdmin::EventChannelList::EventChannelList (void)
{}

FtRtecEventChannelAdmin::EventChannelList::EventChannelList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        EventChannel,
        EventChannel_var
      > (max)
{}

FtRtecEventChannelAdmin::EventChannelList::EventChannelList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    FtRtecEventChannelAdmin::EventChannel_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        EventChannel,
        EventChannel_var
      >
    (max, length, buffer, release)
{}

FtRtecEventChannelAdmin::EventChannelList::EventChannelList (
    const EventChannelList &seq)
  : ::TAO::unbounded_object_reference_sequence<
        EventChannel,
        EventChannel_var
      > (seq)
{}

FtRtecEventChannelAdmin::EventChannelList::~EventChannelList (void)
{}

void FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  EventChannelList * _tao_tmp_pointer =
    static_cast<EventChannelList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_FtRtecEventChannelAdmin_EventChannelList_GUARD
#define _TAO_TYPECODE_FtRtecEventChannelAdmin_EventChannelList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FtRtecEventChannelAdmin_EventChannelList_0 (
          ::CORBA::tk_sequence,
          &FtRtecEventChannelAdmin::_tc_EventChannel,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FtRtecEventChannelAdmin_EventChannelList_0 =
        &FtRtecEventChannelAdmin_EventChannelList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_FtRtecEventChannelAdmin_EventChannelList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FtRtecEventChannelAdmin_EventChannelList (
    ::CORBA::tk_alias,
    "IDL:FtRtecEventChannelAdmin/EventChannelList:1.0",
    "EventChannelList",
    &TAO::TypeCode::tc_FtRtecEventChannelAdmin_EventChannelList_0);
  

namespace FtRtecEventChannelAdmin
{
  ::CORBA::TypeCode_ptr const _tc_EventChannelList =
    &_tao_tc_FtRtecEventChannelAdmin_EventChannelList;
}

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionInfo,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushConsumerConnectionParamter,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushConsumerStat &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyPushConsumerStat *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerStat>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::ProxyPushConsumerStat *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerStat>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushConsumerStat *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyPushConsumerStat *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushConsumerStat *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushConsumerStat>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushConsumerStat &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyPushConsumerStat *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerStat>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushConsumerStat *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerStat>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushConsumerStat *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyPushConsumerStat *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushConsumerStat *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushConsumerStat>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushConsumerStat::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushConsumerStat,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionInfo,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushSupplierConnectionParamter,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushSupplierStat &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyPushSupplierStat *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierStat>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::ProxyPushSupplierStat *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierStat>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyPushSupplierStat *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyPushSupplierStat *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyPushSupplierStat *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyPushSupplierStat>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushSupplierStat &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyPushSupplierStat *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierStat>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushSupplierStat *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierStat>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyPushSupplierStat *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyPushSupplierStat *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyPushSupplierStat *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyPushSupplierStat>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyPushSupplierStat::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyPushSupplierStat,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyConsumerStates &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxyConsumerStates *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyConsumerStates>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyConsumerStates,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyConsumerStates *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyConsumerStates>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxyConsumerStates,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxyConsumerStates *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxyConsumerStates *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxyConsumerStates *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxyConsumerStates>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxyConsumerStates,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyConsumerStates &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxyConsumerStates *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyConsumerStates>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyConsumerStates,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyConsumerStates *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyConsumerStates>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxyConsumerStates,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxyConsumerStates *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxyConsumerStates *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxyConsumerStates *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxyConsumerStates>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxyConsumerStates::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxyConsumerStates,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxySupplierStates &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ProxySupplierStates *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxySupplierStates>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxySupplierStates,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxySupplierStates *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxySupplierStates>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ProxySupplierStates,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ProxySupplierStates *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ProxySupplierStates *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ProxySupplierStates *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ProxySupplierStates>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ProxySupplierStates,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxySupplierStates &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ProxySupplierStates *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxySupplierStates>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxySupplierStates,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxySupplierStates *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxySupplierStates>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ProxySupplierStates,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ProxySupplierStates *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ProxySupplierStates *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ProxySupplierStates *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ProxySupplierStates>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ProxySupplierStates::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ProxySupplierStates,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ConsumerAdminState &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::ConsumerAdminState *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ConsumerAdminState>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ConsumerAdminState,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::ConsumerAdminState *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ConsumerAdminState>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_ConsumerAdminState,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::ConsumerAdminState *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::ConsumerAdminState *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::ConsumerAdminState *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::ConsumerAdminState>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_ConsumerAdminState,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ConsumerAdminState &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::ConsumerAdminState *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ConsumerAdminState>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ConsumerAdminState,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ConsumerAdminState *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ConsumerAdminState>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_ConsumerAdminState,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::ConsumerAdminState *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::ConsumerAdminState *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::ConsumerAdminState *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::ConsumerAdminState>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::ConsumerAdminState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_ConsumerAdminState,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::SupplierAdminState &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::SupplierAdminState *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::SupplierAdminState>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_SupplierAdminState,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::SupplierAdminState *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::SupplierAdminState>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_SupplierAdminState,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::SupplierAdminState *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::SupplierAdminState *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::SupplierAdminState *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::SupplierAdminState>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_SupplierAdminState,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::SupplierAdminState &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::SupplierAdminState *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::SupplierAdminState>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_SupplierAdminState,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::SupplierAdminState *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::SupplierAdminState>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_SupplierAdminState,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::SupplierAdminState *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::SupplierAdminState *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::SupplierAdminState *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::SupplierAdminState>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::SupplierAdminState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_SupplierAdminState,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::CachedResult &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::CachedResult *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CachedResult>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_CachedResult,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::CachedResult *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CachedResult>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_CachedResult,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::CachedResult *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::CachedResult *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::CachedResult *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CachedResult>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_CachedResult,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::CachedResult &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::CachedResult *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CachedResult>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_CachedResult,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::CachedResult *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CachedResult>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_CachedResult,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::CachedResult *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::CachedResult *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::CachedResult *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CachedResult>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::CachedResult::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_CachedResult,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::CacheEntry &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::CacheEntry *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CacheEntry>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_CacheEntry,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::CacheEntry *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CacheEntry>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_CacheEntry,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::CacheEntry *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::CacheEntry *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::CacheEntry *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CacheEntry>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_CacheEntry,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::CacheEntry &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::CacheEntry *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CacheEntry>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_CacheEntry,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::CacheEntry *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CacheEntry>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_CacheEntry,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::CacheEntry *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::CacheEntry *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::CacheEntry *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CacheEntry>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::CacheEntry::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_CacheEntry,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::CachedOptionResults &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::CachedOptionResults *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CachedOptionResults>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_CachedOptionResults,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::CachedOptionResults *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CachedOptionResults>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_CachedOptionResults,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::CachedOptionResults *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::CachedOptionResults *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::CachedOptionResults *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::CachedOptionResults>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_CachedOptionResults,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::CachedOptionResults &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::CachedOptionResults *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CachedOptionResults>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_CachedOptionResults,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::CachedOptionResults *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CachedOptionResults>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_CachedOptionResults,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::CachedOptionResults *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::CachedOptionResults *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::CachedOptionResults *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::CachedOptionResults>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::CachedOptionResults::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_CachedOptionResults,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::EventChannelState &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::EventChannelState *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::EventChannelState>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_EventChannelState,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::EventChannelState *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::EventChannelState>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_EventChannelState,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::EventChannelState *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::EventChannelState *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::EventChannelState *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::EventChannelState>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_EventChannelState,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::EventChannelState &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::EventChannelState *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::EventChannelState>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_EventChannelState,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelState *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::EventChannelState>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_EventChannelState,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelState *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::EventChannelState *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::EventChannelState *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::EventChannelState>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::EventChannelState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_EventChannelState,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::Connect_push_consumer_param &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::Connect_push_consumer_param *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Connect_push_consumer_param>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::Connect_push_consumer_param *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Connect_push_consumer_param>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::Connect_push_consumer_param *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::Connect_push_consumer_param *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::Connect_push_consumer_param *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Connect_push_consumer_param>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::Connect_push_consumer_param &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::Connect_push_consumer_param *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Connect_push_consumer_param>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::Connect_push_consumer_param *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Connect_push_consumer_param>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::Connect_push_consumer_param *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::Connect_push_consumer_param *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::Connect_push_consumer_param *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Connect_push_consumer_param>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::Connect_push_consumer_param::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_Connect_push_consumer_param,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::Connect_push_supplier_param &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::Connect_push_supplier_param *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Connect_push_supplier_param>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::Connect_push_supplier_param *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Connect_push_supplier_param>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::Connect_push_supplier_param *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::Connect_push_supplier_param *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::Connect_push_supplier_param *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Connect_push_supplier_param>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::Connect_push_supplier_param &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::Connect_push_supplier_param *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Connect_push_supplier_param>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::Connect_push_supplier_param *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Connect_push_supplier_param>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::Connect_push_supplier_param *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::Connect_push_supplier_param *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::Connect_push_supplier_param *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Connect_push_supplier_param>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::Connect_push_supplier_param::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_Connect_push_supplier_param,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::OperationType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::FtRtecEventChannelAdmin::OperationType>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::_tc_OperationType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::OperationType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::FtRtecEventChannelAdmin::OperationType>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::_tc_OperationType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::OperationType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<FtRtecEventChannelAdmin::OperationType>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::_tc_OperationType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::OperationType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<FtRtecEventChannelAdmin::OperationType>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::_tc_OperationType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::OperationParam &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::OperationParam *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::OperationParam>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_OperationParam,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::OperationParam *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::OperationParam>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_OperationParam,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::OperationParam *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::OperationParam *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::OperationParam *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::OperationParam>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_OperationParam,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::OperationParam &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::OperationParam *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::OperationParam>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_OperationParam,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::OperationParam *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::OperationParam>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_OperationParam,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::OperationParam *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::OperationParam *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::OperationParam *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::OperationParam>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::OperationParam::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_OperationParam,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::Operation &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::Operation *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Operation>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::Operation::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_Operation,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      FtRtecEventChannelAdmin::Operation *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Operation>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::Operation::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_Operation,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::Operation *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::Operation *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::Operation *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::Operation>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::Operation::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_Operation,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::Operation &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::Operation *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Operation>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::Operation::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_Operation,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::Operation *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Operation>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::Operation::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_Operation,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::Operation *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::Operation *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::Operation *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::Operation>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::Operation::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_Operation,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FtRtecEventChannelAdmin::EventChannelFacade>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFacade_ptr _tao_elem)
  {
    EventChannelFacade_ptr _tao_objptr =
      EventChannelFacade::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannelFacade_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannelFacade>::insert (
        _tao_any,
        EventChannelFacade::_tao_any_destructor,
        _tc_EventChannelFacade,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannelFacade_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannelFacade>::extract (
          _tao_any,
          EventChannelFacade::_tao_any_destructor,
          _tc_EventChannelFacade,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelFacade_ptr _tao_elem)
{
  FtRtecEventChannelAdmin::EventChannelFacade_ptr _tao_objptr =
    FtRtecEventChannelAdmin::EventChannelFacade::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelFacade_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FtRtecEventChannelAdmin::EventChannelFacade>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::EventChannelFacade::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_EventChannelFacade,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelFacade_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FtRtecEventChannelAdmin::EventChannelFacade>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::EventChannelFacade::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_EventChannelFacade,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<FtRtecEventChannelAdmin::InvalidState>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::InvalidState &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::InvalidState>::insert_copy (
        _tao_any,
        ::FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_InvalidState,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::InvalidState *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::InvalidState>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_InvalidState,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::InvalidState *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::InvalidState *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::InvalidState *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::InvalidState>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_InvalidState,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::InvalidState &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::InvalidState>::insert_copy (
      _tao_any,
      FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_InvalidState,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::InvalidState *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::InvalidState>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_InvalidState,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::InvalidState *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::InvalidState *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::InvalidState *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::InvalidState>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::InvalidState::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_InvalidState,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FtRtecEventChannelAdmin::EventChannel>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr _tao_elem)
  {
    EventChannel_ptr _tao_objptr =
      EventChannel::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      EventChannel_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<EventChannel>::insert (
        _tao_any,
        EventChannel::_tao_any_destructor,
        _tc_EventChannel,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      EventChannel_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<EventChannel>::extract (
          _tao_any,
          EventChannel::_tao_any_destructor,
          _tc_EventChannel,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannel_ptr _tao_elem)
{
  FtRtecEventChannelAdmin::EventChannel_ptr _tao_objptr =
    FtRtecEventChannelAdmin::EventChannel::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannel_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FtRtecEventChannelAdmin::EventChannel>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::EventChannel::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_EventChannel,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannel_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FtRtecEventChannelAdmin::EventChannel>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::EventChannel::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_EventChannel,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FtRtecEventChannelAdmin
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::EventChannelList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::FtRtecEventChannelAdmin::EventChannelList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::EventChannelList>::insert_copy (
          _tao_any,
          ::FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_EventChannelList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::EventChannelList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::EventChannelList>::insert (
        _tao_any,
        ::FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor,
        ::FtRtecEventChannelAdmin::_tc_EventChannelList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::FtRtecEventChannelAdmin::EventChannelList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::FtRtecEventChannelAdmin::EventChannelList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FtRtecEventChannelAdmin::EventChannelList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::FtRtecEventChannelAdmin::EventChannelList>::extract (
          _tao_any,
          ::FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor,
          ::FtRtecEventChannelAdmin::_tc_EventChannelList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::EventChannelList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<FtRtecEventChannelAdmin::EventChannelList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::EventChannelList>::insert_copy (
        _tao_any,
        FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_EventChannelList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::EventChannelList>::insert (
      _tao_any,
      FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor,
      FtRtecEventChannelAdmin::_tc_EventChannelList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    FtRtecEventChannelAdmin::EventChannelList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const FtRtecEventChannelAdmin::EventChannelList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FtRtecEventChannelAdmin::EventChannelList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<FtRtecEventChannelAdmin::EventChannelList>::extract (
        _tao_any,
        FtRtecEventChannelAdmin::EventChannelList::_tao_any_destructor,
        FtRtecEventChannelAdmin::_tc_EventChannelList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.push_supplier.in (),
        strm
      ) &&
    (strm << _tao_aggregate.qos);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.push_supplier.out ()) &&
    (strm >> _tao_aggregate.qos);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_cs.cpp:82



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case false:
    case true:
      {
        result = strm << _tao_union.info ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyPushConsumerConnectionParamter &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case false:
    case true:
      {
        FtRtecEventChannelAdmin::ProxyPushConsumerConnectionInfo _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.info (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyPushConsumerStat &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.object_id) &&
    (strm << _tao_aggregate.parameter);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyPushConsumerStat &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.object_id) &&
    (strm >> _tao_aggregate.parameter);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.push_consumer.in (),
        strm
      ) &&
    (strm << _tao_aggregate.qos);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.push_consumer.out ()) &&
    (strm >> _tao_aggregate.qos);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_cs.cpp:82



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &_tao_union
  )
{
  ::ACE_OutputCDR::from_boolean tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case false:
    case true:
      {
        result = strm << _tao_union.info ();
      }
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyPushSupplierConnectionParamter &_tao_union
  )
{
  CORBA::Boolean _tao_discriminant;
  ::ACE_InputCDR::to_boolean tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case false:
    case true:
      {
        FtRtecEventChannelAdmin::ProxyPushSupplierConnectionInfo _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.info (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyPushSupplierStat &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.object_id) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.suspended)) &&
    (strm << _tao_aggregate.parameter);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyPushSupplierStat &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.object_id) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.suspended)) &&
    (strm >> _tao_aggregate.parameter);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FtRtecEventChannelAdmin_ProxyConsumerStates_CPP_
#define _TAO_CDR_OP_FtRtecEventChannelAdmin_ProxyConsumerStates_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxyConsumerStates &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxyConsumerStates &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FtRtecEventChannelAdmin_ProxyConsumerStates_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FtRtecEventChannelAdmin_ProxySupplierStates_CPP_
#define _TAO_CDR_OP_FtRtecEventChannelAdmin_ProxySupplierStates_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ProxySupplierStates &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ProxySupplierStates &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FtRtecEventChannelAdmin_ProxySupplierStates_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::ConsumerAdminState &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.proxies);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::ConsumerAdminState &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.proxies);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::SupplierAdminState &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.proxies);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::SupplierAdminState &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.proxies);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::CachedResult &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.retention_id) &&
    (strm << _tao_aggregate.result);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::CachedResult &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.retention_id) &&
    (strm >> _tao_aggregate.result);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::CacheEntry &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.client_id.in ()) &&
    (strm << _tao_aggregate.cached_result);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::CacheEntry &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.client_id.out ()) &&
    (strm >> _tao_aggregate.cached_result);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FtRtecEventChannelAdmin_CachedOptionResults_CPP_
#define _TAO_CDR_OP_FtRtecEventChannelAdmin_CachedOptionResults_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::CachedOptionResults &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::CachedOptionResults &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FtRtecEventChannelAdmin_CachedOptionResults_CPP_ */

// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::EventChannelState &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.cached_operation_results) &&
    (strm << _tao_aggregate.supplier_admin_state) &&
    (strm << _tao_aggregate.consumer_admin_state);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::EventChannelState &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.cached_operation_results) &&
    (strm >> _tao_aggregate.supplier_admin_state) &&
    (strm >> _tao_aggregate.consumer_admin_state);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::Connect_push_consumer_param &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.push_consumer.in (),
        strm
      ) &&
    (strm << _tao_aggregate.qos);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::Connect_push_consumer_param &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.push_consumer.out ()) &&
    (strm >> _tao_aggregate.qos);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::Connect_push_supplier_param &_tao_aggregate)
{
  return
    ::CORBA::Object::marshal (
        _tao_aggregate.push_supplier.in (),
        strm
      ) &&
    (strm << _tao_aggregate.qos);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::Connect_push_supplier_param &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.push_supplier.out ()) &&
    (strm >> _tao_aggregate.qos);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, FtRtecEventChannelAdmin::OperationType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, FtRtecEventChannelAdmin::OperationType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<FtRtecEventChannelAdmin::OperationType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_cs.cpp:82



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::OperationParam &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case FtRtecEventChannelAdmin::CONNECT_PUSH_SUPPLIER:
      {
        result = strm << _tao_union.connect_supplier_param ();
      }
      break;
    case FtRtecEventChannelAdmin::CONNECT_PUSH_CONSUMER:
      {
        result = strm << _tao_union.connect_consumer_param ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::OperationParam &_tao_union
  )
{
  FtRtecEventChannelAdmin::OperationType _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case FtRtecEventChannelAdmin::CONNECT_PUSH_SUPPLIER:
      {
        FtRtecEventChannelAdmin::Connect_push_supplier_param _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.connect_supplier_param (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case FtRtecEventChannelAdmin::CONNECT_PUSH_CONSUMER:
      {
        FtRtecEventChannelAdmin::Connect_push_consumer_param _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.connect_consumer_param (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::Operation &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.object_id) &&
    (strm << _tao_aggregate.param);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::Operation &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.object_id) &&
    (strm >> _tao_aggregate.param);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::EventChannelFacade_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::EventChannelFacade_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FtRtecEventChannelAdmin::EventChannelFacade RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FtRtecEventChannelAdmin__TAO_EventChannelFacade_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::InvalidState &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    FtRtecEventChannelAdmin::InvalidState&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:53


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::EventChannel_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::EventChannel_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FtRtecEventChannelAdmin::EventChannel RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        FtRtecEventChannelAdmin__TAO_EventChannel_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// e:\sca\ace_diab\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_FtRtecEventChannelAdmin_EventChannelList_CPP_
#define _TAO_CDR_OP_FtRtecEventChannelAdmin_EventChannelList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FtRtecEventChannelAdmin::EventChannelList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FtRtecEventChannelAdmin::EventChannelList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_FtRtecEventChannelAdmin_EventChannelList_CPP_ */


TAO_END_VERSIONED_NAMESPACE_DECL


