// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_IDL_COSEVENTCOMMC_NT2VDR_H_
#define _TAO_IDL_COSEVENTCOMMC_NT2VDR_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/CosEvent/event_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_Event_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:162

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace CosEventComm
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

  class TAO_Event_Export Disconnected : public ::CORBA::UserException
  {
  public:
    
    Disconnected (void);
    Disconnected (const Disconnected &);
    ~Disconnected (void);

    Disconnected &operator= (const Disconnected &);

    static void _tao_any_destructor (void *);

    static Disconnected *_downcast ( ::CORBA::Exception *);
    static const Disconnected *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);
    

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Event_Export ::CORBA::TypeCode_ptr const _tc_Disconnected;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSEVENTCOMM_PUSHCONSUMER__VAR_OUT_CH_)
#define _COSEVENTCOMM_PUSHCONSUMER__VAR_OUT_CH_

  class PushConsumer;
  typedef PushConsumer *PushConsumer_ptr;

  typedef
    TAO_Objref_Var_T<
        PushConsumer
      >
    PushConsumer_var;
  
  typedef
    TAO_Objref_Out_T<
        PushConsumer
      >
    PushConsumer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Event_Export PushConsumer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PushConsumer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PushConsumer_ptr _ptr_type;
    typedef PushConsumer_var _var_type;
    typedef PushConsumer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PushConsumer_ptr _duplicate (PushConsumer_ptr obj);

    static void _tao_release (PushConsumer_ptr obj);

    static PushConsumer_ptr _narrow (::CORBA::Object_ptr obj);
    static PushConsumer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PushConsumer_ptr _nil (void);

    virtual void push (
      const ::CORBA::Any & data);

    virtual void disconnect_push_consumer (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PushConsumer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PushConsumer (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosEventComm_PushConsumer_setup_collocation (void);

    // Concrete non-local interface only.
    PushConsumer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PushConsumer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PushConsumer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PushConsumer (const PushConsumer &);

    void operator= (const PushConsumer &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Event_Export ::CORBA::TypeCode_ptr const _tc_PushConsumer;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSEVENTCOMM_PUSHSUPPLIER__VAR_OUT_CH_)
#define _COSEVENTCOMM_PUSHSUPPLIER__VAR_OUT_CH_

  class PushSupplier;
  typedef PushSupplier *PushSupplier_ptr;

  typedef
    TAO_Objref_Var_T<
        PushSupplier
      >
    PushSupplier_var;
  
  typedef
    TAO_Objref_Out_T<
        PushSupplier
      >
    PushSupplier_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Event_Export PushSupplier
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PushSupplier>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PushSupplier_ptr _ptr_type;
    typedef PushSupplier_var _var_type;
    typedef PushSupplier_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PushSupplier_ptr _duplicate (PushSupplier_ptr obj);

    static void _tao_release (PushSupplier_ptr obj);

    static PushSupplier_ptr _narrow (::CORBA::Object_ptr obj);
    static PushSupplier_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PushSupplier_ptr _nil (void);

    virtual void disconnect_push_supplier (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PushSupplier_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PushSupplier (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosEventComm_PushSupplier_setup_collocation (void);

    // Concrete non-local interface only.
    PushSupplier (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PushSupplier (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PushSupplier (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PushSupplier (const PushSupplier &);

    void operator= (const PushSupplier &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Event_Export ::CORBA::TypeCode_ptr const _tc_PushSupplier;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSEVENTCOMM_PULLCONSUMER__VAR_OUT_CH_)
#define _COSEVENTCOMM_PULLCONSUMER__VAR_OUT_CH_

  class PullConsumer;
  typedef PullConsumer *PullConsumer_ptr;

  typedef
    TAO_Objref_Var_T<
        PullConsumer
      >
    PullConsumer_var;
  
  typedef
    TAO_Objref_Out_T<
        PullConsumer
      >
    PullConsumer_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Event_Export PullConsumer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PullConsumer>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PullConsumer_ptr _ptr_type;
    typedef PullConsumer_var _var_type;
    typedef PullConsumer_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PullConsumer_ptr _duplicate (PullConsumer_ptr obj);

    static void _tao_release (PullConsumer_ptr obj);

    static PullConsumer_ptr _narrow (::CORBA::Object_ptr obj);
    static PullConsumer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PullConsumer_ptr _nil (void);

    virtual void disconnect_pull_consumer (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PullConsumer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PullConsumer (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosEventComm_PullConsumer_setup_collocation (void);

    // Concrete non-local interface only.
    PullConsumer (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PullConsumer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PullConsumer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PullConsumer (const PullConsumer &);

    void operator= (const PullConsumer &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Event_Export ::CORBA::TypeCode_ptr const _tc_PullConsumer;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_COSEVENTCOMM_PULLSUPPLIER__VAR_OUT_CH_)
#define _COSEVENTCOMM_PULLSUPPLIER__VAR_OUT_CH_

  class PullSupplier;
  typedef PullSupplier *PullSupplier_ptr;

  typedef
    TAO_Objref_Var_T<
        PullSupplier
      >
    PullSupplier_var;
  
  typedef
    TAO_Objref_Out_T<
        PullSupplier
      >
    PullSupplier_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_Event_Export PullSupplier
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<PullSupplier>;

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PullSupplier_ptr _ptr_type;
    typedef PullSupplier_var _var_type;
    typedef PullSupplier_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PullSupplier_ptr _duplicate (PullSupplier_ptr obj);

    static void _tao_release (PullSupplier_ptr obj);

    static PullSupplier_ptr _narrow (::CORBA::Object_ptr obj);
    static PullSupplier_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PullSupplier_ptr _nil (void);

    virtual ::CORBA::Any * pull (
      void);

    virtual ::CORBA::Any * try_pull (
      ::CORBA::Boolean_out has_event);

    virtual void disconnect_pull_supplier (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_PullSupplier_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    PullSupplier (void);

    // These methods traverse the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void CosEventComm_PullSupplier_setup_collocation (void);

    // Concrete non-local interface only.
    PullSupplier (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    PullSupplier (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~PullSupplier (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PullSupplier (const PullSupplier &);

    void operator= (const PullSupplier &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_Event_Export ::CORBA::TypeCode_ptr const _tc_PullSupplier;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module CosEventComm

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSEVENTCOMM_PUSHCONSUMER__ARG_TRAITS_)
#define _COSEVENTCOMM_PUSHCONSUMER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosEventComm::PushConsumer>
    : public
        Object_Arg_Traits_T<
            ::CosEventComm::PushConsumer_ptr,
            ::CosEventComm::PushConsumer_var,
            ::CosEventComm::PushConsumer_out,
            TAO::Objref_Traits<CosEventComm::PushConsumer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSEVENTCOMM_PUSHSUPPLIER__ARG_TRAITS_)
#define _COSEVENTCOMM_PUSHSUPPLIER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosEventComm::PushSupplier>
    : public
        Object_Arg_Traits_T<
            ::CosEventComm::PushSupplier_ptr,
            ::CosEventComm::PushSupplier_var,
            ::CosEventComm::PushSupplier_out,
            TAO::Objref_Traits<CosEventComm::PushSupplier>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSEVENTCOMM_PULLCONSUMER__ARG_TRAITS_)
#define _COSEVENTCOMM_PULLCONSUMER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosEventComm::PullConsumer>
    : public
        Object_Arg_Traits_T<
            ::CosEventComm::PullConsumer_ptr,
            ::CosEventComm::PullConsumer_var,
            ::CosEventComm::PullConsumer_out,
            TAO::Objref_Traits<CosEventComm::PullConsumer>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_COSEVENTCOMM_PULLSUPPLIER__ARG_TRAITS_)
#define _COSEVENTCOMM_PULLSUPPLIER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::CosEventComm::PullSupplier>
    : public
        Object_Arg_Traits_T<
            ::CosEventComm::PullSupplier_ptr,
            ::CosEventComm::PullSupplier_var,
            ::CosEventComm::PullSupplier_out,
            TAO::Objref_Traits<CosEventComm::PullSupplier>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_ch.cpp:204

extern TAO_Event_Export
TAO::Collocation_Proxy_Broker *
(*CosEventComm__TAO_PushConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Event_Export
TAO::Collocation_Proxy_Broker *
(*CosEventComm__TAO_PushSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Event_Export
TAO::Collocation_Proxy_Broker *
(*CosEventComm__TAO_PullConsumer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

extern TAO_Event_Export
TAO::Collocation_Proxy_Broker *
(*CosEventComm__TAO_PullSupplier_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj);

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_COSEVENTCOMM_PUSHCONSUMER__TRAITS_)
#define _COSEVENTCOMM_PUSHCONSUMER__TRAITS_

  template<>
  struct TAO_Event_Export Objref_Traits< ::CosEventComm::PushConsumer>
  {
    static ::CosEventComm::PushConsumer_ptr duplicate (
        ::CosEventComm::PushConsumer_ptr p);
    static void release (
        ::CosEventComm::PushConsumer_ptr p);
    static ::CosEventComm::PushConsumer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosEventComm::PushConsumer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSEVENTCOMM_PUSHSUPPLIER__TRAITS_)
#define _COSEVENTCOMM_PUSHSUPPLIER__TRAITS_

  template<>
  struct TAO_Event_Export Objref_Traits< ::CosEventComm::PushSupplier>
  {
    static ::CosEventComm::PushSupplier_ptr duplicate (
        ::CosEventComm::PushSupplier_ptr p);
    static void release (
        ::CosEventComm::PushSupplier_ptr p);
    static ::CosEventComm::PushSupplier_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosEventComm::PushSupplier_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSEVENTCOMM_PULLCONSUMER__TRAITS_)
#define _COSEVENTCOMM_PULLCONSUMER__TRAITS_

  template<>
  struct TAO_Event_Export Objref_Traits< ::CosEventComm::PullConsumer>
  {
    static ::CosEventComm::PullConsumer_ptr duplicate (
        ::CosEventComm::PullConsumer_ptr p);
    static void release (
        ::CosEventComm::PullConsumer_ptr p);
    static ::CosEventComm::PullConsumer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosEventComm::PullConsumer_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_COSEVENTCOMM_PULLSUPPLIER__TRAITS_)
#define _COSEVENTCOMM_PULLSUPPLIER__TRAITS_

  template<>
  struct TAO_Event_Export Objref_Traits< ::CosEventComm::PullSupplier>
  {
    static ::CosEventComm::PullSupplier_ptr duplicate (
        ::CosEventComm::PullSupplier_ptr p);
    static void release (
        ::CosEventComm::PullSupplier_ptr p);
    static ::CosEventComm::PullSupplier_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::CosEventComm::PullSupplier_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  

  TAO_Event_Export void operator<<= (::CORBA::Any &, const ::CosEventComm::Disconnected &); // copying version
  TAO_Event_Export void operator<<= (::CORBA::Any &, ::CosEventComm::Disconnected*); // noncopying version
  TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::CosEventComm::Disconnected *&); // deprecated
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::CosEventComm::Disconnected *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Event_Export void operator<<= (::CORBA::Any &, const CosEventComm::Disconnected &); // copying version
TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::Disconnected*); // noncopying version
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosEventComm::Disconnected *&); // deprecated
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const CosEventComm::Disconnected *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PushConsumer_ptr); // copying
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PushConsumer_ptr *); // non-copying
  TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PushConsumer_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PushConsumer_ptr); // copying
TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PushConsumer_ptr *); // non-copying
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosEventComm::PushConsumer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PushSupplier_ptr); // copying
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PushSupplier_ptr *); // non-copying
  TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PushSupplier_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PushSupplier_ptr); // copying
TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PushSupplier_ptr *); // non-copying
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosEventComm::PushSupplier_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PullConsumer_ptr); // copying
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PullConsumer_ptr *); // non-copying
  TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PullConsumer_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PullConsumer_ptr); // copying
TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PullConsumer_ptr *); // non-copying
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosEventComm::PullConsumer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace CosEventComm
{
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PullSupplier_ptr); // copying
  TAO_Event_Export void operator<<= ( ::CORBA::Any &, PullSupplier_ptr *); // non-copying
  TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PullSupplier_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PullSupplier_ptr); // copying
TAO_Event_Export void operator<<= (::CORBA::Any &, CosEventComm::PullSupplier_ptr *); // non-copying
TAO_Event_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CosEventComm::PullSupplier_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_ch.cpp:43

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Event_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosEventComm::Disconnected &);
TAO_Event_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosEventComm::Disconnected &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosEventComm::PushConsumer_ptr );
TAO_Event_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosEventComm::PushConsumer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosEventComm::PushSupplier_ptr );
TAO_Event_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosEventComm::PushSupplier_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosEventComm::PullConsumer_ptr );
TAO_Event_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosEventComm::PullConsumer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:47


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Event_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const CosEventComm::PullSupplier_ptr );
TAO_Event_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, CosEventComm::PullSupplier_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "CosEventCommC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

