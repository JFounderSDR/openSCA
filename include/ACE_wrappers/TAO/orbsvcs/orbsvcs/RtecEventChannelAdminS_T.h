// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:598

#ifndef _TAO_IDL_RTECEVENTCHANNELADMINS_T_DWISMC_H_
#define _TAO_IDL_RTECEVENTCHANNELADMINS_T_DWISMC_H_



TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_root/root_sth.cpp:70

namespace POA_RtecEventChannelAdmin
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/tie_sh.cpp:78

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ProxyPushSupplier_tie : public ProxyPushSupplier
  {
  public:
    /// the T& ctor
    ProxyPushSupplier_tie (T &t);
    /// ctor taking a POA
    ProxyPushSupplier_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ProxyPushSupplier_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ProxyPushSupplier_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ProxyPushSupplier_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void disconnect_push_supplier (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void connect_push_consumer (
      ::RtecEventComm::PushConsumer_ptr,
      const ::RtecEventChannelAdmin::ConsumerQOS &);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void suspend_connection (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void resume_connection (
      void);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ProxyPushSupplier_tie (const ProxyPushSupplier_tie &);
    void operator= (const ProxyPushSupplier_tie &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/tie_sh.cpp:78

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ProxyPushConsumer_tie : public ProxyPushConsumer
  {
  public:
    /// the T& ctor
    ProxyPushConsumer_tie (T &t);
    /// ctor taking a POA
    ProxyPushConsumer_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ProxyPushConsumer_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ProxyPushConsumer_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ProxyPushConsumer_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void push (
      const ::RtecEventComm::EventSet &);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void disconnect_push_consumer (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void connect_push_supplier (
      ::RtecEventComm::PushSupplier_ptr,
      const ::RtecEventChannelAdmin::SupplierQOS &);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ProxyPushConsumer_tie (const ProxyPushConsumer_tie &);
    void operator= (const ProxyPushConsumer_tie &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/tie_sh.cpp:78

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ConsumerAdmin_tie : public ConsumerAdmin
  {
  public:
    /// the T& ctor
    ConsumerAdmin_tie (T &t);
    /// ctor taking a POA
    ConsumerAdmin_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ConsumerAdmin_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ConsumerAdmin_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ConsumerAdmin_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    ::RtecEventChannelAdmin::ProxyPushSupplier_ptr obtain_push_supplier (
      void);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ConsumerAdmin_tie (const ConsumerAdmin_tie &);
    void operator= (const ConsumerAdmin_tie &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/tie_sh.cpp:78

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  SupplierAdmin_tie : public SupplierAdmin
  {
  public:
    /// the T& ctor
    SupplierAdmin_tie (T &t);
    /// ctor taking a POA
    SupplierAdmin_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    SupplierAdmin_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    SupplierAdmin_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~SupplierAdmin_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    ::RtecEventChannelAdmin::ProxyPushConsumer_ptr obtain_push_consumer (
      void);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    SupplierAdmin_tie (const SupplierAdmin_tie &);
    void operator= (const SupplierAdmin_tie &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/tie_sh.cpp:78

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  Observer_tie : public Observer
  {
  public:
    /// the T& ctor
    Observer_tie (T &t);
    /// ctor taking a POA
    Observer_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    Observer_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    Observer_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~Observer_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void update_consumer (
      const ::RtecEventChannelAdmin::ConsumerQOS &);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void update_supplier (
      const ::RtecEventChannelAdmin::SupplierQOS &);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    Observer_tie (const Observer_tie &);
    void operator= (const Observer_tie &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/tie_sh.cpp:78

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  EventChannel_tie : public EventChannel
  {
  public:
    /// the T& ctor
    EventChannel_tie (T &t);
    /// ctor taking a POA
    EventChannel_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    EventChannel_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    EventChannel_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~EventChannel_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    ::RtecEventChannelAdmin::ConsumerAdmin_ptr for_consumers (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    ::RtecEventChannelAdmin::SupplierAdmin_ptr for_suppliers (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void destroy (
      void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    ::RtecEventChannelAdmin::Observer_Handle append_observer (
      ::RtecEventChannelAdmin::Observer_ptr);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/tie_sh.cpp:57

    void remove_observer (
      ::RtecEventChannelAdmin::Observer_Handle);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    EventChannel_tie (const EventChannel_tie &);
    void operator= (const EventChannel_tie &);
  };
} // module RtecEventChannelAdmin

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1748


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
#include "RtecEventChannelAdminS_T.cpp"
#endif /* defined REQUIRED SOURCE */

#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
#pragma implementation ("RtecEventChannelAdminS_T.cpp")
#endif /* defined REQUIRED PRAGMA */

#endif /* ifndef */

