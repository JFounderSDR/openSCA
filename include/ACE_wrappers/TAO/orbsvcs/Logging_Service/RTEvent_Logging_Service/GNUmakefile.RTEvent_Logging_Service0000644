# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.RTEvent_Logging_Service
#
# $Id: gnu.mpd 1861 2011-08-31 16:18:08Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.RTEvent_Logging_Service
DEPENDENCY_FILE  = .depend.RTEvent_Logging_Service
BIN_UNCHECKED    = tao_tls_rtevent

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  RTEvent_Logging_Server.cpp \
  RTEvent_Logging_Service.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -lTAO_RTEventLogAdmin_Serv -lTAO_RTSched -lTAO_RTEvent_Serv -lTAO_DsLogAdmin_Serv -lTAO_Utils -lACE_ETCL_Parser -lTAO_ETCL -lACE_ETCL -lTAO_DynamicAny -lTAO_RTEventLogAdmin_Skel -lTAO_RTEvent_Skel -lTAO_DsLogAdmin_Skel -lTAO_RTEventLogAdmin -lTAO_RTEvent -lTAO_Svc_Utils -lTAO_Messaging -lTAO_PI -lTAO_CodecFactory -lTAO_PortableServer -lTAO_Valuetype -lTAO_DsLogAdmin -lTAO_IORTable -lTAO_CosNaming -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = ../../../../bin/tao_idl
TAO_IDL_DEP = ../../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = rtp

ifeq ($(INSBIN),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(if $(ARCH),./$(ARCH))

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/RTEvent_Logging_Service
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_RTEventLogAdmin_Serv TAO_RTSched TAO_RTEvent_Serv TAO_DsLogAdmin_Serv TAO_Utils ACE_ETCL_Parser TAO_ETCL ACE_ETCL TAO_DynamicAny TAO_RTEventLogAdmin_Skel TAO_RTEvent_Skel TAO_DsLogAdmin_Skel TAO_RTEventLogAdmin TAO_RTEvent TAO_Svc_Utils TAO_Messaging TAO_PI TAO_CodecFactory TAO_PortableServer TAO_Valuetype TAO_DsLogAdmin TAO_IORTable TAO_CosNaming TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../../lib $(if $(ARCH),../../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_RTEventLogAdmin_Serv TAO_RTSched TAO_RTEvent_Serv TAO_DsLogAdmin_Serv TAO_Utils ACE_ETCL_Parser TAO_ETCL ACE_ETCL TAO_DynamicAny TAO_RTEventLogAdmin_Skel TAO_RTEvent_Skel TAO_DsLogAdmin_Skel TAO_RTEventLogAdmin TAO_RTEvent TAO_Svc_Utils TAO_Messaging TAO_PI TAO_CodecFactory TAO_PortableServer TAO_Valuetype TAO_DsLogAdmin TAO_IORTable TAO_CosNaming TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(corba_messaging),1)
ifneq ($(ace_for_tao),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
ifdef ARCH
  ARCH_BIN = $(ARCH)/$(BIN)
endif #ARCH
else
  all: lib_warning
endif
else
  all: avoid_warning
endif
else
  all: require_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(INSBIN),)
ifneq ($(INSBIN),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/$(if $(ARCH),$(ARCH)/)%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../../lib $(if $(ARCH),-L../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../../.. -I../../.. -I../../../orbsvcs
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo RTEvent_Logging_Service will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(corba_messaging),1)
requires_disabled_macros += corba_messaging
endif
require_warning:
	@echo RTEvent_Logging_Service will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

ifeq ($(ace_for_tao),1)
avoids_enabled_macros += ace_for_tao
endif
avoid_warning:
	@echo RTEvent_Logging_Service will not be built due to the following enabled make macros: $(avoids_enabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
PATH              := $(PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),1)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, TAO_RTEventLogAdmin_Serv TAO_RTSched TAO_RTEvent_Serv TAO_DsLogAdmin_Serv TAO_Utils ACE_ETCL_Parser TAO_ETCL ACE_ETCL TAO_DynamicAny TAO_RTEventLogAdmin_Skel TAO_RTEvent_Skel TAO_DsLogAdmin_Skel TAO_RTEventLogAdmin TAO_RTEvent TAO_Svc_Utils TAO_Messaging TAO_PI TAO_CodecFactory TAO_PortableServer TAO_Valuetype TAO_DsLogAdmin TAO_IORTable TAO_CosNaming TAO_AnyTypeCode TAO ACE , $(foreach libpath, . ../../../../lib, $(wildcard $(libpath)/$(LIB_PREFIX)$(lib).$(LIBEXT))))
  endif
endif

$(VBIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
  ifneq (,$(LINK.cc.override))
	$(LINK.cc.override)
  else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $(filter-out %.a,$^) $(VLDLIBS) $(POSTLINK)
  endif
endif

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(corba_messaging),1)
ifneq ($(ace_for_tao),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

INST_TAGS = exe_output
INST_LOCATIONS = -o exe_output=bin

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
ifeq ($(corba_messaging),1)
ifneq ($(ace_for_tao),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif
endif
endif

#BEGIN MPC-Generated Install Info
#documentation_files:
#README
#
#build_files:
#RTEvent_Logging_Service.mpc
#
#header_files:
#RTEvent_Logging_Service.h
#
#source_files:
#RTEvent_Logging_Server.cpp
#RTEvent_Logging_Service.cpp
#
#exe_output:
# tao_tls_rtevent

#END MPC-Generated Install Info

