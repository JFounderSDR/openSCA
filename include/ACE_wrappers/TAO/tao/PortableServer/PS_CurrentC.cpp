// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "PS_CurrentC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for PortableServer::Current.

PortableServer::Current_ptr
TAO::Objref_Traits<PortableServer::Current>::duplicate (
    PortableServer::Current_ptr p)
{
  return PortableServer::Current::_duplicate (p);
}

void
TAO::Objref_Traits<PortableServer::Current>::release (
    PortableServer::Current_ptr p)
{
  ::CORBA::release (p);
}

PortableServer::Current_ptr
TAO::Objref_Traits<PortableServer::Current>::nil (void)
{
  return PortableServer::Current::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<PortableServer::Current>::marshal (
    const PortableServer::Current_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::Current::NoContext::NoContext (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/Current/NoContext:2.3",
        "NoContext"
      )
{
}

PortableServer::Current::NoContext::~NoContext (void)
{
}

PortableServer::Current::NoContext::NoContext (const ::PortableServer::Current::NoContext &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::Current::NoContext&
PortableServer::Current::NoContext::operator= (const ::PortableServer::Current::NoContext &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::Current::NoContext::_tao_any_destructor (void *_tao_void_pointer)
{
  NoContext *_tao_tmp_pointer =
    static_cast<NoContext *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::Current::NoContext *
PortableServer::Current::NoContext::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoContext *> (_tao_excp);
}

const PortableServer::Current::NoContext *
PortableServer::Current::NoContext::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoContext *> (_tao_excp);
}

::CORBA::Exception *PortableServer::Current::NoContext::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::Current::NoContext, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::Current::NoContext::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::Current::NoContext (*this),
      0
    );
  return result;
}

void PortableServer::Current::NoContext::_raise (void) const
{
  throw *this;
}

void PortableServer::Current::NoContext::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::Current::NoContext::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::Current::NoContext::_tao_type (void) const
{
  return ::PortableServer::Current::_tc_NoContext;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_Current_NoContext = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_Current_NoContext (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/Current/NoContext:2.3",
  "NoContext",
  _tao_fields_PortableServer_Current_NoContext,
  0);

::CORBA::TypeCode_ptr const PortableServer::Current::_tc_NoContext =
  &_tao_tc_PortableServer_Current_NoContext;

PortableServer::Current::Current (void)
{}

PortableServer::Current::~Current (void)
{}

void 
PortableServer::Current::_tao_any_destructor (void *_tao_void_pointer)
{
  Current *_tao_tmp_pointer =
    static_cast<Current *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

PortableServer::Current_ptr
PortableServer::Current::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Current::_duplicate (
      dynamic_cast<Current_ptr> (_tao_objref)
    );
}

PortableServer::Current_ptr
PortableServer::Current::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Current::_duplicate (
      dynamic_cast<Current_ptr> (_tao_objref)
    );
}

PortableServer::Current_ptr
PortableServer::Current::_nil (void)
{
  return 0;
}

PortableServer::Current_ptr
PortableServer::Current::_duplicate (Current_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
PortableServer::Current::_tao_release (Current_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
PortableServer::Current::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Current:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableServer/Current:2.3"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* PortableServer::Current::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableServer/Current:2.3";
}

::CORBA::Boolean
PortableServer::Current::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_PortableServer_Current (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/PortableServer/Current:2.3",
    "Current");
  

namespace PortableServer
{
  ::CORBA::TypeCode_ptr const _tc_Current =
    &_tao_tc_PortableServer_Current;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<PortableServer::Current>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<PortableServer::Current>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<PortableServer::Current>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Current_ptr _tao_elem)
  {
    Current_ptr _tao_objptr =
      Current::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Current_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Current>::insert (
        _tao_any,
        Current::_tao_any_destructor,
        _tc_Current,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Current_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Current>::extract (
          _tao_any,
          Current::_tao_any_destructor,
          _tc_Current,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::Current_ptr _tao_elem)
{
  PortableServer::Current_ptr _tao_objptr =
    PortableServer::Current::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::Current_ptr *_tao_elem)
{
  TAO::Any_Impl_T<PortableServer::Current>::insert (
      _tao_any,
      PortableServer::Current::_tao_any_destructor,
      PortableServer::_tc_Current,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::Current_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<PortableServer::Current>::extract (
        _tao_any,
        PortableServer::Current::_tao_any_destructor,
        PortableServer::_tc_Current,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::Current::NoContext>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::Current::NoContext>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::Current::NoContext &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::Current::NoContext>::insert_copy (
        _tao_any,
        ::PortableServer::Current::NoContext::_tao_any_destructor,
        ::PortableServer::Current::_tc_NoContext,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::Current::NoContext *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::Current::NoContext>::insert (
        _tao_any,
        ::PortableServer::Current::NoContext::_tao_any_destructor,
        ::PortableServer::Current::_tc_NoContext,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::Current::NoContext *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::Current::NoContext *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::Current::NoContext *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::Current::NoContext>::extract (
          _tao_any,
          ::PortableServer::Current::NoContext::_tao_any_destructor,
          ::PortableServer::Current::_tc_NoContext,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::Current::NoContext &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::Current::NoContext>::insert_copy (
      _tao_any,
      PortableServer::Current::NoContext::_tao_any_destructor,
      PortableServer::Current::_tc_NoContext,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::Current::NoContext *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::Current::NoContext>::insert (
      _tao_any,
      PortableServer::Current::NoContext::_tao_any_destructor,
      PortableServer::Current::_tc_NoContext,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::Current::NoContext *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::Current::NoContext *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::Current::NoContext *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::Current::NoContext>::extract (
        _tao_any,
        PortableServer::Current::NoContext::_tao_any_destructor,
        PortableServer::Current::_tc_NoContext,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif


TAO_END_VERSIONED_NAMESPACE_DECL


