// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "POAC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_PORTABLESERVER_POALIST_CS_)
#define _PORTABLESERVER_POALIST_CS_

PortableServer::POAList::POAList (void)
{}

PortableServer::POAList::POAList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        POA,
        POA_var
      > (max)
{}

PortableServer::POAList::POAList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    PortableServer::POA_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        POA,
        POA_var
      >
    (max, length, buffer, release)
{}

PortableServer::POAList::POAList (
    const POAList &seq)
  : ::TAO::unbounded_object_reference_sequence<
        POA,
        POA_var
      > (seq)
{}

PortableServer::POAList::~POAList (void)
{}

void PortableServer::POAList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  POAList * _tao_tmp_pointer =
    static_cast<POAList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


namespace PortableServer
{
  extern ::CORBA::TypeCode_ptr const _tc_POA;
}

#ifndef _TAO_TYPECODE_PortableServer_POAList_GUARD
#define _TAO_TYPECODE_PortableServer_POAList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        PortableServer_POAList_0 (
          ::CORBA::tk_sequence,
          &PortableServer::_tc_POA,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_PortableServer_POAList_0 =
        &PortableServer_POAList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_PortableServer_POAList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_PortableServer_POAList (
    ::CORBA::tk_alias,
    "IDL:omg.org/PortableServer/POAList:2.3",
    "POAList",
    &TAO::TypeCode::tc_PortableServer_POAList_0);
  

namespace PortableServer
{
  ::CORBA::TypeCode_ptr const _tc_POAList =
    &_tao_tc_PortableServer_POAList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for PortableServer::POA.

PortableServer::POA_ptr
TAO::Objref_Traits<PortableServer::POA>::duplicate (
    PortableServer::POA_ptr p)
{
  return PortableServer::POA::_duplicate (p);
}

void
TAO::Objref_Traits<PortableServer::POA>::release (
    PortableServer::POA_ptr p)
{
  ::CORBA::release (p);
}

PortableServer::POA_ptr
TAO::Objref_Traits<PortableServer::POA>::nil (void)
{
  return PortableServer::POA::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<PortableServer::POA>::marshal (
    const PortableServer::POA_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::AdapterAlreadyExists::AdapterAlreadyExists (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/AdapterAlreadyExists:2.3",
        "AdapterAlreadyExists"
      )
{
}

PortableServer::POA::AdapterAlreadyExists::~AdapterAlreadyExists (void)
{
}

PortableServer::POA::AdapterAlreadyExists::AdapterAlreadyExists (const ::PortableServer::POA::AdapterAlreadyExists &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::AdapterAlreadyExists&
PortableServer::POA::AdapterAlreadyExists::operator= (const ::PortableServer::POA::AdapterAlreadyExists &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor (void *_tao_void_pointer)
{
  AdapterAlreadyExists *_tao_tmp_pointer =
    static_cast<AdapterAlreadyExists *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::AdapterAlreadyExists *
PortableServer::POA::AdapterAlreadyExists::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AdapterAlreadyExists *> (_tao_excp);
}

const PortableServer::POA::AdapterAlreadyExists *
PortableServer::POA::AdapterAlreadyExists::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AdapterAlreadyExists *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::AdapterAlreadyExists::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::AdapterAlreadyExists, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::AdapterAlreadyExists::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::AdapterAlreadyExists (*this),
      0
    );
  return result;
}

void PortableServer::POA::AdapterAlreadyExists::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::AdapterAlreadyExists::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::AdapterAlreadyExists::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::AdapterAlreadyExists::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_AdapterAlreadyExists;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_AdapterAlreadyExists = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_AdapterAlreadyExists (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/AdapterAlreadyExists:2.3",
  "AdapterAlreadyExists",
  _tao_fields_PortableServer_POA_AdapterAlreadyExists,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_AdapterAlreadyExists =
  &_tao_tc_PortableServer_POA_AdapterAlreadyExists;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::AdapterNonExistent::AdapterNonExistent (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/AdapterNonExistent:2.3",
        "AdapterNonExistent"
      )
{
}

PortableServer::POA::AdapterNonExistent::~AdapterNonExistent (void)
{
}

PortableServer::POA::AdapterNonExistent::AdapterNonExistent (const ::PortableServer::POA::AdapterNonExistent &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::AdapterNonExistent&
PortableServer::POA::AdapterNonExistent::operator= (const ::PortableServer::POA::AdapterNonExistent &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::AdapterNonExistent::_tao_any_destructor (void *_tao_void_pointer)
{
  AdapterNonExistent *_tao_tmp_pointer =
    static_cast<AdapterNonExistent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::AdapterNonExistent *
PortableServer::POA::AdapterNonExistent::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AdapterNonExistent *> (_tao_excp);
}

const PortableServer::POA::AdapterNonExistent *
PortableServer::POA::AdapterNonExistent::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AdapterNonExistent *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::AdapterNonExistent::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::AdapterNonExistent, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::AdapterNonExistent::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::AdapterNonExistent (*this),
      0
    );
  return result;
}

void PortableServer::POA::AdapterNonExistent::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::AdapterNonExistent::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::AdapterNonExistent::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::AdapterNonExistent::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_AdapterNonExistent;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_AdapterNonExistent = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_AdapterNonExistent (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/AdapterNonExistent:2.3",
  "AdapterNonExistent",
  _tao_fields_PortableServer_POA_AdapterNonExistent,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_AdapterNonExistent =
  &_tao_tc_PortableServer_POA_AdapterNonExistent;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

PortableServer::POA::InvalidPolicy::InvalidPolicy (
    ::CORBA::UShort _tao_index)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/InvalidPolicy:2.3",
        "InvalidPolicy"
      )
{
  this->index = _tao_index;
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::InvalidPolicy::InvalidPolicy (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/InvalidPolicy:2.3",
        "InvalidPolicy"
      )
{
}

PortableServer::POA::InvalidPolicy::~InvalidPolicy (void)
{
}

PortableServer::POA::InvalidPolicy::InvalidPolicy (const ::PortableServer::POA::InvalidPolicy &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->index = _tao_excp.index;
}

PortableServer::POA::InvalidPolicy&
PortableServer::POA::InvalidPolicy::operator= (const ::PortableServer::POA::InvalidPolicy &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->index = _tao_excp.index;
  return *this;
}

void PortableServer::POA::InvalidPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidPolicy *_tao_tmp_pointer =
    static_cast<InvalidPolicy *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::InvalidPolicy *
PortableServer::POA::InvalidPolicy::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidPolicy *> (_tao_excp);
}

const PortableServer::POA::InvalidPolicy *
PortableServer::POA::InvalidPolicy::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidPolicy *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::InvalidPolicy::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::InvalidPolicy, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::InvalidPolicy::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::InvalidPolicy (*this),
      0
    );
  return result;
}

void PortableServer::POA::InvalidPolicy::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::InvalidPolicy::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::InvalidPolicy::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::InvalidPolicy::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_InvalidPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_PortableServer_POA_InvalidPolicy[] =
      {
        { "index", &CORBA::_tc_ushort }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_InvalidPolicy (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/InvalidPolicy:2.3",
  "InvalidPolicy",
  _tao_fields_PortableServer_POA_InvalidPolicy,
  1);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_InvalidPolicy =
  &_tao_tc_PortableServer_POA_InvalidPolicy;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::NoServant::NoServant (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/NoServant:2.3",
        "NoServant"
      )
{
}

PortableServer::POA::NoServant::~NoServant (void)
{
}

PortableServer::POA::NoServant::NoServant (const ::PortableServer::POA::NoServant &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::NoServant&
PortableServer::POA::NoServant::operator= (const ::PortableServer::POA::NoServant &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::NoServant::_tao_any_destructor (void *_tao_void_pointer)
{
  NoServant *_tao_tmp_pointer =
    static_cast<NoServant *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::NoServant *
PortableServer::POA::NoServant::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NoServant *> (_tao_excp);
}

const PortableServer::POA::NoServant *
PortableServer::POA::NoServant::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NoServant *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::NoServant::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::NoServant, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::NoServant::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::NoServant (*this),
      0
    );
  return result;
}

void PortableServer::POA::NoServant::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::NoServant::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::NoServant::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::NoServant::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_NoServant;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_NoServant = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_NoServant (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/NoServant:2.3",
  "NoServant",
  _tao_fields_PortableServer_POA_NoServant,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_NoServant =
  &_tao_tc_PortableServer_POA_NoServant;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::ObjectAlreadyActive::ObjectAlreadyActive (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/ObjectAlreadyActive:2.3",
        "ObjectAlreadyActive"
      )
{
}

PortableServer::POA::ObjectAlreadyActive::~ObjectAlreadyActive (void)
{
}

PortableServer::POA::ObjectAlreadyActive::ObjectAlreadyActive (const ::PortableServer::POA::ObjectAlreadyActive &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::ObjectAlreadyActive&
PortableServer::POA::ObjectAlreadyActive::operator= (const ::PortableServer::POA::ObjectAlreadyActive &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor (void *_tao_void_pointer)
{
  ObjectAlreadyActive *_tao_tmp_pointer =
    static_cast<ObjectAlreadyActive *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::ObjectAlreadyActive *
PortableServer::POA::ObjectAlreadyActive::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ObjectAlreadyActive *> (_tao_excp);
}

const PortableServer::POA::ObjectAlreadyActive *
PortableServer::POA::ObjectAlreadyActive::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ObjectAlreadyActive *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::ObjectAlreadyActive::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::ObjectAlreadyActive, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::ObjectAlreadyActive::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::ObjectAlreadyActive (*this),
      0
    );
  return result;
}

void PortableServer::POA::ObjectAlreadyActive::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::ObjectAlreadyActive::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::ObjectAlreadyActive::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::ObjectAlreadyActive::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_ObjectAlreadyActive;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_ObjectAlreadyActive = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_ObjectAlreadyActive (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/ObjectAlreadyActive:2.3",
  "ObjectAlreadyActive",
  _tao_fields_PortableServer_POA_ObjectAlreadyActive,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_ObjectAlreadyActive =
  &_tao_tc_PortableServer_POA_ObjectAlreadyActive;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::ObjectNotActive::ObjectNotActive (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/ObjectNotActive:2.3",
        "ObjectNotActive"
      )
{
}

PortableServer::POA::ObjectNotActive::~ObjectNotActive (void)
{
}

PortableServer::POA::ObjectNotActive::ObjectNotActive (const ::PortableServer::POA::ObjectNotActive &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::ObjectNotActive&
PortableServer::POA::ObjectNotActive::operator= (const ::PortableServer::POA::ObjectNotActive &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::ObjectNotActive::_tao_any_destructor (void *_tao_void_pointer)
{
  ObjectNotActive *_tao_tmp_pointer =
    static_cast<ObjectNotActive *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::ObjectNotActive *
PortableServer::POA::ObjectNotActive::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ObjectNotActive *> (_tao_excp);
}

const PortableServer::POA::ObjectNotActive *
PortableServer::POA::ObjectNotActive::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ObjectNotActive *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::ObjectNotActive::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::ObjectNotActive, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::ObjectNotActive::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::ObjectNotActive (*this),
      0
    );
  return result;
}

void PortableServer::POA::ObjectNotActive::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::ObjectNotActive::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::ObjectNotActive::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::ObjectNotActive::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_ObjectNotActive;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_ObjectNotActive = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_ObjectNotActive (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/ObjectNotActive:2.3",
  "ObjectNotActive",
  _tao_fields_PortableServer_POA_ObjectNotActive,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_ObjectNotActive =
  &_tao_tc_PortableServer_POA_ObjectNotActive;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::ServantAlreadyActive::ServantAlreadyActive (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/ServantAlreadyActive:2.3",
        "ServantAlreadyActive"
      )
{
}

PortableServer::POA::ServantAlreadyActive::~ServantAlreadyActive (void)
{
}

PortableServer::POA::ServantAlreadyActive::ServantAlreadyActive (const ::PortableServer::POA::ServantAlreadyActive &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::ServantAlreadyActive&
PortableServer::POA::ServantAlreadyActive::operator= (const ::PortableServer::POA::ServantAlreadyActive &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::ServantAlreadyActive::_tao_any_destructor (void *_tao_void_pointer)
{
  ServantAlreadyActive *_tao_tmp_pointer =
    static_cast<ServantAlreadyActive *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::ServantAlreadyActive *
PortableServer::POA::ServantAlreadyActive::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ServantAlreadyActive *> (_tao_excp);
}

const PortableServer::POA::ServantAlreadyActive *
PortableServer::POA::ServantAlreadyActive::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ServantAlreadyActive *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::ServantAlreadyActive::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::ServantAlreadyActive, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::ServantAlreadyActive::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::ServantAlreadyActive (*this),
      0
    );
  return result;
}

void PortableServer::POA::ServantAlreadyActive::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::ServantAlreadyActive::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::ServantAlreadyActive::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::ServantAlreadyActive::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_ServantAlreadyActive;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_ServantAlreadyActive = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_ServantAlreadyActive (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/ServantAlreadyActive:2.3",
  "ServantAlreadyActive",
  _tao_fields_PortableServer_POA_ServantAlreadyActive,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_ServantAlreadyActive =
  &_tao_tc_PortableServer_POA_ServantAlreadyActive;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::ServantNotActive::ServantNotActive (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/ServantNotActive:2.3",
        "ServantNotActive"
      )
{
}

PortableServer::POA::ServantNotActive::~ServantNotActive (void)
{
}

PortableServer::POA::ServantNotActive::ServantNotActive (const ::PortableServer::POA::ServantNotActive &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::ServantNotActive&
PortableServer::POA::ServantNotActive::operator= (const ::PortableServer::POA::ServantNotActive &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::ServantNotActive::_tao_any_destructor (void *_tao_void_pointer)
{
  ServantNotActive *_tao_tmp_pointer =
    static_cast<ServantNotActive *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::ServantNotActive *
PortableServer::POA::ServantNotActive::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ServantNotActive *> (_tao_excp);
}

const PortableServer::POA::ServantNotActive *
PortableServer::POA::ServantNotActive::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ServantNotActive *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::ServantNotActive::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::ServantNotActive, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::ServantNotActive::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::ServantNotActive (*this),
      0
    );
  return result;
}

void PortableServer::POA::ServantNotActive::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::ServantNotActive::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::ServantNotActive::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::ServantNotActive::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_ServantNotActive;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_ServantNotActive = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_ServantNotActive (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/ServantNotActive:2.3",
  "ServantNotActive",
  _tao_fields_PortableServer_POA_ServantNotActive,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_ServantNotActive =
  &_tao_tc_PortableServer_POA_ServantNotActive;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::WrongAdapter::WrongAdapter (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/WrongAdapter:2.3",
        "WrongAdapter"
      )
{
}

PortableServer::POA::WrongAdapter::~WrongAdapter (void)
{
}

PortableServer::POA::WrongAdapter::WrongAdapter (const ::PortableServer::POA::WrongAdapter &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::WrongAdapter&
PortableServer::POA::WrongAdapter::operator= (const ::PortableServer::POA::WrongAdapter &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::WrongAdapter::_tao_any_destructor (void *_tao_void_pointer)
{
  WrongAdapter *_tao_tmp_pointer =
    static_cast<WrongAdapter *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::WrongAdapter *
PortableServer::POA::WrongAdapter::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<WrongAdapter *> (_tao_excp);
}

const PortableServer::POA::WrongAdapter *
PortableServer::POA::WrongAdapter::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const WrongAdapter *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::WrongAdapter::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::WrongAdapter, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::WrongAdapter::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::WrongAdapter (*this),
      0
    );
  return result;
}

void PortableServer::POA::WrongAdapter::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::WrongAdapter::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::WrongAdapter::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::WrongAdapter::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_WrongAdapter;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_WrongAdapter = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_WrongAdapter (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/WrongAdapter:2.3",
  "WrongAdapter",
  _tao_fields_PortableServer_POA_WrongAdapter,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_WrongAdapter =
  &_tao_tc_PortableServer_POA_WrongAdapter;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

PortableServer::POA::WrongPolicy::WrongPolicy (void)
  : ::CORBA::UserException (
        "IDL:omg.org/PortableServer/POA/WrongPolicy:2.3",
        "WrongPolicy"
      )
{
}

PortableServer::POA::WrongPolicy::~WrongPolicy (void)
{
}

PortableServer::POA::WrongPolicy::WrongPolicy (const ::PortableServer::POA::WrongPolicy &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

PortableServer::POA::WrongPolicy&
PortableServer::POA::WrongPolicy::operator= (const ::PortableServer::POA::WrongPolicy &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void PortableServer::POA::WrongPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  WrongPolicy *_tao_tmp_pointer =
    static_cast<WrongPolicy *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

PortableServer::POA::WrongPolicy *
PortableServer::POA::WrongPolicy::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<WrongPolicy *> (_tao_excp);
}

const PortableServer::POA::WrongPolicy *
PortableServer::POA::WrongPolicy::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const WrongPolicy *> (_tao_excp);
}

::CORBA::Exception *PortableServer::POA::WrongPolicy::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::PortableServer::POA::WrongPolicy, 0);
  return retval;
}

::CORBA::Exception *
PortableServer::POA::WrongPolicy::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::PortableServer::POA::WrongPolicy (*this),
      0
    );
  return result;
}

void PortableServer::POA::WrongPolicy::_raise (void) const
{
  throw *this;
}

void PortableServer::POA::WrongPolicy::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void PortableServer::POA::WrongPolicy::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr PortableServer::POA::WrongPolicy::_tao_type (void) const
{
  return ::PortableServer::POA::_tc_WrongPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_PortableServer_POA_WrongPolicy = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PortableServer_POA_WrongPolicy (
  ::CORBA::tk_except,
  "IDL:omg.org/PortableServer/POA/WrongPolicy:2.3",
  "WrongPolicy",
  _tao_fields_PortableServer_POA_WrongPolicy,
  0);

::CORBA::TypeCode_ptr const PortableServer::POA::_tc_WrongPolicy =
  &_tao_tc_PortableServer_POA_WrongPolicy;

PortableServer::POA::POA (void)
{}

PortableServer::POA::~POA (void)
{}

void 
PortableServer::POA::_tao_any_destructor (void *_tao_void_pointer)
{
  POA *_tao_tmp_pointer =
    static_cast<POA *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

PortableServer::POA_ptr
PortableServer::POA::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return POA::_duplicate (
      dynamic_cast<POA_ptr> (_tao_objref)
    );
}

PortableServer::POA_ptr
PortableServer::POA::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return POA::_duplicate (
      dynamic_cast<POA_ptr> (_tao_objref)
    );
}

PortableServer::POA_ptr
PortableServer::POA::_nil (void)
{
  return 0;
}

PortableServer::POA_ptr
PortableServer::POA::_duplicate (POA_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
PortableServer::POA::_tao_release (POA_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
PortableServer::POA::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableServer/POA:2.3"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* PortableServer::POA::_interface_repository_id (void) const
{
  return "IDL:omg.org/PortableServer/POA:2.3";
}

::CORBA::Boolean
PortableServer::POA::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_PortableServer_POA (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/PortableServer/POA:2.3",
    "POA");
  

namespace PortableServer
{
  ::CORBA::TypeCode_ptr const _tc_POA =
    &_tao_tc_PortableServer_POA;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POAList>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POAList>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POAList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::PortableServer::POAList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::PortableServer::POAList>::insert_copy (
          _tao_any,
          ::PortableServer::POAList::_tao_any_destructor,
          ::PortableServer::_tc_POAList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POAList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POAList>::insert (
        _tao_any,
        ::PortableServer::POAList::_tao_any_destructor,
        ::PortableServer::_tc_POAList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POAList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POAList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POAList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POAList>::extract (
          _tao_any,
          ::PortableServer::POAList::_tao_any_destructor,
          ::PortableServer::_tc_POAList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POAList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PortableServer::POAList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PortableServer::POAList>::insert_copy (
        _tao_any,
        PortableServer::POAList::_tao_any_destructor,
        PortableServer::_tc_POAList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POAList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POAList>::insert (
      _tao_any,
      PortableServer::POAList::_tao_any_destructor,
      PortableServer::_tc_POAList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POAList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POAList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POAList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POAList>::extract (
        _tao_any,
        PortableServer::POAList::_tao_any_destructor,
        PortableServer::_tc_POAList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<PortableServer::POA>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<PortableServer::POA>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<PortableServer::POA>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      POA_ptr _tao_elem)
  {
    POA_ptr _tao_objptr =
      POA::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      POA_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<POA>::insert (
        _tao_any,
        POA::_tao_any_destructor,
        _tc_POA,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      POA_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<POA>::extract (
          _tao_any,
          POA::_tao_any_destructor,
          _tc_POA,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA_ptr _tao_elem)
{
  PortableServer::POA_ptr _tao_objptr =
    PortableServer::POA::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA_ptr *_tao_elem)
{
  TAO::Any_Impl_T<PortableServer::POA>::insert (
      _tao_any,
      PortableServer::POA::_tao_any_destructor,
      PortableServer::_tc_POA,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<PortableServer::POA>::extract (
        _tao_any,
        PortableServer::POA::_tao_any_destructor,
        PortableServer::_tc_POA,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::AdapterAlreadyExists &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::AdapterAlreadyExists>::insert_copy (
        _tao_any,
        ::PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
        ::PortableServer::POA::_tc_AdapterAlreadyExists,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::AdapterAlreadyExists *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::AdapterAlreadyExists>::insert (
        _tao_any,
        ::PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
        ::PortableServer::POA::_tc_AdapterAlreadyExists,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::AdapterAlreadyExists *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::AdapterAlreadyExists *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::AdapterAlreadyExists *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::AdapterAlreadyExists>::extract (
          _tao_any,
          ::PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
          ::PortableServer::POA::_tc_AdapterAlreadyExists,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterAlreadyExists &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::insert_copy (
      _tao_any,
      PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterAlreadyExists,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::AdapterAlreadyExists *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::insert (
      _tao_any,
      PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterAlreadyExists,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::AdapterAlreadyExists *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::AdapterAlreadyExists *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterAlreadyExists *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterAlreadyExists>::extract (
        _tao_any,
        PortableServer::POA::AdapterAlreadyExists::_tao_any_destructor,
        PortableServer::POA::_tc_AdapterAlreadyExists,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::AdapterNonExistent &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::AdapterNonExistent>::insert_copy (
        _tao_any,
        ::PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
        ::PortableServer::POA::_tc_AdapterNonExistent,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::AdapterNonExistent *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::AdapterNonExistent>::insert (
        _tao_any,
        ::PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
        ::PortableServer::POA::_tc_AdapterNonExistent,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::AdapterNonExistent *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::AdapterNonExistent *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::AdapterNonExistent *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::AdapterNonExistent>::extract (
          _tao_any,
          ::PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
          ::PortableServer::POA::_tc_AdapterNonExistent,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterNonExistent &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::insert_copy (
      _tao_any,
      PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterNonExistent,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::AdapterNonExistent *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::insert (
      _tao_any,
      PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
      PortableServer::POA::_tc_AdapterNonExistent,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::AdapterNonExistent *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::AdapterNonExistent *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::AdapterNonExistent *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::AdapterNonExistent>::extract (
        _tao_any,
        PortableServer::POA::AdapterNonExistent::_tao_any_destructor,
        PortableServer::POA::_tc_AdapterNonExistent,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::InvalidPolicy &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::InvalidPolicy>::insert_copy (
        _tao_any,
        ::PortableServer::POA::InvalidPolicy::_tao_any_destructor,
        ::PortableServer::POA::_tc_InvalidPolicy,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::InvalidPolicy *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::InvalidPolicy>::insert (
        _tao_any,
        ::PortableServer::POA::InvalidPolicy::_tao_any_destructor,
        ::PortableServer::POA::_tc_InvalidPolicy,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::InvalidPolicy *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::InvalidPolicy *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::InvalidPolicy *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::InvalidPolicy>::extract (
          _tao_any,
          ::PortableServer::POA::InvalidPolicy::_tao_any_destructor,
          ::PortableServer::POA::_tc_InvalidPolicy,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::InvalidPolicy &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::insert_copy (
      _tao_any,
      PortableServer::POA::InvalidPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_InvalidPolicy,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::InvalidPolicy *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::insert (
      _tao_any,
      PortableServer::POA::InvalidPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_InvalidPolicy,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::InvalidPolicy *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::InvalidPolicy *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::InvalidPolicy *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::InvalidPolicy>::extract (
        _tao_any,
        PortableServer::POA::InvalidPolicy::_tao_any_destructor,
        PortableServer::POA::_tc_InvalidPolicy,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::NoServant>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::NoServant>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::NoServant &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::NoServant>::insert_copy (
        _tao_any,
        ::PortableServer::POA::NoServant::_tao_any_destructor,
        ::PortableServer::POA::_tc_NoServant,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::NoServant *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::NoServant>::insert (
        _tao_any,
        ::PortableServer::POA::NoServant::_tao_any_destructor,
        ::PortableServer::POA::_tc_NoServant,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::NoServant *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::NoServant *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::NoServant *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::NoServant>::extract (
          _tao_any,
          ::PortableServer::POA::NoServant::_tao_any_destructor,
          ::PortableServer::POA::_tc_NoServant,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::NoServant &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::insert_copy (
      _tao_any,
      PortableServer::POA::NoServant::_tao_any_destructor,
      PortableServer::POA::_tc_NoServant,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::NoServant *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::insert (
      _tao_any,
      PortableServer::POA::NoServant::_tao_any_destructor,
      PortableServer::POA::_tc_NoServant,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::NoServant *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::NoServant *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::NoServant *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::NoServant>::extract (
        _tao_any,
        PortableServer::POA::NoServant::_tao_any_destructor,
        PortableServer::POA::_tc_NoServant,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ObjectAlreadyActive &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ObjectAlreadyActive>::insert_copy (
        _tao_any,
        ::PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ObjectAlreadyActive,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ObjectAlreadyActive *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ObjectAlreadyActive>::insert (
        _tao_any,
        ::PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ObjectAlreadyActive,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ObjectAlreadyActive *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::ObjectAlreadyActive *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ObjectAlreadyActive *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::ObjectAlreadyActive>::extract (
          _tao_any,
          ::PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
          ::PortableServer::POA::_tc_ObjectAlreadyActive,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectAlreadyActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectAlreadyActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::ObjectAlreadyActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::insert (
      _tao_any,
      PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectAlreadyActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::ObjectAlreadyActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ObjectAlreadyActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectAlreadyActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectAlreadyActive>::extract (
        _tao_any,
        PortableServer::POA::ObjectAlreadyActive::_tao_any_destructor,
        PortableServer::POA::_tc_ObjectAlreadyActive,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ObjectNotActive &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ObjectNotActive>::insert_copy (
        _tao_any,
        ::PortableServer::POA::ObjectNotActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ObjectNotActive,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ObjectNotActive *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ObjectNotActive>::insert (
        _tao_any,
        ::PortableServer::POA::ObjectNotActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ObjectNotActive,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ObjectNotActive *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::ObjectNotActive *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ObjectNotActive *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::ObjectNotActive>::extract (
          _tao_any,
          ::PortableServer::POA::ObjectNotActive::_tao_any_destructor,
          ::PortableServer::POA::_tc_ObjectNotActive,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectNotActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ObjectNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectNotActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::ObjectNotActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::insert (
      _tao_any,
      PortableServer::POA::ObjectNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ObjectNotActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::ObjectNotActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ObjectNotActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::ObjectNotActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ObjectNotActive>::extract (
        _tao_any,
        PortableServer::POA::ObjectNotActive::_tao_any_destructor,
        PortableServer::POA::_tc_ObjectNotActive,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ServantAlreadyActive &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ServantAlreadyActive>::insert_copy (
        _tao_any,
        ::PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ServantAlreadyActive,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ServantAlreadyActive *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ServantAlreadyActive>::insert (
        _tao_any,
        ::PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ServantAlreadyActive,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ServantAlreadyActive *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::ServantAlreadyActive *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ServantAlreadyActive *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::ServantAlreadyActive>::extract (
          _tao_any,
          ::PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
          ::PortableServer::POA::_tc_ServantAlreadyActive,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::ServantAlreadyActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantAlreadyActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::ServantAlreadyActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::insert (
      _tao_any,
      PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantAlreadyActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::ServantAlreadyActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ServantAlreadyActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::ServantAlreadyActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ServantAlreadyActive>::extract (
        _tao_any,
        PortableServer::POA::ServantAlreadyActive::_tao_any_destructor,
        PortableServer::POA::_tc_ServantAlreadyActive,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ServantNotActive &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ServantNotActive>::insert_copy (
        _tao_any,
        ::PortableServer::POA::ServantNotActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ServantNotActive,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ServantNotActive *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::ServantNotActive>::insert (
        _tao_any,
        ::PortableServer::POA::ServantNotActive::_tao_any_destructor,
        ::PortableServer::POA::_tc_ServantNotActive,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::ServantNotActive *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::ServantNotActive *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::ServantNotActive *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::ServantNotActive>::extract (
          _tao_any,
          ::PortableServer::POA::ServantNotActive::_tao_any_destructor,
          ::PortableServer::POA::_tc_ServantNotActive,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::ServantNotActive &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::insert_copy (
      _tao_any,
      PortableServer::POA::ServantNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantNotActive,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::ServantNotActive *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::insert (
      _tao_any,
      PortableServer::POA::ServantNotActive::_tao_any_destructor,
      PortableServer::POA::_tc_ServantNotActive,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::ServantNotActive *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::ServantNotActive *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::ServantNotActive *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::ServantNotActive>::extract (
        _tao_any,
        PortableServer::POA::ServantNotActive::_tao_any_destructor,
        PortableServer::POA::_tc_ServantNotActive,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::WrongAdapter &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::WrongAdapter>::insert_copy (
        _tao_any,
        ::PortableServer::POA::WrongAdapter::_tao_any_destructor,
        ::PortableServer::POA::_tc_WrongAdapter,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::WrongAdapter *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::WrongAdapter>::insert (
        _tao_any,
        ::PortableServer::POA::WrongAdapter::_tao_any_destructor,
        ::PortableServer::POA::_tc_WrongAdapter,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::WrongAdapter *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::WrongAdapter *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::WrongAdapter *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::WrongAdapter>::extract (
          _tao_any,
          ::PortableServer::POA::WrongAdapter::_tao_any_destructor,
          ::PortableServer::POA::_tc_WrongAdapter,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::WrongAdapter &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::insert_copy (
      _tao_any,
      PortableServer::POA::WrongAdapter::_tao_any_destructor,
      PortableServer::POA::_tc_WrongAdapter,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::WrongAdapter *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::insert (
      _tao_any,
      PortableServer::POA::WrongAdapter::_tao_any_destructor,
      PortableServer::POA::_tc_WrongAdapter,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::WrongAdapter *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::WrongAdapter *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::WrongAdapter *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::WrongAdapter>::extract (
        _tao_any,
        PortableServer::POA::WrongAdapter::_tao_any_destructor,
        PortableServer::POA::_tc_WrongAdapter,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableServer
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::WrongPolicy &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::WrongPolicy>::insert_copy (
        _tao_any,
        ::PortableServer::POA::WrongPolicy::_tao_any_destructor,
        ::PortableServer::POA::_tc_WrongPolicy,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::PortableServer::POA::WrongPolicy *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::PortableServer::POA::WrongPolicy>::insert (
        _tao_any,
        ::PortableServer::POA::WrongPolicy::_tao_any_destructor,
        ::PortableServer::POA::_tc_WrongPolicy,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::PortableServer::POA::WrongPolicy *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::PortableServer::POA::WrongPolicy *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::PortableServer::POA::WrongPolicy *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::PortableServer::POA::WrongPolicy>::extract (
          _tao_any,
          ::PortableServer::POA::WrongPolicy::_tao_any_destructor,
          ::PortableServer::POA::_tc_WrongPolicy,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const PortableServer::POA::WrongPolicy &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::insert_copy (
      _tao_any,
      PortableServer::POA::WrongPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_WrongPolicy,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    PortableServer::POA::WrongPolicy *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::insert (
      _tao_any,
      PortableServer::POA::WrongPolicy::_tao_any_destructor,
      PortableServer::POA::_tc_WrongPolicy,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    PortableServer::POA::WrongPolicy *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const PortableServer::POA::WrongPolicy *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const PortableServer::POA::WrongPolicy *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<PortableServer::POA::WrongPolicy>::extract (
        _tao_any,
        PortableServer::POA::WrongPolicy::_tao_any_destructor,
        PortableServer::POA::_tc_WrongPolicy,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif


TAO_END_VERSIONED_NAMESPACE_DECL


