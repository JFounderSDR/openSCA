# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.IFR_Client_Idl
#
# $Id: gnu.mpd 1861 2011-08-31 16:18:08Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.IFR_Client_Idl
DEPENDENCY_FILE  = .depend.IFR_Client_Idl

LIB_PREFIX      ?= lib

FILES = \

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/IFR_Client_Idl
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L.
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH))
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo IFR_Client_Idl will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += IFR_BasicC.inl IFR_BasicS.inl IFR_BasicC.h IFR_BasicS.h IFR_BasicA.h IFR_BasicS_T.h IFR_BasicC.cpp IFR_BasicS.cpp IFR_BasicS_T.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicC.inl" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicS.inl" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicC.h" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicS.h" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicA.h" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicS_T.h" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicC.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicS.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Basic.pidl" -nt "IFR_BasicS_T.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BasicS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BasicS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BasicS_T.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
IFR_BasicC.inl IFR_BasicS.inl IFR_BasicC.h IFR_BasicS.h IFR_BasicA.h IFR_BasicS_T.h IFR_BasicC.cpp IFR_BasicS.cpp IFR_BasicS_T.cpp: IFR_Basic.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GX -Wb,stub_export_macro=TAO_IFR_Client_Export -Wb,stub_export_include=tao/IFR_Client/ifr_client_export.h -Wb,skel_export_macro=TAO_IFR_Client_Skel_Export -Wb,skel_export_include=tao/IFR_Client/ifr_client_skel_export.h -iC tao/IFR_Client -GT IFR_Basic.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
IFR_BasicC.inl IFR_BasicS.inl IFR_BasicC.h IFR_BasicS.h IFR_BasicA.h IFR_BasicS_T.h IFR_BasicC.cpp IFR_BasicS.cpp IFR_BasicS_T.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += IFR_ComponentsC.inl IFR_ComponentsS.inl IFR_ComponentsC.h IFR_ComponentsS.h IFR_ComponentsA.h IFR_ComponentsS_T.h IFR_ComponentsC.cpp IFR_ComponentsS.cpp IFR_ComponentsS_T.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsC.inl" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsS.inl" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsC.h" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsS.h" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsA.h" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsS_T.h" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsC.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsS.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Components.pidl" -nt "IFR_ComponentsS_T.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ComponentsS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ComponentsS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ComponentsS_T.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
IFR_ComponentsC.inl IFR_ComponentsS.inl IFR_ComponentsC.h IFR_ComponentsS.h IFR_ComponentsA.h IFR_ComponentsS_T.h IFR_ComponentsC.cpp IFR_ComponentsS.cpp IFR_ComponentsS_T.cpp: IFR_Components.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GX -Wb,stub_export_macro=TAO_IFR_Client_Export -Wb,stub_export_include=tao/IFR_Client/ifr_client_export.h -Wb,skel_export_macro=TAO_IFR_Client_Skel_Export -Wb,skel_export_include=tao/IFR_Client/ifr_client_skel_export.h -iC tao/IFR_Client -GT IFR_Components.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
IFR_ComponentsC.inl IFR_ComponentsS.inl IFR_ComponentsC.h IFR_ComponentsS.h IFR_ComponentsA.h IFR_ComponentsS_T.h IFR_ComponentsC.cpp IFR_ComponentsS.cpp IFR_ComponentsS_T.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += IFR_ExtendedC.inl IFR_ExtendedS.inl IFR_ExtendedC.h IFR_ExtendedS.h IFR_ExtendedA.h IFR_ExtendedS_T.h IFR_ExtendedC.cpp IFR_ExtendedS.cpp IFR_ExtendedS_T.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedC.inl" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedS.inl" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedC.h" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedS.h" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedA.h" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedS_T.h" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedC.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedS.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Extended.pidl" -nt "IFR_ExtendedS_T.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_ExtendedS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_ExtendedS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_ExtendedS_T.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
IFR_ExtendedC.inl IFR_ExtendedS.inl IFR_ExtendedC.h IFR_ExtendedS.h IFR_ExtendedA.h IFR_ExtendedS_T.h IFR_ExtendedC.cpp IFR_ExtendedS.cpp IFR_ExtendedS_T.cpp: IFR_Extended.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GX -Wb,stub_export_macro=TAO_IFR_Client_Export -Wb,stub_export_include=tao/IFR_Client/ifr_client_export.h -Wb,skel_export_macro=TAO_IFR_Client_Skel_Export -Wb,skel_export_include=tao/IFR_Client/ifr_client_skel_export.h -iC tao/IFR_Client -GT IFR_Extended.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
IFR_ExtendedC.inl IFR_ExtendedS.inl IFR_ExtendedC.h IFR_ExtendedS.h IFR_ExtendedA.h IFR_ExtendedS_T.h IFR_ExtendedC.cpp IFR_ExtendedS.cpp IFR_ExtendedS_T.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += IFR_BaseC.inl IFR_BaseS.inl IFR_BaseC.h IFR_BaseS.h IFR_BaseA.h IFR_BaseS_T.h IFR_BaseC.cpp IFR_BaseS.cpp IFR_BaseS_T.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseC.inl" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseS.inl" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseC.h" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseS.h" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseA.h" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseS_T.h" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseS.cpp" 2> /dev/null || $(TEST_EXE) "IFR_Base.pidl" -nt "IFR_BaseS_T.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "IFR_BaseS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "IFR_BaseS_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseS.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseA.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseS_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "IFR_BaseS_T.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
IFR_BaseC.inl IFR_BaseS.inl IFR_BaseC.h IFR_BaseS.h IFR_BaseA.h IFR_BaseS_T.h IFR_BaseC.cpp IFR_BaseS.cpp IFR_BaseS_T.cpp: IFR_Base.pidl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Wb,versioning_begin=TAO_BEGIN_VERSIONED_NAMESPACE_DECL -Wb,versioning_end=TAO_END_VERSIONED_NAMESPACE_DECL -GX -Wb,stub_export_macro=TAO_IFR_Client_Export -Wb,stub_export_include=tao/IFR_Client/ifr_client_export.h -Wb,skel_export_macro=TAO_IFR_Client_Skel_Export -Wb,skel_export_include=tao/IFR_Client/ifr_client_skel_export.h -iC tao/IFR_Client -GT IFR_Base.pidl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
IFR_BaseC.inl IFR_BaseS.inl IFR_BaseC.h IFR_BaseS.h IFR_BaseA.h IFR_BaseS_T.h IFR_BaseC.cpp IFR_BaseS.cpp IFR_BaseS_T.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
all: $(GENERATED_DIRTY)
endif

ADDITIONAL_IDL_TARGETS += IFR_Basic$(IDL_CLIENT_HDR_EXT) IFR_Components$(IDL_CLIENT_HDR_EXT) IFR_Extended$(IDL_CLIENT_HDR_EXT) IFR_Base$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /tao/IFR_Client
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  idl_files idl_files idl_files idl_files )

INST_TAGS = $(CUSTOM_INST_TAGS)
INST_LOCATIONS = $(foreach tag,$(INST_TAGS),-b $(tag)=include$(INST_DIR))

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#IFR_Client.mpc
#
#idl_files:
#IFR_Basic.pidl
#IFR_Components.pidl
#IFR_Extended.pidl
#IFR_Base.pidl
#

#END MPC-Generated Install Info

