// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

#include "Monitor_TypesA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Monitor_DataValue[] =
      {
        { "timestamp", &TimeBase::_tc_TimeT },
        { "value", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Monitor_DataValue (
  ::CORBA::tk_struct,
  "IDL:Monitor/DataValue:1.0",
  "DataValue",
  _tao_fields_Monitor_DataValue,
  2);


namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_DataValue =
    &_tao_tc_Monitor_DataValue;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_Name (
    ::CORBA::tk_alias,
    "IDL:Monitor/Name:1.0",
    "Name",
    &CORBA::_tc_string);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_Name =
    &_tao_tc_Monitor_Name;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_NameFilter (
    ::CORBA::tk_alias,
    "IDL:Monitor/NameFilter:1.0",
    "NameFilter",
    &CORBA::_tc_string);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_NameFilter =
    &_tao_tc_Monitor_NameFilter;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_NameList (
    ::CORBA::tk_alias,
    "IDL:Monitor/NameList:1.0",
    "NameList",
    &CORBA::_tc_StringSeq);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_NameList =
    &_tao_tc_Monitor_NameList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_Monitor_DataValueList_GUARD
#define _TAO_TYPECODE_Monitor_DataValueList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Monitor_DataValueList_0 (
          ::CORBA::tk_sequence,
          &Monitor::_tc_DataValue,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Monitor_DataValueList_0 =
        &Monitor_DataValueList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_Monitor_DataValueList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_DataValueList (
    ::CORBA::tk_alias,
    "IDL:Monitor/DataValueList:1.0",
    "DataValueList",
    &TAO::TypeCode::tc_Monitor_DataValueList_0);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_DataValueList =
    &_tao_tc_Monitor_DataValueList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Monitor_Numeric[] =
      {
        { "dlist", &Monitor::_tc_DataValueList },
        { "count", &CORBA::_tc_ulong },
        { "average", &CORBA::_tc_double },
        { "sum_of_squares", &CORBA::_tc_double },
        { "minimum", &CORBA::_tc_double },
        { "maximum", &CORBA::_tc_double },
        { "last", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Monitor_Numeric (
  ::CORBA::tk_struct,
  "IDL:Monitor/Numeric:1.0",
  "Numeric",
  _tao_fields_Monitor_Numeric,
  7);


namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_Numeric =
    &_tao_tc_Monitor_Numeric;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_Monitor_DataType[] =
  {
    "DATA_NUMERIC",
    "DATA_TEXT"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_DataType (
    "IDL:Monitor/DataType:1.0",
    "DataType",
    _tao_enumerators_Monitor_DataType,
    2);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_DataType =
    &_tao_tc_Monitor_DataType;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/union_typecode.cpp:66



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460

static TAO::TypeCode::Case_T<Monitor::DataType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Monitor_UData__0 (Monitor::DATA_NUMERIC, "num", &Monitor::_tc_Numeric);
static TAO::TypeCode::Case_T<Monitor::DataType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_Monitor_UData__1 (Monitor::DATA_TEXT, "list", &Monitor::_tc_NameList);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_Monitor_UData[] =
  {
    &_tao_cases_Monitor_UData__0,
    &_tao_cases_Monitor_UData__1
    
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_UData (
    "IDL:Monitor/UData:1.0",
    "UData",
    &Monitor::_tc_DataType,
    _tao_cases_Monitor_UData,
    2, -1);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_UData =
    &_tao_tc_Monitor_UData;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Monitor_Data[] =
      {
        { "itemname", &Monitor::_tc_Name },
        { "data_union", &Monitor::_tc_UData }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Monitor_Data (
  ::CORBA::tk_struct,
  "IDL:Monitor/Data:1.0",
  "Data",
  _tao_fields_Monitor_Data,
  2);


namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_Data =
    &_tao_tc_Monitor_Data;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_Monitor_DataList_GUARD
#define _TAO_TYPECODE_Monitor_DataList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Monitor_DataList_0 (
          ::CORBA::tk_sequence,
          &Monitor::_tc_Data,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Monitor_DataList_0 =
        &Monitor_DataList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_Monitor_DataList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_DataList (
    ::CORBA::tk_alias,
    "IDL:Monitor/DataList:1.0",
    "DataList",
    &TAO::TypeCode::tc_Monitor_DataList_0);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_DataList =
    &_tao_tc_Monitor_DataList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_ConstraintId (
    ::CORBA::tk_alias,
    "IDL:Monitor/ConstraintId:1.0",
    "ConstraintId",
    &CORBA::_tc_long);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_ConstraintId =
    &_tao_tc_Monitor_ConstraintId;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_Monitor_ConstraintIdList_GUARD
#define _TAO_TYPECODE_Monitor_ConstraintIdList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Monitor_ConstraintIdList_0 (
          ::CORBA::tk_sequence,
          &Monitor::_tc_ConstraintId,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Monitor_ConstraintIdList_0 =
        &Monitor_ConstraintIdList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_Monitor_ConstraintIdList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_ConstraintIdList (
    ::CORBA::tk_alias,
    "IDL:Monitor/ConstraintIdList:1.0",
    "ConstraintIdList",
    &TAO::TypeCode::tc_Monitor_ConstraintIdList_0);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_ConstraintIdList =
    &_tao_tc_Monitor_ConstraintIdList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_Constraint (
    ::CORBA::tk_alias,
    "IDL:Monitor/Constraint:1.0",
    "Constraint",
    &CORBA::_tc_string);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_Constraint =
    &_tao_tc_Monitor_Constraint;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Monitor_ConstraintStruct[] =
      {
        { "itemname", &Monitor::_tc_Name },
        { "id", &Monitor::_tc_ConstraintId }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Monitor_ConstraintStruct (
  ::CORBA::tk_struct,
  "IDL:Monitor/ConstraintStruct:1.0",
  "ConstraintStruct",
  _tao_fields_Monitor_ConstraintStruct,
  2);


namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_ConstraintStruct =
    &_tao_tc_Monitor_ConstraintStruct;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_Monitor_ConstraintStructList_GUARD
#define _TAO_TYPECODE_Monitor_ConstraintStructList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Monitor_ConstraintStructList_0 (
          ::CORBA::tk_sequence,
          &Monitor::_tc_ConstraintStruct,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Monitor_ConstraintStructList_0 =
        &Monitor_ConstraintStructList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_Monitor_ConstraintStructList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Monitor_ConstraintStructList (
    ::CORBA::tk_alias,
    "IDL:Monitor/ConstraintStructList:1.0",
    "ConstraintStructList",
    &TAO::TypeCode::tc_Monitor_ConstraintStructList_0);
  

namespace Monitor
{
  ::CORBA::TypeCode_ptr const _tc_ConstraintStructList =
    &_tao_tc_Monitor_ConstraintStructList;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::DataValue &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::DataValue *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::DataValue>::insert_copy (
          _tao_any,
          ::Monitor::DataValue::_tao_any_destructor,
          ::Monitor::_tc_DataValue,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      Monitor::DataValue *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::DataValue>::insert (
        _tao_any,
        ::Monitor::DataValue::_tao_any_destructor,
        ::Monitor::_tc_DataValue,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::DataValue *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::DataValue *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::DataValue *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::DataValue>::extract (
          _tao_any,
          ::Monitor::DataValue::_tao_any_destructor,
          ::Monitor::_tc_DataValue,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::DataValue &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::DataValue *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::DataValue>::insert_copy (
        _tao_any,
        Monitor::DataValue::_tao_any_destructor,
        Monitor::_tc_DataValue,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::DataValue *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::DataValue>::insert (
      _tao_any,
      Monitor::DataValue::_tao_any_destructor,
      Monitor::_tc_DataValue,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::DataValue *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::DataValue *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::DataValue *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::DataValue>::extract (
        _tao_any,
        Monitor::DataValue::_tao_any_destructor,
        Monitor::_tc_DataValue,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::DataValueList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::DataValueList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::DataValueList>::insert_copy (
          _tao_any,
          ::Monitor::DataValueList::_tao_any_destructor,
          ::Monitor::_tc_DataValueList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Monitor::DataValueList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::DataValueList>::insert (
        _tao_any,
        ::Monitor::DataValueList::_tao_any_destructor,
        ::Monitor::_tc_DataValueList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::DataValueList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::DataValueList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::DataValueList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::DataValueList>::extract (
          _tao_any,
          ::Monitor::DataValueList::_tao_any_destructor,
          ::Monitor::_tc_DataValueList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::DataValueList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::DataValueList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::DataValueList>::insert_copy (
        _tao_any,
        Monitor::DataValueList::_tao_any_destructor,
        Monitor::_tc_DataValueList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::DataValueList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::DataValueList>::insert (
      _tao_any,
      Monitor::DataValueList::_tao_any_destructor,
      Monitor::_tc_DataValueList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::DataValueList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::DataValueList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::DataValueList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::DataValueList>::extract (
        _tao_any,
        Monitor::DataValueList::_tao_any_destructor,
        Monitor::_tc_DataValueList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::Numeric &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::Numeric *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::Numeric>::insert_copy (
          _tao_any,
          ::Monitor::Numeric::_tao_any_destructor,
          ::Monitor::_tc_Numeric,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      Monitor::Numeric *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::Numeric>::insert (
        _tao_any,
        ::Monitor::Numeric::_tao_any_destructor,
        ::Monitor::_tc_Numeric,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::Numeric *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::Numeric *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::Numeric *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::Numeric>::extract (
          _tao_any,
          ::Monitor::Numeric::_tao_any_destructor,
          ::Monitor::_tc_Numeric,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::Numeric &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::Numeric *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::Numeric>::insert_copy (
        _tao_any,
        Monitor::Numeric::_tao_any_destructor,
        Monitor::_tc_Numeric,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::Numeric *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::Numeric>::insert (
      _tao_any,
      Monitor::Numeric::_tao_any_destructor,
      Monitor::_tc_Numeric,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::Numeric *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::Numeric *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::Numeric *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::Numeric>::extract (
        _tao_any,
        Monitor::Numeric::_tao_any_destructor,
        Monitor::_tc_Numeric,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Monitor::DataType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::Monitor::DataType>::insert (
        _tao_any,
        ::Monitor::_tc_DataType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::DataType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::Monitor::DataType>::extract (
          _tao_any,
          ::Monitor::_tc_DataType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::DataType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<Monitor::DataType>::insert (
      _tao_any,
      Monitor::_tc_DataType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::DataType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<Monitor::DataType>::extract (
        _tao_any,
        Monitor::_tc_DataType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::UData &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::UData *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::UData>::insert_copy (
          _tao_any,
          ::Monitor::UData::_tao_any_destructor,
          ::Monitor::_tc_UData,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Monitor::UData *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::UData>::insert (
        _tao_any,
        ::Monitor::UData::_tao_any_destructor,
        ::Monitor::_tc_UData,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::UData *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::UData *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::UData *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::UData>::extract (
          _tao_any,
          ::Monitor::UData::_tao_any_destructor,
          ::Monitor::_tc_UData,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::UData &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::UData *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::UData>::insert_copy (
        _tao_any,
        Monitor::UData::_tao_any_destructor,
        Monitor::_tc_UData,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::UData *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::UData>::insert (
      _tao_any,
      Monitor::UData::_tao_any_destructor,
      Monitor::_tc_UData,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::UData *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::UData *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::UData *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::UData>::extract (
        _tao_any,
        Monitor::UData::_tao_any_destructor,
        Monitor::_tc_UData,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::Data &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::Data *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::Data>::insert_copy (
          _tao_any,
          ::Monitor::Data::_tao_any_destructor,
          ::Monitor::_tc_Data,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      Monitor::Data *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::Data>::insert (
        _tao_any,
        ::Monitor::Data::_tao_any_destructor,
        ::Monitor::_tc_Data,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::Data *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::Data *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::Data *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::Data>::extract (
          _tao_any,
          ::Monitor::Data::_tao_any_destructor,
          ::Monitor::_tc_Data,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::Data &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::Data *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::Data>::insert_copy (
        _tao_any,
        Monitor::Data::_tao_any_destructor,
        Monitor::_tc_Data,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::Data *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::Data>::insert (
      _tao_any,
      Monitor::Data::_tao_any_destructor,
      Monitor::_tc_Data,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::Data *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::Data *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::Data *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::Data>::extract (
        _tao_any,
        Monitor::Data::_tao_any_destructor,
        Monitor::_tc_Data,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::DataList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::DataList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::DataList>::insert_copy (
          _tao_any,
          ::Monitor::DataList::_tao_any_destructor,
          ::Monitor::_tc_DataList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Monitor::DataList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::DataList>::insert (
        _tao_any,
        ::Monitor::DataList::_tao_any_destructor,
        ::Monitor::_tc_DataList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::DataList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::DataList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::DataList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::DataList>::extract (
          _tao_any,
          ::Monitor::DataList::_tao_any_destructor,
          ::Monitor::_tc_DataList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::DataList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::DataList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::DataList>::insert_copy (
        _tao_any,
        Monitor::DataList::_tao_any_destructor,
        Monitor::_tc_DataList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::DataList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::DataList>::insert (
      _tao_any,
      Monitor::DataList::_tao_any_destructor,
      Monitor::_tc_DataList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::DataList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::DataList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::DataList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::DataList>::extract (
        _tao_any,
        Monitor::DataList::_tao_any_destructor,
        Monitor::_tc_DataList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::ConstraintIdList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::ConstraintIdList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::ConstraintIdList>::insert_copy (
          _tao_any,
          ::Monitor::ConstraintIdList::_tao_any_destructor,
          ::Monitor::_tc_ConstraintIdList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Monitor::ConstraintIdList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::ConstraintIdList>::insert (
        _tao_any,
        ::Monitor::ConstraintIdList::_tao_any_destructor,
        ::Monitor::_tc_ConstraintIdList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::ConstraintIdList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::ConstraintIdList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::ConstraintIdList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::ConstraintIdList>::extract (
          _tao_any,
          ::Monitor::ConstraintIdList::_tao_any_destructor,
          ::Monitor::_tc_ConstraintIdList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::ConstraintIdList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::ConstraintIdList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::ConstraintIdList>::insert_copy (
        _tao_any,
        Monitor::ConstraintIdList::_tao_any_destructor,
        Monitor::_tc_ConstraintIdList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::ConstraintIdList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::ConstraintIdList>::insert (
      _tao_any,
      Monitor::ConstraintIdList::_tao_any_destructor,
      Monitor::_tc_ConstraintIdList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::ConstraintIdList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::ConstraintIdList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::ConstraintIdList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::ConstraintIdList>::extract (
        _tao_any,
        Monitor::ConstraintIdList::_tao_any_destructor,
        Monitor::_tc_ConstraintIdList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::ConstraintStruct &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::ConstraintStruct *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::ConstraintStruct>::insert_copy (
          _tao_any,
          ::Monitor::ConstraintStruct::_tao_any_destructor,
          ::Monitor::_tc_ConstraintStruct,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      Monitor::ConstraintStruct *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::ConstraintStruct>::insert (
        _tao_any,
        ::Monitor::ConstraintStruct::_tao_any_destructor,
        ::Monitor::_tc_ConstraintStruct,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::ConstraintStruct *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::ConstraintStruct *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::ConstraintStruct *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::ConstraintStruct>::extract (
          _tao_any,
          ::Monitor::ConstraintStruct::_tao_any_destructor,
          ::Monitor::_tc_ConstraintStruct,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::ConstraintStruct &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::ConstraintStruct *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::ConstraintStruct>::insert_copy (
        _tao_any,
        Monitor::ConstraintStruct::_tao_any_destructor,
        Monitor::_tc_ConstraintStruct,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::ConstraintStruct *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::ConstraintStruct>::insert (
      _tao_any,
      Monitor::ConstraintStruct::_tao_any_destructor,
      Monitor::_tc_ConstraintStruct,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::ConstraintStruct *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::ConstraintStruct *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::ConstraintStruct *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::ConstraintStruct>::extract (
        _tao_any,
        Monitor::ConstraintStruct::_tao_any_destructor,
        Monitor::_tc_ConstraintStruct,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Monitor
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Monitor::ConstraintStructList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::Monitor::ConstraintStructList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::Monitor::ConstraintStructList>::insert_copy (
          _tao_any,
          ::Monitor::ConstraintStructList::_tao_any_destructor,
          ::Monitor::_tc_ConstraintStructList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Monitor::ConstraintStructList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::Monitor::ConstraintStructList>::insert (
        _tao_any,
        ::Monitor::ConstraintStructList::_tao_any_destructor,
        ::Monitor::_tc_ConstraintStructList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Monitor::ConstraintStructList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::Monitor::ConstraintStructList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Monitor::ConstraintStructList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::Monitor::ConstraintStructList>::extract (
          _tao_any,
          ::Monitor::ConstraintStructList::_tao_any_destructor,
          ::Monitor::_tc_ConstraintStructList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Monitor::ConstraintStructList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Monitor::ConstraintStructList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Monitor::ConstraintStructList>::insert_copy (
        _tao_any,
        Monitor::ConstraintStructList::_tao_any_destructor,
        Monitor::_tc_ConstraintStructList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Monitor::ConstraintStructList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Monitor::ConstraintStructList>::insert (
      _tao_any,
      Monitor::ConstraintStructList::_tao_any_destructor,
      Monitor::_tc_ConstraintStructList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Monitor::ConstraintStructList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Monitor::ConstraintStructList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Monitor::ConstraintStructList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Monitor::ConstraintStructList>::extract (
        _tao_any,
        Monitor::ConstraintStructList::_tao_any_destructor,
        Monitor::_tc_ConstraintStructList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

TAO_END_VERSIONED_NAMESPACE_DECL


