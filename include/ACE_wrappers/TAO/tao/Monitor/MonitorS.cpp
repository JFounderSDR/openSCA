// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:651

#ifndef _TAO_IDL_MONITORS_77VP5N_CPP_
#define _TAO_IDL_MONITORS_77VP5N_CPP_


#include "MonitorS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Direct_Collocation_Upcall_Wrapper.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_Monitor_Subscriber_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Monitor_Subscriber_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Monitor_Subscriber_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16, 16,
      0,  5, 16, 16,  0, 16, 16, 16, 16, 16,
     16, 16,  0, 16, 16, 16,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_Monitor_Subscriber_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 6,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 12,
      DUPLICATES = 0,
      WORDLIST_SIZE = 10
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"push", &POA_Monitor::Subscriber::push_skel, &POA_Monitor::_TAO_Subscriber_Direct_Proxy_Impl::push},
      {"_is_a", &POA_Monitor::Subscriber::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_Monitor::Subscriber::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_Monitor::Subscriber::_non_existent_skel, 0},
      {"_repository_id", &POA_Monitor::Subscriber::_repository_id_skel, 0},
      {"_interface", &POA_Monitor::Subscriber::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_Monitor_Subscriber_Perfect_Hash_OpTable tao_Monitor_Subscriber_optable;
///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/strategized_proxy_broker_ss.cpp:35

// Global static proxy broker.
static POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker
tao_Monitor__TAO_Subscriber_Proxy_Broker;

// Factory function Implementation.
POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker *
POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker::the_TAO_Subscriber_Strategized_Proxy_Broker (void)
{
  return &tao_Monitor__TAO_Subscriber_Proxy_Broker;
}

POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker::~_TAO_Subscriber_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker::get_strategy (
    ::CORBA::Object_ptr obj)
{
  return TAO_ORB_Core::collocation_strategy (obj);
}

void
POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker::dispatch (
    ::CORBA::Object_ptr obj,
    ::CORBA::Object_out forward_obj,
    bool & is_forwarded,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy)
{
  TAO::Direct_Collocation_Upcall_Wrapper collocation_upcall_wrapper;
  collocation_upcall_wrapper.upcall (
    obj,
    forward_obj,
    is_forwarded,
    args,
    num_args,
    op,
    op_len,
    strategy);
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
Monitor__TAO_Subscriber_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return
    ::POA_Monitor::_TAO_Subscriber_Strategized_Proxy_Broker::the_TAO_Subscriber_Strategized_Proxy_Broker ();
}

int
Monitor__TAO_Subscriber_Proxy_Broker_Factory_Initializer (size_t)
{
  Monitor__TAO_Subscriber_Proxy_Broker_Factory_function_pointer = 
    Monitor__TAO_Subscriber_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
Monitor__TAO_Subscriber_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  Monitor__TAO_Subscriber_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (Monitor__TAO_Subscriber_Proxy_Broker_Factory_Initializer));


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_Monitor::_TAO_Subscriber_Direct_Proxy_Impl::~_TAO_Subscriber_Direct_Proxy_Impl (void)
{
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_Subscriber_Direct_Proxy_Impl::push (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  dynamic_cast<POA_Monitor::Subscriber_ptr>
    (servant)
  ->push (
        ((TAO::Arg_Traits< ::Monitor::DataList>::in_arg_val *) args[1])->arg ()
      );
  
}


//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_Monitor::Subscriber::Subscriber (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Monitor_Subscriber_optable;
}

POA_Monitor::Subscriber::Subscriber (const Subscriber& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Monitor::Subscriber::~Subscriber (void)
{
}

namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class push_Subscriber
    : public TAO::Upcall_Command
  {
  public:
    inline push_Subscriber (
      POA_Monitor::Subscriber * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::DataList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::DataList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->push (
        arg_1);
    }
  
  private:
    POA_Monitor::Subscriber * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::Subscriber::push_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::DataList>::in_arg_val _tao_dil;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_dil
    };
  
  static size_t const nargs = 2;

  POA_Monitor::Subscriber * const impl =
    static_cast<POA_Monitor::Subscriber *> (servant);

  push_Subscriber command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_Subscriber_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_Subscriber_Upcall_Command (
      POA_Monitor::Subscriber * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_Monitor::Subscriber * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::Subscriber::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_Monitor::Subscriber * const impl =
    static_cast<POA_Monitor::Subscriber *> (servant);
  
  _is_a_Subscriber_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_Subscriber_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_Subscriber_Upcall_Command (
      POA_Monitor::Subscriber * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_Monitor::Subscriber * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::Subscriber::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_Monitor::Subscriber * const impl =
    static_cast<POA_Monitor::Subscriber *> (servant);
  
  _non_existent_Subscriber_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_Subscriber_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_Subscriber_Upcall_Command (
      POA_Monitor::Subscriber * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_Monitor::Subscriber * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::Subscriber::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_Monitor::Subscriber * const impl =
    static_cast<POA_Monitor::Subscriber *> (servant);
  
  _repository_id_Subscriber_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_Monitor::Subscriber::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_Monitor::Subscriber * const impl =
    static_cast<POA_Monitor::Subscriber *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_Subscriber_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_Subscriber_Upcall_Command (
      POA_Monitor::Subscriber * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_Monitor::Subscriber * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::Subscriber::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_Monitor::Subscriber * const impl =
    static_cast<POA_Monitor::Subscriber *> (servant);
  
  _get_component_Subscriber_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_Monitor::Subscriber::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Monitor/Subscriber:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Monitor::Subscriber::_interface_repository_id (void) const
{
  return "IDL:Monitor/Subscriber:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_Monitor::Subscriber::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

Monitor::Subscriber *
POA_Monitor::Subscriber::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Monitor::Subscriber STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Monitor__TAO_Subscriber_Proxy_Broker_Factory_function_pointer
      );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:1714

class TAO_Monitor_MC_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Monitor_MC_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Monitor_MC_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35,  0, 35,  0, 35,  0,
     15,  5, 35,  0, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 15,  0,  0,  0, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_Monitor_MC_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 11,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 24,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 34,
      HASH_VALUE_RANGE = 30,
      DUPLICATES = 0,
      WORDLIST_SIZE = 16
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &POA_Monitor::MC::_is_a_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &POA_Monitor::MC::_component_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &POA_Monitor::MC::_non_existent_skel, 0},
      {"get_statistics", &POA_Monitor::MC::get_statistics_skel, &POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistics},
      {"_interface", &POA_Monitor::MC::_interface_skel, 0},
      {"clear_statistics", &POA_Monitor::MC::clear_statistics_skel, &POA_Monitor::_TAO_MC_Direct_Proxy_Impl::clear_statistics},
      {"",0,0},{"",0,0},
      {"get_statistic_names", &POA_Monitor::MC::get_statistic_names_skel, &POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistic_names},
      {"",0,0},{"",0,0},
      {"unregister_constraints", &POA_Monitor::MC::unregister_constraints_skel, &POA_Monitor::_TAO_MC_Direct_Proxy_Impl::unregister_constraints},
      {"",0,0},
      {"get_and_clear_statistics", &POA_Monitor::MC::get_and_clear_statistics_skel, &POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_and_clear_statistics},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_repository_id", &POA_Monitor::MC::_repository_id_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"register_constraint", &POA_Monitor::MC::register_constraint_skel, &POA_Monitor::_TAO_MC_Direct_Proxy_Impl::register_constraint},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_Monitor_MC_Perfect_Hash_OpTable tao_Monitor_MC_optable;
///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/strategized_proxy_broker_ss.cpp:35

// Global static proxy broker.
static POA_Monitor::_TAO_MC_Strategized_Proxy_Broker
tao_Monitor__TAO_MC_Proxy_Broker;

// Factory function Implementation.
POA_Monitor::_TAO_MC_Strategized_Proxy_Broker *
POA_Monitor::_TAO_MC_Strategized_Proxy_Broker::the_TAO_MC_Strategized_Proxy_Broker (void)
{
  return &tao_Monitor__TAO_MC_Proxy_Broker;
}

POA_Monitor::_TAO_MC_Strategized_Proxy_Broker::~_TAO_MC_Strategized_Proxy_Broker (void)
{
}

TAO::Collocation_Strategy
POA_Monitor::_TAO_MC_Strategized_Proxy_Broker::get_strategy (
    ::CORBA::Object_ptr obj)
{
  return TAO_ORB_Core::collocation_strategy (obj);
}

void
POA_Monitor::_TAO_MC_Strategized_Proxy_Broker::dispatch (
    ::CORBA::Object_ptr obj,
    ::CORBA::Object_out forward_obj,
    bool & is_forwarded,
    TAO::Argument ** args,
    int num_args,
    const char * op,
    size_t op_len,
    TAO::Collocation_Strategy strategy)
{
  TAO::Direct_Collocation_Upcall_Wrapper collocation_upcall_wrapper;
  collocation_upcall_wrapper.upcall (
    obj,
    forward_obj,
    is_forwarded,
    args,
    num_args,
    op,
    op_len,
    strategy);
}

//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:1029

TAO::Collocation_Proxy_Broker *
Monitor__TAO_MC_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return
    ::POA_Monitor::_TAO_MC_Strategized_Proxy_Broker::the_TAO_MC_Strategized_Proxy_Broker ();
}

int
Monitor__TAO_MC_Proxy_Broker_Factory_Initializer (size_t)
{
  Monitor__TAO_MC_Proxy_Broker_Factory_function_pointer = 
    Monitor__TAO_MC_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
Monitor__TAO_MC_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  Monitor__TAO_MC_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (Monitor__TAO_MC_Proxy_Broker_Factory_Initializer));


///////////////////////////////////////////////////////////////////////
//                 Direct Proxy  Implementation
//

POA_Monitor::_TAO_MC_Direct_Proxy_Impl::~_TAO_MC_Direct_Proxy_Impl (void)
{
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistic_names (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  ((TAO::Arg_Traits< ::Monitor::NameList>::ret_val *) args[0])->arg () =
    dynamic_cast<POA_Monitor::MC_ptr>
      (servant)
    ->get_statistic_names (
          ((TAO::Arg_Traits< char *>::in_arg_val *) args[1])->arg ()
        );
  
}
// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_statistics (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  ((TAO::Arg_Traits< ::Monitor::DataList>::ret_val *) args[0])->arg () =
    dynamic_cast<POA_Monitor::MC_ptr>
      (servant)
    ->get_statistics (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg ()
        );
  
}
// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::get_and_clear_statistics (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  ((TAO::Arg_Traits< ::Monitor::DataList>::ret_val *) args[0])->arg () =
    dynamic_cast<POA_Monitor::MC_ptr>
      (servant)
    ->get_and_clear_statistics (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg ()
        );
  
}
// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::clear_statistics (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  ((TAO::Arg_Traits< ::Monitor::NameList>::ret_val *) args[0])->arg () =
    dynamic_cast<POA_Monitor::MC_ptr>
      (servant)
    ->clear_statistics (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg ()
        );
  
}
// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::register_constraint (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  ((TAO::Arg_Traits< ::Monitor::ConstraintStructList>::ret_val *) args[0])->arg () =
    dynamic_cast<POA_Monitor::MC_ptr>
      (servant)
    ->register_constraint (
          ((TAO::Arg_Traits< ::Monitor::NameList>::in_arg_val *) args[1])->arg (),
          ((TAO::Arg_Traits< char *>::in_arg_val *) args[2])->arg (),
          ((TAO::Arg_Traits< ::Monitor::Subscriber>::in_arg_val *) args[3])->arg ()
        );
  
}
// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/direct_proxy_impl_ss.cpp:57

void
POA_Monitor::_TAO_MC_Direct_Proxy_Impl::unregister_constraints (
    TAO_Abstract_ServantBase  *servant,
    TAO::Argument ** args,
    int)
  
{
  dynamic_cast<POA_Monitor::MC_ptr>
    (servant)
  ->unregister_constraints (
        ((TAO::Arg_Traits< ::Monitor::ConstraintStructList>::in_arg_val *) args[1])->arg ()
      );
  
}


//
//           End Direct Proxy Implementation
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:97

POA_Monitor::MC::MC (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Monitor_MC_optable;
}

POA_Monitor::MC::MC (const MC& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_Monitor::MC::~MC (void)
{
}

namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_statistic_names_MC
    : public TAO::Upcall_Command
  {
  public:
    inline get_statistic_names_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::NameList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_statistic_names (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::MC::get_statistic_names_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Monitor::NameList>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_filter
    };
  
  static size_t const nargs = 2;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);

  get_statistic_names_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_statistics_MC
    : public TAO::Upcall_Command
  {
  public:
    inline get_statistics_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::DataList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::DataList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_statistics (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::MC::get_statistics_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Monitor::DataList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_names
    };
  
  static size_t const nargs = 2;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);

  get_statistics_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class get_and_clear_statistics_MC
    : public TAO::Upcall_Command
  {
  public:
    inline get_and_clear_statistics_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::DataList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::DataList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_and_clear_statistics (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::MC::get_and_clear_statistics_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Monitor::DataList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_names
    };
  
  static size_t const nargs = 2;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);

  get_and_clear_statistics_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class clear_statistics_MC
    : public TAO::Upcall_Command
  {
  public:
    inline clear_statistics_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::NameList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->clear_statistics (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::MC::clear_statistics_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Monitor::NameList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_names
    };
  
  static size_t const nargs = 2;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);

  clear_statistics_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class register_constraint_MC
    : public TAO::Upcall_Command
  {
  public:
    inline register_constraint_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::ConstraintStructList>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::Monitor::ConstraintStructList> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::Monitor::NameList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::NameList> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::Monitor::Subscriber>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::Monitor::Subscriber> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->register_constraint (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::MC::register_constraint_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::Monitor::ConstraintStructList>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::NameList>::in_arg_val _tao_names;
  TAO::SArg_Traits< char *>::in_arg_val _tao_cs;
  TAO::SArg_Traits< ::Monitor::Subscriber>::in_arg_val _tao_sub;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_names,
      &_tao_cs,
      &_tao_sub
    };
  
  static size_t const nargs = 4;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);

  register_constraint_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class unregister_constraints_MC
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_constraints_MC (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Monitor::ConstraintStructList>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Monitor::ConstraintStructList> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unregister_constraints (
        arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ss.cpp:173

void POA_Monitor::MC::unregister_constraints_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Monitor::ConstraintStructList>::in_arg_val _tao_constraint;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_constraint
    };
  
  static size_t const nargs = 2;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);

  unregister_constraints_MC command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:170


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _is_a_MC_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_MC_Upcall_Command (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::MC::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_repository_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);
  
  _is_a_MC_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _non_existent_MC_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_MC_Upcall_Command (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::MC::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);
  
  _non_existent_MC_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _repository_id_MC_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_MC_Upcall_Command (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::MC::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);
  
  _repository_id_MC_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:525

void POA_Monitor::MC::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (!_tao_adapter)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();

  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);

  if (!_tao_result)
    {
      throw ::CORBA::MARSHAL ();
    }
}


namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/upcall_command_ss.cpp:81

  class _get_component_MC_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_MC_Upcall_Command (
      POA_Monitor::MC * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_Monitor::MC * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

void POA_Monitor::MC::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_Monitor::MC * const impl =
    static_cast<POA_Monitor::MC *> (servant);
  
  _get_component_MC_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_Monitor::MC::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Monitor/MC:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Monitor::MC::_interface_repository_id (void) const
{
  return "IDL:Monitor/MC:1.0";
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:966

void POA_Monitor::MC::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ss.cpp:884

Monitor::MC *
POA_Monitor::MC::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Monitor::MC STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Monitor__TAO_MC_Proxy_Broker_Factory_function_pointer
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

