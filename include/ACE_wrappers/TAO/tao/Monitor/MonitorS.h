// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:460

#ifndef _TAO_IDL_MONITORS_77VP5N_H_
#define _TAO_IDL_MONITORS_77VP5N_H_


#include "tao/Monitor/Monitor.h"
#include "tao/Monitor/Monitor_TypesS.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_MONITOR_SUBSCRIBER__SARG_TRAITS_)
#define _MONITOR_SUBSCRIBER__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Monitor::Subscriber>
    : public
        Object_SArg_Traits_T<
            ::Monitor::Subscriber_ptr,
            ::Monitor::Subscriber_var,
            ::Monitor::Subscriber_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:147

#if !defined (_MONITOR_MC__SARG_TRAITS_)
#define _MONITOR_MC__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Monitor::MC>
    : public
        Object_SArg_Traits_T<
            ::Monitor::MC_ptr,
            ::Monitor::MC_var,
            ::Monitor::MC_out,
            TAO::Any_Insert_Policy_Noop
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_sh.cpp:41

namespace POA_Monitor
{
  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:78

  class Subscriber;
  typedef Subscriber *Subscriber_ptr;

  class _TAO_Subscriber_Direct_Proxy_Impl;
  class _TAO_Subscriber_Strategized_Proxy_Broker;

  class TAO_Monitor_Export Subscriber
    : public virtual PortableServer::ServantBase
  {
  protected:
    Subscriber (void);
  
  public:
    /// Useful for template programming.
    typedef ::Monitor::Subscriber _stub_type;
    typedef ::Monitor::Subscriber_ptr _stub_ptr_type;
    typedef ::Monitor::Subscriber_var _stub_var_type;

    Subscriber (const Subscriber& rhs);
    virtual ~Subscriber (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::Monitor::Subscriber *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual void push (
      const ::Monitor::DataList & dil) = 0;

    static void push_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration 
  //

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:32

  class TAO_Monitor_Export _TAO_Subscriber_Strategized_Proxy_Broker
    : public virtual TAO::Collocation_Proxy_Broker
  {
  public: 
    virtual ~_TAO_Subscriber_Strategized_Proxy_Broker (void);

    TAO::Collocation_Strategy get_strategy (::CORBA::Object_ptr obj);
    
    void
    dispatch (
        ::CORBA::Object_ptr obj,
        ::CORBA::Object_out forward_obj,
        bool &is_forwarded,
        TAO::Argument ** args,
        int num_args,
        const char * op,
        size_t op_len,
        TAO::Collocation_Strategy strategy
      );
    
    static _TAO_Subscriber_Strategized_Proxy_Broker *
    the_TAO_Subscriber_Strategized_Proxy_Broker (void);
  };

  //
  //            End Strategized Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////

  

  // TAO_IDL - Generated from 
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/direct_proxy_impl_sh.cpp:27

  ///////////////////////////////////////////////////////////////////////
  //                    Direct  Impl. Declaration
  //

  class TAO_Monitor_Export _TAO_Subscriber_Direct_Proxy_Impl
  {
  public:
    virtual ~_TAO_Subscriber_Direct_Proxy_Impl (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    push (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    
  };

  //
  //                Direct  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////

  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:78

  class MC;
  typedef MC *MC_ptr;

  class _TAO_MC_Direct_Proxy_Impl;
  class _TAO_MC_Strategized_Proxy_Broker;

  class TAO_Monitor_Export MC
    : public virtual PortableServer::ServantBase
  {
  protected:
    MC (void);
  
  public:
    /// Useful for template programming.
    typedef ::Monitor::MC _stub_type;
    typedef ::Monitor::MC_ptr _stub_ptr_type;
    typedef ::Monitor::MC_var _stub_var_type;

    MC (const MC& rhs);
    virtual ~MC (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::Monitor::MC *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::Monitor::NameList * get_statistic_names (
      const char * filter) = 0;

    static void get_statistic_names_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::Monitor::DataList * get_statistics (
      const ::Monitor::NameList & names) = 0;

    static void get_statistics_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::Monitor::DataList * get_and_clear_statistics (
      const ::Monitor::NameList & names) = 0;

    static void get_and_clear_statistics_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::Monitor::NameList * clear_statistics (
      const ::Monitor::NameList & names) = 0;

    static void clear_statistics_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual ::Monitor::ConstraintStructList * register_constraint (
      const ::Monitor::NameList & names,
      const char * cs,
      ::Monitor::Subscriber_ptr sub) = 0;

    static void register_constraint_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:41

    virtual void unregister_constraints (
      const ::Monitor::ConstraintStructList & constraint) = 0;

    static void unregister_constraints_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

  ///////////////////////////////////////////////////////////////////////
  //               Strategized Proxy Broker Declaration 
  //

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:32

  class TAO_Monitor_Export _TAO_MC_Strategized_Proxy_Broker
    : public virtual TAO::Collocation_Proxy_Broker
  {
  public: 
    virtual ~_TAO_MC_Strategized_Proxy_Broker (void);

    TAO::Collocation_Strategy get_strategy (::CORBA::Object_ptr obj);
    
    void
    dispatch (
        ::CORBA::Object_ptr obj,
        ::CORBA::Object_out forward_obj,
        bool &is_forwarded,
        TAO::Argument ** args,
        int num_args,
        const char * op,
        size_t op_len,
        TAO::Collocation_Strategy strategy
      );
    
    static _TAO_MC_Strategized_Proxy_Broker *
    the_TAO_MC_Strategized_Proxy_Broker (void);
  };

  //
  //            End Strategized Proxy Broker Declaration 
  ///////////////////////////////////////////////////////////////////////

  

  // TAO_IDL - Generated from 
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/direct_proxy_impl_sh.cpp:27

  ///////////////////////////////////////////////////////////////////////
  //                    Direct  Impl. Declaration
  //

  class TAO_Monitor_Export _TAO_MC_Direct_Proxy_Impl
  {
  public:
    virtual ~_TAO_MC_Direct_Proxy_Impl (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    get_statistic_names (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    get_statistics (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    get_and_clear_statistics (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    clear_statistics (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    register_constraint (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:27

    static void
    unregister_constraints (
      TAO_Abstract_ServantBase *servant, TAO::Argument **args, int num_args);
    
  };

  //
  //                Direct  Proxy Impl. Declaration
  ///////////////////////////////////////////////////////////////////////

  

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_sh.cpp:72

} // module Monitor

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

