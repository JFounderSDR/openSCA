// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:838

#ifndef _TAO_IDL_DEFAULT_ORTA_0ODGI3_H_
#define _TAO_IDL_DEFAULT_ORTA_0ODGI3_H_


#include /**/ "tao/ObjRefTemplate/ort_export.h"
#include "tao/AnyTypeCode/Any.h"

#include "tao/ObjRefTemplate/Default_ORTC.h"
#include "tao/ObjRefTemplate/ObjectReferenceTemplate_includeA.h"


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:51

namespace TAO_Default_ORT
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_ORT_Export ::CORBA::TypeCode_ptr const _tc_ObjectReferenceTemplate;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:78

} // module TAO_Default_ORT


// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TAO_Default_ORT
{
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ObjectReferenceTemplate *); // copying
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ObjectReferenceTemplate **); // non-copying
  TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ObjectReferenceTemplate *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ORT_Export void operator<<= (::CORBA::Any &, TAO_Default_ORT::ObjectReferenceTemplate *); // copying
TAO_ORT_Export void operator<<= (::CORBA::Any &, TAO_Default_ORT::ObjectReferenceTemplate **); // non-copying
TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TAO_Default_ORT::ObjectReferenceTemplate *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */
