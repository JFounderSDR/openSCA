// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "Default_ORTC.h"
#include "tao/CDR.h"
#include "tao/Valuetype/ValueFactory.h"

#if !defined (__ACE_INLINE__)
#include "Default_ORTC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_cs.cpp:55

void
TAO::Value_Traits<TAO_Default_ORT::ObjectReferenceTemplate>::add_ref (
    TAO_Default_ORT::ObjectReferenceTemplate * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<TAO_Default_ORT::ObjectReferenceTemplate>::remove_ref (
    TAO_Default_ORT::ObjectReferenceTemplate * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<TAO_Default_ORT::ObjectReferenceTemplate>::release (
    TAO_Default_ORT::ObjectReferenceTemplate * p)
{
  ::CORBA::remove_ref (p);
}

TAO_Default_ORT::ObjectReferenceTemplate *
TAO_Default_ORT::ObjectReferenceTemplate::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::TAO_Default_ORT::ObjectReferenceTemplate * > (v);
}

const char *
TAO_Default_ORT::ObjectReferenceTemplate::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
TAO_Default_ORT::ObjectReferenceTemplate::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
TAO_Default_ORT::ObjectReferenceTemplate::_tao_any_destructor (void *_tao_void_pointer)
{
  ObjectReferenceTemplate *_tao_tmp_pointer =
    static_cast<ObjectReferenceTemplate *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

TAO_Default_ORT::ObjectReferenceTemplate::~ObjectReferenceTemplate (void)
{}

::CORBA::Boolean 
TAO_Default_ORT::ObjectReferenceTemplate::_tao_marshal_v (TAO_OutputCDR & strm) const
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_);
  return this->_tao_marshal__TAO_Default_ORT_ObjectReferenceTemplate (strm, ci);
}

::CORBA::Boolean 
TAO_Default_ORT::ObjectReferenceTemplate::_tao_unmarshal_v (TAO_InputCDR & strm)
{
  TAO_ChunkInfo ci (this->is_truncatable_ || this->chunking_, 1);
  return this->_tao_unmarshal__TAO_Default_ORT_ObjectReferenceTemplate (strm,ci);
}

::CORBA::Boolean 
TAO_Default_ORT::ObjectReferenceTemplate::_tao_match_formal_type (ptrdiff_t formal_type_id) const
{
  return formal_type_id == reinterpret_cast<ptrdiff_t> (TAO_Default_ORT::ObjectReferenceTemplate::_downcast);
}

::CORBA::Boolean 
TAO_Default_ORT::ObjectReferenceTemplate::_tao_unmarshal (
    TAO_InputCDR &strm,
    ObjectReferenceTemplate *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        ObjectReferenceTemplate::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = ObjectReferenceTemplate::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_obv_cs.cpp:48

OBV_TAO_Default_ORT::ObjectReferenceTemplate::ObjectReferenceTemplate (void)
: require_truncation_ (false)
{}

OBV_TAO_Default_ORT::ObjectReferenceTemplate::~ObjectReferenceTemplate (void)
{}

::CORBA::Boolean
OBV_TAO_Default_ORT::ObjectReferenceTemplate::_tao_marshal__TAO_Default_ORT_ObjectReferenceTemplate (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_TAO_Default_ORT::ObjectReferenceTemplate::_tao_unmarshal__TAO_Default_ORT_ObjectReferenceTemplate (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:508

void
CORBA::add_ref (TAO_Default_ORT::ObjectReferenceTemplate * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (TAO_Default_ORT::ObjectReferenceTemplate * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_cs.cpp:62



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm, 
    const TAO_Default_ORT::ObjectReferenceTemplate *_tao_valuetype
  )
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&TAO_Default_ORT::ObjectReferenceTemplate::_downcast)
      );
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    TAO_Default_ORT::ObjectReferenceTemplate *&_tao_valuetype
  )
{
  return TAO_Default_ORT::ObjectReferenceTemplate::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/marshal_cs.cpp:35

::CORBA::Boolean
OBV_TAO_Default_ORT::ObjectReferenceTemplate::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_TAO_Default_ORT::ObjectReferenceTemplate::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_TAO_Default_ORT::ObjectReferenceTemplate::truncation_hook (void)
{
  this->require_truncation_ = true;
}




TAO_END_VERSIONED_NAMESPACE_DECL


