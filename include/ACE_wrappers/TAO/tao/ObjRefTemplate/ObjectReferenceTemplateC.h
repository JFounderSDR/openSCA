// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_PIDL_OBJECTREFERENCETEMPLATEC_AFTYRK_H_
#define _TAO_PIDL_OBJECTREFERENCETEMPLATEC_AFTYRK_H_

#ifndef TAO_OBJREF_TEMPLATE_SAFE_INCLUDE
#error You should not include ObjectReferenceTemplateC.h, use tao/ObjRefTemplate/ObjectReferenceTemplate.h
#endif /* TAO_OBJREF_TEMPLATE_SAFE_INCLUDE */

#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/ObjRefTemplate/ort_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/PI_ForwardA.h"
#include "tao/Valuetype/Sequence_T.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/PI_ForwardC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_ORT_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace PortableInterceptor
{

  // TAO_IDL - Generated from
  // .\be\be_valuetype.cpp:560

  

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY__VAR_OUT_CH_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY__VAR_OUT_CH_

  class ObjectReferenceFactory;
  typedef
    TAO_Value_Var_T<
        ObjectReferenceFactory
      >
    ObjectReferenceFactory_var;
  
  typedef
    TAO_Value_Out_T<
        ObjectReferenceFactory
      >
    ObjectReferenceFactory_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:51

  class TAO_ORT_Export ObjectReferenceFactory
    : public virtual ::CORBA::ValueBase
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ObjectReferenceFactory * _ptr_type;
    typedef ObjectReferenceFactory_var _var_type;
    typedef ObjectReferenceFactory_out _out_type;

    static void _tao_any_destructor (void *);

    static ObjectReferenceFactory* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        ObjectReferenceFactory *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:396
    
  public:
    virtual ::CORBA::Object_ptr make_object (
        const char *, const ::PortableInterceptor::ObjectId &
      ) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:238
  
  protected:
    ObjectReferenceFactory (void);
    virtual ~ObjectReferenceFactory (void);

    
  private:
    ObjectReferenceFactory (const ObjectReferenceFactory &);
    void operator= (const ObjectReferenceFactory &);
    
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_ORT_Export ::CORBA::TypeCode_ptr const _tc_ObjectReferenceFactory;

  // TAO_IDL - Generated from
  // .\be\be_valuetype.cpp:560

  

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE__VAR_OUT_CH_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE__VAR_OUT_CH_

  class ObjectReferenceTemplate;
  typedef
    TAO_Value_Var_T<
        ObjectReferenceTemplate
      >
    ObjectReferenceTemplate_var;
  
  typedef
    TAO_Value_Out_T<
        ObjectReferenceTemplate
      >
    ObjectReferenceTemplate_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:51

  class TAO_ORT_Export ObjectReferenceTemplate
    : public virtual ObjectReferenceFactory
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ObjectReferenceTemplate * _ptr_type;
    typedef ObjectReferenceTemplate_var _var_type;
    typedef ObjectReferenceTemplate_out _out_type;

    static void _tao_any_destructor (void *);

    static ObjectReferenceTemplate* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        ObjectReferenceTemplate *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:396
    
  public:
    virtual char * server_id (void) = 0;

public:

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:396
  
public:
  virtual char * orb_id (void) = 0;

public:

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:396
  
public:
  virtual ::PortableInterceptor::AdapterName * adapter_name (void) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/valuetype_ch.cpp:238

protected:
  ObjectReferenceTemplate (void);
  virtual ~ObjectReferenceTemplate (void);

  
private:
  ObjectReferenceTemplate (const ObjectReferenceTemplate &);
  void operator= (const ObjectReferenceTemplate &);
  
};

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

extern TAO_ORT_Export ::CORBA::TypeCode_ptr const _tc_ObjectReferenceTemplate;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CH_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATESEQ_CH_

class ObjectReferenceTemplateSeq;

typedef
  ::TAO_VarSeq_Var_T<
      ObjectReferenceTemplateSeq
    >
  ObjectReferenceTemplateSeq_var;

typedef
  ::TAO_Seq_Out_T<
      ObjectReferenceTemplateSeq
    >
  ObjectReferenceTemplateSeq_out;

class TAO_ORT_Export ObjectReferenceTemplateSeq
  : public
      ::TAO::unbounded_valuetype_sequence<
          ObjectReferenceTemplate,
          ObjectReferenceTemplate_var
        >
{
public:
  ObjectReferenceTemplateSeq (void);
  ObjectReferenceTemplateSeq ( ::CORBA::ULong max);
  ObjectReferenceTemplateSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ObjectReferenceTemplate ** buffer, 
    ::CORBA::Boolean release = false);
  ObjectReferenceTemplateSeq (const ObjectReferenceTemplateSeq &);
  virtual ~ObjectReferenceTemplateSeq (void);
  

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:307
  
  typedef ObjectReferenceTemplateSeq_var _var_type;
  typedef ObjectReferenceTemplateSeq_out _out_type;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

extern TAO_ORT_Export ::CORBA::TypeCode_ptr const _tc_ObjectReferenceTemplateSeq;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module PortableInterceptor

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:308

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY__ARG_TRAITS_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY__ARG_TRAITS_

  template<>
  class Arg_Traits< ::PortableInterceptor::ObjectReferenceFactory>
    : public
        Object_Arg_Traits_T<
            ::PortableInterceptor::ObjectReferenceFactory *,
            ::PortableInterceptor::ObjectReferenceFactory_var,
            ::PortableInterceptor::ObjectReferenceFactory_out,
            TAO::Value_Traits<PortableInterceptor::ObjectReferenceFactory>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:308

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE__ARG_TRAITS_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE__ARG_TRAITS_

  template<>
  class Arg_Traits< ::PortableInterceptor::ObjectReferenceTemplate>
    : public
        Object_Arg_Traits_T<
            ::PortableInterceptor::ObjectReferenceTemplate *,
            ::PortableInterceptor::ObjectReferenceTemplate_var,
            ::PortableInterceptor::ObjectReferenceTemplate_out,
            TAO::Value_Traits<PortableInterceptor::ObjectReferenceTemplate>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::PortableInterceptor::ObjectReferenceTemplateSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::PortableInterceptor::ObjectReferenceTemplateSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/obv_module.cpp:45

namespace OBV_PortableInterceptor
{
}

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY__TRAITS_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCEFACTORY__TRAITS_

  template<>
  struct TAO_ORT_Export Value_Traits<PortableInterceptor::ObjectReferenceFactory>
  {
    static void add_ref (PortableInterceptor::ObjectReferenceFactory *);
    static void remove_ref (PortableInterceptor::ObjectReferenceFactory *);
    static void release (PortableInterceptor::ObjectReferenceFactory *);
  };

#endif /* end #if !defined */

#if !defined (_PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE__TRAITS_)
#define _PORTABLEINTERCEPTOR_OBJECTREFERENCETEMPLATE__TRAITS_

  template<>
  struct TAO_ORT_Export Value_Traits<PortableInterceptor::ObjectReferenceTemplate>
  {
    static void add_ref (PortableInterceptor::ObjectReferenceTemplate *);
    static void remove_ref (PortableInterceptor::ObjectReferenceTemplate *);
    static void release (PortableInterceptor::ObjectReferenceTemplate *);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableInterceptor
{
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ObjectReferenceFactory *); // copying
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ObjectReferenceFactory **); // non-copying
  TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ObjectReferenceFactory *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ORT_Export void operator<<= (::CORBA::Any &, PortableInterceptor::ObjectReferenceFactory *); // copying
TAO_ORT_Export void operator<<= (::CORBA::Any &, PortableInterceptor::ObjectReferenceFactory **); // non-copying
TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableInterceptor::ObjectReferenceFactory *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableInterceptor
{
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ObjectReferenceTemplate *); // copying
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ObjectReferenceTemplate **); // non-copying
  TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ObjectReferenceTemplate *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ORT_Export void operator<<= (::CORBA::Any &, PortableInterceptor::ObjectReferenceTemplate *); // copying
TAO_ORT_Export void operator<<= (::CORBA::Any &, PortableInterceptor::ObjectReferenceTemplate **); // non-copying
TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableInterceptor::ObjectReferenceTemplate *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace PortableInterceptor
{
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, const ::PortableInterceptor::ObjectReferenceTemplateSeq &); // copying version
  TAO_ORT_Export void operator<<= ( ::CORBA::Any &, ::PortableInterceptor::ObjectReferenceTemplateSeq*); // noncopying version
  TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::PortableInterceptor::ObjectReferenceTemplateSeq *&); // deprecated
  TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::PortableInterceptor::ObjectReferenceTemplateSeq *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ORT_Export void operator<<= ( ::CORBA::Any &, const PortableInterceptor::ObjectReferenceTemplateSeq &); // copying version
TAO_ORT_Export void operator<<= ( ::CORBA::Any &, PortableInterceptor::ObjectReferenceTemplateSeq*); // noncopying version
TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PortableInterceptor::ObjectReferenceTemplateSeq *&); // deprecated
TAO_ORT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PortableInterceptor::ObjectReferenceTemplateSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:452



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_ORT_Export void add_ref (PortableInterceptor::ObjectReferenceFactory *);
  extern TAO_ORT_Export void remove_ref (PortableInterceptor::ObjectReferenceFactory *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_ch.cpp:51



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ORT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableInterceptor::ObjectReferenceFactory *);
TAO_ORT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableInterceptor::ObjectReferenceFactory *&);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_valuetype.cpp:452



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern TAO_ORT_Export void add_ref (PortableInterceptor::ObjectReferenceTemplate *);
  extern TAO_ORT_Export void remove_ref (PortableInterceptor::ObjectReferenceTemplate *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype/cdr_op_ch.cpp:51



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ORT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PortableInterceptor::ObjectReferenceTemplate *);
TAO_ORT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, PortableInterceptor::ObjectReferenceTemplate *&);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_PortableInterceptor_ObjectReferenceTemplateSeq_H_
#define _TAO_CDR_OP_PortableInterceptor_ObjectReferenceTemplateSeq_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_ORT_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PortableInterceptor::ObjectReferenceTemplateSeq &_tao_sequence);
TAO_ORT_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PortableInterceptor::ObjectReferenceTemplateSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_PortableInterceptor_ObjectReferenceTemplateSeq_H_ */

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "ObjectReferenceTemplateC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

