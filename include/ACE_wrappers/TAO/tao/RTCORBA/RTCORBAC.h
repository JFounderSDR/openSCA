// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:150

#ifndef _TAO_PIDL_RTCORBAC_4IEZAE_H_
#define _TAO_PIDL_RTCORBAC_4IEZAE_H_

#ifndef TAO_RTCORBA_SAFE_INCLUDE
#error You should not include RTCORBAC.h, use tao/RTCORBA/RTCORBA.h
#endif /* TAO_RTCORBA_SAFE_INCLUDE */

#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/RTCORBA/rtcorba_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/IOPA.h"
#include "tao/AnyTypeCode/TimeBaseA.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/RTCORBA/RT_ProtocolPropertiesA.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/IOPC.h"
#include "tao/TimeBaseC.h"
#include "tao/PolicyC.h"
#include "tao/RTCORBA/RT_ProtocolPropertiesC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 0 || TAO_BETA_VERSION != 4
#error This file should be regenerated with TAO_IDL from version 2.0a
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO TAO_RTCORBA_Export

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:41

namespace RTCORBA
{

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Short NativePriority;
  typedef ::CORBA::Short_out NativePriority_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_NativePriority;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Short Priority;
  typedef ::CORBA::Short_out Priority_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_Priority;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::Short minPriority = 0;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::Short maxPriority = 32767;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_native/native_ch.cpp:46

  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_native/native_ch.cpp:46

  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::Long NetworkPriority;
  typedef ::CORBA::Long_out NetworkPriority_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_NetworkPriority;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_native/native_ch.cpp:46

  

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typedef/typedef_ch.cpp:369

  typedef ::CORBA::ULong ThreadpoolId;
  typedef ::CORBA::ULong_out ThreadpoolId_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ThreadpoolId;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct ThreadpoolLane;

  typedef
    ::TAO_Fixed_Var_T<
        ThreadpoolLane
      >
    ThreadpoolLane_var;
  
  typedef
    ThreadpoolLane &
    ThreadpoolLane_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTCORBA_Export ThreadpoolLane
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ThreadpoolLane_var _var_type;
    typedef ThreadpoolLane_out _out_type;

    static void _tao_any_destructor (void *);
    
    RTCORBA::Priority lane_priority;
    ::CORBA::ULong static_threads;
    ::CORBA::ULong dynamic_threads;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ThreadpoolLane;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTCORBA_THREADPOOLLANES_CH_)
#define _RTCORBA_THREADPOOLLANES_CH_

  class ThreadpoolLanes;

  typedef
    ::TAO_FixedSeq_Var_T<
        ThreadpoolLanes
      >
    ThreadpoolLanes_var;

  typedef
    ::TAO_Seq_Out_T<
        ThreadpoolLanes
      >
    ThreadpoolLanes_out;

  class TAO_RTCORBA_Export ThreadpoolLanes
    : public
        ::TAO::unbounded_value_sequence<
            ThreadpoolLane
          >
  {
  public:
    ThreadpoolLanes (void);
    ThreadpoolLanes ( ::CORBA::ULong max);
    ThreadpoolLanes (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ThreadpoolLane* buffer, 
      ::CORBA::Boolean release = false);
    ThreadpoolLanes (const ThreadpoolLanes &);
    virtual ~ThreadpoolLanes (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ThreadpoolLanes_var _var_type;
    typedef ThreadpoolLanes_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ThreadpoolLanes;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::ULong PRIORITY_MODEL_POLICY_TYPE = 40U;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/enum_ch.cpp:47

  enum PriorityModel
  {
    CLIENT_PROPAGATED,
    SERVER_DECLARED
  };

  typedef PriorityModel &PriorityModel_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_PriorityModel;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_PRIORITYMODELPOLICY__VAR_OUT_CH_)
#define _RTCORBA_PRIORITYMODELPOLICY__VAR_OUT_CH_

  class PriorityModelPolicy;
  typedef PriorityModelPolicy *PriorityModelPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        PriorityModelPolicy
      >
    PriorityModelPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        PriorityModelPolicy
      >
    PriorityModelPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export PriorityModelPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PriorityModelPolicy_ptr _ptr_type;
    typedef PriorityModelPolicy_var _var_type;
    typedef PriorityModelPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PriorityModelPolicy_ptr _duplicate (PriorityModelPolicy_ptr obj);

    static void _tao_release (PriorityModelPolicy_ptr obj);

    static PriorityModelPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static PriorityModelPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PriorityModelPolicy_ptr _nil (void);

    virtual ::RTCORBA::PriorityModel priority_model (
      void) = 0;

    virtual ::RTCORBA::Priority server_priority (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    PriorityModelPolicy (void);

    

    virtual ~PriorityModelPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PriorityModelPolicy (const PriorityModelPolicy &);

    void operator= (const PriorityModelPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_PriorityModelPolicy;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::ULong THREADPOOL_POLICY_TYPE = 41U;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_THREADPOOLPOLICY__VAR_OUT_CH_)
#define _RTCORBA_THREADPOOLPOLICY__VAR_OUT_CH_

  class ThreadpoolPolicy;
  typedef ThreadpoolPolicy *ThreadpoolPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        ThreadpoolPolicy
      >
    ThreadpoolPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        ThreadpoolPolicy
      >
    ThreadpoolPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export ThreadpoolPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ThreadpoolPolicy_ptr _ptr_type;
    typedef ThreadpoolPolicy_var _var_type;
    typedef ThreadpoolPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ThreadpoolPolicy_ptr _duplicate (ThreadpoolPolicy_ptr obj);

    static void _tao_release (ThreadpoolPolicy_ptr obj);

    static ThreadpoolPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static ThreadpoolPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ThreadpoolPolicy_ptr _nil (void);

    virtual ::RTCORBA::ThreadpoolId threadpool (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ThreadpoolPolicy (void);

    

    virtual ~ThreadpoolPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ThreadpoolPolicy (const ThreadpoolPolicy &);

    void operator= (const ThreadpoolPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ThreadpoolPolicy;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct Protocol;

  typedef
    ::TAO_Var_Var_T<
        Protocol
      >
    Protocol_var;
  
  typedef
    ::TAO_Out_T<
        Protocol
      >
    Protocol_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTCORBA_Export Protocol
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Protocol_var _var_type;
    typedef Protocol_out _out_type;

    static void _tao_any_destructor (void *);
    
    IOP::ProfileId protocol_type;
    RTCORBA::ProtocolProperties_var orb_protocol_properties;
    RTCORBA::ProtocolProperties_var transport_protocol_properties;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_Protocol;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTCORBA_PROTOCOLLIST_CH_)
#define _RTCORBA_PROTOCOLLIST_CH_

  class ProtocolList;

  typedef
    ::TAO_VarSeq_Var_T<
        ProtocolList
      >
    ProtocolList_var;

  typedef
    ::TAO_Seq_Out_T<
        ProtocolList
      >
    ProtocolList_out;

  class TAO_RTCORBA_Export ProtocolList
    : public
        ::TAO::unbounded_value_sequence<
            Protocol
          >
  {
  public:
    ProtocolList (void);
    ProtocolList ( ::CORBA::ULong max);
    ProtocolList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      Protocol* buffer, 
      ::CORBA::Boolean release = false);
    ProtocolList (const ProtocolList &);
    virtual ~ProtocolList (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ProtocolList_var _var_type;
    typedef ProtocolList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ProtocolList;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::ULong SERVER_PROTOCOL_POLICY_TYPE = 42U;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_SERVERPROTOCOLPOLICY__VAR_OUT_CH_)
#define _RTCORBA_SERVERPROTOCOLPOLICY__VAR_OUT_CH_

  class ServerProtocolPolicy;
  typedef ServerProtocolPolicy *ServerProtocolPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        ServerProtocolPolicy
      >
    ServerProtocolPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        ServerProtocolPolicy
      >
    ServerProtocolPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export ServerProtocolPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ServerProtocolPolicy_ptr _ptr_type;
    typedef ServerProtocolPolicy_var _var_type;
    typedef ServerProtocolPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ServerProtocolPolicy_ptr _duplicate (ServerProtocolPolicy_ptr obj);

    static void _tao_release (ServerProtocolPolicy_ptr obj);

    static ServerProtocolPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static ServerProtocolPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ServerProtocolPolicy_ptr _nil (void);

    virtual ::RTCORBA::ProtocolList * protocols (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ServerProtocolPolicy (void);

    

    virtual ~ServerProtocolPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ServerProtocolPolicy (const ServerProtocolPolicy &);

    void operator= (const ServerProtocolPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ServerProtocolPolicy;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::ULong CLIENT_PROTOCOL_POLICY_TYPE = 43U;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_CLIENTPROTOCOLPOLICY__VAR_OUT_CH_)
#define _RTCORBA_CLIENTPROTOCOLPOLICY__VAR_OUT_CH_

  class ClientProtocolPolicy;
  typedef ClientProtocolPolicy *ClientProtocolPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        ClientProtocolPolicy
      >
    ClientProtocolPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        ClientProtocolPolicy
      >
    ClientProtocolPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export ClientProtocolPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef ClientProtocolPolicy_ptr _ptr_type;
    typedef ClientProtocolPolicy_var _var_type;
    typedef ClientProtocolPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ClientProtocolPolicy_ptr _duplicate (ClientProtocolPolicy_ptr obj);

    static void _tao_release (ClientProtocolPolicy_ptr obj);

    static ClientProtocolPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static ClientProtocolPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ClientProtocolPolicy_ptr _nil (void);

    virtual ::RTCORBA::ProtocolList * protocols (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ClientProtocolPolicy (void);

    

    virtual ~ClientProtocolPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ClientProtocolPolicy (const ClientProtocolPolicy &);

    void operator= (const ClientProtocolPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_ClientProtocolPolicy;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::ULong PRIVATE_CONNECTION_POLICY_TYPE = 44U;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_PRIVATECONNECTIONPOLICY__VAR_OUT_CH_)
#define _RTCORBA_PRIVATECONNECTIONPOLICY__VAR_OUT_CH_

  class PrivateConnectionPolicy;
  typedef PrivateConnectionPolicy *PrivateConnectionPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        PrivateConnectionPolicy
      >
    PrivateConnectionPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        PrivateConnectionPolicy
      >
    PrivateConnectionPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export PrivateConnectionPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PrivateConnectionPolicy_ptr _ptr_type;
    typedef PrivateConnectionPolicy_var _var_type;
    typedef PrivateConnectionPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PrivateConnectionPolicy_ptr _duplicate (PrivateConnectionPolicy_ptr obj);

    static void _tao_release (PrivateConnectionPolicy_ptr obj);

    static PrivateConnectionPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static PrivateConnectionPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PrivateConnectionPolicy_ptr _nil (void);

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    PrivateConnectionPolicy (void);

    

    virtual ~PrivateConnectionPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PrivateConnectionPolicy (const PrivateConnectionPolicy &);

    void operator= (const PrivateConnectionPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_PrivateConnectionPolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_TCPPROTOCOLPROPERTIES__VAR_OUT_CH_)
#define _RTCORBA_TCPPROTOCOLPROPERTIES__VAR_OUT_CH_

  class TCPProtocolProperties;
  typedef TCPProtocolProperties *TCPProtocolProperties_ptr;

  typedef
    TAO_Objref_Var_T<
        TCPProtocolProperties
      >
    TCPProtocolProperties_var;
  
  typedef
    TAO_Objref_Out_T<
        TCPProtocolProperties
      >
    TCPProtocolProperties_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export TCPProtocolProperties
    : public virtual ::RTCORBA::ProtocolProperties
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef TCPProtocolProperties_ptr _ptr_type;
    typedef TCPProtocolProperties_var _var_type;
    typedef TCPProtocolProperties_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static TCPProtocolProperties_ptr _duplicate (TCPProtocolProperties_ptr obj);

    static void _tao_release (TCPProtocolProperties_ptr obj);

    static TCPProtocolProperties_ptr _narrow (::CORBA::Object_ptr obj);
    static TCPProtocolProperties_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TCPProtocolProperties_ptr _nil (void);

    virtual ::CORBA::Long send_buffer_size (
      void) = 0;

    virtual void send_buffer_size (
      ::CORBA::Long send_buffer_size) = 0;

    virtual ::CORBA::Long recv_buffer_size (
      void) = 0;

    virtual void recv_buffer_size (
      ::CORBA::Long recv_buffer_size) = 0;

    virtual ::CORBA::Boolean keep_alive (
      void) = 0;

    virtual void keep_alive (
      ::CORBA::Boolean keep_alive) = 0;

    virtual ::CORBA::Boolean dont_route (
      void) = 0;

    virtual void dont_route (
      ::CORBA::Boolean dont_route) = 0;

    virtual ::CORBA::Boolean no_delay (
      void) = 0;

    virtual void no_delay (
      ::CORBA::Boolean no_delay) = 0;

    virtual ::CORBA::Boolean enable_network_priority (
      void) = 0;

    virtual void enable_network_priority (
      ::CORBA::Boolean enable_network_priority) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TCPProtocolProperties (void);

    

    virtual ~TCPProtocolProperties (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TCPProtocolProperties (const TCPProtocolProperties &);

    void operator= (const TCPProtocolProperties &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_TCPProtocolProperties;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_GIOPPROTOCOLPROPERTIES__VAR_OUT_CH_)
#define _RTCORBA_GIOPPROTOCOLPROPERTIES__VAR_OUT_CH_

  class GIOPProtocolProperties;
  typedef GIOPProtocolProperties *GIOPProtocolProperties_ptr;

  typedef
    TAO_Objref_Var_T<
        GIOPProtocolProperties
      >
    GIOPProtocolProperties_var;
  
  typedef
    TAO_Objref_Out_T<
        GIOPProtocolProperties
      >
    GIOPProtocolProperties_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export GIOPProtocolProperties
    : public virtual ::RTCORBA::ProtocolProperties
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef GIOPProtocolProperties_ptr _ptr_type;
    typedef GIOPProtocolProperties_var _var_type;
    typedef GIOPProtocolProperties_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static GIOPProtocolProperties_ptr _duplicate (GIOPProtocolProperties_ptr obj);

    static void _tao_release (GIOPProtocolProperties_ptr obj);

    static GIOPProtocolProperties_ptr _narrow (::CORBA::Object_ptr obj);
    static GIOPProtocolProperties_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static GIOPProtocolProperties_ptr _nil (void);

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    GIOPProtocolProperties (void);

    

    virtual ~GIOPProtocolProperties (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    GIOPProtocolProperties (const GIOPProtocolProperties &);

    void operator= (const GIOPProtocolProperties &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_GIOPProtocolProperties;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES__VAR_OUT_CH_)
#define _RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES__VAR_OUT_CH_

  class UnixDomainProtocolProperties;
  typedef UnixDomainProtocolProperties *UnixDomainProtocolProperties_ptr;

  typedef
    TAO_Objref_Var_T<
        UnixDomainProtocolProperties
      >
    UnixDomainProtocolProperties_var;
  
  typedef
    TAO_Objref_Out_T<
        UnixDomainProtocolProperties
      >
    UnixDomainProtocolProperties_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export UnixDomainProtocolProperties
    : public virtual ::RTCORBA::ProtocolProperties
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UnixDomainProtocolProperties_ptr _ptr_type;
    typedef UnixDomainProtocolProperties_var _var_type;
    typedef UnixDomainProtocolProperties_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static UnixDomainProtocolProperties_ptr _duplicate (UnixDomainProtocolProperties_ptr obj);

    static void _tao_release (UnixDomainProtocolProperties_ptr obj);

    static UnixDomainProtocolProperties_ptr _narrow (::CORBA::Object_ptr obj);
    static UnixDomainProtocolProperties_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static UnixDomainProtocolProperties_ptr _nil (void);

    virtual ::CORBA::Long send_buffer_size (
      void) = 0;

    virtual void send_buffer_size (
      ::CORBA::Long send_buffer_size) = 0;

    virtual ::CORBA::Long recv_buffer_size (
      void) = 0;

    virtual void recv_buffer_size (
      ::CORBA::Long recv_buffer_size) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    UnixDomainProtocolProperties (void);

    

    virtual ~UnixDomainProtocolProperties (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    UnixDomainProtocolProperties (const UnixDomainProtocolProperties &);

    void operator= (const UnixDomainProtocolProperties &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_UnixDomainProtocolProperties;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES__VAR_OUT_CH_)
#define _RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES__VAR_OUT_CH_

  class SharedMemoryProtocolProperties;
  typedef SharedMemoryProtocolProperties *SharedMemoryProtocolProperties_ptr;

  typedef
    TAO_Objref_Var_T<
        SharedMemoryProtocolProperties
      >
    SharedMemoryProtocolProperties_var;
  
  typedef
    TAO_Objref_Out_T<
        SharedMemoryProtocolProperties
      >
    SharedMemoryProtocolProperties_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export SharedMemoryProtocolProperties
    : public virtual ::RTCORBA::ProtocolProperties
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef SharedMemoryProtocolProperties_ptr _ptr_type;
    typedef SharedMemoryProtocolProperties_var _var_type;
    typedef SharedMemoryProtocolProperties_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static SharedMemoryProtocolProperties_ptr _duplicate (SharedMemoryProtocolProperties_ptr obj);

    static void _tao_release (SharedMemoryProtocolProperties_ptr obj);

    static SharedMemoryProtocolProperties_ptr _narrow (::CORBA::Object_ptr obj);
    static SharedMemoryProtocolProperties_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static SharedMemoryProtocolProperties_ptr _nil (void);

    virtual ::CORBA::Long send_buffer_size (
      void) = 0;

    virtual void send_buffer_size (
      ::CORBA::Long send_buffer_size) = 0;

    virtual ::CORBA::Long recv_buffer_size (
      void) = 0;

    virtual void recv_buffer_size (
      ::CORBA::Long recv_buffer_size) = 0;

    virtual ::CORBA::Boolean keep_alive (
      void) = 0;

    virtual void keep_alive (
      ::CORBA::Boolean keep_alive) = 0;

    virtual ::CORBA::Boolean dont_route (
      void) = 0;

    virtual void dont_route (
      ::CORBA::Boolean dont_route) = 0;

    virtual ::CORBA::Boolean no_delay (
      void) = 0;

    virtual void no_delay (
      ::CORBA::Boolean no_delay) = 0;

    virtual ::CORBA::Long preallocate_buffer_size (
      void) = 0;

    virtual void preallocate_buffer_size (
      ::CORBA::Long preallocate_buffer_size) = 0;

    virtual char * mmap_filename (
      void) = 0;

    virtual void mmap_filename (
      const char * mmap_filename) = 0;

    virtual char * mmap_lockname (
      void) = 0;

    virtual void mmap_lockname (
      const char * mmap_lockname) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    SharedMemoryProtocolProperties (void);

    

    virtual ~SharedMemoryProtocolProperties (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    SharedMemoryProtocolProperties (const SharedMemoryProtocolProperties &);

    void operator= (const SharedMemoryProtocolProperties &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_SharedMemoryProtocolProperties;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_USERDATAGRAMPROTOCOLPROPERTIES__VAR_OUT_CH_)
#define _RTCORBA_USERDATAGRAMPROTOCOLPROPERTIES__VAR_OUT_CH_

  class UserDatagramProtocolProperties;
  typedef UserDatagramProtocolProperties *UserDatagramProtocolProperties_ptr;

  typedef
    TAO_Objref_Var_T<
        UserDatagramProtocolProperties
      >
    UserDatagramProtocolProperties_var;
  
  typedef
    TAO_Objref_Out_T<
        UserDatagramProtocolProperties
      >
    UserDatagramProtocolProperties_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export UserDatagramProtocolProperties
    : public virtual ::RTCORBA::ProtocolProperties
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef UserDatagramProtocolProperties_ptr _ptr_type;
    typedef UserDatagramProtocolProperties_var _var_type;
    typedef UserDatagramProtocolProperties_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static UserDatagramProtocolProperties_ptr _duplicate (UserDatagramProtocolProperties_ptr obj);

    static void _tao_release (UserDatagramProtocolProperties_ptr obj);

    static UserDatagramProtocolProperties_ptr _narrow (::CORBA::Object_ptr obj);
    static UserDatagramProtocolProperties_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static UserDatagramProtocolProperties_ptr _nil (void);

    virtual ::CORBA::Long send_buffer_size (
      void) = 0;

    virtual void send_buffer_size (
      ::CORBA::Long send_buffer_size) = 0;

    virtual ::CORBA::Long recv_buffer_size (
      void) = 0;

    virtual void recv_buffer_size (
      ::CORBA::Long recv_buffer_size) = 0;

    virtual ::CORBA::Boolean enable_network_priority (
      void) = 0;

    virtual void enable_network_priority (
      ::CORBA::Boolean enable_network_priority) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    UserDatagramProtocolProperties (void);

    

    virtual ~UserDatagramProtocolProperties (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    UserDatagramProtocolProperties (const UserDatagramProtocolProperties &);

    void operator= (const UserDatagramProtocolProperties &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_UserDatagramProtocolProperties;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_STREAMCONTROLPROTOCOLPROPERTIES__VAR_OUT_CH_)
#define _RTCORBA_STREAMCONTROLPROTOCOLPROPERTIES__VAR_OUT_CH_

  class StreamControlProtocolProperties;
  typedef StreamControlProtocolProperties *StreamControlProtocolProperties_ptr;

  typedef
    TAO_Objref_Var_T<
        StreamControlProtocolProperties
      >
    StreamControlProtocolProperties_var;
  
  typedef
    TAO_Objref_Out_T<
        StreamControlProtocolProperties
      >
    StreamControlProtocolProperties_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export StreamControlProtocolProperties
    : public virtual ::RTCORBA::ProtocolProperties
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef StreamControlProtocolProperties_ptr _ptr_type;
    typedef StreamControlProtocolProperties_var _var_type;
    typedef StreamControlProtocolProperties_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static StreamControlProtocolProperties_ptr _duplicate (StreamControlProtocolProperties_ptr obj);

    static void _tao_release (StreamControlProtocolProperties_ptr obj);

    static StreamControlProtocolProperties_ptr _narrow (::CORBA::Object_ptr obj);
    static StreamControlProtocolProperties_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static StreamControlProtocolProperties_ptr _nil (void);

    virtual ::CORBA::Long send_buffer_size (
      void) = 0;

    virtual void send_buffer_size (
      ::CORBA::Long send_buffer_size) = 0;

    virtual ::CORBA::Long recv_buffer_size (
      void) = 0;

    virtual void recv_buffer_size (
      ::CORBA::Long recv_buffer_size) = 0;

    virtual ::CORBA::Boolean keep_alive (
      void) = 0;

    virtual void keep_alive (
      ::CORBA::Boolean keep_alive) = 0;

    virtual ::CORBA::Boolean dont_route (
      void) = 0;

    virtual void dont_route (
      ::CORBA::Boolean dont_route) = 0;

    virtual ::CORBA::Boolean no_delay (
      void) = 0;

    virtual void no_delay (
      ::CORBA::Boolean no_delay) = 0;

    virtual ::CORBA::Boolean enable_network_priority (
      void) = 0;

    virtual void enable_network_priority (
      ::CORBA::Boolean enable_network_priority) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    StreamControlProtocolProperties (void);

    

    virtual ~StreamControlProtocolProperties (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    StreamControlProtocolProperties (const StreamControlProtocolProperties &);

    void operator= (const StreamControlProtocolProperties &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_StreamControlProtocolProperties;

  // TAO_IDL - Generated from
  // .\be\be_type.cpp:261

  struct PriorityBand;

  typedef
    ::TAO_Fixed_Var_T<
        PriorityBand
      >
    PriorityBand_var;
  
  typedef
    PriorityBand &
    PriorityBand_out;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

  struct TAO_RTCORBA_Export PriorityBand
  {

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PriorityBand_var _var_type;
    typedef PriorityBand_out _out_type;

    static void _tao_any_destructor (void *);
    
    RTCORBA::Priority low;
    RTCORBA::Priority high;
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_PriorityBand;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:100

#if !defined (_RTCORBA_PRIORITYBANDS_CH_)
#define _RTCORBA_PRIORITYBANDS_CH_

  class PriorityBands;

  typedef
    ::TAO_FixedSeq_Var_T<
        PriorityBands
      >
    PriorityBands_var;

  typedef
    ::TAO_Seq_Out_T<
        PriorityBands
      >
    PriorityBands_out;

  class TAO_RTCORBA_Export PriorityBands
    : public
        ::TAO::unbounded_value_sequence<
            PriorityBand
          >
  {
  public:
    PriorityBands (void);
    PriorityBands ( ::CORBA::ULong max);
    PriorityBands (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      PriorityBand* buffer, 
      ::CORBA::Boolean release = false);
    PriorityBands (const PriorityBands &);
    virtual ~PriorityBands (void);
    

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PriorityBands_var _var_type;
    typedef PriorityBands_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_PriorityBands;

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_constant/constant_ch.cpp:41

  const CORBA::ULong PRIORITY_BANDED_CONNECTION_POLICY_TYPE = 45U;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY__VAR_OUT_CH_)
#define _RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY__VAR_OUT_CH_

  class PriorityBandedConnectionPolicy;
  typedef PriorityBandedConnectionPolicy *PriorityBandedConnectionPolicy_ptr;

  typedef
    TAO_Objref_Var_T<
        PriorityBandedConnectionPolicy
      >
    PriorityBandedConnectionPolicy_var;
  
  typedef
    TAO_Objref_Out_T<
        PriorityBandedConnectionPolicy
      >
    PriorityBandedConnectionPolicy_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export PriorityBandedConnectionPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef PriorityBandedConnectionPolicy_ptr _ptr_type;
    typedef PriorityBandedConnectionPolicy_var _var_type;
    typedef PriorityBandedConnectionPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static PriorityBandedConnectionPolicy_ptr _duplicate (PriorityBandedConnectionPolicy_ptr obj);

    static void _tao_release (PriorityBandedConnectionPolicy_ptr obj);

    static PriorityBandedConnectionPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static PriorityBandedConnectionPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static PriorityBandedConnectionPolicy_ptr _nil (void);

    virtual ::RTCORBA::PriorityBands * priority_bands (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    PriorityBandedConnectionPolicy (void);

    

    virtual ~PriorityBandedConnectionPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    PriorityBandedConnectionPolicy (const PriorityBandedConnectionPolicy &);

    void operator= (const PriorityBandedConnectionPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_PriorityBandedConnectionPolicy;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_CURRENT__VAR_OUT_CH_)
#define _RTCORBA_CURRENT__VAR_OUT_CH_

  class Current;
  typedef Current *Current_ptr;

  typedef
    TAO_Objref_Var_T<
        Current
      >
    Current_var;
  
  typedef
    TAO_Objref_Out_T<
        Current
      >
    Current_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export Current
    : public virtual ::CORBA::Current
  
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Current_ptr _ptr_type;
    typedef Current_var _var_type;
    typedef Current_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Current_ptr _duplicate (Current_ptr obj);

    static void _tao_release (Current_ptr obj);

    static Current_ptr _narrow (::CORBA::Object_ptr obj);
    static Current_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Current_ptr _nil (void);

    virtual ::RTCORBA::Priority the_priority (
      void) = 0;

    virtual void the_priority (
      ::RTCORBA::Priority the_priority) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Current (void);

    

    virtual ~Current (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Current (const Current &);

    void operator= (const Current &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_Current;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_MUTEX__VAR_OUT_CH_)
#define _RTCORBA_MUTEX__VAR_OUT_CH_

  class Mutex;
  typedef Mutex *Mutex_ptr;

  typedef
    TAO_Objref_Var_T<
        Mutex
      >
    Mutex_var;
  
  typedef
    TAO_Objref_Out_T<
        Mutex
      >
    Mutex_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export Mutex
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef Mutex_ptr _ptr_type;
    typedef Mutex_var _var_type;
    typedef Mutex_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Mutex_ptr _duplicate (Mutex_ptr obj);

    static void _tao_release (Mutex_ptr obj);

    static Mutex_ptr _narrow (::CORBA::Object_ptr obj);
    static Mutex_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Mutex_ptr _nil (void);

    virtual void lock (
      void) = 0;

    virtual void unlock (
      void) = 0;

    virtual ::CORBA::Boolean try_lock (
      ::TimeBase::TimeT max_wait) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    Mutex (void);

    

    virtual ~Mutex (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Mutex (const Mutex &);

    void operator= (const Mutex &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_Mutex;

  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:784

#if !defined (_RTCORBA_RTORB__VAR_OUT_CH_)
#define _RTCORBA_RTORB__VAR_OUT_CH_

  class RTORB;
  typedef RTORB *RTORB_ptr;

  typedef
    TAO_Objref_Var_T<
        RTORB
      >
    RTORB_var;
  
  typedef
    TAO_Objref_Out_T<
        RTORB
      >
    RTORB_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:45

  class TAO_RTCORBA_Export RTORB
    : public virtual ::CORBA::Object
  {
  public:

    // TAO_IDL - Generated from
    // .\be\be_type.cpp:307
    
    typedef RTORB_ptr _ptr_type;
    typedef RTORB_var _var_type;
    typedef RTORB_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static RTORB_ptr _duplicate (RTORB_ptr obj);

    static void _tao_release (RTORB_ptr obj);

    static RTORB_ptr _narrow (::CORBA::Object_ptr obj);
    static RTORB_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static RTORB_ptr _nil (void);

    virtual ::RTCORBA::Mutex_ptr create_mutex (
      void) = 0;

    virtual void destroy_mutex (
      ::RTCORBA::Mutex_ptr the_mutex) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_RTCORBA_Export MutexNotFound : public ::CORBA::UserException
    {
    public:
      
      MutexNotFound (void);
      MutexNotFound (const MutexNotFound &);
      ~MutexNotFound (void);

      MutexNotFound &operator= (const MutexNotFound &);

      static void _tao_any_destructor (void *);

      static MutexNotFound *_downcast ( ::CORBA::Exception *);
      static const MutexNotFound *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_MutexNotFound;

    virtual ::RTCORBA::Mutex_ptr create_named_mutex (
      const char * name,
      ::CORBA::Boolean_out created_flag) = 0;

    virtual ::RTCORBA::Mutex_ptr open_named_mutex (
      const char * name) = 0;

    virtual ::RTCORBA::TCPProtocolProperties_ptr create_tcp_protocol_properties (
      ::CORBA::Long send_buffer_size,
      ::CORBA::Long recv_buffer_size,
      ::CORBA::Boolean keep_alive,
      ::CORBA::Boolean dont_route,
      ::CORBA::Boolean no_delay,
      ::CORBA::Boolean enable_network_priority) = 0;

    virtual ::RTCORBA::UnixDomainProtocolProperties_ptr create_unix_domain_protocol_properties (
      ::CORBA::Long send_buffer_size,
      ::CORBA::Long recv_buffer_size) = 0;

    virtual ::RTCORBA::SharedMemoryProtocolProperties_ptr create_shared_memory_protocol_properties (
      ::CORBA::Long send_buffer_size,
      ::CORBA::Long recv_buffer_size,
      ::CORBA::Boolean keep_alive,
      ::CORBA::Boolean dont_route,
      ::CORBA::Boolean no_delay,
      ::CORBA::Long preallocate_buffer_size,
      const char * mmap_filename,
      const char * mmap_lockname) = 0;

    virtual ::RTCORBA::UserDatagramProtocolProperties_ptr create_user_datagram_protocol_properties (
      ::CORBA::Long send_buffer_size,
      ::CORBA::Long recv_buffer_size,
      ::CORBA::Boolean enable_network_priority) = 0;

    virtual ::RTCORBA::StreamControlProtocolProperties_ptr create_stream_control_protocol_properties (
      ::CORBA::Long send_buffer_size,
      ::CORBA::Long recv_buffer_size,
      ::CORBA::Boolean keep_alive,
      ::CORBA::Boolean dont_route,
      ::CORBA::Boolean no_delay,
      ::CORBA::Boolean enable_network_priority) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ch.cpp:43

    class TAO_RTCORBA_Export InvalidThreadpool : public ::CORBA::UserException
    {
    public:
      
      InvalidThreadpool (void);
      InvalidThreadpool (const InvalidThreadpool &);
      ~InvalidThreadpool (void);

      InvalidThreadpool &operator= (const InvalidThreadpool &);

      static void _tao_any_destructor (void *);

      static InvalidThreadpool *_downcast ( ::CORBA::Exception *);
      static const InvalidThreadpool *_downcast ( ::CORBA::Exception const *);

      static ::CORBA::Exception *_alloc (void);

      virtual ::CORBA::Exception *_tao_duplicate (void) const;

      virtual void _raise (void) const;

      virtual void _tao_encode (TAO_OutputCDR &cdr) const;
      virtual void _tao_decode (TAO_InputCDR &cdr);
      

      virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
    };

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

    static ::CORBA::TypeCode_ptr const _tc_InvalidThreadpool;

    virtual ::RTCORBA::ThreadpoolId create_threadpool (
      ::CORBA::ULong stacksize,
      ::CORBA::ULong static_threads,
      ::CORBA::ULong dynamic_threads,
      ::RTCORBA::Priority default_priority,
      ::CORBA::Boolean allow_request_buffering,
      ::CORBA::ULong max_buffered_requests,
      ::CORBA::ULong max_request_buffer_size) = 0;

    virtual ::RTCORBA::ThreadpoolId create_threadpool_with_lanes (
      ::CORBA::ULong stacksize,
      const ::RTCORBA::ThreadpoolLanes & lanes,
      ::CORBA::Boolean allow_borrowing,
      ::CORBA::Boolean allow_request_buffering,
      ::CORBA::ULong max_buffered_requests,
      ::CORBA::ULong max_request_buffer_size) = 0;

    virtual void destroy_threadpool (
      ::RTCORBA::ThreadpoolId threadpool) = 0;

    virtual ::RTCORBA::PriorityModelPolicy_ptr create_priority_model_policy (
      ::RTCORBA::PriorityModel priority_model,
      ::RTCORBA::Priority server_priority) = 0;

    virtual ::RTCORBA::ThreadpoolPolicy_ptr create_threadpool_policy (
      ::RTCORBA::ThreadpoolId threadpool) = 0;

    virtual ::RTCORBA::PriorityBandedConnectionPolicy_ptr create_priority_banded_connection_policy (
      const ::RTCORBA::PriorityBands & priority_bands) = 0;

    virtual ::RTCORBA::ServerProtocolPolicy_ptr create_server_protocol_policy (
      const ::RTCORBA::ProtocolList & protocols) = 0;

    virtual ::RTCORBA::ClientProtocolPolicy_ptr create_client_protocol_policy (
      const ::RTCORBA::ProtocolList & protocols) = 0;

    virtual ::RTCORBA::PrivateConnectionPolicy_ptr create_private_connection_policy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:156

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    RTORB (void);

    

    virtual ~RTORB (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    RTORB (const RTORB &);

    void operator= (const RTORB &);
  };

  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:39

  extern TAO_RTCORBA_Export ::CORBA::TypeCode_ptr const _tc_RTORB;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_module/module_ch.cpp:70

} // module RTCORBA

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RTCORBA::ThreadpoolLane>
    : public
        Fixed_Size_Arg_Traits_T<
            ::RTCORBA::ThreadpoolLane,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RTCORBA::ThreadpoolLanes>
    : public
        Var_Size_Arg_Traits_T<
            ::RTCORBA::ThreadpoolLanes,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:898

  template<>
  class Arg_Traits< ::RTCORBA::PriorityModel>
    : public
        Basic_Arg_Traits_T<
            ::RTCORBA::PriorityModel,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RTCORBA::Protocol>
    : public
        Var_Size_Arg_Traits_T<
            ::RTCORBA::Protocol,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RTCORBA::ProtocolList>
    : public
        Var_Size_Arg_Traits_T<
            ::RTCORBA::ProtocolList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:941

  template<>
  class Arg_Traits< ::RTCORBA::PriorityBand>
    : public
        Fixed_Size_Arg_Traits_T<
            ::RTCORBA::PriorityBand,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:679

  template<>
  class Arg_Traits< ::RTCORBA::PriorityBands>
    : public
        Var_Size_Arg_Traits_T<
            ::RTCORBA::PriorityBands,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:62


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_RTCORBA_PRIORITYMODELPOLICY__TRAITS_)
#define _RTCORBA_PRIORITYMODELPOLICY__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::PriorityModelPolicy>
  {
    static ::RTCORBA::PriorityModelPolicy_ptr duplicate (
        ::RTCORBA::PriorityModelPolicy_ptr p);
    static void release (
        ::RTCORBA::PriorityModelPolicy_ptr p);
    static ::RTCORBA::PriorityModelPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::PriorityModelPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_THREADPOOLPOLICY__TRAITS_)
#define _RTCORBA_THREADPOOLPOLICY__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::ThreadpoolPolicy>
  {
    static ::RTCORBA::ThreadpoolPolicy_ptr duplicate (
        ::RTCORBA::ThreadpoolPolicy_ptr p);
    static void release (
        ::RTCORBA::ThreadpoolPolicy_ptr p);
    static ::RTCORBA::ThreadpoolPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::ThreadpoolPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_SERVERPROTOCOLPOLICY__TRAITS_)
#define _RTCORBA_SERVERPROTOCOLPOLICY__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::ServerProtocolPolicy>
  {
    static ::RTCORBA::ServerProtocolPolicy_ptr duplicate (
        ::RTCORBA::ServerProtocolPolicy_ptr p);
    static void release (
        ::RTCORBA::ServerProtocolPolicy_ptr p);
    static ::RTCORBA::ServerProtocolPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::ServerProtocolPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_CLIENTPROTOCOLPOLICY__TRAITS_)
#define _RTCORBA_CLIENTPROTOCOLPOLICY__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::ClientProtocolPolicy>
  {
    static ::RTCORBA::ClientProtocolPolicy_ptr duplicate (
        ::RTCORBA::ClientProtocolPolicy_ptr p);
    static void release (
        ::RTCORBA::ClientProtocolPolicy_ptr p);
    static ::RTCORBA::ClientProtocolPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::ClientProtocolPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_PRIVATECONNECTIONPOLICY__TRAITS_)
#define _RTCORBA_PRIVATECONNECTIONPOLICY__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::PrivateConnectionPolicy>
  {
    static ::RTCORBA::PrivateConnectionPolicy_ptr duplicate (
        ::RTCORBA::PrivateConnectionPolicy_ptr p);
    static void release (
        ::RTCORBA::PrivateConnectionPolicy_ptr p);
    static ::RTCORBA::PrivateConnectionPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::PrivateConnectionPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_TCPPROTOCOLPROPERTIES__TRAITS_)
#define _RTCORBA_TCPPROTOCOLPROPERTIES__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::TCPProtocolProperties>
  {
    static ::RTCORBA::TCPProtocolProperties_ptr duplicate (
        ::RTCORBA::TCPProtocolProperties_ptr p);
    static void release (
        ::RTCORBA::TCPProtocolProperties_ptr p);
    static ::RTCORBA::TCPProtocolProperties_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::TCPProtocolProperties_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_GIOPPROTOCOLPROPERTIES__TRAITS_)
#define _RTCORBA_GIOPPROTOCOLPROPERTIES__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::GIOPProtocolProperties>
  {
    static ::RTCORBA::GIOPProtocolProperties_ptr duplicate (
        ::RTCORBA::GIOPProtocolProperties_ptr p);
    static void release (
        ::RTCORBA::GIOPProtocolProperties_ptr p);
    static ::RTCORBA::GIOPProtocolProperties_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::GIOPProtocolProperties_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES__TRAITS_)
#define _RTCORBA_UNIXDOMAINPROTOCOLPROPERTIES__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::UnixDomainProtocolProperties>
  {
    static ::RTCORBA::UnixDomainProtocolProperties_ptr duplicate (
        ::RTCORBA::UnixDomainProtocolProperties_ptr p);
    static void release (
        ::RTCORBA::UnixDomainProtocolProperties_ptr p);
    static ::RTCORBA::UnixDomainProtocolProperties_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::UnixDomainProtocolProperties_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES__TRAITS_)
#define _RTCORBA_SHAREDMEMORYPROTOCOLPROPERTIES__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::SharedMemoryProtocolProperties>
  {
    static ::RTCORBA::SharedMemoryProtocolProperties_ptr duplicate (
        ::RTCORBA::SharedMemoryProtocolProperties_ptr p);
    static void release (
        ::RTCORBA::SharedMemoryProtocolProperties_ptr p);
    static ::RTCORBA::SharedMemoryProtocolProperties_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::SharedMemoryProtocolProperties_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_USERDATAGRAMPROTOCOLPROPERTIES__TRAITS_)
#define _RTCORBA_USERDATAGRAMPROTOCOLPROPERTIES__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::UserDatagramProtocolProperties>
  {
    static ::RTCORBA::UserDatagramProtocolProperties_ptr duplicate (
        ::RTCORBA::UserDatagramProtocolProperties_ptr p);
    static void release (
        ::RTCORBA::UserDatagramProtocolProperties_ptr p);
    static ::RTCORBA::UserDatagramProtocolProperties_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::UserDatagramProtocolProperties_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_STREAMCONTROLPROTOCOLPROPERTIES__TRAITS_)
#define _RTCORBA_STREAMCONTROLPROTOCOLPROPERTIES__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::StreamControlProtocolProperties>
  {
    static ::RTCORBA::StreamControlProtocolProperties_ptr duplicate (
        ::RTCORBA::StreamControlProtocolProperties_ptr p);
    static void release (
        ::RTCORBA::StreamControlProtocolProperties_ptr p);
    static ::RTCORBA::StreamControlProtocolProperties_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::StreamControlProtocolProperties_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY__TRAITS_)
#define _RTCORBA_PRIORITYBANDEDCONNECTIONPOLICY__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::PriorityBandedConnectionPolicy>
  {
    static ::RTCORBA::PriorityBandedConnectionPolicy_ptr duplicate (
        ::RTCORBA::PriorityBandedConnectionPolicy_ptr p);
    static void release (
        ::RTCORBA::PriorityBandedConnectionPolicy_ptr p);
    static ::RTCORBA::PriorityBandedConnectionPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::PriorityBandedConnectionPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_CURRENT__TRAITS_)
#define _RTCORBA_CURRENT__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::Current>
  {
    static ::RTCORBA::Current_ptr duplicate (
        ::RTCORBA::Current_ptr p);
    static void release (
        ::RTCORBA::Current_ptr p);
    static ::RTCORBA::Current_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::Current_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_MUTEX__TRAITS_)
#define _RTCORBA_MUTEX__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::Mutex>
  {
    static ::RTCORBA::Mutex_ptr duplicate (
        ::RTCORBA::Mutex_ptr p);
    static void release (
        ::RTCORBA::Mutex_ptr p);
    static ::RTCORBA::Mutex_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::Mutex_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_RTCORBA_RTORB__TRAITS_)
#define _RTCORBA_RTORB__TRAITS_

  template<>
  struct TAO_RTCORBA_Export Objref_Traits< ::RTCORBA::RTORB>
  {
    static ::RTCORBA::RTORB_ptr duplicate (
        ::RTCORBA::RTORB_ptr p);
    static void release (
        ::RTCORBA::RTORB_ptr p);
    static ::RTCORBA::RTORB_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::RTCORBA::RTORB_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const ::RTCORBA::ThreadpoolLane &); // copying version
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, ::RTCORBA::ThreadpoolLane*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::ThreadpoolLane *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::ThreadpoolLane *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const RTCORBA::ThreadpoolLane &); // copying version
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ThreadpoolLane*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::ThreadpoolLane *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::ThreadpoolLane *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, const ::RTCORBA::ThreadpoolLanes &); // copying version
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ::RTCORBA::ThreadpoolLanes*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::ThreadpoolLanes *&); // deprecated
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::ThreadpoolLanes *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, const RTCORBA::ThreadpoolLanes &); // copying version
TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, RTCORBA::ThreadpoolLanes*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::ThreadpoolLanes *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::ThreadpoolLanes *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_ch.cpp:43

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, ::RTCORBA::PriorityModel);
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::PriorityModel &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PriorityModel);
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::PriorityModel &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, PriorityModelPolicy_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, PriorityModelPolicy_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PriorityModelPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PriorityModelPolicy_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PriorityModelPolicy_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::PriorityModelPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ThreadpoolPolicy_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ThreadpoolPolicy_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ThreadpoolPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ThreadpoolPolicy_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ThreadpoolPolicy_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::ThreadpoolPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const ::RTCORBA::Protocol &); // copying version
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, ::RTCORBA::Protocol*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::Protocol *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::Protocol *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const RTCORBA::Protocol &); // copying version
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::Protocol*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::Protocol *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::Protocol *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, const ::RTCORBA::ProtocolList &); // copying version
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ::RTCORBA::ProtocolList*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::ProtocolList *&); // deprecated
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::ProtocolList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, const RTCORBA::ProtocolList &); // copying version
TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, RTCORBA::ProtocolList*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::ProtocolList *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::ProtocolList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ServerProtocolPolicy_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ServerProtocolPolicy_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ServerProtocolPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ServerProtocolPolicy_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ServerProtocolPolicy_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::ServerProtocolPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ClientProtocolPolicy_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ClientProtocolPolicy_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ClientProtocolPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ClientProtocolPolicy_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::ClientProtocolPolicy_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::ClientProtocolPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, PrivateConnectionPolicy_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, PrivateConnectionPolicy_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PrivateConnectionPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PrivateConnectionPolicy_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PrivateConnectionPolicy_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::PrivateConnectionPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, TCPProtocolProperties_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, TCPProtocolProperties_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TCPProtocolProperties_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::TCPProtocolProperties_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::TCPProtocolProperties_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::TCPProtocolProperties_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, GIOPProtocolProperties_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, GIOPProtocolProperties_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, GIOPProtocolProperties_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::GIOPProtocolProperties_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::GIOPProtocolProperties_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::GIOPProtocolProperties_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, UnixDomainProtocolProperties_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, UnixDomainProtocolProperties_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnixDomainProtocolProperties_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::UnixDomainProtocolProperties_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::UnixDomainProtocolProperties_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::UnixDomainProtocolProperties_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, SharedMemoryProtocolProperties_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, SharedMemoryProtocolProperties_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SharedMemoryProtocolProperties_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::SharedMemoryProtocolProperties_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::SharedMemoryProtocolProperties_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::SharedMemoryProtocolProperties_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, UserDatagramProtocolProperties_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, UserDatagramProtocolProperties_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UserDatagramProtocolProperties_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::UserDatagramProtocolProperties_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::UserDatagramProtocolProperties_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::UserDatagramProtocolProperties_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, StreamControlProtocolProperties_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, StreamControlProtocolProperties_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, StreamControlProtocolProperties_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::StreamControlProtocolProperties_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::StreamControlProtocolProperties_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::StreamControlProtocolProperties_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const ::RTCORBA::PriorityBand &); // copying version
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, ::RTCORBA::PriorityBand*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::PriorityBand *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::PriorityBand *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const RTCORBA::PriorityBand &); // copying version
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PriorityBand*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::PriorityBand *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::PriorityBand *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, const ::RTCORBA::PriorityBands &); // copying version
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, ::RTCORBA::PriorityBands*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::PriorityBands *&); // deprecated
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::PriorityBands *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, const RTCORBA::PriorityBands &); // copying version
TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, RTCORBA::PriorityBands*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::PriorityBands *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::PriorityBands *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, PriorityBandedConnectionPolicy_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, PriorityBandedConnectionPolicy_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PriorityBandedConnectionPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PriorityBandedConnectionPolicy_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::PriorityBandedConnectionPolicy_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::PriorityBandedConnectionPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, Current_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, Current_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Current_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::Current_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::Current_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::Current_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, Mutex_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, Mutex_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Mutex_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::Mutex_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::Mutex_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::Mutex_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, RTORB_ptr); // copying
  TAO_RTCORBA_Export void operator<<= ( ::CORBA::Any &, RTORB_ptr *); // non-copying
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTORB_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::RTORB_ptr); // copying
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::RTORB_ptr *); // non-copying
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::RTORB_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const ::RTCORBA::RTORB::MutexNotFound &); // copying version
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, ::RTCORBA::RTORB::MutexNotFound*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::RTORB::MutexNotFound *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::RTORB::MutexNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const RTCORBA::RTORB::MutexNotFound &); // copying version
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::RTORB::MutexNotFound*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::RTORB::MutexNotFound *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::RTORB::MutexNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_ch.cpp:44

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const ::RTCORBA::RTORB::InvalidThreadpool &); // copying version
  TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, ::RTCORBA::RTORB::InvalidThreadpool*); // noncopying version
  TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::RTCORBA::RTORB::InvalidThreadpool *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::RTCORBA::RTORB::InvalidThreadpool *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, const RTCORBA::RTORB::InvalidThreadpool &); // copying version
TAO_RTCORBA_Export void operator<<= (::CORBA::Any &, RTCORBA::RTORB::InvalidThreadpool*); // noncopying version
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RTCORBA::RTORB::InvalidThreadpool *&); // deprecated
TAO_RTCORBA_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RTCORBA::RTORB::InvalidThreadpool *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RTCORBA::ThreadpoolLane &);
TAO_RTCORBA_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RTCORBA::ThreadpoolLane &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_H_
#define _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTCORBA_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::ThreadpoolLanes &_tao_sequence);
TAO_RTCORBA_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::ThreadpoolLanes &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_H_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_ch.cpp:40



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RTCORBA::PriorityModel _tao_enumerator);
TAO_RTCORBA_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::PriorityModel &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_RTCORBA_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RTCORBA::PriorityBand &);
TAO_RTCORBA_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, RTCORBA::PriorityBand &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:61

#if !defined _TAO_CDR_OP_RTCORBA_PriorityBands_H_
#define _TAO_CDR_OP_RTCORBA_PriorityBands_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_RTCORBA_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::PriorityBands &_tao_sequence);
TAO_RTCORBA_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::PriorityBands &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_RTCORBA_PriorityBands_H_ */

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1581


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* ifndef */

