// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:375


#include "tao/RTCORBA/RTCORBA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_NativePriority (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/NativePriority:1.0",
    "NativePriority",
    &CORBA::_tc_short);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_NativePriority =
    &_tao_tc_RTCORBA_NativePriority;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_Priority (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/Priority:1.0",
    "Priority",
    &CORBA::_tc_short);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_Priority =
    &_tao_tc_RTCORBA_Priority;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_NetworkPriority (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/NetworkPriority:1.0",
    "NetworkPriority",
    &CORBA::_tc_long);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_NetworkPriority =
    &_tao_tc_RTCORBA_NetworkPriority;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_ThreadpoolId (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/ThreadpoolId:1.0",
    "ThreadpoolId",
    &CORBA::_tc_ulong);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ThreadpoolId =
    &_tao_tc_RTCORBA_ThreadpoolId;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RTCORBA_ThreadpoolLane[] =
      {
        { "lane_priority", &RTCORBA::_tc_Priority },
        { "static_threads", &CORBA::_tc_ulong },
        { "dynamic_threads", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RTCORBA_ThreadpoolLane (
  ::CORBA::tk_struct,
  "IDL:omg.org/RTCORBA/ThreadpoolLane:1.0",
  "ThreadpoolLane",
  _tao_fields_RTCORBA_ThreadpoolLane,
  3);


namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ThreadpoolLane =
    &_tao_tc_RTCORBA_ThreadpoolLane;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RTCORBA::ThreadpoolLane::_tao_any_destructor (
    void *_tao_void_pointer)
{
  ThreadpoolLane *_tao_tmp_pointer =
    static_cast<ThreadpoolLane *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTCORBA_THREADPOOLLANES_CS_)
#define _RTCORBA_THREADPOOLLANES_CS_

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (void)
{}

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ThreadpoolLane
      > (max)
{}

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    RTCORBA::ThreadpoolLane * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ThreadpoolLane
      >
    (max, length, buffer, release)
{}

RTCORBA::ThreadpoolLanes::ThreadpoolLanes (
    const ThreadpoolLanes &seq)
  : ::TAO::unbounded_value_sequence<
        ThreadpoolLane
      > (seq)
{}

RTCORBA::ThreadpoolLanes::~ThreadpoolLanes (void)
{}

void RTCORBA::ThreadpoolLanes::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ThreadpoolLanes * _tao_tmp_pointer =
    static_cast<ThreadpoolLanes *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_RTCORBA_ThreadpoolLanes_GUARD
#define _TAO_TYPECODE_RTCORBA_ThreadpoolLanes_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        RTCORBA_ThreadpoolLanes_0 (
          ::CORBA::tk_sequence,
          &RTCORBA::_tc_ThreadpoolLane,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_RTCORBA_ThreadpoolLanes_0 =
        &RTCORBA_ThreadpoolLanes_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_RTCORBA_ThreadpoolLanes_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_ThreadpoolLanes (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/ThreadpoolLanes:1.0",
    "ThreadpoolLanes",
    &TAO::TypeCode::tc_RTCORBA_ThreadpoolLanes_0);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ThreadpoolLanes =
    &_tao_tc_RTCORBA_ThreadpoolLanes;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_RTCORBA_PriorityModel[] =
  {
    "CLIENT_PROPAGATED",
    "SERVER_DECLARED"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_PriorityModel (
    "IDL:omg.org/RTCORBA/PriorityModel:1.0",
    "PriorityModel",
    _tao_enumerators_RTCORBA_PriorityModel,
    2);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_PriorityModel =
    &_tao_tc_RTCORBA_PriorityModel;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::PriorityModelPolicy.

RTCORBA::PriorityModelPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::duplicate (
    RTCORBA::PriorityModelPolicy_ptr p)
{
  return RTCORBA::PriorityModelPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::release (
    RTCORBA::PriorityModelPolicy_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::PriorityModelPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::nil (void)
{
  return RTCORBA::PriorityModelPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::PriorityModelPolicy>::marshal (
    const RTCORBA::PriorityModelPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::PriorityModelPolicy::PriorityModelPolicy (void)
{}

RTCORBA::PriorityModelPolicy::~PriorityModelPolicy (void)
{}

void 
RTCORBA::PriorityModelPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  PriorityModelPolicy *_tao_tmp_pointer =
    static_cast<PriorityModelPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PriorityModelPolicy::_duplicate (
      dynamic_cast<PriorityModelPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PriorityModelPolicy::_duplicate (
      dynamic_cast<PriorityModelPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_nil (void)
{
  return 0;
}

RTCORBA::PriorityModelPolicy_ptr
RTCORBA::PriorityModelPolicy::_duplicate (PriorityModelPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::PriorityModelPolicy::_tao_release (PriorityModelPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::PriorityModelPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/PriorityModelPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::PriorityModelPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/PriorityModelPolicy:1.0";
}

::CORBA::Boolean
RTCORBA::PriorityModelPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_PriorityModelPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/PriorityModelPolicy:1.0",
    "PriorityModelPolicy");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_PriorityModelPolicy =
    &_tao_tc_RTCORBA_PriorityModelPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::ThreadpoolPolicy.

RTCORBA::ThreadpoolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::duplicate (
    RTCORBA::ThreadpoolPolicy_ptr p)
{
  return RTCORBA::ThreadpoolPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::release (
    RTCORBA::ThreadpoolPolicy_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::ThreadpoolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::nil (void)
{
  return RTCORBA::ThreadpoolPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ThreadpoolPolicy>::marshal (
    const RTCORBA::ThreadpoolPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::ThreadpoolPolicy::ThreadpoolPolicy (void)
{}

RTCORBA::ThreadpoolPolicy::~ThreadpoolPolicy (void)
{}

void 
RTCORBA::ThreadpoolPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ThreadpoolPolicy *_tao_tmp_pointer =
    static_cast<ThreadpoolPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ThreadpoolPolicy::_duplicate (
      dynamic_cast<ThreadpoolPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ThreadpoolPolicy::_duplicate (
      dynamic_cast<ThreadpoolPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_nil (void)
{
  return 0;
}

RTCORBA::ThreadpoolPolicy_ptr
RTCORBA::ThreadpoolPolicy::_duplicate (ThreadpoolPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::ThreadpoolPolicy::_tao_release (ThreadpoolPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::ThreadpoolPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ThreadpoolPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::ThreadpoolPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ThreadpoolPolicy:1.0";
}

::CORBA::Boolean
RTCORBA::ThreadpoolPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_ThreadpoolPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/ThreadpoolPolicy:1.0",
    "ThreadpoolPolicy");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ThreadpoolPolicy =
    &_tao_tc_RTCORBA_ThreadpoolPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RTCORBA_Protocol[] =
      {
        { "protocol_type", &IOP::_tc_ProfileId },
        { "orb_protocol_properties", &RTCORBA::_tc_ProtocolProperties },
        { "transport_protocol_properties", &RTCORBA::_tc_ProtocolProperties }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RTCORBA_Protocol (
  ::CORBA::tk_struct,
  "IDL:omg.org/RTCORBA/Protocol:1.0",
  "Protocol",
  _tao_fields_RTCORBA_Protocol,
  3);


namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_Protocol =
    &_tao_tc_RTCORBA_Protocol;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RTCORBA::Protocol::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Protocol *_tao_tmp_pointer =
    static_cast<Protocol *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTCORBA_PROTOCOLLIST_CS_)
#define _RTCORBA_PROTOCOLLIST_CS_

RTCORBA::ProtocolList::ProtocolList (void)
{}

RTCORBA::ProtocolList::ProtocolList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        Protocol
      > (max)
{}

RTCORBA::ProtocolList::ProtocolList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    RTCORBA::Protocol * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        Protocol
      >
    (max, length, buffer, release)
{}

RTCORBA::ProtocolList::ProtocolList (
    const ProtocolList &seq)
  : ::TAO::unbounded_value_sequence<
        Protocol
      > (seq)
{}

RTCORBA::ProtocolList::~ProtocolList (void)
{}

void RTCORBA::ProtocolList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ProtocolList * _tao_tmp_pointer =
    static_cast<ProtocolList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_RTCORBA_ProtocolList_GUARD
#define _TAO_TYPECODE_RTCORBA_ProtocolList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        RTCORBA_ProtocolList_0 (
          ::CORBA::tk_sequence,
          &RTCORBA::_tc_Protocol,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_RTCORBA_ProtocolList_0 =
        &RTCORBA_ProtocolList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_RTCORBA_ProtocolList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_ProtocolList (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/ProtocolList:1.0",
    "ProtocolList",
    &TAO::TypeCode::tc_RTCORBA_ProtocolList_0);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ProtocolList =
    &_tao_tc_RTCORBA_ProtocolList;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::ServerProtocolPolicy.

RTCORBA::ServerProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::duplicate (
    RTCORBA::ServerProtocolPolicy_ptr p)
{
  return RTCORBA::ServerProtocolPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::release (
    RTCORBA::ServerProtocolPolicy_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::ServerProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::nil (void)
{
  return RTCORBA::ServerProtocolPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ServerProtocolPolicy>::marshal (
    const RTCORBA::ServerProtocolPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::ServerProtocolPolicy::ServerProtocolPolicy (void)
{}

RTCORBA::ServerProtocolPolicy::~ServerProtocolPolicy (void)
{}

void 
RTCORBA::ServerProtocolPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ServerProtocolPolicy *_tao_tmp_pointer =
    static_cast<ServerProtocolPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ServerProtocolPolicy::_duplicate (
      dynamic_cast<ServerProtocolPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ServerProtocolPolicy::_duplicate (
      dynamic_cast<ServerProtocolPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_nil (void)
{
  return 0;
}

RTCORBA::ServerProtocolPolicy_ptr
RTCORBA::ServerProtocolPolicy::_duplicate (ServerProtocolPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::ServerProtocolPolicy::_tao_release (ServerProtocolPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::ServerProtocolPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ServerProtocolPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::ServerProtocolPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ServerProtocolPolicy:1.0";
}

::CORBA::Boolean
RTCORBA::ServerProtocolPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_ServerProtocolPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/ServerProtocolPolicy:1.0",
    "ServerProtocolPolicy");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ServerProtocolPolicy =
    &_tao_tc_RTCORBA_ServerProtocolPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::ClientProtocolPolicy.

RTCORBA::ClientProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::duplicate (
    RTCORBA::ClientProtocolPolicy_ptr p)
{
  return RTCORBA::ClientProtocolPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::release (
    RTCORBA::ClientProtocolPolicy_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::ClientProtocolPolicy_ptr
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::nil (void)
{
  return RTCORBA::ClientProtocolPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::ClientProtocolPolicy>::marshal (
    const RTCORBA::ClientProtocolPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::ClientProtocolPolicy::ClientProtocolPolicy (void)
{}

RTCORBA::ClientProtocolPolicy::~ClientProtocolPolicy (void)
{}

void 
RTCORBA::ClientProtocolPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientProtocolPolicy *_tao_tmp_pointer =
    static_cast<ClientProtocolPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ClientProtocolPolicy::_duplicate (
      dynamic_cast<ClientProtocolPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ClientProtocolPolicy::_duplicate (
      dynamic_cast<ClientProtocolPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_nil (void)
{
  return 0;
}

RTCORBA::ClientProtocolPolicy_ptr
RTCORBA::ClientProtocolPolicy::_duplicate (ClientProtocolPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::ClientProtocolPolicy::_tao_release (ClientProtocolPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::ClientProtocolPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ClientProtocolPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::ClientProtocolPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/ClientProtocolPolicy:1.0";
}

::CORBA::Boolean
RTCORBA::ClientProtocolPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_ClientProtocolPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/ClientProtocolPolicy:1.0",
    "ClientProtocolPolicy");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_ClientProtocolPolicy =
    &_tao_tc_RTCORBA_ClientProtocolPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::PrivateConnectionPolicy.

RTCORBA::PrivateConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::duplicate (
    RTCORBA::PrivateConnectionPolicy_ptr p)
{
  return RTCORBA::PrivateConnectionPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::release (
    RTCORBA::PrivateConnectionPolicy_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::PrivateConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::nil (void)
{
  return RTCORBA::PrivateConnectionPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::PrivateConnectionPolicy>::marshal (
    const RTCORBA::PrivateConnectionPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::PrivateConnectionPolicy::PrivateConnectionPolicy (void)
{}

RTCORBA::PrivateConnectionPolicy::~PrivateConnectionPolicy (void)
{}

void 
RTCORBA::PrivateConnectionPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  PrivateConnectionPolicy *_tao_tmp_pointer =
    static_cast<PrivateConnectionPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PrivateConnectionPolicy::_duplicate (
      dynamic_cast<PrivateConnectionPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PrivateConnectionPolicy::_duplicate (
      dynamic_cast<PrivateConnectionPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_nil (void)
{
  return 0;
}

RTCORBA::PrivateConnectionPolicy_ptr
RTCORBA::PrivateConnectionPolicy::_duplicate (PrivateConnectionPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::PrivateConnectionPolicy::_tao_release (PrivateConnectionPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::PrivateConnectionPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/PrivateConnectionPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::PrivateConnectionPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/PrivateConnectionPolicy:1.0";
}

::CORBA::Boolean
RTCORBA::PrivateConnectionPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_PrivateConnectionPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/PrivateConnectionPolicy:1.0",
    "PrivateConnectionPolicy");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_PrivateConnectionPolicy =
    &_tao_tc_RTCORBA_PrivateConnectionPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::TCPProtocolProperties.

RTCORBA::TCPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::duplicate (
    RTCORBA::TCPProtocolProperties_ptr p)
{
  return RTCORBA::TCPProtocolProperties::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::release (
    RTCORBA::TCPProtocolProperties_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::TCPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::nil (void)
{
  return RTCORBA::TCPProtocolProperties::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::TCPProtocolProperties>::marshal (
    const RTCORBA::TCPProtocolProperties_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::TCPProtocolProperties::TCPProtocolProperties (void)
{}

RTCORBA::TCPProtocolProperties::~TCPProtocolProperties (void)
{}

void 
RTCORBA::TCPProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  TCPProtocolProperties *_tao_tmp_pointer =
    static_cast<TCPProtocolProperties *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return TCPProtocolProperties::_duplicate (
      dynamic_cast<TCPProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return TCPProtocolProperties::_duplicate (
      dynamic_cast<TCPProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_nil (void)
{
  return 0;
}

RTCORBA::TCPProtocolProperties_ptr
RTCORBA::TCPProtocolProperties::_duplicate (TCPProtocolProperties_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::TCPProtocolProperties::_tao_release (TCPProtocolProperties_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::TCPProtocolProperties::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/TCPProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::TCPProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/TCPProtocolProperties:1.0";
}

::CORBA::Boolean
RTCORBA::TCPProtocolProperties::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_TCPProtocolProperties (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/TCPProtocolProperties:1.0",
    "TCPProtocolProperties");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_TCPProtocolProperties =
    &_tao_tc_RTCORBA_TCPProtocolProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::GIOPProtocolProperties.

RTCORBA::GIOPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::duplicate (
    RTCORBA::GIOPProtocolProperties_ptr p)
{
  return RTCORBA::GIOPProtocolProperties::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::release (
    RTCORBA::GIOPProtocolProperties_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::GIOPProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::nil (void)
{
  return RTCORBA::GIOPProtocolProperties::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::GIOPProtocolProperties>::marshal (
    const RTCORBA::GIOPProtocolProperties_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::GIOPProtocolProperties::GIOPProtocolProperties (void)
{}

RTCORBA::GIOPProtocolProperties::~GIOPProtocolProperties (void)
{}

void 
RTCORBA::GIOPProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  GIOPProtocolProperties *_tao_tmp_pointer =
    static_cast<GIOPProtocolProperties *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return GIOPProtocolProperties::_duplicate (
      dynamic_cast<GIOPProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return GIOPProtocolProperties::_duplicate (
      dynamic_cast<GIOPProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_nil (void)
{
  return 0;
}

RTCORBA::GIOPProtocolProperties_ptr
RTCORBA::GIOPProtocolProperties::_duplicate (GIOPProtocolProperties_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::GIOPProtocolProperties::_tao_release (GIOPProtocolProperties_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::GIOPProtocolProperties::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/GIOPProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::GIOPProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/GIOPProtocolProperties:1.0";
}

::CORBA::Boolean
RTCORBA::GIOPProtocolProperties::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_GIOPProtocolProperties (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/GIOPProtocolProperties:1.0",
    "GIOPProtocolProperties");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_GIOPProtocolProperties =
    &_tao_tc_RTCORBA_GIOPProtocolProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::UnixDomainProtocolProperties.

RTCORBA::UnixDomainProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::duplicate (
    RTCORBA::UnixDomainProtocolProperties_ptr p)
{
  return RTCORBA::UnixDomainProtocolProperties::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::release (
    RTCORBA::UnixDomainProtocolProperties_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::UnixDomainProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::nil (void)
{
  return RTCORBA::UnixDomainProtocolProperties::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::UnixDomainProtocolProperties>::marshal (
    const RTCORBA::UnixDomainProtocolProperties_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::UnixDomainProtocolProperties::UnixDomainProtocolProperties (void)
{}

RTCORBA::UnixDomainProtocolProperties::~UnixDomainProtocolProperties (void)
{}

void 
RTCORBA::UnixDomainProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  UnixDomainProtocolProperties *_tao_tmp_pointer =
    static_cast<UnixDomainProtocolProperties *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return UnixDomainProtocolProperties::_duplicate (
      dynamic_cast<UnixDomainProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return UnixDomainProtocolProperties::_duplicate (
      dynamic_cast<UnixDomainProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_nil (void)
{
  return 0;
}

RTCORBA::UnixDomainProtocolProperties_ptr
RTCORBA::UnixDomainProtocolProperties::_duplicate (UnixDomainProtocolProperties_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::UnixDomainProtocolProperties::_tao_release (UnixDomainProtocolProperties_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::UnixDomainProtocolProperties::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/UnixDomainProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::UnixDomainProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/UnixDomainProtocolProperties:1.0";
}

::CORBA::Boolean
RTCORBA::UnixDomainProtocolProperties::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_UnixDomainProtocolProperties (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/UnixDomainProtocolProperties:1.0",
    "UnixDomainProtocolProperties");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_UnixDomainProtocolProperties =
    &_tao_tc_RTCORBA_UnixDomainProtocolProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::SharedMemoryProtocolProperties.

RTCORBA::SharedMemoryProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::duplicate (
    RTCORBA::SharedMemoryProtocolProperties_ptr p)
{
  return RTCORBA::SharedMemoryProtocolProperties::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::release (
    RTCORBA::SharedMemoryProtocolProperties_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::SharedMemoryProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::nil (void)
{
  return RTCORBA::SharedMemoryProtocolProperties::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::SharedMemoryProtocolProperties>::marshal (
    const RTCORBA::SharedMemoryProtocolProperties_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::SharedMemoryProtocolProperties::SharedMemoryProtocolProperties (void)
{}

RTCORBA::SharedMemoryProtocolProperties::~SharedMemoryProtocolProperties (void)
{}

void 
RTCORBA::SharedMemoryProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  SharedMemoryProtocolProperties *_tao_tmp_pointer =
    static_cast<SharedMemoryProtocolProperties *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SharedMemoryProtocolProperties::_duplicate (
      dynamic_cast<SharedMemoryProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SharedMemoryProtocolProperties::_duplicate (
      dynamic_cast<SharedMemoryProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_nil (void)
{
  return 0;
}

RTCORBA::SharedMemoryProtocolProperties_ptr
RTCORBA::SharedMemoryProtocolProperties::_duplicate (SharedMemoryProtocolProperties_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::SharedMemoryProtocolProperties::_tao_release (SharedMemoryProtocolProperties_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::SharedMemoryProtocolProperties::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/SharedMemoryProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::SharedMemoryProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/SharedMemoryProtocolProperties:1.0";
}

::CORBA::Boolean
RTCORBA::SharedMemoryProtocolProperties::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_SharedMemoryProtocolProperties (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/SharedMemoryProtocolProperties:1.0",
    "SharedMemoryProtocolProperties");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_SharedMemoryProtocolProperties =
    &_tao_tc_RTCORBA_SharedMemoryProtocolProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::UserDatagramProtocolProperties.

RTCORBA::UserDatagramProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::UserDatagramProtocolProperties>::duplicate (
    RTCORBA::UserDatagramProtocolProperties_ptr p)
{
  return RTCORBA::UserDatagramProtocolProperties::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::UserDatagramProtocolProperties>::release (
    RTCORBA::UserDatagramProtocolProperties_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::UserDatagramProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::UserDatagramProtocolProperties>::nil (void)
{
  return RTCORBA::UserDatagramProtocolProperties::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::UserDatagramProtocolProperties>::marshal (
    const RTCORBA::UserDatagramProtocolProperties_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::UserDatagramProtocolProperties::UserDatagramProtocolProperties (void)
{}

RTCORBA::UserDatagramProtocolProperties::~UserDatagramProtocolProperties (void)
{}

void 
RTCORBA::UserDatagramProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  UserDatagramProtocolProperties *_tao_tmp_pointer =
    static_cast<UserDatagramProtocolProperties *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::UserDatagramProtocolProperties_ptr
RTCORBA::UserDatagramProtocolProperties::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return UserDatagramProtocolProperties::_duplicate (
      dynamic_cast<UserDatagramProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::UserDatagramProtocolProperties_ptr
RTCORBA::UserDatagramProtocolProperties::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return UserDatagramProtocolProperties::_duplicate (
      dynamic_cast<UserDatagramProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::UserDatagramProtocolProperties_ptr
RTCORBA::UserDatagramProtocolProperties::_nil (void)
{
  return 0;
}

RTCORBA::UserDatagramProtocolProperties_ptr
RTCORBA::UserDatagramProtocolProperties::_duplicate (UserDatagramProtocolProperties_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::UserDatagramProtocolProperties::_tao_release (UserDatagramProtocolProperties_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::UserDatagramProtocolProperties::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/UserDatagramProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::UserDatagramProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/UserDatagramProtocolProperties:1.0";
}

::CORBA::Boolean
RTCORBA::UserDatagramProtocolProperties::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_UserDatagramProtocolProperties (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/UserDatagramProtocolProperties:1.0",
    "UserDatagramProtocolProperties");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_UserDatagramProtocolProperties =
    &_tao_tc_RTCORBA_UserDatagramProtocolProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::StreamControlProtocolProperties.

RTCORBA::StreamControlProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::StreamControlProtocolProperties>::duplicate (
    RTCORBA::StreamControlProtocolProperties_ptr p)
{
  return RTCORBA::StreamControlProtocolProperties::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::StreamControlProtocolProperties>::release (
    RTCORBA::StreamControlProtocolProperties_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::StreamControlProtocolProperties_ptr
TAO::Objref_Traits<RTCORBA::StreamControlProtocolProperties>::nil (void)
{
  return RTCORBA::StreamControlProtocolProperties::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::StreamControlProtocolProperties>::marshal (
    const RTCORBA::StreamControlProtocolProperties_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::StreamControlProtocolProperties::StreamControlProtocolProperties (void)
{}

RTCORBA::StreamControlProtocolProperties::~StreamControlProtocolProperties (void)
{}

void 
RTCORBA::StreamControlProtocolProperties::_tao_any_destructor (void *_tao_void_pointer)
{
  StreamControlProtocolProperties *_tao_tmp_pointer =
    static_cast<StreamControlProtocolProperties *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::StreamControlProtocolProperties_ptr
RTCORBA::StreamControlProtocolProperties::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return StreamControlProtocolProperties::_duplicate (
      dynamic_cast<StreamControlProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::StreamControlProtocolProperties_ptr
RTCORBA::StreamControlProtocolProperties::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return StreamControlProtocolProperties::_duplicate (
      dynamic_cast<StreamControlProtocolProperties_ptr> (_tao_objref)
    );
}

RTCORBA::StreamControlProtocolProperties_ptr
RTCORBA::StreamControlProtocolProperties::_nil (void)
{
  return 0;
}

RTCORBA::StreamControlProtocolProperties_ptr
RTCORBA::StreamControlProtocolProperties::_duplicate (StreamControlProtocolProperties_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::StreamControlProtocolProperties::_tao_release (StreamControlProtocolProperties_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::StreamControlProtocolProperties::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/ProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/StreamControlProtocolProperties:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::StreamControlProtocolProperties::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/StreamControlProtocolProperties:1.0";
}

::CORBA::Boolean
RTCORBA::StreamControlProtocolProperties::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_StreamControlProtocolProperties (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/StreamControlProtocolProperties:1.0",
    "StreamControlProtocolProperties");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_StreamControlProtocolProperties =
    &_tao_tc_RTCORBA_StreamControlProtocolProperties;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RTCORBA_PriorityBand[] =
      {
        { "low", &RTCORBA::_tc_Priority },
        { "high", &RTCORBA::_tc_Priority }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RTCORBA_PriorityBand (
  ::CORBA::tk_struct,
  "IDL:omg.org/RTCORBA/PriorityBand:1.0",
  "PriorityBand",
  _tao_fields_RTCORBA_PriorityBand,
  2);


namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_PriorityBand =
    &_tao_tc_RTCORBA_PriorityBand;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:58

void 
RTCORBA::PriorityBand::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PriorityBand *_tao_tmp_pointer =
    static_cast<PriorityBand *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_RTCORBA_PRIORITYBANDS_CS_)
#define _RTCORBA_PRIORITYBANDS_CS_

RTCORBA::PriorityBands::PriorityBands (void)
{}

RTCORBA::PriorityBands::PriorityBands (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PriorityBand
      > (max)
{}

RTCORBA::PriorityBands::PriorityBands (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    RTCORBA::PriorityBand * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PriorityBand
      >
    (max, length, buffer, release)
{}

RTCORBA::PriorityBands::PriorityBands (
    const PriorityBands &seq)
  : ::TAO::unbounded_value_sequence<
        PriorityBand
      > (seq)
{}

RTCORBA::PriorityBands::~PriorityBands (void)
{}

void RTCORBA::PriorityBands::_tao_any_destructor (
    void * _tao_void_pointer)
{
  PriorityBands * _tao_tmp_pointer =
    static_cast<PriorityBands *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:460


#ifndef _TAO_TYPECODE_RTCORBA_PriorityBands_GUARD
#define _TAO_TYPECODE_RTCORBA_PriorityBands_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        RTCORBA_PriorityBands_0 (
          ::CORBA::tk_sequence,
          &RTCORBA::_tc_PriorityBand,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_RTCORBA_PriorityBands_0 =
        &RTCORBA_PriorityBands_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_RTCORBA_PriorityBands_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_PriorityBands (
    ::CORBA::tk_alias,
    "IDL:omg.org/RTCORBA/PriorityBands:1.0",
    "PriorityBands",
    &TAO::TypeCode::tc_RTCORBA_PriorityBands_0);
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_PriorityBands =
    &_tao_tc_RTCORBA_PriorityBands;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::PriorityBandedConnectionPolicy.

RTCORBA::PriorityBandedConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::duplicate (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p)
{
  return RTCORBA::PriorityBandedConnectionPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::release (
    RTCORBA::PriorityBandedConnectionPolicy_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::nil (void)
{
  return RTCORBA::PriorityBandedConnectionPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::PriorityBandedConnectionPolicy>::marshal (
    const RTCORBA::PriorityBandedConnectionPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::PriorityBandedConnectionPolicy::PriorityBandedConnectionPolicy (void)
{}

RTCORBA::PriorityBandedConnectionPolicy::~PriorityBandedConnectionPolicy (void)
{}

void 
RTCORBA::PriorityBandedConnectionPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  PriorityBandedConnectionPolicy *_tao_tmp_pointer =
    static_cast<PriorityBandedConnectionPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PriorityBandedConnectionPolicy::_duplicate (
      dynamic_cast<PriorityBandedConnectionPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PriorityBandedConnectionPolicy::_duplicate (
      dynamic_cast<PriorityBandedConnectionPolicy_ptr> (_tao_objref)
    );
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_nil (void)
{
  return 0;
}

RTCORBA::PriorityBandedConnectionPolicy_ptr
RTCORBA::PriorityBandedConnectionPolicy::_duplicate (PriorityBandedConnectionPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::PriorityBandedConnectionPolicy::_tao_release (PriorityBandedConnectionPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::PriorityBandedConnectionPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/PriorityBandedConnectionPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::PriorityBandedConnectionPolicy::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/PriorityBandedConnectionPolicy:1.0";
}

::CORBA::Boolean
RTCORBA::PriorityBandedConnectionPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_PriorityBandedConnectionPolicy (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/PriorityBandedConnectionPolicy:1.0",
    "PriorityBandedConnectionPolicy");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_PriorityBandedConnectionPolicy =
    &_tao_tc_RTCORBA_PriorityBandedConnectionPolicy;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::Current.

RTCORBA::Current_ptr
TAO::Objref_Traits<RTCORBA::Current>::duplicate (
    RTCORBA::Current_ptr p)
{
  return RTCORBA::Current::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::Current>::release (
    RTCORBA::Current_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::Current_ptr
TAO::Objref_Traits<RTCORBA::Current>::nil (void)
{
  return RTCORBA::Current::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::Current>::marshal (
    const RTCORBA::Current_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::Current::Current (void)
{}

RTCORBA::Current::~Current (void)
{}

void 
RTCORBA::Current::_tao_any_destructor (void *_tao_void_pointer)
{
  Current *_tao_tmp_pointer =
    static_cast<Current *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::Current_ptr
RTCORBA::Current::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Current::_duplicate (
      dynamic_cast<Current_ptr> (_tao_objref)
    );
}

RTCORBA::Current_ptr
RTCORBA::Current::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Current::_duplicate (
      dynamic_cast<Current_ptr> (_tao_objref)
    );
}

RTCORBA::Current_ptr
RTCORBA::Current::_nil (void)
{
  return 0;
}

RTCORBA::Current_ptr
RTCORBA::Current::_duplicate (Current_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::Current::_tao_release (Current_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::Current::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Current:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/Current:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::Current::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/Current:1.0";
}

::CORBA::Boolean
RTCORBA::Current::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_Current (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/Current:1.0",
    "Current");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_Current =
    &_tao_tc_RTCORBA_Current;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::Mutex.

RTCORBA::Mutex_ptr
TAO::Objref_Traits<RTCORBA::Mutex>::duplicate (
    RTCORBA::Mutex_ptr p)
{
  return RTCORBA::Mutex::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::Mutex>::release (
    RTCORBA::Mutex_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::Mutex_ptr
TAO::Objref_Traits<RTCORBA::Mutex>::nil (void)
{
  return RTCORBA::Mutex::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::Mutex>::marshal (
    const RTCORBA::Mutex_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

RTCORBA::Mutex::Mutex (void)
{}

RTCORBA::Mutex::~Mutex (void)
{}

void 
RTCORBA::Mutex::_tao_any_destructor (void *_tao_void_pointer)
{
  Mutex *_tao_tmp_pointer =
    static_cast<Mutex *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Mutex::_duplicate (
      dynamic_cast<Mutex_ptr> (_tao_objref)
    );
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Mutex::_duplicate (
      dynamic_cast<Mutex_ptr> (_tao_objref)
    );
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_nil (void)
{
  return 0;
}

RTCORBA::Mutex_ptr
RTCORBA::Mutex::_duplicate (Mutex_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::Mutex::_tao_release (Mutex_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::Mutex::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/Mutex:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::Mutex::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/Mutex:1.0";
}

::CORBA::Boolean
RTCORBA::Mutex::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_Mutex (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/Mutex:1.0",
    "Mutex");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_Mutex =
    &_tao_tc_RTCORBA_Mutex;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:53

// Traits specializations for RTCORBA::RTORB.

RTCORBA::RTORB_ptr
TAO::Objref_Traits<RTCORBA::RTORB>::duplicate (
    RTCORBA::RTORB_ptr p)
{
  return RTCORBA::RTORB::_duplicate (p);
}

void
TAO::Objref_Traits<RTCORBA::RTORB>::release (
    RTCORBA::RTORB_ptr p)
{
  ::CORBA::release (p);
}

RTCORBA::RTORB_ptr
TAO::Objref_Traits<RTCORBA::RTORB>::nil (void)
{
  return RTCORBA::RTORB::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<RTCORBA::RTORB>::marshal (
    const RTCORBA::RTORB_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RTCORBA::RTORB::MutexNotFound::MutexNotFound (void)
  : ::CORBA::UserException (
        "IDL:omg.org/RTCORBA/RTORB/MutexNotFound:1.0",
        "MutexNotFound"
      )
{
}

RTCORBA::RTORB::MutexNotFound::~MutexNotFound (void)
{
}

RTCORBA::RTORB::MutexNotFound::MutexNotFound (const ::RTCORBA::RTORB::MutexNotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RTCORBA::RTORB::MutexNotFound&
RTCORBA::RTORB::MutexNotFound::operator= (const ::RTCORBA::RTORB::MutexNotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RTCORBA::RTORB::MutexNotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  MutexNotFound *_tao_tmp_pointer =
    static_cast<MutexNotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RTCORBA::RTORB::MutexNotFound *
RTCORBA::RTORB::MutexNotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<MutexNotFound *> (_tao_excp);
}

const RTCORBA::RTORB::MutexNotFound *
RTCORBA::RTORB::MutexNotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const MutexNotFound *> (_tao_excp);
}

::CORBA::Exception *RTCORBA::RTORB::MutexNotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RTCORBA::RTORB::MutexNotFound, 0);
  return retval;
}

::CORBA::Exception *
RTCORBA::RTORB::MutexNotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RTCORBA::RTORB::MutexNotFound (*this),
      0
    );
  return result;
}

void RTCORBA::RTORB::MutexNotFound::_raise (void) const
{
  throw *this;
}

void RTCORBA::RTORB::MutexNotFound::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void RTCORBA::RTORB::MutexNotFound::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RTCORBA::RTORB::MutexNotFound::_tao_type (void) const
{
  return ::RTCORBA::RTORB::_tc_MutexNotFound;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RTCORBA_RTORB_MutexNotFound = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RTCORBA_RTORB_MutexNotFound (
  ::CORBA::tk_except,
  "IDL:omg.org/RTCORBA/RTORB/MutexNotFound:1.0",
  "MutexNotFound",
  _tao_fields_RTCORBA_RTORB_MutexNotFound,
  0);

::CORBA::TypeCode_ptr const RTCORBA::RTORB::_tc_MutexNotFound =
  &_tao_tc_RTCORBA_RTORB_MutexNotFound;

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

RTCORBA::RTORB::InvalidThreadpool::InvalidThreadpool (void)
  : ::CORBA::UserException (
        "IDL:omg.org/RTCORBA/RTORB/InvalidThreadpool:1.0",
        "InvalidThreadpool"
      )
{
}

RTCORBA::RTORB::InvalidThreadpool::~InvalidThreadpool (void)
{
}

RTCORBA::RTORB::InvalidThreadpool::InvalidThreadpool (const ::RTCORBA::RTORB::InvalidThreadpool &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

RTCORBA::RTORB::InvalidThreadpool&
RTCORBA::RTORB::InvalidThreadpool::operator= (const ::RTCORBA::RTORB::InvalidThreadpool &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidThreadpool *_tao_tmp_pointer =
    static_cast<InvalidThreadpool *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

RTCORBA::RTORB::InvalidThreadpool *
RTCORBA::RTORB::InvalidThreadpool::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidThreadpool *> (_tao_excp);
}

const RTCORBA::RTORB::InvalidThreadpool *
RTCORBA::RTORB::InvalidThreadpool::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidThreadpool *> (_tao_excp);
}

::CORBA::Exception *RTCORBA::RTORB::InvalidThreadpool::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::RTCORBA::RTORB::InvalidThreadpool, 0);
  return retval;
}

::CORBA::Exception *
RTCORBA::RTORB::InvalidThreadpool::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::RTCORBA::RTORB::InvalidThreadpool (*this),
      0
    );
  return result;
}

void RTCORBA::RTORB::InvalidThreadpool::_raise (void) const
{
  throw *this;
}

void RTCORBA::RTORB::InvalidThreadpool::_tao_encode (TAO_OutputCDR &) const
{
  throw ::CORBA::MARSHAL ();
}

void RTCORBA::RTORB::InvalidThreadpool::_tao_decode (TAO_InputCDR &)
{
  throw ::CORBA::MARSHAL ();
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr RTCORBA::RTORB::InvalidThreadpool::_tao_type (void) const
{
  return ::RTCORBA::RTORB::_tc_InvalidThreadpool;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_RTCORBA_RTORB_InvalidThreadpool = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RTCORBA_RTORB_InvalidThreadpool (
  ::CORBA::tk_except,
  "IDL:omg.org/RTCORBA/RTORB/InvalidThreadpool:1.0",
  "InvalidThreadpool",
  _tao_fields_RTCORBA_RTORB_InvalidThreadpool,
  0);

::CORBA::TypeCode_ptr const RTCORBA::RTORB::_tc_InvalidThreadpool =
  &_tao_tc_RTCORBA_RTORB_InvalidThreadpool;

RTCORBA::RTORB::RTORB (void)
{}

RTCORBA::RTORB::~RTORB (void)
{}

void 
RTCORBA::RTORB::_tao_any_destructor (void *_tao_void_pointer)
{
  RTORB *_tao_tmp_pointer =
    static_cast<RTORB *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return RTORB::_duplicate (
      dynamic_cast<RTORB_ptr> (_tao_objref)
    );
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return RTORB::_duplicate (
      dynamic_cast<RTORB_ptr> (_tao_objref)
    );
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_nil (void)
{
  return 0;
}

RTCORBA::RTORB_ptr
RTCORBA::RTORB::_duplicate (RTORB_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
RTCORBA::RTORB::_tao_release (RTORB_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
RTCORBA::RTORB::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/RTCORBA/RTORB:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* RTCORBA::RTORB::_interface_repository_id (void) const
{
  return "IDL:omg.org/RTCORBA/RTORB:1.0";
}

::CORBA::Boolean
RTCORBA::RTORB::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_RTCORBA_RTORB (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/RTCORBA/RTORB:1.0",
    "RTORB");
  

namespace RTCORBA
{
  ::CORBA::TypeCode_ptr const _tc_RTORB =
    &_tao_tc_RTCORBA_RTORB;
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::ThreadpoolLane &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RTCORBA::ThreadpoolLane *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RTCORBA::ThreadpoolLane>::insert_copy (
          _tao_any,
          ::RTCORBA::ThreadpoolLane::_tao_any_destructor,
          ::RTCORBA::_tc_ThreadpoolLane,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RTCORBA::ThreadpoolLane *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::ThreadpoolLane>::insert (
        _tao_any,
        ::RTCORBA::ThreadpoolLane::_tao_any_destructor,
        ::RTCORBA::_tc_ThreadpoolLane,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::ThreadpoolLane *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::ThreadpoolLane *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::ThreadpoolLane *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::ThreadpoolLane>::extract (
          _tao_any,
          ::RTCORBA::ThreadpoolLane::_tao_any_destructor,
          ::RTCORBA::_tc_ThreadpoolLane,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLane &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RTCORBA::ThreadpoolLane *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLane>::insert_copy (
        _tao_any,
        RTCORBA::ThreadpoolLane::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolLane,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLane *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLane>::insert (
      _tao_any,
      RTCORBA::ThreadpoolLane::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolLane,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLane *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::ThreadpoolLane *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLane *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLane>::extract (
        _tao_any,
        RTCORBA::ThreadpoolLane::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolLane,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::ThreadpoolLanes &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RTCORBA::ThreadpoolLanes *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RTCORBA::ThreadpoolLanes>::insert_copy (
          _tao_any,
          ::RTCORBA::ThreadpoolLanes::_tao_any_destructor,
          ::RTCORBA::_tc_ThreadpoolLanes,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RTCORBA::ThreadpoolLanes *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::ThreadpoolLanes>::insert (
        _tao_any,
        ::RTCORBA::ThreadpoolLanes::_tao_any_destructor,
        ::RTCORBA::_tc_ThreadpoolLanes,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::ThreadpoolLanes *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::ThreadpoolLanes *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::ThreadpoolLanes *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::ThreadpoolLanes>::extract (
          _tao_any,
          ::RTCORBA::ThreadpoolLanes::_tao_any_destructor,
          ::RTCORBA::_tc_ThreadpoolLanes,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLanes &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RTCORBA::ThreadpoolLanes *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLanes>::insert_copy (
        _tao_any,
        RTCORBA::ThreadpoolLanes::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolLanes,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLanes *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLanes>::insert (
      _tao_any,
      RTCORBA::ThreadpoolLanes::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolLanes,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolLanes *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::ThreadpoolLanes *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::ThreadpoolLanes *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::ThreadpoolLanes>::extract (
        _tao_any,
        RTCORBA::ThreadpoolLanes::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolLanes,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RTCORBA::PriorityModel _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::RTCORBA::PriorityModel>::insert (
        _tao_any,
        ::RTCORBA::_tc_PriorityModel,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::PriorityModel &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::RTCORBA::PriorityModel>::extract (
          _tao_any,
          ::RTCORBA::_tc_PriorityModel,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityModel _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<RTCORBA::PriorityModel>::insert (
      _tao_any,
      RTCORBA::_tc_PriorityModel,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::PriorityModel &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<RTCORBA::PriorityModel>::extract (
        _tao_any,
        RTCORBA::_tc_PriorityModel,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PriorityModelPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PriorityModelPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PriorityModelPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PriorityModelPolicy_ptr _tao_elem)
  {
    PriorityModelPolicy_ptr _tao_objptr =
      PriorityModelPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PriorityModelPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PriorityModelPolicy>::insert (
        _tao_any,
        PriorityModelPolicy::_tao_any_destructor,
        _tc_PriorityModelPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PriorityModelPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PriorityModelPolicy>::extract (
          _tao_any,
          PriorityModelPolicy::_tao_any_destructor,
          _tc_PriorityModelPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityModelPolicy_ptr _tao_elem)
{
  RTCORBA::PriorityModelPolicy_ptr _tao_objptr =
    RTCORBA::PriorityModelPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityModelPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::insert (
      _tao_any,
      RTCORBA::PriorityModelPolicy::_tao_any_destructor,
      RTCORBA::_tc_PriorityModelPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::PriorityModelPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::PriorityModelPolicy>::extract (
        _tao_any,
        RTCORBA::PriorityModelPolicy::_tao_any_destructor,
        RTCORBA::_tc_PriorityModelPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ThreadpoolPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ThreadpoolPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ThreadpoolPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ThreadpoolPolicy_ptr _tao_elem)
  {
    ThreadpoolPolicy_ptr _tao_objptr =
      ThreadpoolPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ThreadpoolPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ThreadpoolPolicy>::insert (
        _tao_any,
        ThreadpoolPolicy::_tao_any_destructor,
        _tc_ThreadpoolPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ThreadpoolPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ThreadpoolPolicy>::extract (
          _tao_any,
          ThreadpoolPolicy::_tao_any_destructor,
          _tc_ThreadpoolPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolPolicy_ptr _tao_elem)
{
  RTCORBA::ThreadpoolPolicy_ptr _tao_objptr =
    RTCORBA::ThreadpoolPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::insert (
      _tao_any,
      RTCORBA::ThreadpoolPolicy::_tao_any_destructor,
      RTCORBA::_tc_ThreadpoolPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::ThreadpoolPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::ThreadpoolPolicy>::extract (
        _tao_any,
        RTCORBA::ThreadpoolPolicy::_tao_any_destructor,
        RTCORBA::_tc_ThreadpoolPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::Protocol>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::Protocol>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::Protocol &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RTCORBA::Protocol *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RTCORBA::Protocol>::insert_copy (
          _tao_any,
          ::RTCORBA::Protocol::_tao_any_destructor,
          ::RTCORBA::_tc_Protocol,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RTCORBA::Protocol *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::Protocol>::insert (
        _tao_any,
        ::RTCORBA::Protocol::_tao_any_destructor,
        ::RTCORBA::_tc_Protocol,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::Protocol *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::Protocol *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::Protocol *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::Protocol>::extract (
          _tao_any,
          ::RTCORBA::Protocol::_tao_any_destructor,
          ::RTCORBA::_tc_Protocol,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::Protocol &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RTCORBA::Protocol *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::insert_copy (
        _tao_any,
        RTCORBA::Protocol::_tao_any_destructor,
        RTCORBA::_tc_Protocol,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::Protocol *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::insert (
      _tao_any,
      RTCORBA::Protocol::_tao_any_destructor,
      RTCORBA::_tc_Protocol,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::Protocol *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::Protocol *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::Protocol *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::Protocol>::extract (
        _tao_any,
        RTCORBA::Protocol::_tao_any_destructor,
        RTCORBA::_tc_Protocol,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::ProtocolList>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::ProtocolList>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::ProtocolList &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RTCORBA::ProtocolList *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RTCORBA::ProtocolList>::insert_copy (
          _tao_any,
          ::RTCORBA::ProtocolList::_tao_any_destructor,
          ::RTCORBA::_tc_ProtocolList,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RTCORBA::ProtocolList *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::ProtocolList>::insert (
        _tao_any,
        ::RTCORBA::ProtocolList::_tao_any_destructor,
        ::RTCORBA::_tc_ProtocolList,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::ProtocolList *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::ProtocolList *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::ProtocolList *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::ProtocolList>::extract (
          _tao_any,
          ::RTCORBA::ProtocolList::_tao_any_destructor,
          ::RTCORBA::_tc_ProtocolList,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::ProtocolList &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RTCORBA::ProtocolList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::insert_copy (
        _tao_any,
        RTCORBA::ProtocolList::_tao_any_destructor,
        RTCORBA::_tc_ProtocolList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ProtocolList *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::insert (
      _tao_any,
      RTCORBA::ProtocolList::_tao_any_destructor,
      RTCORBA::_tc_ProtocolList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::ProtocolList *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::ProtocolList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::ProtocolList *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::ProtocolList>::extract (
        _tao_any,
        RTCORBA::ProtocolList::_tao_any_destructor,
        RTCORBA::_tc_ProtocolList,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ServerProtocolPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ServerProtocolPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ServerProtocolPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ServerProtocolPolicy_ptr _tao_elem)
  {
    ServerProtocolPolicy_ptr _tao_objptr =
      ServerProtocolPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ServerProtocolPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ServerProtocolPolicy>::insert (
        _tao_any,
        ServerProtocolPolicy::_tao_any_destructor,
        _tc_ServerProtocolPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ServerProtocolPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ServerProtocolPolicy>::extract (
          _tao_any,
          ServerProtocolPolicy::_tao_any_destructor,
          _tc_ServerProtocolPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ServerProtocolPolicy_ptr _tao_elem)
{
  RTCORBA::ServerProtocolPolicy_ptr _tao_objptr =
    RTCORBA::ServerProtocolPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ServerProtocolPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::insert (
      _tao_any,
      RTCORBA::ServerProtocolPolicy::_tao_any_destructor,
      RTCORBA::_tc_ServerProtocolPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::ServerProtocolPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::ServerProtocolPolicy>::extract (
        _tao_any,
        RTCORBA::ServerProtocolPolicy::_tao_any_destructor,
        RTCORBA::_tc_ServerProtocolPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ClientProtocolPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ClientProtocolPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::ClientProtocolPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ClientProtocolPolicy_ptr _tao_elem)
  {
    ClientProtocolPolicy_ptr _tao_objptr =
      ClientProtocolPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ClientProtocolPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ClientProtocolPolicy>::insert (
        _tao_any,
        ClientProtocolPolicy::_tao_any_destructor,
        _tc_ClientProtocolPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ClientProtocolPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ClientProtocolPolicy>::extract (
          _tao_any,
          ClientProtocolPolicy::_tao_any_destructor,
          _tc_ClientProtocolPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ClientProtocolPolicy_ptr _tao_elem)
{
  RTCORBA::ClientProtocolPolicy_ptr _tao_objptr =
    RTCORBA::ClientProtocolPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::ClientProtocolPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::insert (
      _tao_any,
      RTCORBA::ClientProtocolPolicy::_tao_any_destructor,
      RTCORBA::_tc_ClientProtocolPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::ClientProtocolPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::ClientProtocolPolicy>::extract (
        _tao_any,
        RTCORBA::ClientProtocolPolicy::_tao_any_destructor,
        RTCORBA::_tc_ClientProtocolPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PrivateConnectionPolicy_ptr _tao_elem)
  {
    PrivateConnectionPolicy_ptr _tao_objptr =
      PrivateConnectionPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PrivateConnectionPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PrivateConnectionPolicy>::insert (
        _tao_any,
        PrivateConnectionPolicy::_tao_any_destructor,
        _tc_PrivateConnectionPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PrivateConnectionPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PrivateConnectionPolicy>::extract (
          _tao_any,
          PrivateConnectionPolicy::_tao_any_destructor,
          _tc_PrivateConnectionPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PrivateConnectionPolicy_ptr _tao_elem)
{
  RTCORBA::PrivateConnectionPolicy_ptr _tao_objptr =
    RTCORBA::PrivateConnectionPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PrivateConnectionPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::insert (
      _tao_any,
      RTCORBA::PrivateConnectionPolicy::_tao_any_destructor,
      RTCORBA::_tc_PrivateConnectionPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::PrivateConnectionPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::PrivateConnectionPolicy>::extract (
        _tao_any,
        RTCORBA::PrivateConnectionPolicy::_tao_any_destructor,
        RTCORBA::_tc_PrivateConnectionPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::TCPProtocolProperties>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::TCPProtocolProperties>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::TCPProtocolProperties>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TCPProtocolProperties_ptr _tao_elem)
  {
    TCPProtocolProperties_ptr _tao_objptr =
      TCPProtocolProperties::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TCPProtocolProperties_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TCPProtocolProperties>::insert (
        _tao_any,
        TCPProtocolProperties::_tao_any_destructor,
        _tc_TCPProtocolProperties,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TCPProtocolProperties_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TCPProtocolProperties>::extract (
          _tao_any,
          TCPProtocolProperties::_tao_any_destructor,
          _tc_TCPProtocolProperties,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::TCPProtocolProperties_ptr _tao_elem)
{
  RTCORBA::TCPProtocolProperties_ptr _tao_objptr =
    RTCORBA::TCPProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::TCPProtocolProperties_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::insert (
      _tao_any,
      RTCORBA::TCPProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_TCPProtocolProperties,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::TCPProtocolProperties_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::TCPProtocolProperties>::extract (
        _tao_any,
        RTCORBA::TCPProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_TCPProtocolProperties,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::GIOPProtocolProperties>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::GIOPProtocolProperties>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::GIOPProtocolProperties>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      GIOPProtocolProperties_ptr _tao_elem)
  {
    GIOPProtocolProperties_ptr _tao_objptr =
      GIOPProtocolProperties::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      GIOPProtocolProperties_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<GIOPProtocolProperties>::insert (
        _tao_any,
        GIOPProtocolProperties::_tao_any_destructor,
        _tc_GIOPProtocolProperties,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      GIOPProtocolProperties_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<GIOPProtocolProperties>::extract (
          _tao_any,
          GIOPProtocolProperties::_tao_any_destructor,
          _tc_GIOPProtocolProperties,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::GIOPProtocolProperties_ptr _tao_elem)
{
  RTCORBA::GIOPProtocolProperties_ptr _tao_objptr =
    RTCORBA::GIOPProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::GIOPProtocolProperties_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::insert (
      _tao_any,
      RTCORBA::GIOPProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_GIOPProtocolProperties,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::GIOPProtocolProperties_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::GIOPProtocolProperties>::extract (
        _tao_any,
        RTCORBA::GIOPProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_GIOPProtocolProperties,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UnixDomainProtocolProperties_ptr _tao_elem)
  {
    UnixDomainProtocolProperties_ptr _tao_objptr =
      UnixDomainProtocolProperties::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UnixDomainProtocolProperties_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<UnixDomainProtocolProperties>::insert (
        _tao_any,
        UnixDomainProtocolProperties::_tao_any_destructor,
        _tc_UnixDomainProtocolProperties,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      UnixDomainProtocolProperties_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<UnixDomainProtocolProperties>::extract (
          _tao_any,
          UnixDomainProtocolProperties::_tao_any_destructor,
          _tc_UnixDomainProtocolProperties,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::UnixDomainProtocolProperties_ptr _tao_elem)
{
  RTCORBA::UnixDomainProtocolProperties_ptr _tao_objptr =
    RTCORBA::UnixDomainProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::UnixDomainProtocolProperties_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::insert (
      _tao_any,
      RTCORBA::UnixDomainProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_UnixDomainProtocolProperties,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::UnixDomainProtocolProperties_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::UnixDomainProtocolProperties>::extract (
        _tao_any,
        RTCORBA::UnixDomainProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_UnixDomainProtocolProperties,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SharedMemoryProtocolProperties_ptr _tao_elem)
  {
    SharedMemoryProtocolProperties_ptr _tao_objptr =
      SharedMemoryProtocolProperties::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      SharedMemoryProtocolProperties_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<SharedMemoryProtocolProperties>::insert (
        _tao_any,
        SharedMemoryProtocolProperties::_tao_any_destructor,
        _tc_SharedMemoryProtocolProperties,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      SharedMemoryProtocolProperties_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<SharedMemoryProtocolProperties>::extract (
          _tao_any,
          SharedMemoryProtocolProperties::_tao_any_destructor,
          _tc_SharedMemoryProtocolProperties,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::SharedMemoryProtocolProperties_ptr _tao_elem)
{
  RTCORBA::SharedMemoryProtocolProperties_ptr _tao_objptr =
    RTCORBA::SharedMemoryProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::SharedMemoryProtocolProperties_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::insert (
      _tao_any,
      RTCORBA::SharedMemoryProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_SharedMemoryProtocolProperties,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::SharedMemoryProtocolProperties_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::SharedMemoryProtocolProperties>::extract (
        _tao_any,
        RTCORBA::SharedMemoryProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_SharedMemoryProtocolProperties,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::UserDatagramProtocolProperties>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::UserDatagramProtocolProperties>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::UserDatagramProtocolProperties>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UserDatagramProtocolProperties_ptr _tao_elem)
  {
    UserDatagramProtocolProperties_ptr _tao_objptr =
      UserDatagramProtocolProperties::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UserDatagramProtocolProperties_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<UserDatagramProtocolProperties>::insert (
        _tao_any,
        UserDatagramProtocolProperties::_tao_any_destructor,
        _tc_UserDatagramProtocolProperties,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      UserDatagramProtocolProperties_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<UserDatagramProtocolProperties>::extract (
          _tao_any,
          UserDatagramProtocolProperties::_tao_any_destructor,
          _tc_UserDatagramProtocolProperties,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::UserDatagramProtocolProperties_ptr _tao_elem)
{
  RTCORBA::UserDatagramProtocolProperties_ptr _tao_objptr =
    RTCORBA::UserDatagramProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::UserDatagramProtocolProperties_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::UserDatagramProtocolProperties>::insert (
      _tao_any,
      RTCORBA::UserDatagramProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_UserDatagramProtocolProperties,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::UserDatagramProtocolProperties_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::UserDatagramProtocolProperties>::extract (
        _tao_any,
        RTCORBA::UserDatagramProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_UserDatagramProtocolProperties,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::StreamControlProtocolProperties>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::StreamControlProtocolProperties>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::StreamControlProtocolProperties>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StreamControlProtocolProperties_ptr _tao_elem)
  {
    StreamControlProtocolProperties_ptr _tao_objptr =
      StreamControlProtocolProperties::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      StreamControlProtocolProperties_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<StreamControlProtocolProperties>::insert (
        _tao_any,
        StreamControlProtocolProperties::_tao_any_destructor,
        _tc_StreamControlProtocolProperties,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      StreamControlProtocolProperties_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<StreamControlProtocolProperties>::extract (
          _tao_any,
          StreamControlProtocolProperties::_tao_any_destructor,
          _tc_StreamControlProtocolProperties,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::StreamControlProtocolProperties_ptr _tao_elem)
{
  RTCORBA::StreamControlProtocolProperties_ptr _tao_objptr =
    RTCORBA::StreamControlProtocolProperties::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::StreamControlProtocolProperties_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::StreamControlProtocolProperties>::insert (
      _tao_any,
      RTCORBA::StreamControlProtocolProperties::_tao_any_destructor,
      RTCORBA::_tc_StreamControlProtocolProperties,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::StreamControlProtocolProperties_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::StreamControlProtocolProperties>::extract (
        _tao_any,
        RTCORBA::StreamControlProtocolProperties::_tao_any_destructor,
        RTCORBA::_tc_StreamControlProtocolProperties,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::PriorityBand &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RTCORBA::PriorityBand *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RTCORBA::PriorityBand>::insert_copy (
          _tao_any,
          ::RTCORBA::PriorityBand::_tao_any_destructor,
          ::RTCORBA::_tc_PriorityBand,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      RTCORBA::PriorityBand *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::PriorityBand>::insert (
        _tao_any,
        ::RTCORBA::PriorityBand::_tao_any_destructor,
        ::RTCORBA::_tc_PriorityBand,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::PriorityBand *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::PriorityBand *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::PriorityBand *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::PriorityBand>::extract (
          _tao_any,
          ::RTCORBA::PriorityBand::_tao_any_destructor,
          ::RTCORBA::_tc_PriorityBand,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::PriorityBand &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RTCORBA::PriorityBand *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RTCORBA::PriorityBand>::insert_copy (
        _tao_any,
        RTCORBA::PriorityBand::_tao_any_destructor,
        RTCORBA::_tc_PriorityBand,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBand *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::PriorityBand>::insert (
      _tao_any,
      RTCORBA::PriorityBand::_tao_any_destructor,
      RTCORBA::_tc_PriorityBand,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBand *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::PriorityBand *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::PriorityBand *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::PriorityBand>::extract (
        _tao_any,
        RTCORBA::PriorityBand::_tao_any_destructor,
        RTCORBA::_tc_PriorityBand,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:46



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::PriorityBands &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::RTCORBA::PriorityBands *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::RTCORBA::PriorityBands>::insert_copy (
          _tao_any,
          ::RTCORBA::PriorityBands::_tao_any_destructor,
          ::RTCORBA::_tc_PriorityBands,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RTCORBA::PriorityBands *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::PriorityBands>::insert (
        _tao_any,
        ::RTCORBA::PriorityBands::_tao_any_destructor,
        ::RTCORBA::_tc_PriorityBands,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::PriorityBands *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::PriorityBands *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::PriorityBands *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::PriorityBands>::extract (
          _tao_any,
          ::RTCORBA::PriorityBands::_tao_any_destructor,
          ::RTCORBA::_tc_PriorityBands,
          _tao_elem
        );
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::PriorityBands &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RTCORBA::PriorityBands *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RTCORBA::PriorityBands>::insert_copy (
        _tao_any,
        RTCORBA::PriorityBands::_tao_any_destructor,
        RTCORBA::_tc_PriorityBands,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBands *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::PriorityBands>::insert (
      _tao_any,
      RTCORBA::PriorityBands::_tao_any_destructor,
      RTCORBA::_tc_PriorityBands,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBands *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::PriorityBands *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::PriorityBands *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::PriorityBands>::extract (
        _tao_any,
        RTCORBA::PriorityBands::_tao_any_destructor,
        RTCORBA::_tc_PriorityBands,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PriorityBandedConnectionPolicy_ptr _tao_elem)
  {
    PriorityBandedConnectionPolicy_ptr _tao_objptr =
      PriorityBandedConnectionPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      PriorityBandedConnectionPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<PriorityBandedConnectionPolicy>::insert (
        _tao_any,
        PriorityBandedConnectionPolicy::_tao_any_destructor,
        _tc_PriorityBandedConnectionPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      PriorityBandedConnectionPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<PriorityBandedConnectionPolicy>::extract (
          _tao_any,
          PriorityBandedConnectionPolicy::_tao_any_destructor,
          _tc_PriorityBandedConnectionPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBandedConnectionPolicy_ptr _tao_elem)
{
  RTCORBA::PriorityBandedConnectionPolicy_ptr _tao_objptr =
    RTCORBA::PriorityBandedConnectionPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBandedConnectionPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::insert (
      _tao_any,
      RTCORBA::PriorityBandedConnectionPolicy::_tao_any_destructor,
      RTCORBA::_tc_PriorityBandedConnectionPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::PriorityBandedConnectionPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::PriorityBandedConnectionPolicy>::extract (
        _tao_any,
        RTCORBA::PriorityBandedConnectionPolicy::_tao_any_destructor,
        RTCORBA::_tc_PriorityBandedConnectionPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::Current>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::Current>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::Current>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Current_ptr _tao_elem)
  {
    Current_ptr _tao_objptr =
      Current::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Current_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Current>::insert (
        _tao_any,
        Current::_tao_any_destructor,
        _tc_Current,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Current_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Current>::extract (
          _tao_any,
          Current::_tao_any_destructor,
          _tc_Current,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::Current_ptr _tao_elem)
{
  RTCORBA::Current_ptr _tao_objptr =
    RTCORBA::Current::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::Current_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::Current>::insert (
      _tao_any,
      RTCORBA::Current::_tao_any_destructor,
      RTCORBA::_tc_Current,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::Current_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::Current>::extract (
        _tao_any,
        RTCORBA::Current::_tao_any_destructor,
        RTCORBA::_tc_Current,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::Mutex>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::Mutex>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::Mutex>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Mutex_ptr _tao_elem)
  {
    Mutex_ptr _tao_objptr =
      Mutex::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Mutex_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Mutex>::insert (
        _tao_any,
        Mutex::_tao_any_destructor,
        _tc_Mutex,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Mutex_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Mutex>::extract (
          _tao_any,
          Mutex::_tao_any_destructor,
          _tc_Mutex,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::Mutex_ptr _tao_elem)
{
  RTCORBA::Mutex_ptr _tao_objptr =
    RTCORBA::Mutex::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::Mutex_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::Mutex>::insert (
      _tao_any,
      RTCORBA::Mutex::_tao_any_destructor,
      RTCORBA::_tc_Mutex,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::Mutex_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::Mutex>::extract (
        _tao_any,
        RTCORBA::Mutex::_tao_any_destructor,
        RTCORBA::_tc_Mutex,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::RTORB>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::RTORB>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<RTCORBA::RTORB>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RTORB_ptr _tao_elem)
  {
    RTORB_ptr _tao_objptr =
      RTORB::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RTORB_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<RTORB>::insert (
        _tao_any,
        RTORB::_tao_any_destructor,
        _tc_RTORB,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      RTORB_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<RTORB>::extract (
          _tao_any,
          RTORB::_tao_any_destructor,
          _tc_RTORB,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::RTORB_ptr _tao_elem)
{
  RTCORBA::RTORB_ptr _tao_objptr =
    RTCORBA::RTORB::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::RTORB_ptr *_tao_elem)
{
  TAO::Any_Impl_T<RTCORBA::RTORB>::insert (
      _tao_any,
      RTCORBA::RTORB::_tao_any_destructor,
      RTCORBA::_tc_RTORB,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::RTORB_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<RTCORBA::RTORB>::extract (
        _tao_any,
        RTCORBA::RTORB::_tao_any_destructor,
        RTCORBA::_tc_RTORB,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::RTORB::MutexNotFound &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::RTORB::MutexNotFound>::insert_copy (
        _tao_any,
        ::RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
        ::RTCORBA::RTORB::_tc_MutexNotFound,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RTCORBA::RTORB::MutexNotFound *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::RTORB::MutexNotFound>::insert (
        _tao_any,
        ::RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
        ::RTCORBA::RTORB::_tc_MutexNotFound,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::RTORB::MutexNotFound *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::RTORB::MutexNotFound *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::RTORB::MutexNotFound *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::RTORB::MutexNotFound>::extract (
          _tao_any,
          ::RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
          ::RTCORBA::RTORB::_tc_MutexNotFound,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::RTORB::MutexNotFound &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::insert_copy (
      _tao_any,
      RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
      RTCORBA::RTORB::_tc_MutexNotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::RTORB::MutexNotFound *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::insert (
      _tao_any,
      RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
      RTCORBA::RTORB::_tc_MutexNotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::RTORB::MutexNotFound *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::RTORB::MutexNotFound *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::RTORB::MutexNotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::RTORB::MutexNotFound>::extract (
        _tao_any,
        RTCORBA::RTORB::MutexNotFound::_tao_any_destructor,
        RTCORBA::RTORB::_tc_MutexNotFound,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace RTCORBA
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::RTCORBA::RTORB::InvalidThreadpool &_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::RTORB::InvalidThreadpool>::insert_copy (
        _tao_any,
        ::RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
        ::RTCORBA::RTORB::_tc_InvalidThreadpool,
        _tao_elem
      );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::RTCORBA::RTORB::InvalidThreadpool *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::RTCORBA::RTORB::InvalidThreadpool>::insert (
        _tao_any,
        ::RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
        ::RTCORBA::RTORB::_tc_InvalidThreadpool,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::RTCORBA::RTORB::InvalidThreadpool *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::RTCORBA::RTORB::InvalidThreadpool *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::RTCORBA::RTORB::InvalidThreadpool *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::RTCORBA::RTORB::InvalidThreadpool>::extract (
          _tao_any,
          ::RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
          ::RTCORBA::RTORB::_tc_InvalidThreadpool,
          _tao_elem
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const RTCORBA::RTORB::InvalidThreadpool &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::insert_copy (
      _tao_any,
      RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
      RTCORBA::RTORB::_tc_InvalidThreadpool,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    RTCORBA::RTORB::InvalidThreadpool *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::insert (
      _tao_any,
      RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
      RTCORBA::RTORB::_tc_InvalidThreadpool,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    RTCORBA::RTORB::InvalidThreadpool *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const RTCORBA::RTORB::InvalidThreadpool *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const RTCORBA::RTORB::InvalidThreadpool *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<RTCORBA::RTORB::InvalidThreadpool>::extract (
        _tao_any,
        RTCORBA::RTORB::InvalidThreadpool::_tao_any_destructor,
        RTCORBA::RTORB::_tc_InvalidThreadpool,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::ThreadpoolLane &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.lane_priority) &&
    (strm << _tao_aggregate.static_threads) &&
    (strm << _tao_aggregate.dynamic_threads);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::ThreadpoolLane &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.lane_priority) &&
    (strm >> _tao_aggregate.static_threads) &&
    (strm >> _tao_aggregate.dynamic_threads);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_CPP_
#define _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::ThreadpoolLanes &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::ThreadpoolLanes &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_RTCORBA_ThreadpoolLanes_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, RTCORBA::PriorityModel _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, RTCORBA::PriorityModel & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<RTCORBA::PriorityModel> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::PriorityBand &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.low) &&
    (strm << _tao_aggregate.high);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::PriorityBand &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.low) &&
    (strm >> _tao_aggregate.high);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:90
#if !defined _TAO_CDR_OP_RTCORBA_PriorityBands_CPP_
#define _TAO_CDR_OP_RTCORBA_PriorityBands_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RTCORBA::PriorityBands &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RTCORBA::PriorityBands &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_RTCORBA_PriorityBands_CPP_ */


TAO_END_VERSIONED_NAMESPACE_DECL


