// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.0a
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

#include "IIOPEndpointValueA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_EndpointPolicy_IIOPEndpointValue (
    ::CORBA::tk_local_interface,
    "IDL:EndpointPolicy/IIOPEndpointValue:1.0",
    "IIOPEndpointValue");
  

namespace EndpointPolicy
{
  ::CORBA::TypeCode_ptr const _tc_IIOPEndpointValue =
    &_tao_tc_EndpointPolicy_IIOPEndpointValue;
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:46

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<EndpointPolicy::IIOPEndpointValue>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<EndpointPolicy::IIOPEndpointValue>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<EndpointPolicy::IIOPEndpointValue>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace EndpointPolicy
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IIOPEndpointValue_ptr _tao_elem)
  {
    IIOPEndpointValue_ptr _tao_objptr =
      IIOPEndpointValue::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IIOPEndpointValue_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IIOPEndpointValue>::insert (
        _tao_any,
        IIOPEndpointValue::_tao_any_destructor,
        _tc_IIOPEndpointValue,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IIOPEndpointValue_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IIOPEndpointValue>::extract (
          _tao_any,
          IIOPEndpointValue::_tao_any_destructor,
          _tc_IIOPEndpointValue,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    EndpointPolicy::IIOPEndpointValue_ptr _tao_elem)
{
  EndpointPolicy::IIOPEndpointValue_ptr _tao_objptr =
    EndpointPolicy::IIOPEndpointValue::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    EndpointPolicy::IIOPEndpointValue_ptr *_tao_elem)
{
  TAO::Any_Impl_T<EndpointPolicy::IIOPEndpointValue>::insert (
      _tao_any,
      EndpointPolicy::IIOPEndpointValue::_tao_any_destructor,
      EndpointPolicy::_tc_IIOPEndpointValue,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    EndpointPolicy::IIOPEndpointValue_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<EndpointPolicy::IIOPEndpointValue>::extract (
        _tao_any,
        EndpointPolicy::IIOPEndpointValue::_tao_any_destructor,
        EndpointPolicy::_tc_IIOPEndpointValue,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

TAO_END_VERSIONED_NAMESPACE_DECL


